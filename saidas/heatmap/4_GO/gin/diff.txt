diff --git a/README.md b/README.md
index dfedd8a..959848d 100644
--- a/README.md
+++ b/README.md
@@ -1809,0 +1810 @@ func loadTemplate() (*template.Template, error) {
+		defer file.Close()
diff --git a/README.md b/README.md
index b488f15..dfedd8a 100644
--- a/README.md
+++ b/README.md
@@ -1681 +1681,5 @@ func main() {
-		return server01.ListenAndServe()
+		err := server01.ListenAndServe()
+		if err != nil && err != http.ErrServerClosed {
+			log.Fatal(err)
+		}
+		return err
@@ -1685 +1689,5 @@ func main() {
-		return server02.ListenAndServe()
+		err := server02.ListenAndServe()
+		if err != nil && err != http.ErrServerClosed {
+			log.Fatal(err)
+		}
+		return err
diff --git a/README.md b/README.md
index 529746a..b488f15 100644
--- a/README.md
+++ b/README.md
@@ -103,0 +104,6 @@ $ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
+If you are on a Mac and you're installing Go 1.8 (released: Feb 2017) or later, GOPATH is automatically determined by the Go toolchain for you. It defaults to $HOME/go on macOS so you can create your project like this
+
+```sh
+$ mkdir -p $HOME/go/src/github.com/myusername/project && cd "$_"
+```
+
diff --git a/README.md b/README.md
index 2761259..529746a 100644
--- a/README.md
+++ b/README.md
@@ -625 +625 @@ Also, Gin provides two sets of methods for binding:
-  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`, `BindYAML`
+  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`, `BindYAML`, `BindHeader`
@@ -628 +628 @@ Also, Gin provides two sets of methods for binding:
-  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`, `ShouldBindYAML`
+  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`, `ShouldBindYAML`, `ShouldBindHeader`
diff --git a/README.md b/README.md
index 8d7705d..2761259 100644
--- a/README.md
+++ b/README.md
@@ -849,3 +849,5 @@ type Person struct {
-	Name     string    `form:"name"`
-	Address  string    `form:"address"`
-	Birthday time.Time `form:"birthday" time_format:"2006-01-02" time_utc:"1"`
+        Name       string    `form:"name"`
+        Address    string    `form:"address"`
+        Birthday   time.Time `form:"birthday" time_format:"2006-01-02" time_utc:"1"`
+        CreateTime time.Time `form:"createTime" time_format:"unixNano"`
+        UnixTime   time.Time `form:"unixTime" time_format:"unix"`
@@ -865,5 +867,7 @@ func startPage(c *gin.Context) {
-	if c.ShouldBind(&person) == nil {
-		log.Println(person.Name)
-		log.Println(person.Address)
-		log.Println(person.Birthday)
-	}
+        if c.ShouldBind(&person) == nil {
+                log.Println(person.Name)
+                log.Println(person.Address)
+                log.Println(person.Birthday)
+                log.Println(person.CreateTime)
+                log.Println(person.UnixTime)
+        }
@@ -877 +881 @@ Test it with:
-$ curl -X GET "localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03-15"
+$ curl -X GET "localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03-15&createTime=1562400033000000123&unixTime=1562400033"
diff --git a/README.md b/README.md
index 4257df3..8d7705d 100644
--- a/README.md
+++ b/README.md
@@ -2116,0 +2117 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
+* [brigade](https://github.com/brigadecore/brigade): Event-based Scripting for Kubernetes.
diff --git a/README.md b/README.md
index f79c0c1..4257df3 100644
--- a/README.md
+++ b/README.md
@@ -73 +73 @@ To install Gin package, you need to install Go and set your Go workspace first.
-1. The first need [Go](https://golang.org/) installed (**version 1.8+ is required**), then you can use the below Go command to install Gin.
+1. The first need [Go](https://golang.org/) installed (**version 1.10+ is required**), then you can use the below Go command to install Gin.
diff --git a/README.md b/README.md
index aa546e5..f79c0c1 100644
--- a/README.md
+++ b/README.md
@@ -759 +759 @@ func bookableDate(
-		if today.Year() > date.Year() || today.YearDay() > date.YearDay() {
+		if today.After(date) {
diff --git a/README.md b/README.md
index aa5043a..aa546e5 100644
--- a/README.md
+++ b/README.md
@@ -1122,2 +1122,2 @@ func main() {
-	r.GET("/JSONP?callback=x", func(c *gin.Context) {
-		data := map[string]interface{}{
+	r.GET("/JSONP", func(c *gin.Context) {
+		data := gin.H{
@@ -1133,0 +1134,3 @@ func main() {
+
+        // client
+        // curl http://127.0.0.1:8080/JSONP?callback=x
@@ -1146 +1149 @@ func main() {
-		data := map[string]interface{}{
+		data := gin.H{
@@ -1355 +1358 @@ func main() {
-        c.HTML(http.StatusOK, "raw.tmpl", map[string]interface{}{
+        c.HTML(http.StatusOK, "raw.tmpl", gin.H{
diff --git a/README.md b/README.md
index 49b044a..aa5043a 100644
--- a/README.md
+++ b/README.md
@@ -42,0 +43 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Bind Header](#bind-header)
@@ -912,0 +914,37 @@ $ curl -v localhost:8088/thinkerou/not-uuid
+### Bind Header
+
+```go
+package main
+
+import (
+	"fmt"
+	"github.com/gin-gonic/gin"
+)
+
+type testHeader struct {
+	Rate   int    `header:"Rate"`
+	Domain string `header:"Domain"`
+}
+
+func main() {
+	r := gin.Default()
+	r.GET("/", func(c *gin.Context) {
+		h := testHeader{}
+
+		if err := c.ShouldBindHeader(&h); err != nil {
+			c.JSON(200, err)
+		}
+
+		fmt.Printf("%#v\n", h)
+		c.JSON(200, gin.H{"Rate": h.Rate, "Domain": h.Domain})
+	})
+
+	r.Run()
+
+// client
+// curl -H "rate:300" -H "domain:music" 127.0.0.1:8080/
+// output
+// {"Domain":"music","Rate":300}
+}
+```
+
diff --git a/README.md b/README.md
index 092e91f..49b044a 100644
--- a/README.md
+++ b/README.md
@@ -962,5 +962,3 @@ result:
-package main
-
-import (
-	"github.com/gin-gonic/gin"
-)
+type ProfileForm struct {
+	Name   string                `form:"name" binding:"required"`
+	Avatar *multipart.FileHeader `form:"avatar" binding:"required"`
@@ -968,3 +966,2 @@ import (
-type LoginForm struct {
-	User     string `form:"user" binding:"required"`
-	Password string `form:"password" binding:"required"`
+	// or for multiple files
+	// Avatars []*multipart.FileHeader `form:"avatar" binding:"required"`
@@ -975 +972 @@ func main() {
-	router.POST("/login", func(c *gin.Context) {
+	router.POST("/profile", func(c *gin.Context) {
@@ -979 +976 @@ func main() {
-		var form LoginForm
+		var form ProfileForm
@@ -981,6 +978,9 @@ func main() {
-		if c.ShouldBind(&form) == nil {
-			if form.User == "user" && form.Password == "password" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
+		if err := c.ShouldBind(&form); err != nil {
+			c.String(http.StatusBadRequest, "bad request")
+			return
+		}
+
+		err := c.SaveUploadedFile(form.Avatar, form.Avatar.Filename)
+		if err != nil {
+			c.String(http.StatusInternalServerError, "unknown error")
+			return
@@ -987,0 +988,4 @@ func main() {
+
+		// db.Save(&form)
+
+		c.String(http.StatusOK, "ok")
@@ -995 +999 @@ Test it with:
-$ curl -v --form user=user --form password=password http://localhost:8080/login
+$ curl -X POST -v --form name=user --form "avatar=@./avatar.png" http://localhost:8080/profile
diff --git a/README.md b/README.md
index 2737e9a..092e91f 100644
--- a/README.md
+++ b/README.md
@@ -254,0 +255,5 @@ func main() {
+	// For each matched request Context will hold the route definition
+	router.POST("/user/:name/*action", func(c *gin.Context) {
+		c.FullPath() == "/user/:name/*action" // true
+	})
+
diff --git a/README.md b/README.md
index 10fb1d4..2737e9a 100644
--- a/README.md
+++ b/README.md
@@ -1697 +1697 @@ func main() {
-	// kill -9 is syscall.SIGKILL but can"t be catch, so don't need add it
+	// kill -9 is syscall.SIGKILL but can't be catch, so don't need add it
diff --git a/README.md b/README.md
index e980edb..10fb1d4 100644
--- a/README.md
+++ b/README.md
@@ -122,4 +121,0 @@ $ go run main.go
-## Prerequisite
-
-Now Gin requires Go 1.8 or later and Go 1.10 will be required next major version.
-
diff --git a/README.md b/README.md
index 3e817a7..e980edb 100644
--- a/README.md
+++ b/README.md
@@ -124 +124 @@ $ go run main.go
-Now Gin requires Go 1.6 or later and Go 1.7 will be required soon.
+Now Gin requires Go 1.8 or later and Go 1.10 will be required next major version.
diff --git a/README.md b/README.md
index 594c8bf..3e817a7 100644
--- a/README.md
+++ b/README.md
@@ -72 +72 @@ To install Gin package, you need to install Go and set your Go workspace first.
-1. Download and install it:
+1. The first need [Go](https://golang.org/) installed (**version 1.8+ is required**), then you can use the below Go command to install Gin.
diff --git a/README.md b/README.md
index 804041f..594c8bf 100644
--- a/README.md
+++ b/README.md
@@ -1699 +1699 @@ func main() {
-	// kill (no param) default send syscanll.SIGTERM
+	// kill (no param) default send syscall.SIGTERM
@@ -1701 +1701 @@ func main() {
-	// kill -9 is syscall. SIGKILL but can"t be catch, so don't need add it
+	// kill -9 is syscall.SIGKILL but can"t be catch, so don't need add it
diff --git a/README.md b/README.md
index d3433ed..804041f 100644
--- a/README.md
+++ b/README.md
@@ -16 +15,0 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-**The key features of Gin are:**
@@ -18,9 +17 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-- Zero allocation router
-- Fast
-- Middleware support
-- Crash-free
-- JSON validation
-- Routes grouping
-- Error management
-- Rendering built-in
-- Extendable
+## Contents
@@ -28 +19,48 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-For more feature details, please see the [Gin website introduction](https://gin-gonic.com/docs/introduction/).
+- [Installation](#installation)
+- [Prerequisite](#prerequisite)
+- [Quick start](#quick-start)
+- [Benchmarks](#benchmarks)
+- [Gin v1.stable](#gin-v1-stable)
+- [Build with jsoniter](#build-with-jsoniter)
+- [API Examples](#api-examples)
+    - [Using GET,POST,PUT,PATCH,DELETE and OPTIONS](#using-get-post-put-patch-delete-and-options)
+    - [Parameters in path](#parameters-in-path)
+    - [Querystring parameters](#querystring-parameters)
+    - [Multipart/Urlencoded Form](#multiparturlencoded-form)
+    - [Another example: query + post form](#another-example-query--post-form)
+    - [Map as querystring or postform parameters](#map-as-querystring-or-postform-parameters)
+    - [Upload files](#upload-files)
+    - [Grouping routes](#grouping-routes)
+    - [Blank Gin without middleware by default](#blank-gin-without-middleware-by-default)
+    - [Using middleware](#using-middleware)
+    - [How to write log file](#how-to-write-log-file)
+    - [Custom Log Format](#custom-log-format)
+    - [Model binding and validation](#model-binding-and-validation)
+    - [Custom Validators](#custom-validators)
+    - [Only Bind Query String](#only-bind-query-string)
+    - [Bind Query String or Post Data](#bind-query-string-or-post-data)
+    - [Bind Uri](#bind-uri)
+    - [Bind HTML checkboxes](#bind-html-checkboxes)
+    - [Multipart/Urlencoded binding](#multiparturlencoded-binding)
+    - [XML, JSON, YAML and ProtoBuf rendering](#xml-json-yaml-and-protobuf-rendering)
+    - [JSONP rendering](#jsonp)
+    - [Serving static files](#serving-static-files)
+    - [Serving data from reader](#serving-data-from-reader)
+    - [HTML rendering](#html-rendering)
+    - [Multitemplate](#multitemplate)
+    - [Redirects](#redirects)
+    - [Custom Middleware](#custom-middleware)
+    - [Using BasicAuth() middleware](#using-basicauth-middleware)
+    - [Goroutines inside a middleware](#goroutines-inside-a-middleware)
+    - [Custom HTTP configuration](#custom-http-configuration)
+    - [Support Let's Encrypt](#support-lets-encrypt)
+    - [Run multiple service using Gin](#run-multiple-service-using-gin)
+    - [Graceful restart or stop](#graceful-restart-or-stop)
+    - [Build a single binary with templates](#build-a-single-binary-with-templates)
+    - [Bind form-data request with custom struct](#bind-form-data-request-with-custom-struct)
+    - [Try to bind body into different structs](#try-to-bind-body-into-different-structs)
+    - [http2 server push](#http2-server-push)
+    - [Define format for the log of routes](#define-format-for-the-log-of-routes)
+    - [Set and get a cookie](#set-and-get-a-cookie)
+- [Testing](#testing)
+- [Users](#users)
@@ -30 +68 @@ For more feature details, please see the [Gin website introduction](https://gin-
-## Getting started
+## Installation
@@ -32 +70 @@ For more feature details, please see the [Gin website introduction](https://gin-
-### Getting Gin
+To install Gin package, you need to install Go and set your Go workspace first.
@@ -34 +72 @@ For more feature details, please see the [Gin website introduction](https://gin-
-The first need [Go](https://golang.org/) installed (**version 1.6+ is required**), then you can use the below Go command to install Gin.
+1. Download and install it:
@@ -40 +78 @@ $ go get -u github.com/gin-gonic/gin
-For more installation guides such as vendor tool, please check out [Gin quickstart](https://gin-gonic.com/docs/quickstart/).
+2. Import it in your code:
@@ -42 +80,24 @@ For more installation guides such as vendor tool, please check out [Gin quicksta
-### Running Gin
+```go
+import "github.com/gin-gonic/gin"
+```
+
+3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
+
+```go
+import "net/http"
+```
+
+### Use a vendor tool like [Govendor](https://github.com/kardianos/govendor)
+
+1. `go get` govendor
+
+```sh
+$ go get github.com/kardianos/govendor
+```
+2. Create your project folder and `cd` inside
+
+```sh
+$ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
+```
+
+3. Vendor init your project and add gin
@@ -44 +105,27 @@ For more installation guides such as vendor tool, please check out [Gin quicksta
-First you need to import Gin package for using Gin, one simplest example likes the follow `example.go`:
+```sh
+$ govendor init
+$ govendor fetch github.com/gin-gonic/gin@v1.3
+```
+
+4. Copy a starting template inside your project
+
+```sh
+$ curl https://raw.githubusercontent.com/gin-gonic/examples/master/basic/main.go > main.go
+```
+
+5. Run your project
+
+```sh
+$ go run main.go
+```
+
+## Prerequisite
+
+Now Gin requires Go 1.6 or later and Go 1.7 will be required soon.
+
+## Quick start
+ 
+```sh
+# assume the following codes in example.go file
+$ cat example.go
+```
@@ -62,2 +148,0 @@ func main() {
-And use the Go command to run the demo:
-
@@ -71 +156,3 @@ $ go run example.go
-Please see all benchmarks details from [Gin website](https://gin-gonic.com/docs/benchmarks/).
+Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httprouter)
+
+[See all benchmarks](/BENCHMARKS.md)
@@ -108 +195 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-## Middlewares
+## Gin v1. stable
@@ -110 +197,5 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-You can find many useful Gin middlewares at [gin-contrib](https://github.com/gin-contrib).
+- [x] Zero allocation router.
+- [x] Still the fastest http router and framework. From routing to writing.
+- [x] Complete suite of unit tests
+- [x] Battle tested
+- [x] API frozen, new releases will not break your code.
@@ -112 +203 @@ You can find many useful Gin middlewares at [gin-contrib](https://github.com/gin
-## Documentation
+## Build with [jsoniter](https://github.com/json-iterator/go)
@@ -114 +205 @@ You can find many useful Gin middlewares at [gin-contrib](https://github.com/gin
-See [API documentation and descriptions](https://godoc.org/github.com/gin-gonic/gin) for package.
+Gin uses `encoding/json` as default json package but you can change to [jsoniter](https://github.com/json-iterator/go) by build from other tags.
@@ -116 +207,3 @@ See [API documentation and descriptions](https://godoc.org/github.com/gin-gonic/
-All documentation is available on the Gin website.
+```sh
+$ go build -tags=jsoniter .
+```
@@ -118,4 +211 @@ All documentation is available on the Gin website.
-- [English](https://gin-gonic.com/docs/)
-- [简体中文](https://gin-gonic.com/zh-cn/docs/)
-- [繁體中文](https://gin-gonic.com/zh-tw/docs/)
-- [日本語](https://gin-gonic.com/ja/docs/)
+## API Examples
@@ -123 +213 @@ All documentation is available on the Gin website.
-## Examples
+You can find a number of ready-to-run examples at [Gin examples repository](https://github.com/gin-gonic/examples).
@@ -125 +215 @@ All documentation is available on the Gin website.
-A number of ready-to-run examples demonstrating various use cases of Gin on the [Gin examples](https://github.com/gin-gonic/examples) repository.
+### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -127 +217,192 @@ A number of ready-to-run examples demonstrating various use cases of Gin on the
-## Users
+```go
+func main() {
+	// Creates a gin router with default middleware:
+	// logger and recovery (crash-free) middleware
+	router := gin.Default()
+
+	router.GET("/someGet", getting)
+	router.POST("/somePost", posting)
+	router.PUT("/somePut", putting)
+	router.DELETE("/someDelete", deleting)
+	router.PATCH("/somePatch", patching)
+	router.HEAD("/someHead", head)
+	router.OPTIONS("/someOptions", options)
+
+	// By default it serves on :8080 unless a
+	// PORT environment variable was defined.
+	router.Run()
+	// router.Run(":3000") for a hard coded port
+}
+```
+
+### Parameters in path
+
+```go
+func main() {
+	router := gin.Default()
+
+	// This handler will match /user/john but will not match /user/ or /user
+	router.GET("/user/:name", func(c *gin.Context) {
+		name := c.Param("name")
+		c.String(http.StatusOK, "Hello %s", name)
+	})
+
+	// However, this one will match /user/john/ and also /user/john/send
+	// If no other routers match /user/john, it will redirect to /user/john/
+	router.GET("/user/:name/*action", func(c *gin.Context) {
+		name := c.Param("name")
+		action := c.Param("action")
+		message := name + " is " + action
+		c.String(http.StatusOK, message)
+	})
+
+	router.Run(":8080")
+}
+```
+
+### Querystring parameters
+
+```go
+func main() {
+	router := gin.Default()
+
+	// Query string parameters are parsed using the existing underlying request object.
+	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+	router.GET("/welcome", func(c *gin.Context) {
+		firstname := c.DefaultQuery("firstname", "Guest")
+		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+
+		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+	})
+	router.Run(":8080")
+}
+```
+
+### Multipart/Urlencoded Form
+
+```go
+func main() {
+	router := gin.Default()
+
+	router.POST("/form_post", func(c *gin.Context) {
+		message := c.PostForm("message")
+		nick := c.DefaultPostForm("nick", "anonymous")
+
+		c.JSON(200, gin.H{
+			"status":  "posted",
+			"message": message,
+			"nick":    nick,
+		})
+	})
+	router.Run(":8080")
+}
+```
+
+### Another example: query + post form
+
+```
+POST /post?id=1234&page=1 HTTP/1.1
+Content-Type: application/x-www-form-urlencoded
+
+name=manu&message=this_is_great
+```
+
+```go
+func main() {
+	router := gin.Default()
+
+	router.POST("/post", func(c *gin.Context) {
+
+		id := c.Query("id")
+		page := c.DefaultQuery("page", "0")
+		name := c.PostForm("name")
+		message := c.PostForm("message")
+
+		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+	})
+	router.Run(":8080")
+}
+```
+
+```
+id: 1234; page: 1; name: manu; message: this_is_great
+```
+
+### Map as querystring or postform parameters
+
+```
+POST /post?ids[a]=1234&ids[b]=hello HTTP/1.1
+Content-Type: application/x-www-form-urlencoded
+
+names[first]=thinkerou&names[second]=tianou
+```
+
+```go
+func main() {
+	router := gin.Default()
+
+	router.POST("/post", func(c *gin.Context) {
+
+		ids := c.QueryMap("ids")
+		names := c.PostFormMap("names")
+
+		fmt.Printf("ids: %v; names: %v", ids, names)
+	})
+	router.Run(":8080")
+}
+```
+
+```
+ids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]
+```
+
+### Upload files
+
+#### Single file
+
+References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](https://github.com/gin-gonic/examples/tree/master/upload-file/single).
+
+`file.Filename` **SHOULD NOT** be trusted. See [`Content-Disposition` on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#Directives) and [#1693](https://github.com/gin-gonic/gin/issues/1693)
+
+> The filename is always optional and must not be used blindly by the application: path information should be stripped, and conversion to the server file system rules should be done.
+
+```go
+func main() {
+	router := gin.Default()
+	// Set a lower memory limit for multipart forms (default is 32 MiB)
+	// router.MaxMultipartMemory = 8 << 20  // 8 MiB
+	router.POST("/upload", func(c *gin.Context) {
+		// single file
+		file, _ := c.FormFile("file")
+		log.Println(file.Filename)
+
+		// Upload the file to specific dst.
+		// c.SaveUploadedFile(file, dst)
+
+		c.String(http.StatusOK, fmt.Sprintf("'%s' uploaded!", file.Filename))
+	})
+	router.Run(":8080")
+}
+```
+
+How to `curl`:
+
+```bash
+curl -X POST http://localhost:8080/upload \
+  -F "file=@/Users/appleboy/test.zip" \
+  -H "Content-Type: multipart/form-data"
+```
+
+#### Multiple files
+
+See the detail [example code](https://github.com/gin-gonic/examples/tree/master/upload-file/multiple).
+
+```go
+func main() {
+	router := gin.Default()
+	// Set a lower memory limit for multipart forms (default is 32 MiB)
+	// router.MaxMultipartMemory = 8 << 20  // 8 MiB
+	router.POST("/upload", func(c *gin.Context) {
+		// Multipart form
+		form, _ := c.MultipartForm()
+		files := form.File["upload[]"]
@@ -129 +410,2 @@ A number of ready-to-run examples demonstrating various use cases of Gin on the
-[Gin website](https://gin-gonic.com/docs/users/) lists some awesome projects made with Gin web framework.
+		for _, file := range files {
+			log.Println(file.Filename)
@@ -131 +413,312 @@ A number of ready-to-run examples demonstrating various use cases of Gin on the
-## Contributing
+			// Upload the file to specific dst.
+			// c.SaveUploadedFile(file, dst)
+		}
+		c.String(http.StatusOK, fmt.Sprintf("%d files uploaded!", len(files)))
+	})
+	router.Run(":8080")
+}
+```
+
+How to `curl`:
+
+```bash
+curl -X POST http://localhost:8080/upload \
+  -F "upload[]=@/Users/appleboy/test1.zip" \
+  -F "upload[]=@/Users/appleboy/test2.zip" \
+  -H "Content-Type: multipart/form-data"
+```
+
+### Grouping routes
+
+```go
+func main() {
+	router := gin.Default()
+
+	// Simple group: v1
+	v1 := router.Group("/v1")
+	{
+		v1.POST("/login", loginEndpoint)
+		v1.POST("/submit", submitEndpoint)
+		v1.POST("/read", readEndpoint)
+	}
+
+	// Simple group: v2
+	v2 := router.Group("/v2")
+	{
+		v2.POST("/login", loginEndpoint)
+		v2.POST("/submit", submitEndpoint)
+		v2.POST("/read", readEndpoint)
+	}
+
+	router.Run(":8080")
+}
+```
+
+### Blank Gin without middleware by default
+
+Use
+
+```go
+r := gin.New()
+```
+
+instead of
+
+```go
+// Default With the Logger and Recovery middleware already attached
+r := gin.Default()
+```
+
+
+### Using middleware
+```go
+func main() {
+	// Creates a router without any middleware by default
+	r := gin.New()
+
+	// Global middleware
+	// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.
+	// By default gin.DefaultWriter = os.Stdout
+	r.Use(gin.Logger())
+
+	// Recovery middleware recovers from any panics and writes a 500 if there was one.
+	r.Use(gin.Recovery())
+
+	// Per route middleware, you can add as many as you desire.
+	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
+
+	// Authorization group
+	// authorized := r.Group("/", AuthRequired())
+	// exactly the same as:
+	authorized := r.Group("/")
+	// per group middleware! in this case we use the custom created
+	// AuthRequired() middleware just in the "authorized" group.
+	authorized.Use(AuthRequired())
+	{
+		authorized.POST("/login", loginEndpoint)
+		authorized.POST("/submit", submitEndpoint)
+		authorized.POST("/read", readEndpoint)
+
+		// nested group
+		testing := authorized.Group("testing")
+		testing.GET("/analytics", analyticsEndpoint)
+	}
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+### How to write log file
+```go
+func main() {
+    // Disable Console Color, you don't need console color when writing the logs to file.
+    gin.DisableConsoleColor()
+
+    // Logging to a file.
+    f, _ := os.Create("gin.log")
+    gin.DefaultWriter = io.MultiWriter(f)
+
+    // Use the following code if you need to write the logs to file and console at the same time.
+    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)
+
+    router := gin.Default()
+    router.GET("/ping", func(c *gin.Context) {
+        c.String(200, "pong")
+    })
+
+    router.Run(":8080")
+}
+```
+
+### Custom Log Format
+```go
+func main() {
+	router := gin.New()
+
+	// LoggerWithFormatter middleware will write the logs to gin.DefaultWriter
+	// By default gin.DefaultWriter = os.Stdout
+	router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
+
+		// your custom format
+		return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
+				param.ClientIP,
+				param.TimeStamp.Format(time.RFC1123),
+				param.Method,
+				param.Path,
+				param.Request.Proto,
+				param.StatusCode,
+				param.Latency,
+				param.Request.UserAgent(),
+				param.ErrorMessage,
+		)
+	}))
+	router.Use(gin.Recovery())
+
+	router.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	router.Run(":8080")
+}
+```
+
+**Sample Output**
+```
+::1 - [Fri, 07 Dec 2018 17:04:38 JST] "GET /ping HTTP/1.1 200 122.767µs "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36" "
+```
+
+### Controlling Log output coloring 
+
+By default, logs output on console should be colorized depending on the detected TTY.
+
+Never colorize logs: 
+
+```go
+func main() {
+    // Disable log's color
+    gin.DisableConsoleColor()
+    
+    // Creates a gin router with default middleware:
+    // logger and recovery (crash-free) middleware
+    router := gin.Default()
+    
+    router.GET("/ping", func(c *gin.Context) {
+        c.String(200, "pong")
+    })
+    
+    router.Run(":8080")
+}
+```
+
+Always colorize logs: 
+
+```go
+func main() {
+    // Force log's color
+    gin.ForceConsoleColor()
+    
+    // Creates a gin router with default middleware:
+    // logger and recovery (crash-free) middleware
+    router := gin.Default()
+    
+    router.GET("/ping", func(c *gin.Context) {
+        c.String(200, "pong")
+    })
+    
+    router.Run(":8080")
+}
+```
+
+### Model binding and validation
+
+To bind a request body into a type, use model binding. We currently support binding of JSON, XML, YAML and standard form values (foo=bar&boo=baz).
+
+Gin uses [**go-playground/validator.v8**](https://github.com/go-playground/validator) for validation. Check the full docs on tags usage [here](http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags).
+
+Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set `json:"fieldname"`.
+
+Also, Gin provides two sets of methods for binding:
+- **Type** - Must bind
+  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`, `BindYAML`
+  - **Behavior** - These methods use `MustBindWith` under the hood. If there is a binding error, the request is aborted with `c.AbortWithError(400, err).SetType(ErrorTypeBind)`. This sets the response status code to 400 and the `Content-Type` header is set to `text/plain; charset=utf-8`. Note that if you try to set the response code after this, it will result in a warning `[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422`. If you wish to have greater control over the behavior, consider using the `ShouldBind` equivalent method.
+- **Type** - Should bind
+  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`, `ShouldBindYAML`
+  - **Behavior** - These methods use `ShouldBindWith` under the hood. If there is a binding error, the error is returned and it is the developer's responsibility to handle the request and error appropriately.
+
+When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use `MustBindWith` or `ShouldBindWith`.
+
+You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, an error will be returned.
+
+```go
+// Binding from JSON
+type Login struct {
+	User     string `form:"user" json:"user" xml:"user"  binding:"required"`
+	Password string `form:"password" json:"password" xml:"password" binding:"required"`
+}
+
+func main() {
+	router := gin.Default()
+
+	// Example for binding JSON ({"user": "manu", "password": "123"})
+	router.POST("/loginJSON", func(c *gin.Context) {
+		var json Login
+		if err := c.ShouldBindJSON(&json); err != nil {
+			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+			return
+		}
+		
+		if json.User != "manu" || json.Password != "123" {
+			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			return
+		} 
+		
+		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+	})
+
+	// Example for binding XML (
+	//	<?xml version="1.0" encoding="UTF-8"?>
+	//	<root>
+	//		<user>user</user>
+	//		<password>123</password>
+	//	</root>)
+	router.POST("/loginXML", func(c *gin.Context) {
+		var xml Login
+		if err := c.ShouldBindXML(&xml); err != nil {
+			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+			return
+		}
+		
+		if xml.User != "manu" || xml.Password != "123" {
+			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			return
+		} 
+		
+		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+	})
+
+	// Example for binding a HTML form (user=manu&password=123)
+	router.POST("/loginForm", func(c *gin.Context) {
+		var form Login
+		// This will infer what binder to use depending on the content-type header.
+		if err := c.ShouldBind(&form); err != nil {
+			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+			return
+		}
+		
+		if form.User != "manu" || form.Password != "123" {
+			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			return
+		} 
+		
+		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	router.Run(":8080")
+}
+```
+
+**Sample request**
+```shell
+$ curl -v -X POST \
+  http://localhost:8080/loginJSON \
+  -H 'content-type: application/json' \
+  -d '{ "user": "manu" }'
+> POST /loginJSON HTTP/1.1
+> Host: localhost:8080
+> User-Agent: curl/7.51.0
+> Accept: */*
+> content-type: application/json
+> Content-Length: 18
+>
+* upload completely sent off: 18 out of 18 bytes
+< HTTP/1.1 400 Bad Request
+< Content-Type: application/json; charset=utf-8
+< Date: Fri, 04 Aug 2017 03:51:31 GMT
+< Content-Length: 100
+<
+{"error":"Key: 'Login.Password' Error:Field validation for 'Password' failed on the 'required' tag"}
+```
+
+**Skip validate**
@@ -133 +726,1337 @@ A number of ready-to-run examples demonstrating various use cases of Gin on the
-Gin is the work of hundreds of contributors. We appreciate your help!
+When running the above example using the above the `curl` command, it returns error. Because the example use `binding:"required"` for `Password`. If use `binding:"-"` for `Password`, then it will not return error when running the above example again.
+
+### Custom Validators
+
+It is also possible to register custom validators. See the [example code](https://github.com/gin-gonic/examples/tree/master/custom-validation/server.go).
+
+```go
+package main
+
+import (
+	"net/http"
+	"reflect"
+	"time"
+
+	"github.com/gin-gonic/gin"
+	"github.com/gin-gonic/gin/binding"
+	"gopkg.in/go-playground/validator.v8"
+)
+
+// Booking contains binded and validated data.
+type Booking struct {
+	CheckIn  time.Time `form:"check_in" binding:"required,bookabledate" time_format:"2006-01-02"`
+	CheckOut time.Time `form:"check_out" binding:"required,gtfield=CheckIn" time_format:"2006-01-02"`
+}
+
+func bookableDate(
+	v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,
+	field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string,
+) bool {
+	if date, ok := field.Interface().(time.Time); ok {
+		today := time.Now()
+		if today.Year() > date.Year() || today.YearDay() > date.YearDay() {
+			return false
+		}
+	}
+	return true
+}
+
+func main() {
+	route := gin.Default()
+
+	if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
+		v.RegisterValidation("bookabledate", bookableDate)
+	}
+
+	route.GET("/bookable", getBookable)
+	route.Run(":8085")
+}
+
+func getBookable(c *gin.Context) {
+	var b Booking
+	if err := c.ShouldBindWith(&b, binding.Query); err == nil {
+		c.JSON(http.StatusOK, gin.H{"message": "Booking dates are valid!"})
+	} else {
+		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+	}
+}
+```
+
+```console
+$ curl "localhost:8085/bookable?check_in=2018-04-16&check_out=2018-04-17"
+{"message":"Booking dates are valid!"}
+
+$ curl "localhost:8085/bookable?check_in=2018-03-08&check_out=2018-03-09"
+{"error":"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag"}
+```
+
+[Struct level validations](https://github.com/go-playground/validator/releases/tag/v8.7) can also be registered this way.
+See the [struct-lvl-validation example](https://github.com/gin-gonic/examples/tree/master/struct-lvl-validations) to learn more.
+
+### Only Bind Query String
+
+`ShouldBindQuery` function only binds the query params and not the post data. See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017).
+
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/gin"
+)
+
+type Person struct {
+	Name    string `form:"name"`
+	Address string `form:"address"`
+}
+
+func main() {
+	route := gin.Default()
+	route.Any("/testing", startPage)
+	route.Run(":8085")
+}
+
+func startPage(c *gin.Context) {
+	var person Person
+	if c.ShouldBindQuery(&person) == nil {
+		log.Println("====== Only Bind By Query String ======")
+		log.Println(person.Name)
+		log.Println(person.Address)
+	}
+	c.String(200, "Success")
+}
+
+```
+
+### Bind Query String or Post Data
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
+
+```go
+package main
+
+import (
+	"log"
+	"time"
+
+	"github.com/gin-gonic/gin"
+)
+
+type Person struct {
+	Name     string    `form:"name"`
+	Address  string    `form:"address"`
+	Birthday time.Time `form:"birthday" time_format:"2006-01-02" time_utc:"1"`
+}
+
+func main() {
+	route := gin.Default()
+	route.GET("/testing", startPage)
+	route.Run(":8085")
+}
+
+func startPage(c *gin.Context) {
+	var person Person
+	// If `GET`, only `Form` binding engine (`query`) used.
+	// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).
+	// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48
+	if c.ShouldBind(&person) == nil {
+		log.Println(person.Name)
+		log.Println(person.Address)
+		log.Println(person.Birthday)
+	}
+
+	c.String(200, "Success")
+}
+```
+
+Test it with:
+```sh
+$ curl -X GET "localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03-15"
+```
+
+### Bind Uri
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/846).
+
+```go
+package main
+
+import "github.com/gin-gonic/gin"
+
+type Person struct {
+	ID string `uri:"id" binding:"required,uuid"`
+	Name string `uri:"name" binding:"required"`
+}
+
+func main() {
+	route := gin.Default()
+	route.GET("/:name/:id", func(c *gin.Context) {
+		var person Person
+		if err := c.ShouldBindUri(&person); err != nil {
+			c.JSON(400, gin.H{"msg": err})
+			return
+		}
+		c.JSON(200, gin.H{"name": person.Name, "uuid": person.ID})
+	})
+	route.Run(":8088")
+}
+```
+
+Test it with:
+```sh
+$ curl -v localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3
+$ curl -v localhost:8088/thinkerou/not-uuid
+```
+
+### Bind HTML checkboxes
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092)
+
+main.go
+
+```go
+...
+
+type myForm struct {
+    Colors []string `form:"colors[]"`
+}
+
+...
+
+func formHandler(c *gin.Context) {
+    var fakeForm myForm
+    c.ShouldBind(&fakeForm)
+    c.JSON(200, gin.H{"color": fakeForm.Colors})
+}
+
+...
+
+```
+
+form.html
+
+```html
+<form action="/" method="POST">
+    <p>Check some colors</p>
+    <label for="red">Red</label>
+    <input type="checkbox" name="colors[]" value="red" id="red">
+    <label for="green">Green</label>
+    <input type="checkbox" name="colors[]" value="green" id="green">
+    <label for="blue">Blue</label>
+    <input type="checkbox" name="colors[]" value="blue" id="blue">
+    <input type="submit">
+</form>
+```
+
+result:
+
+```
+{"color":["red","green","blue"]}
+```
+
+### Multipart/Urlencoded binding
+
+```go
+package main
+
+import (
+	"github.com/gin-gonic/gin"
+)
+
+type LoginForm struct {
+	User     string `form:"user" binding:"required"`
+	Password string `form:"password" binding:"required"`
+}
+
+func main() {
+	router := gin.Default()
+	router.POST("/login", func(c *gin.Context) {
+		// you can bind multipart form with explicit binding declaration:
+		// c.ShouldBindWith(&form, binding.Form)
+		// or you can simply use autobinding with ShouldBind method:
+		var form LoginForm
+		// in this case proper binding will be automatically selected
+		if c.ShouldBind(&form) == nil {
+			if form.User == "user" && form.Password == "password" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
+	router.Run(":8080")
+}
+```
+
+Test it with:
+```sh
+$ curl -v --form user=user --form password=password http://localhost:8080/login
+```
+
+### XML, JSON, YAML and ProtoBuf rendering
+
+```go
+func main() {
+	r := gin.Default()
+
+	// gin.H is a shortcut for map[string]interface{}
+	r.GET("/someJSON", func(c *gin.Context) {
+		c.JSON(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
+	})
+
+	r.GET("/moreJSON", func(c *gin.Context) {
+		// You also can use a struct
+		var msg struct {
+			Name    string `json:"user"`
+			Message string
+			Number  int
+		}
+		msg.Name = "Lena"
+		msg.Message = "hey"
+		msg.Number = 123
+		// Note that msg.Name becomes "user" in the JSON
+		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
+		c.JSON(http.StatusOK, msg)
+	})
+
+	r.GET("/someXML", func(c *gin.Context) {
+		c.XML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
+	})
+
+	r.GET("/someYAML", func(c *gin.Context) {
+		c.YAML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
+	})
+
+	r.GET("/someProtoBuf", func(c *gin.Context) {
+		reps := []int64{int64(1), int64(2)}
+		label := "test"
+		// The specific definition of protobuf is written in the testdata/protoexample file.
+		data := &protoexample.Test{
+			Label: &label,
+			Reps:  reps,
+		}
+		// Note that data becomes binary data in the response
+		// Will output protoexample.Test protobuf serialized data
+		c.ProtoBuf(http.StatusOK, data)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+#### SecureJSON
+
+Using SecureJSON to prevent json hijacking. Default prepends `"while(1),"` to response body if the given struct is array values.
+
+```go
+func main() {
+	r := gin.Default()
+
+	// You can also use your own secure json prefix
+	// r.SecureJsonPrefix(")]}',\n")
+
+	r.GET("/someJSON", func(c *gin.Context) {
+		names := []string{"lena", "austin", "foo"}
+
+		// Will output  :   while(1);["lena","austin","foo"]
+		c.SecureJSON(http.StatusOK, names)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+#### JSONP
+
+Using JSONP to request data from a server  in a different domain. Add callback to response body if the query parameter callback exists.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/JSONP?callback=x", func(c *gin.Context) {
+		data := map[string]interface{}{
+			"foo": "bar",
+		}
+		
+		//callback is x
+		// Will output  :   x({\"foo\":\"bar\"})
+		c.JSONP(http.StatusOK, data)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+#### AsciiJSON
+
+Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII chracters.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/someJSON", func(c *gin.Context) {
+		data := map[string]interface{}{
+			"lang": "GO语言",
+			"tag":  "<br>",
+		}
+
+		// will output : {"lang":"GO\u8bed\u8a00","tag":"\u003cbr\u003e"}
+		c.AsciiJSON(http.StatusOK, data)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+#### PureJSON
+
+Normally, JSON replaces special HTML characters with their unicode entities, e.g. `<` becomes  `\u003c`. If you want to encode such characters literally, you can use PureJSON instead.
+This feature is unavailable in Go 1.6 and lower.
+
+```go
+func main() {
+	r := gin.Default()
+	
+	// Serves unicode entities
+	r.GET("/json", func(c *gin.Context) {
+		c.JSON(200, gin.H{
+			"html": "<b>Hello, world!</b>",
+		})
+	})
+	
+	// Serves literal characters
+	r.GET("/purejson", func(c *gin.Context) {
+		c.PureJSON(200, gin.H{
+			"html": "<b>Hello, world!</b>",
+		})
+	})
+	
+	// listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+### Serving static files
+
+```go
+func main() {
+	router := gin.Default()
+	router.Static("/assets", "./assets")
+	router.StaticFS("/more_static", http.Dir("my_file_system"))
+	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+
+	// Listen and serve on 0.0.0.0:8080
+	router.Run(":8080")
+}
+```
+
+### Serving data from reader
+
+```go
+func main() {
+	router := gin.Default()
+	router.GET("/someDataFromReader", func(c *gin.Context) {
+		response, err := http.Get("https://raw.githubusercontent.com/gin-gonic/logo/master/color.png")
+		if err != nil || response.StatusCode != http.StatusOK {
+			c.Status(http.StatusServiceUnavailable)
+			return
+		}
+
+		reader := response.Body
+		contentLength := response.ContentLength
+		contentType := response.Header.Get("Content-Type")
+
+		extraHeaders := map[string]string{
+			"Content-Disposition": `attachment; filename="gopher.png"`,
+		}
+
+		c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)
+	})
+	router.Run(":8080")
+}
+```
+
+### HTML rendering
+
+Using LoadHTMLGlob() or LoadHTMLFiles()
+
+```go
+func main() {
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/*")
+	//router.LoadHTMLFiles("templates/template1.html", "templates/template2.html")
+	router.GET("/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "index.tmpl", gin.H{
+			"title": "Main website",
+		})
+	})
+	router.Run(":8080")
+}
+```
+
+templates/index.tmpl
+
+```html
+<html>
+	<h1>
+		{{ .title }}
+	</h1>
+</html>
+```
+
+Using templates with same name in different directories
+
+```go
+func main() {
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/**/*")
+	router.GET("/posts/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
+			"title": "Posts",
+		})
+	})
+	router.GET("/users/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
+			"title": "Users",
+		})
+	})
+	router.Run(":8080")
+}
+```
+
+templates/posts/index.tmpl
+
+```html
+{{ define "posts/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using posts/index.tmpl</p>
+</html>
+{{ end }}
+```
+
+templates/users/index.tmpl
+
+```html
+{{ define "users/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using users/index.tmpl</p>
+</html>
+{{ end }}
+```
+
+#### Custom Template renderer
+
+You can also use your own html template render
+
+```go
+import "html/template"
+
+func main() {
+	router := gin.Default()
+	html := template.Must(template.ParseFiles("file1", "file2"))
+	router.SetHTMLTemplate(html)
+	router.Run(":8080")
+}
+```
+
+#### Custom Delimiters
+
+You may use custom delims
+
+```go
+	r := gin.Default()
+	r.Delims("{[{", "}]}")
+	r.LoadHTMLGlob("/path/to/templates")
+```
+
+#### Custom Template Funcs
+
+See the detail [example code](https://github.com/gin-gonic/examples/tree/master/template).
+
+main.go
+
+```go
+import (
+    "fmt"
+    "html/template"
+    "net/http"
+    "time"
+
+    "github.com/gin-gonic/gin"
+)
+
+func formatAsDate(t time.Time) string {
+    year, month, day := t.Date()
+    return fmt.Sprintf("%d%02d/%02d", year, month, day)
+}
+
+func main() {
+    router := gin.Default()
+    router.Delims("{[{", "}]}")
+    router.SetFuncMap(template.FuncMap{
+        "formatAsDate": formatAsDate,
+    })
+    router.LoadHTMLFiles("./testdata/template/raw.tmpl")
+
+    router.GET("/raw", func(c *gin.Context) {
+        c.HTML(http.StatusOK, "raw.tmpl", map[string]interface{}{
+            "now": time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),
+        })
+    })
+
+    router.Run(":8080")
+}
+
+```
+
+raw.tmpl
+
+```html
+Date: {[{.now | formatAsDate}]}
+```
+
+Result:
+```
+Date: 2017/07/01
+```
+
+### Multitemplate
+
+Gin allow by default use only one html.Template. Check [a multitemplate render](https://github.com/gin-contrib/multitemplate) for using features like go 1.6 `block template`.
+
+### Redirects
+
+Issuing a HTTP redirect is easy. Both internal and external locations are supported.
+
+```go
+r.GET("/test", func(c *gin.Context) {
+	c.Redirect(http.StatusMovedPermanently, "http://www.google.com/")
+})
+```
+
+
+Issuing a Router redirect, use `HandleContext` like below.
+
+``` go
+r.GET("/test", func(c *gin.Context) {
+    c.Request.URL.Path = "/test2"
+    r.HandleContext(c)
+})
+r.GET("/test2", func(c *gin.Context) {
+    c.JSON(200, gin.H{"hello": "world"})
+})
+```
+
+
+### Custom Middleware
+
+```go
+func Logger() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		t := time.Now()
+
+		// Set example variable
+		c.Set("example", "12345")
+
+		// before request
+
+		c.Next()
+
+		// after request
+		latency := time.Since(t)
+		log.Print(latency)
+
+		// access the status we are sending
+		status := c.Writer.Status()
+		log.Println(status)
+	}
+}
+
+func main() {
+	r := gin.New()
+	r.Use(Logger())
+
+	r.GET("/test", func(c *gin.Context) {
+		example := c.MustGet("example").(string)
+
+		// it would print: "12345"
+		log.Println(example)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+### Using BasicAuth() middleware
+
+```go
+// simulate some private data
+var secrets = gin.H{
+	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
+	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
+	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
+}
+
+func main() {
+	r := gin.Default()
+
+	// Group using gin.BasicAuth() middleware
+	// gin.Accounts is a shortcut for map[string]string
+	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
+		"foo":    "bar",
+		"austin": "1234",
+		"lena":   "hello2",
+		"manu":   "4321",
+	}))
+
+	// /admin/secrets endpoint
+	// hit "localhost:8080/admin/secrets
+	authorized.GET("/secrets", func(c *gin.Context) {
+		// get user, it was set by the BasicAuth middleware
+		user := c.MustGet(gin.AuthUserKey).(string)
+		if secret, ok := secrets[user]; ok {
+			c.JSON(http.StatusOK, gin.H{"user": user, "secret": secret})
+		} else {
+			c.JSON(http.StatusOK, gin.H{"user": user, "secret": "NO SECRET :("})
+		}
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+### Goroutines inside a middleware
+
+When starting new Goroutines inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/long_async", func(c *gin.Context) {
+		// create copy to be used inside the goroutine
+		cCp := c.Copy()
+		go func() {
+			// simulate a long task with time.Sleep(). 5 seconds
+			time.Sleep(5 * time.Second)
+
+			// note that you are using the copied context "cCp", IMPORTANT
+			log.Println("Done! in path " + cCp.Request.URL.Path)
+		}()
+	})
+
+	r.GET("/long_sync", func(c *gin.Context) {
+		// simulate a long task with time.Sleep(). 5 seconds
+		time.Sleep(5 * time.Second)
+
+		// since we are NOT using a goroutine, we do not have to copy the context
+		log.Println("Done! in path " + c.Request.URL.Path)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+### Custom HTTP configuration
+
+Use `http.ListenAndServe()` directly, like this:
+
+```go
+func main() {
+	router := gin.Default()
+	http.ListenAndServe(":8080", router)
+}
+```
+or
+
+```go
+func main() {
+	router := gin.Default()
+
+	s := &http.Server{
+		Addr:           ":8080",
+		Handler:        router,
+		ReadTimeout:    10 * time.Second,
+		WriteTimeout:   10 * time.Second,
+		MaxHeaderBytes: 1 << 20,
+	}
+	s.ListenAndServe()
+}
+```
+
+### Support Let's Encrypt
+
+example for 1-line LetsEncrypt HTTPS servers.
+
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/autotls"
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	r := gin.Default()
+
+	// Ping handler
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	log.Fatal(autotls.Run(r, "example1.com", "example2.com"))
+}
+```
+
+example for custom autocert manager.
+
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/autotls"
+	"github.com/gin-gonic/gin"
+	"golang.org/x/crypto/acme/autocert"
+)
+
+func main() {
+	r := gin.Default()
+
+	// Ping handler
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	m := autocert.Manager{
+		Prompt:     autocert.AcceptTOS,
+		HostPolicy: autocert.HostWhitelist("example1.com", "example2.com"),
+		Cache:      autocert.DirCache("/var/www/.cache"),
+	}
+
+	log.Fatal(autotls.RunWithManager(r, &m))
+}
+```
+
+### Run multiple service using Gin
+
+See the [question](https://github.com/gin-gonic/gin/issues/346) and try the following example:
+
+```go
+package main
+
+import (
+	"log"
+	"net/http"
+	"time"
+
+	"github.com/gin-gonic/gin"
+	"golang.org/x/sync/errgroup"
+)
+
+var (
+	g errgroup.Group
+)
+
+func router01() http.Handler {
+	e := gin.New()
+	e.Use(gin.Recovery())
+	e.GET("/", func(c *gin.Context) {
+		c.JSON(
+			http.StatusOK,
+			gin.H{
+				"code":  http.StatusOK,
+				"error": "Welcome server 01",
+			},
+		)
+	})
+
+	return e
+}
+
+func router02() http.Handler {
+	e := gin.New()
+	e.Use(gin.Recovery())
+	e.GET("/", func(c *gin.Context) {
+		c.JSON(
+			http.StatusOK,
+			gin.H{
+				"code":  http.StatusOK,
+				"error": "Welcome server 02",
+			},
+		)
+	})
+
+	return e
+}
+
+func main() {
+	server01 := &http.Server{
+		Addr:         ":8080",
+		Handler:      router01(),
+		ReadTimeout:  5 * time.Second,
+		WriteTimeout: 10 * time.Second,
+	}
+
+	server02 := &http.Server{
+		Addr:         ":8081",
+		Handler:      router02(),
+		ReadTimeout:  5 * time.Second,
+		WriteTimeout: 10 * time.Second,
+	}
+
+	g.Go(func() error {
+		return server01.ListenAndServe()
+	})
+
+	g.Go(func() error {
+		return server02.ListenAndServe()
+	})
+
+	if err := g.Wait(); err != nil {
+		log.Fatal(err)
+	}
+}
+```
+
+### Graceful restart or stop
+
+Do you want to graceful restart or stop your web server?
+There are some ways this can be done.
+
+We can use [fvbock/endless](https://github.com/fvbock/endless) to replace the default `ListenAndServe`. Refer issue [#296](https://github.com/gin-gonic/gin/issues/296) for more details.
+
+```go
+router := gin.Default()
+router.GET("/", handler)
+// [...]
+endless.ListenAndServe(":4242", router)
+```
+
+An alternative to endless:
+
+* [manners](https://github.com/braintree/manners): A polite Go HTTP server that shuts down gracefully.
+* [graceful](https://github.com/tylerb/graceful): Graceful is a Go package enabling graceful shutdown of an http.Handler server.
+* [grace](https://github.com/facebookgo/grace): Graceful restart & zero downtime deploy for Go servers.
+
+If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](https://github.com/gin-gonic/examples/tree/master/graceful-shutdown) example with gin.
+
+```go
+// +build go1.8
+
+package main
+
+import (
+	"context"
+	"log"
+	"net/http"
+	"os"
+	"os/signal"
+	"syscall"
+	"time"
+
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	router := gin.Default()
+	router.GET("/", func(c *gin.Context) {
+		time.Sleep(5 * time.Second)
+		c.String(http.StatusOK, "Welcome Gin Server")
+	})
+
+	srv := &http.Server{
+		Addr:    ":8080",
+		Handler: router,
+	}
+
+	go func() {
+		// service connections
+		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
+			log.Fatalf("listen: %s\n", err)
+		}
+	}()
+
+	// Wait for interrupt signal to gracefully shutdown the server with
+	// a timeout of 5 seconds.
+	quit := make(chan os.Signal)
+	// kill (no param) default send syscanll.SIGTERM
+	// kill -2 is syscall.SIGINT
+	// kill -9 is syscall. SIGKILL but can"t be catch, so don't need add it
+	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
+	<-quit
+	log.Println("Shutdown Server ...")
+
+	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
+	defer cancel()
+	if err := srv.Shutdown(ctx); err != nil {
+		log.Fatal("Server Shutdown:", err)
+	}
+	// catching ctx.Done(). timeout of 5 seconds.
+	select {
+	case <-ctx.Done():
+		log.Println("timeout of 5 seconds.")
+	}
+	log.Println("Server exiting")
+}
+```
+
+### Build a single binary with templates
+
+You can build a server into a single binary containing templates by using [go-assets][].
+
+[go-assets]: https://github.com/jessevdk/go-assets
+
+```go
+func main() {
+	r := gin.New()
+
+	t, err := loadTemplate()
+	if err != nil {
+		panic(err)
+	}
+	r.SetHTMLTemplate(t)
+
+	r.GET("/", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "/html/index.tmpl",nil)
+	})
+	r.Run(":8080")
+}
+
+// loadTemplate loads templates embedded by go-assets-builder
+func loadTemplate() (*template.Template, error) {
+	t := template.New("")
+	for name, file := range Assets.Files {
+		if file.IsDir() || !strings.HasSuffix(name, ".tmpl") {
+			continue
+		}
+		h, err := ioutil.ReadAll(file)
+		if err != nil {
+			return nil, err
+		}
+		t, err = t.New(name).Parse(string(h))
+		if err != nil {
+			return nil, err
+		}
+	}
+	return t, nil
+}
+```
+
+See a complete example in the `https://github.com/gin-gonic/examples/tree/master/assets-in-binary` directory.
+
+### Bind form-data request with custom struct
+
+The follow example using custom struct:
+
+```go
+type StructA struct {
+    FieldA string `form:"field_a"`
+}
+
+type StructB struct {
+    NestedStruct StructA
+    FieldB string `form:"field_b"`
+}
+
+type StructC struct {
+    NestedStructPointer *StructA
+    FieldC string `form:"field_c"`
+}
+
+type StructD struct {
+    NestedAnonyStruct struct {
+        FieldX string `form:"field_x"`
+    }
+    FieldD string `form:"field_d"`
+}
+
+func GetDataB(c *gin.Context) {
+    var b StructB
+    c.Bind(&b)
+    c.JSON(200, gin.H{
+        "a": b.NestedStruct,
+        "b": b.FieldB,
+    })
+}
+
+func GetDataC(c *gin.Context) {
+    var b StructC
+    c.Bind(&b)
+    c.JSON(200, gin.H{
+        "a": b.NestedStructPointer,
+        "c": b.FieldC,
+    })
+}
+
+func GetDataD(c *gin.Context) {
+    var b StructD
+    c.Bind(&b)
+    c.JSON(200, gin.H{
+        "x": b.NestedAnonyStruct,
+        "d": b.FieldD,
+    })
+}
+
+func main() {
+    r := gin.Default()
+    r.GET("/getb", GetDataB)
+    r.GET("/getc", GetDataC)
+    r.GET("/getd", GetDataD)
+
+    r.Run()
+}
+```
+
+Using the command `curl` command result:
+
+```
+$ curl "http://localhost:8080/getb?field_a=hello&field_b=world"
+{"a":{"FieldA":"hello"},"b":"world"}
+$ curl "http://localhost:8080/getc?field_a=hello&field_c=world"
+{"a":{"FieldA":"hello"},"c":"world"}
+$ curl "http://localhost:8080/getd?field_x=hello&field_d=world"
+{"d":"world","x":{"FieldX":"hello"}}
+```
+
+### Try to bind body into different structs
+
+The normal methods for binding request body consumes `c.Request.Body` and they
+cannot be called multiple times.
+
+```go
+type formA struct {
+  Foo string `json:"foo" xml:"foo" binding:"required"`
+}
+
+type formB struct {
+  Bar string `json:"bar" xml:"bar" binding:"required"`
+}
+
+func SomeHandler(c *gin.Context) {
+  objA := formA{}
+  objB := formB{}
+  // This c.ShouldBind consumes c.Request.Body and it cannot be reused.
+  if errA := c.ShouldBind(&objA); errA == nil {
+    c.String(http.StatusOK, `the body should be formA`)
+  // Always an error is occurred by this because c.Request.Body is EOF now.
+  } else if errB := c.ShouldBind(&objB); errB == nil {
+    c.String(http.StatusOK, `the body should be formB`)
+  } else {
+    ...
+  }
+}
+```
+
+For this, you can use `c.ShouldBindBodyWith`.
+
+```go
+func SomeHandler(c *gin.Context) {
+  objA := formA{}
+  objB := formB{}
+  // This reads c.Request.Body and stores the result into the context.
+  if errA := c.ShouldBindBodyWith(&objA, binding.JSON); errA == nil {
+    c.String(http.StatusOK, `the body should be formA`)
+  // At this time, it reuses body stored in the context.
+  } else if errB := c.ShouldBindBodyWith(&objB, binding.JSON); errB == nil {
+    c.String(http.StatusOK, `the body should be formB JSON`)
+  // And it can accepts other formats
+  } else if errB2 := c.ShouldBindBodyWith(&objB, binding.XML); errB2 == nil {
+    c.String(http.StatusOK, `the body should be formB XML`)
+  } else {
+    ...
+  }
+}
+```
+
+* `c.ShouldBindBodyWith` stores body into the context before binding. This has
+a slight impact to performance, so you should not use this method if you are
+enough to call binding at once.
+* This feature is only needed for some formats -- `JSON`, `XML`, `MsgPack`,
+`ProtoBuf`. For other formats, `Query`, `Form`, `FormPost`, `FormMultipart`,
+can be called by `c.ShouldBind()` multiple times without any damage to
+performance (See [#1341](https://github.com/gin-gonic/gin/pull/1341)).
+
+### http2 server push
+
+http.Pusher is supported only **go1.8+**. See the [golang blog](https://blog.golang.org/h2push) for detail information.
+
+```go
+package main
+
+import (
+	"html/template"
+	"log"
+
+	"github.com/gin-gonic/gin"
+)
+
+var html = template.Must(template.New("https").Parse(`
+<html>
+<head>
+  <title>Https Test</title>
+  <script src="/assets/app.js"></script>
+</head>
+<body>
+  <h1 style="color:red;">Welcome, Ginner!</h1>
+</body>
+</html>
+`))
+
+func main() {
+	r := gin.Default()
+	r.Static("/assets", "./assets")
+	r.SetHTMLTemplate(html)
+
+	r.GET("/", func(c *gin.Context) {
+		if pusher := c.Writer.Pusher(); pusher != nil {
+			// use pusher.Push() to do server push
+			if err := pusher.Push("/assets/app.js", nil); err != nil {
+				log.Printf("Failed to push: %v", err)
+			}
+		}
+		c.HTML(200, "https", gin.H{
+			"status": "success",
+		})
+	})
+
+	// Listen and Server in https://127.0.0.1:8080
+	r.RunTLS(":8080", "./testdata/server.pem", "./testdata/server.key")
+}
+```
+
+### Define format for the log of routes
+
+The default log of routes is:
+```
+[GIN-debug] POST   /foo                      --> main.main.func1 (3 handlers)
+[GIN-debug] GET    /bar                      --> main.main.func2 (3 handlers)
+[GIN-debug] GET    /status                   --> main.main.func3 (3 handlers)
+```
+
+If you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with `gin.DebugPrintRouteFunc`.
+In the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.
+```go
+import (
+	"log"
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	r := gin.Default()
+	gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) {
+		log.Printf("endpoint %v %v %v %v\n", httpMethod, absolutePath, handlerName, nuHandlers)
+	}
+
+	r.POST("/foo", func(c *gin.Context) {
+		c.JSON(http.StatusOK, "foo")
+	})
+
+	r.GET("/bar", func(c *gin.Context) {
+		c.JSON(http.StatusOK, "bar")
+	})
+
+	r.GET("/status", func(c *gin.Context) {
+		c.JSON(http.StatusOK, "ok")
+	})
+
+	// Listen and Server in http://0.0.0.0:8080
+	r.Run()
+}
+```
+
+### Set and get a cookie
+
+```go
+import (
+    "fmt"
+
+    "github.com/gin-gonic/gin"
+)
+
+func main() {
+
+    router := gin.Default()
+
+    router.GET("/cookie", func(c *gin.Context) {
+
+        cookie, err := c.Cookie("gin_cookie")
+
+        if err != nil {
+            cookie = "NotSet"
+            c.SetCookie("gin_cookie", "test", 3600, "/", "localhost", false, true)
+        }
+
+        fmt.Printf("Cookie value: %s \n", cookie)
+    })
+
+    router.Run()
+}
+```
+
+
+## Testing
+
+The `net/http/httptest` package is preferable way for HTTP testing.
+
+```go
+package main
+
+func setupRouter() *gin.Engine {
+	r := gin.Default()
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+	return r
+}
+
+func main() {
+	r := setupRouter()
+	r.Run(":8080")
+}
+```
+
+Test for code example above:
+
+```go
+package main
+
+import (
+	"net/http"
+	"net/http/httptest"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+)
+
+func TestPingRoute(t *testing.T) {
+	router := setupRouter()
+
+	w := httptest.NewRecorder()
+	req, _ := http.NewRequest("GET", "/ping", nil)
+	router.ServeHTTP(w, req)
+
+	assert.Equal(t, 200, w.Code)
+	assert.Equal(t, "pong", w.Body.String())
+}
+```
+
+## Users
@@ -135 +2064 @@ Gin is the work of hundreds of contributors. We appreciate your help!
-Please see [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.
+Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framework.
@@ -136,0 +2066,5 @@ Please see [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and
+* [gorush](https://github.com/appleboy/gorush): A push notification server written in Go.
+* [fnproject](https://github.com/fnproject/fn): The container native, cloud agnostic serverless platform.
+* [photoprism](https://github.com/photoprism/photoprism): Personal photo management powered by Go and Google TensorFlow.
+* [krakend](https://github.com/devopsfaith/krakend): Ultra performant API Gateway with middlewares.
+* [picfit](https://github.com/thoas/picfit): An image resizing server written in Go.
diff --git a/README.md b/README.md
index b46c563..d3433ed 100644
--- a/README.md
+++ b/README.md
@@ -34 +34 @@ For more feature details, please see the [Gin website introduction](https://gin-
-The first need [Go](https://golang.org/) installed (version 1.6+ is required), then you can use the below Go command to install Gin.
+The first need [Go](https://golang.org/) installed (**version 1.6+ is required**), then you can use the below Go command to install Gin.
@@ -113,0 +114,2 @@ You can find many useful Gin middlewares at [gin-contrib](https://github.com/gin
+See [API documentation and descriptions](https://godoc.org/github.com/gin-gonic/gin) for package.
+
diff --git a/README.md b/README.md
index f9c10b2..b46c563 100644
--- a/README.md
+++ b/README.md
@@ -119 +119 @@ All documentation is available on the Gin website.
-- [にほんご](https://gin-gonic.com/ja/docs/)
+- [日本語](https://gin-gonic.com/ja/docs/)
diff --git a/README.md b/README.md
index df5302e..f9c10b2 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-![Gin console logger](testdata/assets/console.png)
+**The key features of Gin are:**
@@ -18 +18,9 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-## Contents
+- Zero allocation router
+- Fast
+- Middleware support
+- Crash-free
+- JSON validation
+- Routes grouping
+- Error management
+- Rendering built-in
+- Extendable
@@ -20,48 +28 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-- [Installation](#installation)
-- [Prerequisite](#prerequisite)
-- [Quick start](#quick-start)
-- [Benchmarks](#benchmarks)
-- [Gin v1.stable](#gin-v1-stable)
-- [Build with jsoniter](#build-with-jsoniter)
-- [API Examples](#api-examples)
-    - [Using GET,POST,PUT,PATCH,DELETE and OPTIONS](#using-get-post-put-patch-delete-and-options)
-    - [Parameters in path](#parameters-in-path)
-    - [Querystring parameters](#querystring-parameters)
-    - [Multipart/Urlencoded Form](#multiparturlencoded-form)
-    - [Another example: query + post form](#another-example-query--post-form)
-    - [Map as querystring or postform parameters](#map-as-querystring-or-postform-parameters)
-    - [Upload files](#upload-files)
-    - [Grouping routes](#grouping-routes)
-    - [Blank Gin without middleware by default](#blank-gin-without-middleware-by-default)
-    - [Using middleware](#using-middleware)
-    - [How to write log file](#how-to-write-log-file)
-    - [Custom Log Format](#custom-log-format)
-    - [Model binding and validation](#model-binding-and-validation)
-    - [Custom Validators](#custom-validators)
-    - [Only Bind Query String](#only-bind-query-string)
-    - [Bind Query String or Post Data](#bind-query-string-or-post-data)
-    - [Bind Uri](#bind-uri)
-    - [Bind HTML checkboxes](#bind-html-checkboxes)
-    - [Multipart/Urlencoded binding](#multiparturlencoded-binding)
-    - [XML, JSON, YAML and ProtoBuf rendering](#xml-json-yaml-and-protobuf-rendering)
-    - [JSONP rendering](#jsonp)
-    - [Serving static files](#serving-static-files)
-    - [Serving data from reader](#serving-data-from-reader)
-    - [HTML rendering](#html-rendering)
-    - [Multitemplate](#multitemplate)
-    - [Redirects](#redirects)
-    - [Custom Middleware](#custom-middleware)
-    - [Using BasicAuth() middleware](#using-basicauth-middleware)
-    - [Goroutines inside a middleware](#goroutines-inside-a-middleware)
-    - [Custom HTTP configuration](#custom-http-configuration)
-    - [Support Let's Encrypt](#support-lets-encrypt)
-    - [Run multiple service using Gin](#run-multiple-service-using-gin)
-    - [Graceful restart or stop](#graceful-restart-or-stop)
-    - [Build a single binary with templates](#build-a-single-binary-with-templates)
-    - [Bind form-data request with custom struct](#bind-form-data-request-with-custom-struct)
-    - [Try to bind body into different structs](#try-to-bind-body-into-different-structs)
-    - [http2 server push](#http2-server-push)
-    - [Define format for the log of routes](#define-format-for-the-log-of-routes)
-    - [Set and get a cookie](#set-and-get-a-cookie)
-- [Testing](#testing)
-- [Users](#users)
+For more feature details, please see the [Gin website introduction](https://gin-gonic.com/docs/introduction/).
@@ -69 +30 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-## Installation
+## Getting started
@@ -71 +32 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-To install Gin package, you need to install Go and set your Go workspace first.
+### Getting Gin
@@ -73 +34 @@ To install Gin package, you need to install Go and set your Go workspace first.
-1. Download and install it:
+The first need [Go](https://golang.org/) installed (version 1.6+ is required), then you can use the below Go command to install Gin.
@@ -79 +40 @@ $ go get -u github.com/gin-gonic/gin
-2. Import it in your code:
+For more installation guides such as vendor tool, please check out [Gin quickstart](https://gin-gonic.com/docs/quickstart/).
@@ -81,24 +42 @@ $ go get -u github.com/gin-gonic/gin
-```go
-import "github.com/gin-gonic/gin"
-```
-
-3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
-
-```go
-import "net/http"
-```
-
-### Use a vendor tool like [Govendor](https://github.com/kardianos/govendor)
-
-1. `go get` govendor
-
-```sh
-$ go get github.com/kardianos/govendor
-```
-2. Create your project folder and `cd` inside
-
-```sh
-$ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
-```
-
-3. Vendor init your project and add gin
+### Running Gin
@@ -106,27 +44 @@ $ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
-```sh
-$ govendor init
-$ govendor fetch github.com/gin-gonic/gin@v1.3
-```
-
-4. Copy a starting template inside your project
-
-```sh
-$ curl https://raw.githubusercontent.com/gin-gonic/examples/master/basic/main.go > main.go
-```
-
-5. Run your project
-
-```sh
-$ go run main.go
-```
-
-## Prerequisite
-
-Now Gin requires Go 1.6 or later and Go 1.7 will be required soon.
-
-## Quick start
- 
-```sh
-# assume the following codes in example.go file
-$ cat example.go
-```
+First you need to import Gin package for using Gin, one simplest example likes the follow `example.go`:
@@ -149,0 +62,2 @@ func main() {
+And use the Go command to run the demo:
+
@@ -157,3 +71 @@ $ go run example.go
-Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httprouter)
-
-[See all benchmarks](/BENCHMARKS.md)
+Please see all benchmarks details from [Gin website](https://gin-gonic.com/docs/benchmarks/).
@@ -196,194 +108 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-## Gin v1. stable
-
-- [x] Zero allocation router.
-- [x] Still the fastest http router and framework. From routing to writing.
-- [x] Complete suite of unit tests
-- [x] Battle tested
-- [x] API frozen, new releases will not break your code.
-
-## Build with [jsoniter](https://github.com/json-iterator/go)
-
-Gin uses `encoding/json` as default json package but you can change to [jsoniter](https://github.com/json-iterator/go) by build from other tags.
-
-```sh
-$ go build -tags=jsoniter .
-```
-
-## API Examples
-
-You can find a number of ready-to-run examples at [Gin examples repository](https://github.com/gin-gonic/examples).
-
-### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
-
-```go
-func main() {
-	// Creates a gin router with default middleware:
-	// logger and recovery (crash-free) middleware
-	router := gin.Default()
-
-	router.GET("/someGet", getting)
-	router.POST("/somePost", posting)
-	router.PUT("/somePut", putting)
-	router.DELETE("/someDelete", deleting)
-	router.PATCH("/somePatch", patching)
-	router.HEAD("/someHead", head)
-	router.OPTIONS("/someOptions", options)
-
-	// By default it serves on :8080 unless a
-	// PORT environment variable was defined.
-	router.Run()
-	// router.Run(":3000") for a hard coded port
-}
-```
-
-### Parameters in path
-
-```go
-func main() {
-	router := gin.Default()
-
-	// This handler will match /user/john but will not match /user/ or /user
-	router.GET("/user/:name", func(c *gin.Context) {
-		name := c.Param("name")
-		c.String(http.StatusOK, "Hello %s", name)
-	})
-
-	// However, this one will match /user/john/ and also /user/john/send
-	// If no other routers match /user/john, it will redirect to /user/john/
-	router.GET("/user/:name/*action", func(c *gin.Context) {
-		name := c.Param("name")
-		action := c.Param("action")
-		message := name + " is " + action
-		c.String(http.StatusOK, message)
-	})
-
-	router.Run(":8080")
-}
-```
-
-### Querystring parameters
-
-```go
-func main() {
-	router := gin.Default()
-
-	// Query string parameters are parsed using the existing underlying request object.
-	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-	router.GET("/welcome", func(c *gin.Context) {
-		firstname := c.DefaultQuery("firstname", "Guest")
-		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
-
-		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-	})
-	router.Run(":8080")
-}
-```
-
-### Multipart/Urlencoded Form
-
-```go
-func main() {
-	router := gin.Default()
-
-	router.POST("/form_post", func(c *gin.Context) {
-		message := c.PostForm("message")
-		nick := c.DefaultPostForm("nick", "anonymous")
-
-		c.JSON(200, gin.H{
-			"status":  "posted",
-			"message": message,
-			"nick":    nick,
-		})
-	})
-	router.Run(":8080")
-}
-```
-
-### Another example: query + post form
-
-```
-POST /post?id=1234&page=1 HTTP/1.1
-Content-Type: application/x-www-form-urlencoded
-
-name=manu&message=this_is_great
-```
-
-```go
-func main() {
-	router := gin.Default()
-
-	router.POST("/post", func(c *gin.Context) {
-
-		id := c.Query("id")
-		page := c.DefaultQuery("page", "0")
-		name := c.PostForm("name")
-		message := c.PostForm("message")
-
-		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
-	})
-	router.Run(":8080")
-}
-```
-
-```
-id: 1234; page: 1; name: manu; message: this_is_great
-```
-
-### Map as querystring or postform parameters
-
-```
-POST /post?ids[a]=1234&ids[b]=hello HTTP/1.1
-Content-Type: application/x-www-form-urlencoded
-
-names[first]=thinkerou&names[second]=tianou
-```
-
-```go
-func main() {
-	router := gin.Default()
-
-	router.POST("/post", func(c *gin.Context) {
-
-		ids := c.QueryMap("ids")
-		names := c.PostFormMap("names")
-
-		fmt.Printf("ids: %v; names: %v", ids, names)
-	})
-	router.Run(":8080")
-}
-```
-
-```
-ids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]
-```
-
-### Upload files
-
-#### Single file
-
-References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](https://github.com/gin-gonic/examples/tree/master/upload-file/single).
-
-`file.Filename` **SHOULD NOT** be trusted. See [`Content-Disposition` on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#Directives) and [#1693](https://github.com/gin-gonic/gin/issues/1693)
-
-> The filename is always optional and must not be used blindly by the application: path information should be stripped, and conversion to the server file system rules should be done.
-
-```go
-func main() {
-	router := gin.Default()
-	// Set a lower memory limit for multipart forms (default is 32 MiB)
-	// router.MaxMultipartMemory = 8 << 20  // 8 MiB
-	router.POST("/upload", func(c *gin.Context) {
-		// single file
-		file, _ := c.FormFile("file")
-		log.Println(file.Filename)
-
-		// Upload the file to specific dst.
-		// c.SaveUploadedFile(file, dst)
-
-		c.String(http.StatusOK, fmt.Sprintf("'%s' uploaded!", file.Filename))
-	})
-	router.Run(":8080")
-}
-```
-
-How to `curl`:
+## Middlewares
@@ -391,289 +110 @@ How to `curl`:
-```bash
-curl -X POST http://localhost:8080/upload \
-  -F "file=@/Users/appleboy/test.zip" \
-  -H "Content-Type: multipart/form-data"
-```
-
-#### Multiple files
-
-See the detail [example code](https://github.com/gin-gonic/examples/tree/master/upload-file/multiple).
-
-```go
-func main() {
-	router := gin.Default()
-	// Set a lower memory limit for multipart forms (default is 32 MiB)
-	// router.MaxMultipartMemory = 8 << 20  // 8 MiB
-	router.POST("/upload", func(c *gin.Context) {
-		// Multipart form
-		form, _ := c.MultipartForm()
-		files := form.File["upload[]"]
-
-		for _, file := range files {
-			log.Println(file.Filename)
-
-			// Upload the file to specific dst.
-			// c.SaveUploadedFile(file, dst)
-		}
-		c.String(http.StatusOK, fmt.Sprintf("%d files uploaded!", len(files)))
-	})
-	router.Run(":8080")
-}
-```
-
-How to `curl`:
-
-```bash
-curl -X POST http://localhost:8080/upload \
-  -F "upload[]=@/Users/appleboy/test1.zip" \
-  -F "upload[]=@/Users/appleboy/test2.zip" \
-  -H "Content-Type: multipart/form-data"
-```
-
-### Grouping routes
-
-```go
-func main() {
-	router := gin.Default()
-
-	// Simple group: v1
-	v1 := router.Group("/v1")
-	{
-		v1.POST("/login", loginEndpoint)
-		v1.POST("/submit", submitEndpoint)
-		v1.POST("/read", readEndpoint)
-	}
-
-	// Simple group: v2
-	v2 := router.Group("/v2")
-	{
-		v2.POST("/login", loginEndpoint)
-		v2.POST("/submit", submitEndpoint)
-		v2.POST("/read", readEndpoint)
-	}
-
-	router.Run(":8080")
-}
-```
-
-### Blank Gin without middleware by default
-
-Use
-
-```go
-r := gin.New()
-```
-
-instead of
-
-```go
-// Default With the Logger and Recovery middleware already attached
-r := gin.Default()
-```
-
-
-### Using middleware
-```go
-func main() {
-	// Creates a router without any middleware by default
-	r := gin.New()
-
-	// Global middleware
-	// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.
-	// By default gin.DefaultWriter = os.Stdout
-	r.Use(gin.Logger())
-
-	// Recovery middleware recovers from any panics and writes a 500 if there was one.
-	r.Use(gin.Recovery())
-
-	// Per route middleware, you can add as many as you desire.
-	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
-
-	// Authorization group
-	// authorized := r.Group("/", AuthRequired())
-	// exactly the same as:
-	authorized := r.Group("/")
-	// per group middleware! in this case we use the custom created
-	// AuthRequired() middleware just in the "authorized" group.
-	authorized.Use(AuthRequired())
-	{
-		authorized.POST("/login", loginEndpoint)
-		authorized.POST("/submit", submitEndpoint)
-		authorized.POST("/read", readEndpoint)
-
-		// nested group
-		testing := authorized.Group("testing")
-		testing.GET("/analytics", analyticsEndpoint)
-	}
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-### How to write log file
-```go
-func main() {
-    // Disable Console Color, you don't need console color when writing the logs to file.
-    gin.DisableConsoleColor()
-
-    // Logging to a file.
-    f, _ := os.Create("gin.log")
-    gin.DefaultWriter = io.MultiWriter(f)
-
-    // Use the following code if you need to write the logs to file and console at the same time.
-    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)
-
-    router := gin.Default()
-    router.GET("/ping", func(c *gin.Context) {
-        c.String(200, "pong")
-    })
-
-    router.Run(":8080")
-}
-```
-
-### Custom Log Format
-```go
-func main() {
-	router := gin.New()
-
-	// LoggerWithFormatter middleware will write the logs to gin.DefaultWriter
-	// By default gin.DefaultWriter = os.Stdout
-	router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
-
-		// your custom format
-		return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
-				param.ClientIP,
-				param.TimeStamp.Format(time.RFC1123),
-				param.Method,
-				param.Path,
-				param.Request.Proto,
-				param.StatusCode,
-				param.Latency,
-				param.Request.UserAgent(),
-				param.ErrorMessage,
-		)
-	}))
-	router.Use(gin.Recovery())
-
-	router.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	router.Run(":8080")
-}
-```
-
-**Sample Output**
-```
-::1 - [Fri, 07 Dec 2018 17:04:38 JST] "GET /ping HTTP/1.1 200 122.767µs "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36" "
-```
-
-### Controlling Log output coloring 
-
-By default, logs output on console should be colorized depending on the detected TTY.
-
-Never colorize logs: 
-
-```go
-func main() {
-    // Disable log's color
-    gin.DisableConsoleColor()
-    
-    // Creates a gin router with default middleware:
-    // logger and recovery (crash-free) middleware
-    router := gin.Default()
-    
-    router.GET("/ping", func(c *gin.Context) {
-        c.String(200, "pong")
-    })
-    
-    router.Run(":8080")
-}
-```
-
-Always colorize logs: 
-
-```go
-func main() {
-    // Force log's color
-    gin.ForceConsoleColor()
-    
-    // Creates a gin router with default middleware:
-    // logger and recovery (crash-free) middleware
-    router := gin.Default()
-    
-    router.GET("/ping", func(c *gin.Context) {
-        c.String(200, "pong")
-    })
-    
-    router.Run(":8080")
-}
-```
-
-### Model binding and validation
-
-To bind a request body into a type, use model binding. We currently support binding of JSON, XML, YAML and standard form values (foo=bar&boo=baz).
-
-Gin uses [**go-playground/validator.v8**](https://github.com/go-playground/validator) for validation. Check the full docs on tags usage [here](http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags).
-
-Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set `json:"fieldname"`.
-
-Also, Gin provides two sets of methods for binding:
-- **Type** - Must bind
-  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`, `BindYAML`
-  - **Behavior** - These methods use `MustBindWith` under the hood. If there is a binding error, the request is aborted with `c.AbortWithError(400, err).SetType(ErrorTypeBind)`. This sets the response status code to 400 and the `Content-Type` header is set to `text/plain; charset=utf-8`. Note that if you try to set the response code after this, it will result in a warning `[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422`. If you wish to have greater control over the behavior, consider using the `ShouldBind` equivalent method.
-- **Type** - Should bind
-  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`, `ShouldBindYAML`
-  - **Behavior** - These methods use `ShouldBindWith` under the hood. If there is a binding error, the error is returned and it is the developer's responsibility to handle the request and error appropriately.
-
-When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use `MustBindWith` or `ShouldBindWith`.
-
-You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, an error will be returned.
-
-```go
-// Binding from JSON
-type Login struct {
-	User     string `form:"user" json:"user" xml:"user"  binding:"required"`
-	Password string `form:"password" json:"password" xml:"password" binding:"required"`
-}
-
-func main() {
-	router := gin.Default()
-
-	// Example for binding JSON ({"user": "manu", "password": "123"})
-	router.POST("/loginJSON", func(c *gin.Context) {
-		var json Login
-		if err := c.ShouldBindJSON(&json); err != nil {
-			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
-			return
-		}
-		
-		if json.User != "manu" || json.Password != "123" {
-			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			return
-		} 
-		
-		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-	})
-
-	// Example for binding XML (
-	//	<?xml version="1.0" encoding="UTF-8"?>
-	//	<root>
-	//		<user>user</user>
-	//		<password>123</password>
-	//	</root>)
-	router.POST("/loginXML", func(c *gin.Context) {
-		var xml Login
-		if err := c.ShouldBindXML(&xml); err != nil {
-			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
-			return
-		}
-		
-		if xml.User != "manu" || xml.Password != "123" {
-			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			return
-		} 
-		
-		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-	})
+You can find many useful Gin middlewares at [gin-contrib](https://github.com/gin-contrib).
@@ -681,94 +112 @@ func main() {
-	// Example for binding a HTML form (user=manu&password=123)
-	router.POST("/loginForm", func(c *gin.Context) {
-		var form Login
-		// This will infer what binder to use depending on the content-type header.
-		if err := c.ShouldBind(&form); err != nil {
-			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
-			return
-		}
-		
-		if form.User != "manu" || form.Password != "123" {
-			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			return
-		} 
-		
-		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	router.Run(":8080")
-}
-```
-
-**Sample request**
-```shell
-$ curl -v -X POST \
-  http://localhost:8080/loginJSON \
-  -H 'content-type: application/json' \
-  -d '{ "user": "manu" }'
-> POST /loginJSON HTTP/1.1
-> Host: localhost:8080
-> User-Agent: curl/7.51.0
-> Accept: */*
-> content-type: application/json
-> Content-Length: 18
->
-* upload completely sent off: 18 out of 18 bytes
-< HTTP/1.1 400 Bad Request
-< Content-Type: application/json; charset=utf-8
-< Date: Fri, 04 Aug 2017 03:51:31 GMT
-< Content-Length: 100
-<
-{"error":"Key: 'Login.Password' Error:Field validation for 'Password' failed on the 'required' tag"}
-```
-
-**Skip validate**
-
-When running the above example using the above the `curl` command, it returns error. Because the example use `binding:"required"` for `Password`. If use `binding:"-"` for `Password`, then it will not return error when running the above example again.
-
-### Custom Validators
-
-It is also possible to register custom validators. See the [example code](https://github.com/gin-gonic/examples/tree/master/custom-validation/server.go).
-
-```go
-package main
-
-import (
-	"net/http"
-	"reflect"
-	"time"
-
-	"github.com/gin-gonic/gin"
-	"github.com/gin-gonic/gin/binding"
-	"gopkg.in/go-playground/validator.v8"
-)
-
-// Booking contains binded and validated data.
-type Booking struct {
-	CheckIn  time.Time `form:"check_in" binding:"required,bookabledate" time_format:"2006-01-02"`
-	CheckOut time.Time `form:"check_out" binding:"required,gtfield=CheckIn" time_format:"2006-01-02"`
-}
-
-func bookableDate(
-	v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,
-	field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string,
-) bool {
-	if date, ok := field.Interface().(time.Time); ok {
-		today := time.Now()
-		if today.Year() > date.Year() || today.YearDay() > date.YearDay() {
-			return false
-		}
-	}
-	return true
-}
-
-func main() {
-	route := gin.Default()
-
-	if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
-		v.RegisterValidation("bookabledate", bookableDate)
-	}
-
-	route.GET("/bookable", getBookable)
-	route.Run(":8085")
-}
+## Documentation
@@ -776,17 +114 @@ func main() {
-func getBookable(c *gin.Context) {
-	var b Booking
-	if err := c.ShouldBindWith(&b, binding.Query); err == nil {
-		c.JSON(http.StatusOK, gin.H{"message": "Booking dates are valid!"})
-	} else {
-		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
-	}
-}
-```
-
-```console
-$ curl "localhost:8085/bookable?check_in=2018-04-16&check_out=2018-04-17"
-{"message":"Booking dates are valid!"}
-
-$ curl "localhost:8085/bookable?check_in=2018-03-08&check_out=2018-03-09"
-{"error":"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag"}
-```
+All documentation is available on the Gin website.
@@ -794,2 +116,4 @@ $ curl "localhost:8085/bookable?check_in=2018-03-08&check_out=2018-03-09"
-[Struct level validations](https://github.com/go-playground/validator/releases/tag/v8.7) can also be registered this way.
-See the [struct-lvl-validation example](https://github.com/gin-gonic/examples/tree/master/struct-lvl-validations) to learn more.
+- [English](https://gin-gonic.com/docs/)
+- [简体中文](https://gin-gonic.com/zh-cn/docs/)
+- [繁體中文](https://gin-gonic.com/zh-tw/docs/)
+- [にほんご](https://gin-gonic.com/ja/docs/)
@@ -797 +121 @@ See the [struct-lvl-validation example](https://github.com/gin-gonic/examples/tr
-### Only Bind Query String
+## Examples
@@ -799 +123 @@ See the [struct-lvl-validation example](https://github.com/gin-gonic/examples/tr
-`ShouldBindQuery` function only binds the query params and not the post data. See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017).
+A number of ready-to-run examples demonstrating various use cases of Gin on the [Gin examples](https://github.com/gin-gonic/examples) repository.
@@ -801,2 +125 @@ See the [struct-lvl-validation example](https://github.com/gin-gonic/examples/tr
-```go
-package main
+## Users
@@ -804,2 +127 @@ package main
-import (
-	"log"
+[Gin website](https://gin-gonic.com/docs/users/) lists some awesome projects made with Gin web framework.
@@ -807,2 +129 @@ import (
-	"github.com/gin-gonic/gin"
-)
+## Contributing
@@ -810,1254 +131 @@ import (
-type Person struct {
-	Name    string `form:"name"`
-	Address string `form:"address"`
-}
-
-func main() {
-	route := gin.Default()
-	route.Any("/testing", startPage)
-	route.Run(":8085")
-}
-
-func startPage(c *gin.Context) {
-	var person Person
-	if c.ShouldBindQuery(&person) == nil {
-		log.Println("====== Only Bind By Query String ======")
-		log.Println(person.Name)
-		log.Println(person.Address)
-	}
-	c.String(200, "Success")
-}
-
-```
-
-### Bind Query String or Post Data
-
-See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
-
-```go
-package main
-
-import (
-	"log"
-	"time"
-
-	"github.com/gin-gonic/gin"
-)
-
-type Person struct {
-	Name     string    `form:"name"`
-	Address  string    `form:"address"`
-	Birthday time.Time `form:"birthday" time_format:"2006-01-02" time_utc:"1"`
-}
-
-func main() {
-	route := gin.Default()
-	route.GET("/testing", startPage)
-	route.Run(":8085")
-}
-
-func startPage(c *gin.Context) {
-	var person Person
-	// If `GET`, only `Form` binding engine (`query`) used.
-	// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).
-	// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48
-	if c.ShouldBind(&person) == nil {
-		log.Println(person.Name)
-		log.Println(person.Address)
-		log.Println(person.Birthday)
-	}
-
-	c.String(200, "Success")
-}
-```
-
-Test it with:
-```sh
-$ curl -X GET "localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03-15"
-```
-
-### Bind Uri
-
-See the [detail information](https://github.com/gin-gonic/gin/issues/846).
-
-```go
-package main
-
-import "github.com/gin-gonic/gin"
-
-type Person struct {
-	ID string `uri:"id" binding:"required,uuid"`
-	Name string `uri:"name" binding:"required"`
-}
-
-func main() {
-	route := gin.Default()
-	route.GET("/:name/:id", func(c *gin.Context) {
-		var person Person
-		if err := c.ShouldBindUri(&person); err != nil {
-			c.JSON(400, gin.H{"msg": err})
-			return
-		}
-		c.JSON(200, gin.H{"name": person.Name, "uuid": person.ID})
-	})
-	route.Run(":8088")
-}
-```
-
-Test it with:
-```sh
-$ curl -v localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3
-$ curl -v localhost:8088/thinkerou/not-uuid
-```
-
-### Bind HTML checkboxes
-
-See the [detail information](https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092)
-
-main.go
-
-```go
-...
-
-type myForm struct {
-    Colors []string `form:"colors[]"`
-}
-
-...
-
-func formHandler(c *gin.Context) {
-    var fakeForm myForm
-    c.ShouldBind(&fakeForm)
-    c.JSON(200, gin.H{"color": fakeForm.Colors})
-}
-
-...
-
-```
-
-form.html
-
-```html
-<form action="/" method="POST">
-    <p>Check some colors</p>
-    <label for="red">Red</label>
-    <input type="checkbox" name="colors[]" value="red" id="red">
-    <label for="green">Green</label>
-    <input type="checkbox" name="colors[]" value="green" id="green">
-    <label for="blue">Blue</label>
-    <input type="checkbox" name="colors[]" value="blue" id="blue">
-    <input type="submit">
-</form>
-```
-
-result:
-
-```
-{"color":["red","green","blue"]}
-```
-
-### Multipart/Urlencoded binding
-
-```go
-package main
-
-import (
-	"github.com/gin-gonic/gin"
-)
-
-type LoginForm struct {
-	User     string `form:"user" binding:"required"`
-	Password string `form:"password" binding:"required"`
-}
-
-func main() {
-	router := gin.Default()
-	router.POST("/login", func(c *gin.Context) {
-		// you can bind multipart form with explicit binding declaration:
-		// c.ShouldBindWith(&form, binding.Form)
-		// or you can simply use autobinding with ShouldBind method:
-		var form LoginForm
-		// in this case proper binding will be automatically selected
-		if c.ShouldBind(&form) == nil {
-			if form.User == "user" && form.Password == "password" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
-	})
-	router.Run(":8080")
-}
-```
-
-Test it with:
-```sh
-$ curl -v --form user=user --form password=password http://localhost:8080/login
-```
-
-### XML, JSON, YAML and ProtoBuf rendering
-
-```go
-func main() {
-	r := gin.Default()
-
-	// gin.H is a shortcut for map[string]interface{}
-	r.GET("/someJSON", func(c *gin.Context) {
-		c.JSON(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
-	})
-
-	r.GET("/moreJSON", func(c *gin.Context) {
-		// You also can use a struct
-		var msg struct {
-			Name    string `json:"user"`
-			Message string
-			Number  int
-		}
-		msg.Name = "Lena"
-		msg.Message = "hey"
-		msg.Number = 123
-		// Note that msg.Name becomes "user" in the JSON
-		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
-		c.JSON(http.StatusOK, msg)
-	})
-
-	r.GET("/someXML", func(c *gin.Context) {
-		c.XML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
-	})
-
-	r.GET("/someYAML", func(c *gin.Context) {
-		c.YAML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
-	})
-
-	r.GET("/someProtoBuf", func(c *gin.Context) {
-		reps := []int64{int64(1), int64(2)}
-		label := "test"
-		// The specific definition of protobuf is written in the testdata/protoexample file.
-		data := &protoexample.Test{
-			Label: &label,
-			Reps:  reps,
-		}
-		// Note that data becomes binary data in the response
-		// Will output protoexample.Test protobuf serialized data
-		c.ProtoBuf(http.StatusOK, data)
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-#### SecureJSON
-
-Using SecureJSON to prevent json hijacking. Default prepends `"while(1),"` to response body if the given struct is array values.
-
-```go
-func main() {
-	r := gin.Default()
-
-	// You can also use your own secure json prefix
-	// r.SecureJsonPrefix(")]}',\n")
-
-	r.GET("/someJSON", func(c *gin.Context) {
-		names := []string{"lena", "austin", "foo"}
-
-		// Will output  :   while(1);["lena","austin","foo"]
-		c.SecureJSON(http.StatusOK, names)
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-#### JSONP
-
-Using JSONP to request data from a server  in a different domain. Add callback to response body if the query parameter callback exists.
-
-```go
-func main() {
-	r := gin.Default()
-
-	r.GET("/JSONP?callback=x", func(c *gin.Context) {
-		data := map[string]interface{}{
-			"foo": "bar",
-		}
-		
-		//callback is x
-		// Will output  :   x({\"foo\":\"bar\"})
-		c.JSONP(http.StatusOK, data)
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-#### AsciiJSON
-
-Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII chracters.
-
-```go
-func main() {
-	r := gin.Default()
-
-	r.GET("/someJSON", func(c *gin.Context) {
-		data := map[string]interface{}{
-			"lang": "GO语言",
-			"tag":  "<br>",
-		}
-
-		// will output : {"lang":"GO\u8bed\u8a00","tag":"\u003cbr\u003e"}
-		c.AsciiJSON(http.StatusOK, data)
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-#### PureJSON
-
-Normally, JSON replaces special HTML characters with their unicode entities, e.g. `<` becomes  `\u003c`. If you want to encode such characters literally, you can use PureJSON instead.
-This feature is unavailable in Go 1.6 and lower.
-
-```go
-func main() {
-	r := gin.Default()
-	
-	// Serves unicode entities
-	r.GET("/json", func(c *gin.Context) {
-		c.JSON(200, gin.H{
-			"html": "<b>Hello, world!</b>",
-		})
-	})
-	
-	// Serves literal characters
-	r.GET("/purejson", func(c *gin.Context) {
-		c.PureJSON(200, gin.H{
-			"html": "<b>Hello, world!</b>",
-		})
-	})
-	
-	// listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-### Serving static files
-
-```go
-func main() {
-	router := gin.Default()
-	router.Static("/assets", "./assets")
-	router.StaticFS("/more_static", http.Dir("my_file_system"))
-	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
-
-	// Listen and serve on 0.0.0.0:8080
-	router.Run(":8080")
-}
-```
-
-### Serving data from reader
-
-```go
-func main() {
-	router := gin.Default()
-	router.GET("/someDataFromReader", func(c *gin.Context) {
-		response, err := http.Get("https://raw.githubusercontent.com/gin-gonic/logo/master/color.png")
-		if err != nil || response.StatusCode != http.StatusOK {
-			c.Status(http.StatusServiceUnavailable)
-			return
-		}
-
-		reader := response.Body
-		contentLength := response.ContentLength
-		contentType := response.Header.Get("Content-Type")
-
-		extraHeaders := map[string]string{
-			"Content-Disposition": `attachment; filename="gopher.png"`,
-		}
-
-		c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)
-	})
-	router.Run(":8080")
-}
-```
-
-### HTML rendering
-
-Using LoadHTMLGlob() or LoadHTMLFiles()
-
-```go
-func main() {
-	router := gin.Default()
-	router.LoadHTMLGlob("templates/*")
-	//router.LoadHTMLFiles("templates/template1.html", "templates/template2.html")
-	router.GET("/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "index.tmpl", gin.H{
-			"title": "Main website",
-		})
-	})
-	router.Run(":8080")
-}
-```
-
-templates/index.tmpl
-
-```html
-<html>
-	<h1>
-		{{ .title }}
-	</h1>
-</html>
-```
-
-Using templates with same name in different directories
-
-```go
-func main() {
-	router := gin.Default()
-	router.LoadHTMLGlob("templates/**/*")
-	router.GET("/posts/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
-			"title": "Posts",
-		})
-	})
-	router.GET("/users/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
-			"title": "Users",
-		})
-	})
-	router.Run(":8080")
-}
-```
-
-templates/posts/index.tmpl
-
-```html
-{{ define "posts/index.tmpl" }}
-<html><h1>
-	{{ .title }}
-</h1>
-<p>Using posts/index.tmpl</p>
-</html>
-{{ end }}
-```
-
-templates/users/index.tmpl
-
-```html
-{{ define "users/index.tmpl" }}
-<html><h1>
-	{{ .title }}
-</h1>
-<p>Using users/index.tmpl</p>
-</html>
-{{ end }}
-```
-
-#### Custom Template renderer
-
-You can also use your own html template render
-
-```go
-import "html/template"
-
-func main() {
-	router := gin.Default()
-	html := template.Must(template.ParseFiles("file1", "file2"))
-	router.SetHTMLTemplate(html)
-	router.Run(":8080")
-}
-```
-
-#### Custom Delimiters
-
-You may use custom delims
-
-```go
-	r := gin.Default()
-	r.Delims("{[{", "}]}")
-	r.LoadHTMLGlob("/path/to/templates")
-```
-
-#### Custom Template Funcs
-
-See the detail [example code](https://github.com/gin-gonic/examples/tree/master/template).
-
-main.go
-
-```go
-import (
-    "fmt"
-    "html/template"
-    "net/http"
-    "time"
-
-    "github.com/gin-gonic/gin"
-)
-
-func formatAsDate(t time.Time) string {
-    year, month, day := t.Date()
-    return fmt.Sprintf("%d%02d/%02d", year, month, day)
-}
-
-func main() {
-    router := gin.Default()
-    router.Delims("{[{", "}]}")
-    router.SetFuncMap(template.FuncMap{
-        "formatAsDate": formatAsDate,
-    })
-    router.LoadHTMLFiles("./testdata/template/raw.tmpl")
-
-    router.GET("/raw", func(c *gin.Context) {
-        c.HTML(http.StatusOK, "raw.tmpl", map[string]interface{}{
-            "now": time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),
-        })
-    })
-
-    router.Run(":8080")
-}
-
-```
-
-raw.tmpl
-
-```html
-Date: {[{.now | formatAsDate}]}
-```
-
-Result:
-```
-Date: 2017/07/01
-```
-
-### Multitemplate
-
-Gin allow by default use only one html.Template. Check [a multitemplate render](https://github.com/gin-contrib/multitemplate) for using features like go 1.6 `block template`.
-
-### Redirects
-
-Issuing a HTTP redirect is easy. Both internal and external locations are supported.
-
-```go
-r.GET("/test", func(c *gin.Context) {
-	c.Redirect(http.StatusMovedPermanently, "http://www.google.com/")
-})
-```
-
-
-Issuing a Router redirect, use `HandleContext` like below.
-
-``` go
-r.GET("/test", func(c *gin.Context) {
-    c.Request.URL.Path = "/test2"
-    r.HandleContext(c)
-})
-r.GET("/test2", func(c *gin.Context) {
-    c.JSON(200, gin.H{"hello": "world"})
-})
-```
-
-
-### Custom Middleware
-
-```go
-func Logger() gin.HandlerFunc {
-	return func(c *gin.Context) {
-		t := time.Now()
-
-		// Set example variable
-		c.Set("example", "12345")
-
-		// before request
-
-		c.Next()
-
-		// after request
-		latency := time.Since(t)
-		log.Print(latency)
-
-		// access the status we are sending
-		status := c.Writer.Status()
-		log.Println(status)
-	}
-}
-
-func main() {
-	r := gin.New()
-	r.Use(Logger())
-
-	r.GET("/test", func(c *gin.Context) {
-		example := c.MustGet("example").(string)
-
-		// it would print: "12345"
-		log.Println(example)
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-### Using BasicAuth() middleware
-
-```go
-// simulate some private data
-var secrets = gin.H{
-	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
-	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
-	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
-}
-
-func main() {
-	r := gin.Default()
-
-	// Group using gin.BasicAuth() middleware
-	// gin.Accounts is a shortcut for map[string]string
-	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
-		"foo":    "bar",
-		"austin": "1234",
-		"lena":   "hello2",
-		"manu":   "4321",
-	}))
-
-	// /admin/secrets endpoint
-	// hit "localhost:8080/admin/secrets
-	authorized.GET("/secrets", func(c *gin.Context) {
-		// get user, it was set by the BasicAuth middleware
-		user := c.MustGet(gin.AuthUserKey).(string)
-		if secret, ok := secrets[user]; ok {
-			c.JSON(http.StatusOK, gin.H{"user": user, "secret": secret})
-		} else {
-			c.JSON(http.StatusOK, gin.H{"user": user, "secret": "NO SECRET :("})
-		}
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-### Goroutines inside a middleware
-
-When starting new Goroutines inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
-
-```go
-func main() {
-	r := gin.Default()
-
-	r.GET("/long_async", func(c *gin.Context) {
-		// create copy to be used inside the goroutine
-		cCp := c.Copy()
-		go func() {
-			// simulate a long task with time.Sleep(). 5 seconds
-			time.Sleep(5 * time.Second)
-
-			// note that you are using the copied context "cCp", IMPORTANT
-			log.Println("Done! in path " + cCp.Request.URL.Path)
-		}()
-	})
-
-	r.GET("/long_sync", func(c *gin.Context) {
-		// simulate a long task with time.Sleep(). 5 seconds
-		time.Sleep(5 * time.Second)
-
-		// since we are NOT using a goroutine, we do not have to copy the context
-		log.Println("Done! in path " + c.Request.URL.Path)
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-### Custom HTTP configuration
-
-Use `http.ListenAndServe()` directly, like this:
-
-```go
-func main() {
-	router := gin.Default()
-	http.ListenAndServe(":8080", router)
-}
-```
-or
-
-```go
-func main() {
-	router := gin.Default()
-
-	s := &http.Server{
-		Addr:           ":8080",
-		Handler:        router,
-		ReadTimeout:    10 * time.Second,
-		WriteTimeout:   10 * time.Second,
-		MaxHeaderBytes: 1 << 20,
-	}
-	s.ListenAndServe()
-}
-```
-
-### Support Let's Encrypt
-
-example for 1-line LetsEncrypt HTTPS servers.
-
-```go
-package main
-
-import (
-	"log"
-
-	"github.com/gin-gonic/autotls"
-	"github.com/gin-gonic/gin"
-)
-
-func main() {
-	r := gin.Default()
-
-	// Ping handler
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	log.Fatal(autotls.Run(r, "example1.com", "example2.com"))
-}
-```
-
-example for custom autocert manager.
-
-```go
-package main
-
-import (
-	"log"
-
-	"github.com/gin-gonic/autotls"
-	"github.com/gin-gonic/gin"
-	"golang.org/x/crypto/acme/autocert"
-)
-
-func main() {
-	r := gin.Default()
-
-	// Ping handler
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	m := autocert.Manager{
-		Prompt:     autocert.AcceptTOS,
-		HostPolicy: autocert.HostWhitelist("example1.com", "example2.com"),
-		Cache:      autocert.DirCache("/var/www/.cache"),
-	}
-
-	log.Fatal(autotls.RunWithManager(r, &m))
-}
-```
-
-### Run multiple service using Gin
-
-See the [question](https://github.com/gin-gonic/gin/issues/346) and try the following example:
-
-```go
-package main
-
-import (
-	"log"
-	"net/http"
-	"time"
-
-	"github.com/gin-gonic/gin"
-	"golang.org/x/sync/errgroup"
-)
-
-var (
-	g errgroup.Group
-)
-
-func router01() http.Handler {
-	e := gin.New()
-	e.Use(gin.Recovery())
-	e.GET("/", func(c *gin.Context) {
-		c.JSON(
-			http.StatusOK,
-			gin.H{
-				"code":  http.StatusOK,
-				"error": "Welcome server 01",
-			},
-		)
-	})
-
-	return e
-}
-
-func router02() http.Handler {
-	e := gin.New()
-	e.Use(gin.Recovery())
-	e.GET("/", func(c *gin.Context) {
-		c.JSON(
-			http.StatusOK,
-			gin.H{
-				"code":  http.StatusOK,
-				"error": "Welcome server 02",
-			},
-		)
-	})
-
-	return e
-}
-
-func main() {
-	server01 := &http.Server{
-		Addr:         ":8080",
-		Handler:      router01(),
-		ReadTimeout:  5 * time.Second,
-		WriteTimeout: 10 * time.Second,
-	}
-
-	server02 := &http.Server{
-		Addr:         ":8081",
-		Handler:      router02(),
-		ReadTimeout:  5 * time.Second,
-		WriteTimeout: 10 * time.Second,
-	}
-
-	g.Go(func() error {
-		return server01.ListenAndServe()
-	})
-
-	g.Go(func() error {
-		return server02.ListenAndServe()
-	})
-
-	if err := g.Wait(); err != nil {
-		log.Fatal(err)
-	}
-}
-```
-
-### Graceful restart or stop
-
-Do you want to graceful restart or stop your web server?
-There are some ways this can be done.
-
-We can use [fvbock/endless](https://github.com/fvbock/endless) to replace the default `ListenAndServe`. Refer issue [#296](https://github.com/gin-gonic/gin/issues/296) for more details.
-
-```go
-router := gin.Default()
-router.GET("/", handler)
-// [...]
-endless.ListenAndServe(":4242", router)
-```
-
-An alternative to endless:
-
-* [manners](https://github.com/braintree/manners): A polite Go HTTP server that shuts down gracefully.
-* [graceful](https://github.com/tylerb/graceful): Graceful is a Go package enabling graceful shutdown of an http.Handler server.
-* [grace](https://github.com/facebookgo/grace): Graceful restart & zero downtime deploy for Go servers.
-
-If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](https://github.com/gin-gonic/examples/tree/master/graceful-shutdown) example with gin.
-
-```go
-// +build go1.8
-
-package main
-
-import (
-	"context"
-	"log"
-	"net/http"
-	"os"
-	"os/signal"
-	"syscall"
-	"time"
-
-	"github.com/gin-gonic/gin"
-)
-
-func main() {
-	router := gin.Default()
-	router.GET("/", func(c *gin.Context) {
-		time.Sleep(5 * time.Second)
-		c.String(http.StatusOK, "Welcome Gin Server")
-	})
-
-	srv := &http.Server{
-		Addr:    ":8080",
-		Handler: router,
-	}
-
-	go func() {
-		// service connections
-		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
-			log.Fatalf("listen: %s\n", err)
-		}
-	}()
-
-	// Wait for interrupt signal to gracefully shutdown the server with
-	// a timeout of 5 seconds.
-	quit := make(chan os.Signal)
-	// kill (no param) default send syscanll.SIGTERM
-	// kill -2 is syscall.SIGINT
-	// kill -9 is syscall. SIGKILL but can"t be catch, so don't need add it
-	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
-	<-quit
-	log.Println("Shutdown Server ...")
-
-	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
-	defer cancel()
-	if err := srv.Shutdown(ctx); err != nil {
-		log.Fatal("Server Shutdown:", err)
-	}
-	// catching ctx.Done(). timeout of 5 seconds.
-	select {
-	case <-ctx.Done():
-		log.Println("timeout of 5 seconds.")
-	}
-	log.Println("Server exiting")
-}
-```
-
-### Build a single binary with templates
-
-You can build a server into a single binary containing templates by using [go-assets][].
-
-[go-assets]: https://github.com/jessevdk/go-assets
-
-```go
-func main() {
-	r := gin.New()
-
-	t, err := loadTemplate()
-	if err != nil {
-		panic(err)
-	}
-	r.SetHTMLTemplate(t)
-
-	r.GET("/", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "/html/index.tmpl",nil)
-	})
-	r.Run(":8080")
-}
-
-// loadTemplate loads templates embedded by go-assets-builder
-func loadTemplate() (*template.Template, error) {
-	t := template.New("")
-	for name, file := range Assets.Files {
-		if file.IsDir() || !strings.HasSuffix(name, ".tmpl") {
-			continue
-		}
-		h, err := ioutil.ReadAll(file)
-		if err != nil {
-			return nil, err
-		}
-		t, err = t.New(name).Parse(string(h))
-		if err != nil {
-			return nil, err
-		}
-	}
-	return t, nil
-}
-```
-
-See a complete example in the `https://github.com/gin-gonic/examples/tree/master/assets-in-binary` directory.
-
-### Bind form-data request with custom struct
-
-The follow example using custom struct:
-
-```go
-type StructA struct {
-    FieldA string `form:"field_a"`
-}
-
-type StructB struct {
-    NestedStruct StructA
-    FieldB string `form:"field_b"`
-}
-
-type StructC struct {
-    NestedStructPointer *StructA
-    FieldC string `form:"field_c"`
-}
-
-type StructD struct {
-    NestedAnonyStruct struct {
-        FieldX string `form:"field_x"`
-    }
-    FieldD string `form:"field_d"`
-}
-
-func GetDataB(c *gin.Context) {
-    var b StructB
-    c.Bind(&b)
-    c.JSON(200, gin.H{
-        "a": b.NestedStruct,
-        "b": b.FieldB,
-    })
-}
-
-func GetDataC(c *gin.Context) {
-    var b StructC
-    c.Bind(&b)
-    c.JSON(200, gin.H{
-        "a": b.NestedStructPointer,
-        "c": b.FieldC,
-    })
-}
-
-func GetDataD(c *gin.Context) {
-    var b StructD
-    c.Bind(&b)
-    c.JSON(200, gin.H{
-        "x": b.NestedAnonyStruct,
-        "d": b.FieldD,
-    })
-}
-
-func main() {
-    r := gin.Default()
-    r.GET("/getb", GetDataB)
-    r.GET("/getc", GetDataC)
-    r.GET("/getd", GetDataD)
-
-    r.Run()
-}
-```
-
-Using the command `curl` command result:
-
-```
-$ curl "http://localhost:8080/getb?field_a=hello&field_b=world"
-{"a":{"FieldA":"hello"},"b":"world"}
-$ curl "http://localhost:8080/getc?field_a=hello&field_c=world"
-{"a":{"FieldA":"hello"},"c":"world"}
-$ curl "http://localhost:8080/getd?field_x=hello&field_d=world"
-{"d":"world","x":{"FieldX":"hello"}}
-```
-
-### Try to bind body into different structs
-
-The normal methods for binding request body consumes `c.Request.Body` and they
-cannot be called multiple times.
-
-```go
-type formA struct {
-  Foo string `json:"foo" xml:"foo" binding:"required"`
-}
-
-type formB struct {
-  Bar string `json:"bar" xml:"bar" binding:"required"`
-}
-
-func SomeHandler(c *gin.Context) {
-  objA := formA{}
-  objB := formB{}
-  // This c.ShouldBind consumes c.Request.Body and it cannot be reused.
-  if errA := c.ShouldBind(&objA); errA == nil {
-    c.String(http.StatusOK, `the body should be formA`)
-  // Always an error is occurred by this because c.Request.Body is EOF now.
-  } else if errB := c.ShouldBind(&objB); errB == nil {
-    c.String(http.StatusOK, `the body should be formB`)
-  } else {
-    ...
-  }
-}
-```
-
-For this, you can use `c.ShouldBindBodyWith`.
-
-```go
-func SomeHandler(c *gin.Context) {
-  objA := formA{}
-  objB := formB{}
-  // This reads c.Request.Body and stores the result into the context.
-  if errA := c.ShouldBindBodyWith(&objA, binding.JSON); errA == nil {
-    c.String(http.StatusOK, `the body should be formA`)
-  // At this time, it reuses body stored in the context.
-  } else if errB := c.ShouldBindBodyWith(&objB, binding.JSON); errB == nil {
-    c.String(http.StatusOK, `the body should be formB JSON`)
-  // And it can accepts other formats
-  } else if errB2 := c.ShouldBindBodyWith(&objB, binding.XML); errB2 == nil {
-    c.String(http.StatusOK, `the body should be formB XML`)
-  } else {
-    ...
-  }
-}
-```
-
-* `c.ShouldBindBodyWith` stores body into the context before binding. This has
-a slight impact to performance, so you should not use this method if you are
-enough to call binding at once.
-* This feature is only needed for some formats -- `JSON`, `XML`, `MsgPack`,
-`ProtoBuf`. For other formats, `Query`, `Form`, `FormPost`, `FormMultipart`,
-can be called by `c.ShouldBind()` multiple times without any damage to
-performance (See [#1341](https://github.com/gin-gonic/gin/pull/1341)).
-
-### http2 server push
-
-http.Pusher is supported only **go1.8+**. See the [golang blog](https://blog.golang.org/h2push) for detail information.
-
-```go
-package main
-
-import (
-	"html/template"
-	"log"
-
-	"github.com/gin-gonic/gin"
-)
-
-var html = template.Must(template.New("https").Parse(`
-<html>
-<head>
-  <title>Https Test</title>
-  <script src="/assets/app.js"></script>
-</head>
-<body>
-  <h1 style="color:red;">Welcome, Ginner!</h1>
-</body>
-</html>
-`))
-
-func main() {
-	r := gin.Default()
-	r.Static("/assets", "./assets")
-	r.SetHTMLTemplate(html)
-
-	r.GET("/", func(c *gin.Context) {
-		if pusher := c.Writer.Pusher(); pusher != nil {
-			// use pusher.Push() to do server push
-			if err := pusher.Push("/assets/app.js", nil); err != nil {
-				log.Printf("Failed to push: %v", err)
-			}
-		}
-		c.HTML(200, "https", gin.H{
-			"status": "success",
-		})
-	})
-
-	// Listen and Server in https://127.0.0.1:8080
-	r.RunTLS(":8080", "./testdata/server.pem", "./testdata/server.key")
-}
-```
-
-### Define format for the log of routes
-
-The default log of routes is:
-```
-[GIN-debug] POST   /foo                      --> main.main.func1 (3 handlers)
-[GIN-debug] GET    /bar                      --> main.main.func2 (3 handlers)
-[GIN-debug] GET    /status                   --> main.main.func3 (3 handlers)
-```
-
-If you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with `gin.DebugPrintRouteFunc`.
-In the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.
-```go
-import (
-	"log"
-	"net/http"
-
-	"github.com/gin-gonic/gin"
-)
-
-func main() {
-	r := gin.Default()
-	gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) {
-		log.Printf("endpoint %v %v %v %v\n", httpMethod, absolutePath, handlerName, nuHandlers)
-	}
-
-	r.POST("/foo", func(c *gin.Context) {
-		c.JSON(http.StatusOK, "foo")
-	})
-
-	r.GET("/bar", func(c *gin.Context) {
-		c.JSON(http.StatusOK, "bar")
-	})
-
-	r.GET("/status", func(c *gin.Context) {
-		c.JSON(http.StatusOK, "ok")
-	})
-
-	// Listen and Server in http://0.0.0.0:8080
-	r.Run()
-}
-```
-
-### Set and get a cookie
-
-```go
-import (
-    "fmt"
-
-    "github.com/gin-gonic/gin"
-)
-
-func main() {
-
-    router := gin.Default()
-
-    router.GET("/cookie", func(c *gin.Context) {
-
-        cookie, err := c.Cookie("gin_cookie")
-
-        if err != nil {
-            cookie = "NotSet"
-            c.SetCookie("gin_cookie", "test", 3600, "/", "localhost", false, true)
-        }
-
-        fmt.Printf("Cookie value: %s \n", cookie)
-    })
-
-    router.Run()
-}
-```
-
-
-## Testing
-
-The `net/http/httptest` package is preferable way for HTTP testing.
-
-```go
-package main
-
-func setupRouter() *gin.Engine {
-	r := gin.Default()
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-	return r
-}
-
-func main() {
-	r := setupRouter()
-	r.Run(":8080")
-}
-```
-
-Test for code example above:
-
-```go
-package main
-
-import (
-	"net/http"
-	"net/http/httptest"
-	"testing"
-
-	"github.com/stretchr/testify/assert"
-)
-
-func TestPingRoute(t *testing.T) {
-	router := setupRouter()
-
-	w := httptest.NewRecorder()
-	req, _ := http.NewRequest("GET", "/ping", nil)
-	router.ServeHTTP(w, req)
-
-	assert.Equal(t, 200, w.Code)
-	assert.Equal(t, "pong", w.Body.String())
-}
-```
-
-## Users
+Gin is the work of hundreds of contributors. We appreciate your help!
@@ -2065 +133 @@ func TestPingRoute(t *testing.T) {
-Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framework.
+Please see [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.
@@ -2067,5 +134,0 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
-* [gorush](https://github.com/appleboy/gorush): A push notification server written in Go.
-* [fnproject](https://github.com/fnproject/fn): The container native, cloud agnostic serverless platform.
-* [photoprism](https://github.com/photoprism/photoprism): Personal photo management powered by Go and Google TensorFlow.
-* [krakend](https://github.com/devopsfaith/krakend): Ultra performant API Gateway with middlewares.
-* [picfit](https://github.com/thoas/picfit): An image resizing server written in Go.
diff --git a/README.md b/README.md
index 28ebd74..df5302e 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-![Gin console logger](https://gin-gonic.github.io/gin/other/console.png)
+![Gin console logger](testdata/assets/console.png)
diff --git a/README.md b/README.md
index eb9415f..28ebd74 100644
--- a/README.md
+++ b/README.md
@@ -114 +114 @@ $ govendor fetch github.com/gin-gonic/gin@v1.3
-$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go > main.go
+$ curl https://raw.githubusercontent.com/gin-gonic/examples/master/basic/main.go > main.go
diff --git a/README.md b/README.md
index a22440f..eb9415f 100644
--- a/README.md
+++ b/README.md
@@ -1839,18 +1838,0 @@ $ curl "http://localhost:8080/getd?field_x=hello&field_d=world"
-**NOTE**: NOT support the follow style struct:
-
-```go
-type StructX struct {
-    X struct {} `form:"name_x"` // HERE have form
-}
-
-type StructY struct {
-    Y StructX `form:"name_y"` // HERE have form
-}
-
-type StructZ struct {
-    Z *StructZ `form:"name_z"` // HERE have form
-}
-```
-
-In a word, only support nested custom struct which have no `form` now.
-
diff --git a/README.md b/README.md
index 20e3e58..a22440f 100644
--- a/README.md
+++ b/README.md
@@ -2085 +2084,0 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
-* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go.
diff --git a/README.md b/README.md
index 6cb0e78..20e3e58 100644
--- a/README.md
+++ b/README.md
@@ -213,0 +214,2 @@ $ go build -tags=jsoniter .
+You can find a number of ready-to-run examples at [Gin examples repository](https://github.com/gin-gonic/examples).
+
diff --git a/README.md b/README.md
index a4ced64..6cb0e78 100644
--- a/README.md
+++ b/README.md
@@ -362 +362 @@ ids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]
-References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](examples/upload-file/single).
+References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](https://github.com/gin-gonic/examples/tree/master/upload-file/single).
@@ -397 +397 @@ curl -X POST http://localhost:8080/upload \
-See the detail [example code](examples/upload-file/multiple).
+See the detail [example code](https://github.com/gin-gonic/examples/tree/master/upload-file/multiple).
@@ -729 +729 @@ When running the above example using the above the `curl` command, it returns er
-It is also possible to register custom validators. See the [example code](examples/custom-validation/server.go).
+It is also possible to register custom validators. See the [example code](https://github.com/gin-gonic/examples/tree/master/custom-validation/server.go).
@@ -793 +793 @@ $ curl "localhost:8085/bookable?check_in=2018-03-08&check_out=2018-03-09"
-See the [struct-lvl-validation example](examples/struct-lvl-validations) to learn more.
+See the [struct-lvl-validation example](https://github.com/gin-gonic/examples/tree/master/struct-lvl-validations) to learn more.
@@ -1283 +1283 @@ You may use custom delims
-See the detail [example code](examples/template).
+See the detail [example code](https://github.com/gin-gonic/examples/tree/master/template).
@@ -1657 +1657 @@ An alternative to endless:
-If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](./examples/graceful-shutdown) example with gin.
+If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](https://github.com/gin-gonic/examples/tree/master/graceful-shutdown) example with gin.
@@ -1761 +1761 @@ func loadTemplate() (*template.Template, error) {
-See a complete example in the `examples/assets-in-binary` directory.
+See a complete example in the `https://github.com/gin-gonic/examples/tree/master/assets-in-binary` directory.
diff --git a/README.md b/README.md
index 058eee2..a4ced64 100644
--- a/README.md
+++ b/README.md
@@ -731 +730,0 @@ It is also possible to register custom validators. See the [example code](exampl
-[embedmd]:# (examples/custom-validation/server.go go)
@@ -1504 +1502,0 @@ example for 1-line LetsEncrypt HTTPS servers.
-[embedmd]:# (examples/auto-tls/example1/main.go go)
@@ -1529 +1526,0 @@ example for custom autocert manager.
-[embedmd]:# (examples/auto-tls/example2/main.go go)
@@ -1563 +1559,0 @@ See the [question](https://github.com/gin-gonic/gin/issues/346) and try the foll
-[embedmd]:# (examples/multiple-service/main.go go)
@@ -1663 +1658,0 @@ If you are using Go 1.8, you may not need to use this library! Consider using ht
-[embedmd]:# (examples/graceful-shutdown/graceful-shutdown/server.go go)
@@ -1922 +1916,0 @@ http.Pusher is supported only **go1.8+**. See the [golang blog](https://blog.gol
-[embedmd]:# (examples/http-pusher/main.go go)
diff --git a/README.md b/README.md
index 90f6e1d..058eee2 100644
--- a/README.md
+++ b/README.md
@@ -218,3 +217,0 @@ func main() {
-	// Disable Console Color
-	// gin.DisableConsoleColor()
-
@@ -572,0 +570,42 @@ func main() {
+### Controlling Log output coloring 
+
+By default, logs output on console should be colorized depending on the detected TTY.
+
+Never colorize logs: 
+
+```go
+func main() {
+    // Disable log's color
+    gin.DisableConsoleColor()
+    
+    // Creates a gin router with default middleware:
+    // logger and recovery (crash-free) middleware
+    router := gin.Default()
+    
+    router.GET("/ping", func(c *gin.Context) {
+        c.String(200, "pong")
+    })
+    
+    router.Run(":8080")
+}
+```
+
+Always colorize logs: 
+
+```go
+func main() {
+    // Force log's color
+    gin.ForceConsoleColor()
+    
+    // Creates a gin router with default middleware:
+    // logger and recovery (crash-free) middleware
+    router := gin.Default()
+    
+    router.GET("/ping", func(c *gin.Context) {
+        c.String(200, "pong")
+    })
+    
+    router.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index 3da8785..90f6e1d 100644
--- a/README.md
+++ b/README.md
@@ -1675,0 +1676,5 @@ func main() {
+	// catching ctx.Done(). timeout of 5 seconds.
+	select {
+	case <-ctx.Done():
+		log.Println("timeout of 5 seconds.")
+	}
diff --git a/README.md b/README.md
index 0dcaa8e..3da8785 100644
--- a/README.md
+++ b/README.md
@@ -1635,0 +1636 @@ import (
+	"syscall"
@@ -1663 +1664,4 @@ func main() {
-	signal.Notify(quit, os.Interrupt)
+	// kill (no param) default send syscanll.SIGTERM
+	// kill -2 is syscall.SIGINT
+	// kill -9 is syscall. SIGKILL but can"t be catch, so don't need add it
+	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
diff --git a/README.md b/README.md
index 2dc9e5f..0dcaa8e 100644
--- a/README.md
+++ b/README.md
@@ -623 +623 @@ func main() {
-	//		<password>123</user>
+	//		<password>123</password>
diff --git a/README.md b/README.md
index c1f902a..2dc9e5f 100644
--- a/README.md
+++ b/README.md
@@ -366,0 +367,4 @@ References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail
+`file.Filename` **SHOULD NOT** be trusted. See [`Content-Disposition` on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#Directives) and [#1693](https://github.com/gin-gonic/gin/issues/1693)
+
+> The filename is always optional and must not be used blindly by the application: path information should be stripped, and conversion to the server file system rules should be done.
+
diff --git a/README.md b/README.md
index e7b92b2..c1f902a 100644
--- a/README.md
+++ b/README.md
@@ -37,0 +38 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Custom Log Format](#custom-log-format)
@@ -530,0 +532,37 @@ func main() {
+### Custom Log Format
+```go
+func main() {
+	router := gin.New()
+
+	// LoggerWithFormatter middleware will write the logs to gin.DefaultWriter
+	// By default gin.DefaultWriter = os.Stdout
+	router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
+
+		// your custom format
+		return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
+				param.ClientIP,
+				param.TimeStamp.Format(time.RFC1123),
+				param.Method,
+				param.Path,
+				param.Request.Proto,
+				param.StatusCode,
+				param.Latency,
+				param.Request.UserAgent(),
+				param.ErrorMessage,
+		)
+	}))
+	router.Use(gin.Recovery())
+
+	router.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	router.Run(":8080")
+}
+```
+
+**Sample Output**
+```
+::1 - [Fri, 07 Dec 2018 17:04:38 JST] "GET /ping HTTP/1.1 200 122.767µs "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36" "
+```
+
diff --git a/README.md b/README.md
index 0f74d30..e7b92b2 100644
--- a/README.md
+++ b/README.md
@@ -2003,0 +2004 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
+* [picfit](https://github.com/thoas/picfit): An image resizing server written in Go.
diff --git a/README.md b/README.md
index 3f0c917..0f74d30 100644
--- a/README.md
+++ b/README.md
@@ -2002,0 +2003 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
+* [krakend](https://github.com/devopsfaith/krakend): Ultra performant API Gateway with middlewares.
diff --git a/README.md b/README.md
index 96becfc..3f0c917 100644
--- a/README.md
+++ b/README.md
@@ -41,0 +42 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Bind Uri](#bind-uri)
@@ -795,0 +797,34 @@ $ curl -X GET "localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03
+### Bind Uri
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/846).
+
+```go
+package main
+
+import "github.com/gin-gonic/gin"
+
+type Person struct {
+	ID string `uri:"id" binding:"required,uuid"`
+	Name string `uri:"name" binding:"required"`
+}
+
+func main() {
+	route := gin.Default()
+	route.GET("/:name/:id", func(c *gin.Context) {
+		var person Person
+		if err := c.ShouldBindUri(&person); err != nil {
+			c.JSON(400, gin.H{"msg": err})
+			return
+		}
+		c.JSON(200, gin.H{"name": person.Name, "uuid": person.ID})
+	})
+	route.Run(":8088")
+}
+```
+
+Test it with:
+```sh
+$ curl -v localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3
+$ curl -v localhost:8088/thinkerou/not-uuid
+```
+
diff --git a/README.md b/README.md
index ba2dd57..96becfc 100644
--- a/README.md
+++ b/README.md
@@ -532 +532 @@ func main() {
-To bind a request body into a type, use model binding. We currently support binding of JSON, XML and standard form values (foo=bar&boo=baz).
+To bind a request body into a type, use model binding. We currently support binding of JSON, XML, YAML and standard form values (foo=bar&boo=baz).
@@ -540 +540 @@ Also, Gin provides two sets of methods for binding:
-  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`
+  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`, `BindYAML`
@@ -543 +543 @@ Also, Gin provides two sets of methods for binding:
-  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`
+  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`, `ShouldBindYAML`
diff --git a/README.md b/README.md
index 8c2c2c5..ba2dd57 100644
--- a/README.md
+++ b/README.md
@@ -1025 +1025 @@ func main() {
-	r.Run(":8080)
+	r.Run(":8080")
diff --git a/README.md b/README.md
index ce41332..8c2c2c5 100644
--- a/README.md
+++ b/README.md
@@ -827 +827 @@ form.html
-    <input type="checkbox" name="colors[]" value="red" id="red" />
+    <input type="checkbox" name="colors[]" value="red" id="red">
@@ -829 +829 @@ form.html
-    <input type="checkbox" name="colors[]" value="green" id="green" />
+    <input type="checkbox" name="colors[]" value="green" id="green">
@@ -831,2 +831,2 @@ form.html
-    <input type="checkbox" name="colors[]" value="blue" id="blue" />
-    <input type="submit" />
+    <input type="checkbox" name="colors[]" value="blue" id="blue">
+    <input type="submit">
diff --git a/README.md b/README.md
index 1b5fb49..ce41332 100644
--- a/README.md
+++ b/README.md
@@ -1163 +1163 @@ You may use custom delims
-	r.LoadHTMLGlob("/path/to/templates"))
+	r.LoadHTMLGlob("/path/to/templates")
diff --git a/README.md b/README.md
index 5c14c44..1b5fb49 100644
--- a/README.md
+++ b/README.md
@@ -1966,0 +1967 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
+* [photoprism](https://github.com/photoprism/photoprism): Personal photo management powered by Go and Google TensorFlow.
diff --git a/README.md b/README.md
index 95bd320..5c14c44 100644
--- a/README.md
+++ b/README.md
@@ -62,0 +63 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Set and get a cookie](#set-and-get-a-cookie)
@@ -1882,0 +1884,29 @@ func main() {
+### Set and get a cookie
+
+```go
+import (
+    "fmt"
+
+    "github.com/gin-gonic/gin"
+)
+
+func main() {
+
+    router := gin.Default()
+
+    router.GET("/cookie", func(c *gin.Context) {
+
+        cookie, err := c.Cookie("gin_cookie")
+
+        if err != nil {
+            cookie = "NotSet"
+            c.SetCookie("gin_cookie", "test", 3600, "/", "localhost", false, true)
+        }
+
+        fmt.Printf("Cookie value: %s \n", cookie)
+    })
+
+    router.Run()
+}
+```
+
diff --git a/README.md b/README.md
index 6fd2dd3..95bd320 100644
--- a/README.md
+++ b/README.md
@@ -1724 +1724 @@ type StructY struct {
-    Y StructX `form:"name_y"` // HERE hava form
+    Y StructX `form:"name_y"` // HERE have form
@@ -1728 +1728 @@ type StructZ struct {
-    Z *StructZ `form:"name_z"` // HERE hava form
+    Z *StructZ `form:"name_z"` // HERE have form
diff --git a/README.md b/README.md
index 45bfce5..6fd2dd3 100644
--- a/README.md
+++ b/README.md
@@ -11,0 +12 @@
+[![Release](https://img.shields.io/github/release/gin-gonic/gin.svg?style=flat-square)](https://github.com/gin-gonic/gin/releases)
diff --git a/README.md b/README.md
index 9a97ec5..45bfce5 100644
--- a/README.md
+++ b/README.md
@@ -60,0 +61 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Define format for the log of routes](#define-format-for-the-log-of-routes)
@@ -1838,0 +1840,43 @@ func main() {
+### Define format for the log of routes
+
+The default log of routes is:
+```
+[GIN-debug] POST   /foo                      --> main.main.func1 (3 handlers)
+[GIN-debug] GET    /bar                      --> main.main.func2 (3 handlers)
+[GIN-debug] GET    /status                   --> main.main.func3 (3 handlers)
+```
+
+If you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with `gin.DebugPrintRouteFunc`.
+In the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.
+```go
+import (
+	"log"
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	r := gin.Default()
+	gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) {
+		log.Printf("endpoint %v %v %v %v\n", httpMethod, absolutePath, handlerName, nuHandlers)
+	}
+
+	r.POST("/foo", func(c *gin.Context) {
+		c.JSON(http.StatusOK, "foo")
+	})
+
+	r.GET("/bar", func(c *gin.Context) {
+		c.JSON(http.StatusOK, "bar")
+	})
+
+	r.GET("/status", func(c *gin.Context) {
+		c.JSON(http.StatusOK, "ok")
+	})
+
+	// Listen and Server in http://0.0.0.0:8080
+	r.Run()
+}
+```
+
+
diff --git a/README.md b/README.md
index a4bc4e7..9a97ec5 100644
--- a/README.md
+++ b/README.md
@@ -659,0 +660 @@ import (
+// Booking contains binded and validated data.
diff --git a/README.md b/README.md
index 7d13cf2..a4bc4e7 100644
--- a/README.md
+++ b/README.md
@@ -1888 +1888 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
-* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go
+* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go.
@@ -1889,0 +1890 @@ Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framewor
+* [fnproject](https://github.com/fnproject/fn): The container native, cloud agnostic serverless platform.
diff --git a/README.md b/README.md
index 9f66dd7..7d13cf2 100644
--- a/README.md
+++ b/README.md
@@ -560 +560 @@ func main() {
-		if err := c.ShouldBindXML(&json); err != nil {
+		if err := c.ShouldBindJSON(&json); err != nil {
diff --git a/README.md b/README.md
index 053750b..9f66dd7 100644
--- a/README.md
+++ b/README.md
@@ -753,3 +753,6 @@ package main
-import "log"
-import "github.com/gin-gonic/gin"
-import "time"
+import (
+	"log"
+	"time"
+
+	"github.com/gin-gonic/gin"
+)
diff --git a/README.md b/README.md
index ae183f9..053750b 100644
--- a/README.md
+++ b/README.md
@@ -993,0 +994,28 @@ func main() {
+#### PureJSON
+
+Normally, JSON replaces special HTML characters with their unicode entities, e.g. `<` becomes  `\u003c`. If you want to encode such characters literally, you can use PureJSON instead.
+This feature is unavailable in Go 1.6 and lower.
+
+```go
+func main() {
+	r := gin.Default()
+	
+	// Serves unicode entities
+	r.GET("/json", func(c *gin.Context) {
+		c.JSON(200, gin.H{
+			"html": "<b>Hello, world!</b>",
+		})
+	})
+	
+	// Serves literal characters
+	r.GET("/purejson", func(c *gin.Context) {
+		c.PureJSON(200, gin.H{
+			"html": "<b>Hello, world!</b>",
+		})
+	})
+	
+	// listen and serve on 0.0.0.0:8080
+	r.Run(":8080)
+}
+```
+
diff --git a/README.md b/README.md
index 161ea28..ae183f9 100644
--- a/README.md
+++ b/README.md
@@ -43 +43 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-    - [XML, JSON and YAML rendering](#xml-json-and-yaml-rendering)
+    - [XML, JSON, YAML and ProtoBuf rendering](#xml-json-yaml-and-protobuf-rendering)
@@ -874 +874 @@ $ curl -v --form user=user --form password=password http://localhost:8080/login
-### XML, JSON and YAML rendering
+### XML, JSON, YAML and ProtoBuf rendering
@@ -907,0 +908,13 @@ func main() {
+	r.GET("/someProtoBuf", func(c *gin.Context) {
+		reps := []int64{int64(1), int64(2)}
+		label := "test"
+		// The specific definition of protobuf is written in the testdata/protoexample file.
+		data := &protoexample.Test{
+			Label: &label,
+			Reps:  reps,
+		}
+		// Note that data becomes binary data in the response
+		// Will output protoexample.Test protobuf serialized data
+		c.ProtoBuf(http.StatusOK, data)
+	})
+
diff --git a/README.md b/README.md
index 920b634..161ea28 100644
--- a/README.md
+++ b/README.md
@@ -103 +103 @@ $ govendor init
-$ govendor fetch github.com/gin-gonic/gin@v1.2
+$ govendor fetch github.com/gin-gonic/gin@v1.3
diff --git a/README.md b/README.md
index 37eec61..920b634 100644
--- a/README.md
+++ b/README.md
@@ -201 +201 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-Gin use `encoding/json` as default json package but you can change to [jsoniter](https://github.com/json-iterator/go) by build from other tags.
+Gin uses `encoding/json` as default json package but you can change to [jsoniter](https://github.com/json-iterator/go) by build from other tags.
diff --git a/README.md b/README.md
index 5de22dc..37eec61 100644
--- a/README.md
+++ b/README.md
@@ -62 +62 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-- [Users](#users--)
+- [Users](#users)
diff --git a/README.md b/README.md
index d8e3ffa..5de22dc 100644
--- a/README.md
+++ b/README.md
@@ -537 +537 @@ Also, Gin provides two sets of methods for binding:
-  - **Methods** - `Bind`, `BindJSON`, `BindQuery`
+  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`
@@ -540 +540 @@ Also, Gin provides two sets of methods for binding:
-  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindQuery`
+  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`
@@ -550,2 +550,2 @@ type Login struct {
-	User     string `form:"user" json:"user" binding:"required"`
-	Password string `form:"password" json:"password" binding:"required"`
+	User     string `form:"user" json:"user" xml:"user"  binding:"required"`
+	Password string `form:"password" json:"password" xml:"password" binding:"required"`
@@ -560,7 +560 @@ func main() {
-		if err := c.ShouldBindJSON(&json); err == nil {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		} else {
+		if err := c.ShouldBindXML(&json); err != nil {
@@ -567,0 +562 @@ func main() {
+			return
@@ -568,0 +564,28 @@ func main() {
+		
+		if json.User != "manu" || json.Password != "123" {
+			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			return
+		} 
+		
+		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+	})
+
+	// Example for binding XML (
+	//	<?xml version="1.0" encoding="UTF-8"?>
+	//	<root>
+	//		<user>user</user>
+	//		<password>123</user>
+	//	</root>)
+	router.POST("/loginXML", func(c *gin.Context) {
+		var xml Login
+		if err := c.ShouldBindXML(&xml); err != nil {
+			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+			return
+		}
+		
+		if xml.User != "manu" || xml.Password != "123" {
+			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			return
+		} 
+		
+		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
@@ -575,7 +598 @@ func main() {
-		if err := c.ShouldBind(&form); err == nil {
-			if form.User == "manu" && form.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		} else {
+		if err := c.ShouldBind(&form); err != nil {
@@ -582,0 +600 @@ func main() {
+			return
@@ -583,0 +602,7 @@ func main() {
+		
+		if form.User != "manu" || form.Password != "123" {
+			c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			return
+		} 
+		
+		c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
diff --git a/README.md b/README.md
index 28598ba..d8e3ffa 100644
--- a/README.md
+++ b/README.md
@@ -682 +682 @@ $ curl "localhost:8085/bookable?check_in=2018-03-08&check_out=2018-03-09"
-[Struct level validations](https://github.com/go-playground/validator/releases/tag/v8.7) can also be registed this way.
+[Struct level validations](https://github.com/go-playground/validator/releases/tag/v8.7) can also be registered this way.
diff --git a/README.md b/README.md
index bf1bbb4..28598ba 100644
--- a/README.md
+++ b/README.md
@@ -241 +241 @@ func main() {
-	// This handler will match /user/john but will not match neither /user/ or /user
+	// This handler will match /user/john but will not match /user/ or /user
diff --git a/README.md b/README.md
index c2cfe2d..bf1bbb4 100644
--- a/README.md
+++ b/README.md
@@ -1120 +1120 @@ func main() {
-    router.LoadHTMLFiles("./fixtures/basic/raw.tmpl")
+    router.LoadHTMLFiles("./testdata/template/raw.tmpl")
diff --git a/README.md b/README.md
index 11c91c9..c2cfe2d 100644
--- a/README.md
+++ b/README.md
@@ -6,4 +6,5 @@
- [![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin)
- [![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin)
- [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
- [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+[![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin)
+[![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
+[![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+[![Sourcegraph](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
@@ -1814 +1815 @@ func TestPingRoute(t *testing.T) {
-## Users  [![Sourcegraph](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
+## Users
diff --git a/README.md b/README.md
index 9389646..11c91c9 100644
--- a/README.md
+++ b/README.md
@@ -29,0 +30 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Map as querystring or postform parameters](#map-as-querystring-or-postform-parameters)
@@ -325,0 +327,28 @@ id: 1234; page: 1; name: manu; message: this_is_great
+### Map as querystring or postform parameters
+
+```
+POST /post?ids[a]=1234&ids[b]=hello HTTP/1.1
+Content-Type: application/x-www-form-urlencoded
+
+names[first]=thinkerou&names[second]=tianou
+```
+
+```go
+func main() {
+	router := gin.Default()
+
+	router.POST("/post", func(c *gin.Context) {
+
+		ids := c.QueryMap("ids")
+		names := c.PostFormMap("names")
+
+		fmt.Printf("ids: %v; names: %v", ids, names)
+	})
+	router.Run(":8080")
+}
+```
+
+```
+ids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]
+```
+
diff --git a/README.md b/README.md
index e09a51f..9389646 100644
--- a/README.md
+++ b/README.md
@@ -902,0 +903,23 @@ func main() {
+#### AsciiJSON
+
+Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII chracters.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/someJSON", func(c *gin.Context) {
+		data := map[string]interface{}{
+			"lang": "GO语言",
+			"tag":  "<br>",
+		}
+
+		// will output : {"lang":"GO\u8bed\u8a00","tag":"\u003cbr\u003e"}
+		c.AsciiJSON(http.StatusOK, data)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index c2917a5..e09a51f 100644
--- a/README.md
+++ b/README.md
@@ -17,0 +18,2 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+- [Installation](#installation)
+- [Prerequisite](#prerequisite)
@@ -21 +22,0 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-- [Start using it](#start-using-it)
@@ -60,0 +62,58 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+## Installation
+
+To install Gin package, you need to install Go and set your Go workspace first.
+
+1. Download and install it:
+
+```sh
+$ go get -u github.com/gin-gonic/gin
+```
+
+2. Import it in your code:
+
+```go
+import "github.com/gin-gonic/gin"
+```
+
+3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
+
+```go
+import "net/http"
+```
+
+### Use a vendor tool like [Govendor](https://github.com/kardianos/govendor)
+
+1. `go get` govendor
+
+```sh
+$ go get github.com/kardianos/govendor
+```
+2. Create your project folder and `cd` inside
+
+```sh
+$ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
+```
+
+3. Vendor init your project and add gin
+
+```sh
+$ govendor init
+$ govendor fetch github.com/gin-gonic/gin@v1.2
+```
+
+4. Copy a starting template inside your project
+
+```sh
+$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go > main.go
+```
+
+5. Run your project
+
+```sh
+$ go run main.go
+```
+
+## Prerequisite
+
+Now Gin requires Go 1.6 or later and Go 1.7 will be required soon.
+
@@ -138,52 +196,0 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-## Start using it
-
-1. Download and install it:
-
-```sh
-$ go get github.com/gin-gonic/gin
-```
-
-2. Import it in your code:
-
-```go
-import "github.com/gin-gonic/gin"
-```
-
-3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
-
-```go
-import "net/http"
-```
-
-### Use a vendor tool like [Govendor](https://github.com/kardianos/govendor)
-
-1. `go get` govendor
-
-```sh
-$ go get github.com/kardianos/govendor
-```
-2. Create your project folder and `cd` inside
-
-```sh
-$ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
-```
-
-3. Vendor init your project and add gin
-
-```sh
-$ govendor init
-$ govendor fetch github.com/gin-gonic/gin@v1.2
-```
-
-4. Copy a starting template inside your project
-
-```sh
-$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go > main.go
-```
-
-5. Run your project
-
-```sh
-$ go run main.go
-```
-
diff --git a/README.md b/README.md
index 0bac65b..c2917a5 100644
--- a/README.md
+++ b/README.md
@@ -56,0 +57 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [http2 server push](#http2-server-push)
@@ -1658,0 +1660,49 @@ performance (See [#1341](https://github.com/gin-gonic/gin/pull/1341)).
+### http2 server push
+
+http.Pusher is supported only **go1.8+**. See the [golang blog](https://blog.golang.org/h2push) for detail information.
+
+[embedmd]:# (examples/http-pusher/main.go go)
+```go
+package main
+
+import (
+	"html/template"
+	"log"
+
+	"github.com/gin-gonic/gin"
+)
+
+var html = template.Must(template.New("https").Parse(`
+<html>
+<head>
+  <title>Https Test</title>
+  <script src="/assets/app.js"></script>
+</head>
+<body>
+  <h1 style="color:red;">Welcome, Ginner!</h1>
+</body>
+</html>
+`))
+
+func main() {
+	r := gin.Default()
+	r.Static("/assets", "./assets")
+	r.SetHTMLTemplate(html)
+
+	r.GET("/", func(c *gin.Context) {
+		if pusher := c.Writer.Pusher(); pusher != nil {
+			// use pusher.Push() to do server push
+			if err := pusher.Push("/assets/app.js", nil); err != nil {
+				log.Printf("Failed to push: %v", err)
+			}
+		}
+		c.HTML(200, "https", gin.H{
+			"status": "success",
+		})
+	})
+
+	// Listen and Server in https://127.0.0.1:8080
+	r.RunTLS(":8080", "./testdata/server.pem", "./testdata/server.key")
+}
+```
+
diff --git a/README.md b/README.md
index fd5c175..0bac65b 100644
--- a/README.md
+++ b/README.md
@@ -574,0 +575,4 @@ $ curl -v -X POST \
+**Skip validate**
+
+When running the above example using the above the `curl` command, it returns error. Because the example use `binding:"required"` for `Password`. If use `binding:"-"` for `Password`, then it will not return error when running the above example again.
+
diff --git a/README.md b/README.md
index 51a807b..fd5c175 100644
--- a/README.md
+++ b/README.md
@@ -1085 +1085 @@ Gin allow by default use only one html.Template. Check [a multitemplate render](
-Issuing a HTTP redirect is easy:
+Issuing a HTTP redirect is easy. Both internal and external locations are supported.
@@ -1092 +1092,13 @@ r.GET("/test", func(c *gin.Context) {
-Both internal and external locations are supported.
+
+
+Issuing a Router redirect, use `HandleContext` like below.
+
+``` go
+r.GET("/test", func(c *gin.Context) {
+    c.Request.URL.Path = "/test2"
+    r.HandleContext(c)
+})
+r.GET("/test2", func(c *gin.Context) {
+    c.JSON(200, gin.H{"hello": "world"})
+})
+```
diff --git a/README.md b/README.md
index 70a5a13..51a807b 100644
--- a/README.md
+++ b/README.md
@@ -42,0 +43 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Serving data from reader](#serving-data-from-reader)
@@ -903,0 +905,26 @@ func main() {
+### Serving data from reader
+
+```go
+func main() {
+	router := gin.Default()
+	router.GET("/someDataFromReader", func(c *gin.Context) {
+		response, err := http.Get("https://raw.githubusercontent.com/gin-gonic/logo/master/color.png")
+		if err != nil || response.StatusCode != http.StatusOK {
+			c.Status(http.StatusServiceUnavailable)
+			return
+		}
+
+		reader := response.Body
+		contentLength := response.ContentLength
+		contentType := response.Header.Get("Content-Type")
+
+		extraHeaders := map[string]string{
+			"Content-Disposition": `attachment; filename="gopher.png"`,
+		}
+
+		c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)
+	})
+	router.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index cff9bc8..70a5a13 100644
--- a/README.md
+++ b/README.md
@@ -54,0 +55 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Try to bind body into different structs](#try-to-bind-body-into-different-structs)
@@ -1556,0 +1558,58 @@ In a word, only support nested custom struct which have no `form` now.
+### Try to bind body into different structs
+
+The normal methods for binding request body consumes `c.Request.Body` and they
+cannot be called multiple times.
+
+```go
+type formA struct {
+  Foo string `json:"foo" xml:"foo" binding:"required"`
+}
+
+type formB struct {
+  Bar string `json:"bar" xml:"bar" binding:"required"`
+}
+
+func SomeHandler(c *gin.Context) {
+  objA := formA{}
+  objB := formB{}
+  // This c.ShouldBind consumes c.Request.Body and it cannot be reused.
+  if errA := c.ShouldBind(&objA); errA == nil {
+    c.String(http.StatusOK, `the body should be formA`)
+  // Always an error is occurred by this because c.Request.Body is EOF now.
+  } else if errB := c.ShouldBind(&objB); errB == nil {
+    c.String(http.StatusOK, `the body should be formB`)
+  } else {
+    ...
+  }
+}
+```
+
+For this, you can use `c.ShouldBindBodyWith`.
+
+```go
+func SomeHandler(c *gin.Context) {
+  objA := formA{}
+  objB := formB{}
+  // This reads c.Request.Body and stores the result into the context.
+  if errA := c.ShouldBindBodyWith(&objA, binding.JSON); errA == nil {
+    c.String(http.StatusOK, `the body should be formA`)
+  // At this time, it reuses body stored in the context.
+  } else if errB := c.ShouldBindBodyWith(&objB, binding.JSON); errB == nil {
+    c.String(http.StatusOK, `the body should be formB JSON`)
+  // And it can accepts other formats
+  } else if errB2 := c.ShouldBindBodyWith(&objB, binding.XML); errB2 == nil {
+    c.String(http.StatusOK, `the body should be formB XML`)
+  } else {
+    ...
+  }
+}
+```
+
+* `c.ShouldBindBodyWith` stores body into the context before binding. This has
+a slight impact to performance, so you should not use this method if you are
+enough to call binding at once.
+* This feature is only needed for some formats -- `JSON`, `XML`, `MsgPack`,
+`ProtoBuf`. For other formats, `Query`, `Form`, `FormPost`, `FormMultipart`,
+can be called by `c.ShouldBind()` multiple times without any damage to
+performance (See [#1341](https://github.com/gin-gonic/gin/pull/1341)).
+
diff --git a/README.md b/README.md
index aba9ef3..cff9bc8 100644
--- a/README.md
+++ b/README.md
@@ -53,0 +54 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Bind form-data request with custom struct](#bind-form-data-request-with-custom-struct)
@@ -1463,0 +1465,92 @@ See a complete example in the `examples/assets-in-binary` directory.
+### Bind form-data request with custom struct
+
+The follow example using custom struct:
+
+```go
+type StructA struct {
+    FieldA string `form:"field_a"`
+}
+
+type StructB struct {
+    NestedStruct StructA
+    FieldB string `form:"field_b"`
+}
+
+type StructC struct {
+    NestedStructPointer *StructA
+    FieldC string `form:"field_c"`
+}
+
+type StructD struct {
+    NestedAnonyStruct struct {
+        FieldX string `form:"field_x"`
+    }
+    FieldD string `form:"field_d"`
+}
+
+func GetDataB(c *gin.Context) {
+    var b StructB
+    c.Bind(&b)
+    c.JSON(200, gin.H{
+        "a": b.NestedStruct,
+        "b": b.FieldB,
+    })
+}
+
+func GetDataC(c *gin.Context) {
+    var b StructC
+    c.Bind(&b)
+    c.JSON(200, gin.H{
+        "a": b.NestedStructPointer,
+        "c": b.FieldC,
+    })
+}
+
+func GetDataD(c *gin.Context) {
+    var b StructD
+    c.Bind(&b)
+    c.JSON(200, gin.H{
+        "x": b.NestedAnonyStruct,
+        "d": b.FieldD,
+    })
+}
+
+func main() {
+    r := gin.Default()
+    r.GET("/getb", GetDataB)
+    r.GET("/getc", GetDataC)
+    r.GET("/getd", GetDataD)
+
+    r.Run()
+}
+```
+
+Using the command `curl` command result:
+
+```
+$ curl "http://localhost:8080/getb?field_a=hello&field_b=world"
+{"a":{"FieldA":"hello"},"b":"world"}
+$ curl "http://localhost:8080/getc?field_a=hello&field_c=world"
+{"a":{"FieldA":"hello"},"c":"world"}
+$ curl "http://localhost:8080/getd?field_x=hello&field_d=world"
+{"d":"world","x":{"FieldX":"hello"}}
+```
+
+**NOTE**: NOT support the follow style struct:
+
+```go
+type StructX struct {
+    X struct {} `form:"name_x"` // HERE have form
+}
+
+type StructY struct {
+    Y StructX `form:"name_y"` // HERE hava form
+}
+
+type StructZ struct {
+    Z *StructZ `form:"name_z"` // HERE hava form
+}
+```
+
+In a word, only support nested custom struct which have no `form` now.
+
diff --git a/README.md b/README.md
index 6c8988e..aba9ef3 100644
--- a/README.md
+++ b/README.md
@@ -40,0 +41 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [JSONP rendering](#jsonp)
@@ -863,0 +865,22 @@ func main() {
+#### JSONP
+
+Using JSONP to request data from a server  in a different domain. Add callback to response body if the query parameter callback exists.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/JSONP?callback=x", func(c *gin.Context) {
+		data := map[string]interface{}{
+			"foo": "bar",
+		}
+		
+		//callback is x
+		// Will output  :   x({\"foo\":\"bar\"})
+		c.JSONP(http.StatusOK, data)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
diff --git a/README.md b/README.md
index 38bde8d..6c8988e 100644
--- a/README.md
+++ b/README.md
@@ -51,0 +52 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+    - [Build a single binary with templates](#build-a-single-binary-with-templates)
@@ -1395,0 +1397,44 @@ func main() {
+### Build a single binary with templates
+
+You can build a server into a single binary containing templates by using [go-assets][].
+
+[go-assets]: https://github.com/jessevdk/go-assets
+
+```go
+func main() {
+	r := gin.New()
+
+	t, err := loadTemplate()
+	if err != nil {
+		panic(err)
+	}
+	r.SetHTMLTemplate(t)
+
+	r.GET("/", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "/html/index.tmpl",nil)
+	})
+	r.Run(":8080")
+}
+
+// loadTemplate loads templates embedded by go-assets-builder
+func loadTemplate() (*template.Template, error) {
+	t := template.New("")
+	for name, file := range Assets.Files {
+		if file.IsDir() || !strings.HasSuffix(name, ".tmpl") {
+			continue
+		}
+		h, err := ioutil.ReadAll(file)
+		if err != nil {
+			return nil, err
+		}
+		t, err = t.New(name).Parse(string(h))
+		if err != nil {
+			return nil, err
+		}
+	}
+	return t, nil
+}
+```
+
+See a complete example in the `examples/assets-in-binary` directory.
+
diff --git a/README.md b/README.md
index 7dd7f73..38bde8d 100644
--- a/README.md
+++ b/README.md
@@ -15,0 +16,41 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
+## Contents
+
+- [Quick start](#quick-start)
+- [Benchmarks](#benchmarks)
+- [Gin v1.stable](#gin-v1-stable)
+- [Start using it](#start-using-it)
+- [Build with jsoniter](#build-with-jsoniter)
+- [API Examples](#api-examples)
+    - [Using GET,POST,PUT,PATCH,DELETE and OPTIONS](#using-get-post-put-patch-delete-and-options)
+    - [Parameters in path](#parameters-in-path)
+    - [Querystring parameters](#querystring-parameters)
+    - [Multipart/Urlencoded Form](#multiparturlencoded-form)
+    - [Another example: query + post form](#another-example-query--post-form)
+    - [Upload files](#upload-files)
+    - [Grouping routes](#grouping-routes)
+    - [Blank Gin without middleware by default](#blank-gin-without-middleware-by-default)
+    - [Using middleware](#using-middleware)
+    - [How to write log file](#how-to-write-log-file)
+    - [Model binding and validation](#model-binding-and-validation)
+    - [Custom Validators](#custom-validators)
+    - [Only Bind Query String](#only-bind-query-string)
+    - [Bind Query String or Post Data](#bind-query-string-or-post-data)
+    - [Bind HTML checkboxes](#bind-html-checkboxes)
+    - [Multipart/Urlencoded binding](#multiparturlencoded-binding)
+    - [XML, JSON and YAML rendering](#xml-json-and-yaml-rendering)
+    - [Serving static files](#serving-static-files)
+    - [HTML rendering](#html-rendering)
+    - [Multitemplate](#multitemplate)
+    - [Redirects](#redirects)
+    - [Custom Middleware](#custom-middleware)
+    - [Using BasicAuth() middleware](#using-basicauth-middleware)
+    - [Goroutines inside a middleware](#goroutines-inside-a-middleware)
+    - [Custom HTTP configuration](#custom-http-configuration)
+    - [Support Let's Encrypt](#support-lets-encrypt)
+    - [Run multiple service using Gin](#run-multiple-service-using-gin)
+    - [Graceful restart or stop](#graceful-restart-or-stop)
+- [Testing](#testing)
+- [Users](#users--)
+
+## Quick start
+ 
diff --git a/README.md b/README.md
index 72ac99b..7dd7f73 100644
--- a/README.md
+++ b/README.md
@@ -567 +567,5 @@ func main() {
-	binding.Validator.RegisterValidation("bookabledate", bookableDate)
+
+	if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
+		v.RegisterValidation("bookabledate", bookableDate)
+	}
+
@@ -583 +587 @@ func getBookable(c *gin.Context) {
-$ curl "localhost:8085/bookable?check_in=2017-08-16&check_out=2017-08-17"
+$ curl "localhost:8085/bookable?check_in=2018-04-16&check_out=2018-04-17"
@@ -586 +590 @@ $ curl "localhost:8085/bookable?check_in=2017-08-16&check_out=2017-08-17"
-$ curl "localhost:8085/bookable?check_in=2017-08-15&check_out=2017-08-16"
+$ curl "localhost:8085/bookable?check_in=2018-03-08&check_out=2018-03-09"
@@ -589,0 +594,3 @@ $ curl "localhost:8085/bookable?check_in=2017-08-15&check_out=2017-08-16"
+[Struct level validations](https://github.com/go-playground/validator/releases/tag/v8.7) can also be registed this way.
+See the [struct-lvl-validation example](examples/struct-lvl-validations) to learn more.
+
diff --git a/README.md b/README.md
index b51aa10..72ac99b 100644
--- a/README.md
+++ b/README.md
@@ -1327,2 +1327,2 @@ func main() {
-		if err := srv.ListenAndServe(); err != nil {
-			log.Printf("listen: %s\n", err)
+		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
+			log.Fatalf("listen: %s\n", err)
diff --git a/README.md b/README.md
index 6e421f0..b51aa10 100644
--- a/README.md
+++ b/README.md
@@ -9,0 +10 @@
+[![Open Source Helpers](https://www.codetriage.com/gin-gonic/gin/badges/users.svg)](https://www.codetriage.com/gin-gonic/gin)
diff --git a/README.md b/README.md
index 2ad2fc1..6e421f0 100644
--- a/README.md
+++ b/README.md
@@ -1193 +1193 @@ func main() {
-See the [question](https://github.com/gin-gonic/gin/issues/346) and try the folling example:
+See the [question](https://github.com/gin-gonic/gin/issues/346) and try the following example:
diff --git a/README.md b/README.md
index 6313788..2ad2fc1 100644
--- a/README.md
+++ b/README.md
@@ -438 +438 @@ func main() {
-    r.Run(":8080")
+    router.Run(":8080")
diff --git a/README.md b/README.md
index 3e1af55..6313788 100644
--- a/README.md
+++ b/README.md
@@ -388 +388 @@ func main() {
-	// Logger middleware will write the logs to gin.DefaultWriter even you set with GIN_MODE=release.
+	// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.
diff --git a/README.md b/README.md
index 046752f..3e1af55 100644
--- a/README.md
+++ b/README.md
@@ -120 +120 @@ $ go get github.com/kardianos/govendor
-$ mkdir -p ~/go/src/github.com/myusername/project && cd "$_"
+$ mkdir -p $GOPATH/src/github.com/myusername/project && cd "$_"
diff --git a/README.md b/README.md
index 3ac051a..046752f 100644
--- a/README.md
+++ b/README.md
@@ -1074 +1074 @@ func main() {
-When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
+When starting new Goroutines inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
diff --git a/README.md b/README.md
index 7d3b919..3ac051a 100644
--- a/README.md
+++ b/README.md
@@ -543 +543 @@ import (
-	validator "gopkg.in/go-playground/validator.v8"
+	"gopkg.in/go-playground/validator.v8"
diff --git a/README.md b/README.md
index bffcce3..7d3b919 100644
--- a/README.md
+++ b/README.md
@@ -475 +475 @@ func main() {
-		if err = c.ShouldBindJSON(&json); err == nil {
+		if err := c.ShouldBindJSON(&json); err == nil {
diff --git a/README.md b/README.md
index 6b8cdd7..bffcce3 100644
--- a/README.md
+++ b/README.md
@@ -1346,0 +1347,46 @@ func main() {
+## Testing
+
+The `net/http/httptest` package is preferable way for HTTP testing.
+
+```go
+package main
+
+func setupRouter() *gin.Engine {
+	r := gin.Default()
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+	return r
+}
+
+func main() {
+	r := setupRouter()
+	r.Run(":8080")
+}
+```
+
+Test for code example above:
+
+```go
+package main
+
+import (
+	"net/http"
+	"net/http/httptest"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+)
+
+func TestPingRoute(t *testing.T) {
+	router := setupRouter()
+
+	w := httptest.NewRecorder()
+	req, _ := http.NewRequest("GET", "/ping", nil)
+	router.ServeHTTP(w, req)
+
+	assert.Equal(t, 200, w.Code)
+	assert.Equal(t, "pong", w.Body.String())
+}
+```
+
diff --git a/README.md b/README.md
index b718103..6b8cdd7 100644
--- a/README.md
+++ b/README.md
@@ -1136 +1136 @@ example for 1-line LetsEncrypt HTTPS servers.
-[embedmd]:# (examples/auto-tls/example1.go go)
+[embedmd]:# (examples/auto-tls/example1/main.go go)
@@ -1161 +1161 @@ example for custom autocert manager.
-[embedmd]:# (examples/auto-tls/example2.go go)
+[embedmd]:# (examples/auto-tls/example2/main.go go)
diff --git a/README.md b/README.md
index 7113058..b718103 100644
--- a/README.md
+++ b/README.md
@@ -77,4 +77,4 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-(1): Total Repetitions achieved in constant time, higher means more confident result
-(2): Single Repetition Duration (ns/op), lower is better
-(3): Heap Memory (B/op), lower is better
-(4): Average Allocations per Repetition (allocs/op), lower is better
+- (1): Total Repetitions achieved in constant time, higher means more confident result
+- (2): Single Repetition Duration (ns/op), lower is better
+- (3): Heap Memory (B/op), lower is better
+- (4): Average Allocations per Repetition (allocs/op), lower is better
diff --git a/README.md b/README.md
index 66c83fb..7113058 100644
--- a/README.md
+++ b/README.md
@@ -391 +391 @@ func main() {
-	
+
@@ -425 +425 @@ func main() {
-    
+
@@ -429 +429 @@ func main() {
-    
+
@@ -450 +450,7 @@ Note that you need to set the corresponding binding tag on all fields you want t
-When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use BindWith.
+Also, Gin provides two sets of methods for binding:
+- **Type** - Must bind
+  - **Methods** - `Bind`, `BindJSON`, `BindQuery`
+  - **Behavior** - These methods use `MustBindWith` under the hood. If there is a binding error, the request is aborted with `c.AbortWithError(400, err).SetType(ErrorTypeBind)`. This sets the response status code to 400 and the `Content-Type` header is set to `text/plain; charset=utf-8`. Note that if you try to set the response code after this, it will result in a warning `[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422`. If you wish to have greater control over the behavior, consider using the `ShouldBind` equivalent method.
+- **Type** - Should bind
+  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindQuery`
+  - **Behavior** - These methods use `ShouldBindWith` under the hood. If there is a binding error, the error is returned and it is the developer's responsibility to handle the request and error appropriately.
@@ -452 +458,3 @@ When using the Bind-method, Gin tries to infer the binder depending on the Conte
-You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, the current request will fail with an error.
+When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use `MustBindWith` or `ShouldBindWith`.
+
+You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, an error will be returned.
@@ -467 +475 @@ func main() {
-		if c.BindJSON(&json) == nil {
+		if err = c.ShouldBindJSON(&json); err == nil {
@@ -472,0 +481,2 @@ func main() {
+		} else {
+			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
@@ -480 +490 @@ func main() {
-		if c.Bind(&form) == nil {
+		if err := c.ShouldBind(&form); err == nil {
@@ -485,0 +496,2 @@ func main() {
+		} else {
+			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
@@ -493,0 +506,22 @@ func main() {
+**Sample request**
+```shell
+$ curl -v -X POST \
+  http://localhost:8080/loginJSON \
+  -H 'content-type: application/json' \
+  -d '{ "user": "manu" }'
+> POST /loginJSON HTTP/1.1
+> Host: localhost:8080
+> User-Agent: curl/7.51.0
+> Accept: */*
+> content-type: application/json
+> Content-Length: 18
+>
+* upload completely sent off: 18 out of 18 bytes
+< HTTP/1.1 400 Bad Request
+< Content-Type: application/json; charset=utf-8
+< Date: Fri, 04 Aug 2017 03:51:31 GMT
+< Content-Length: 100
+<
+{"error":"Key: 'Login.Password' Error:Field validation for 'Password' failed on the 'required' tag"}
+```
+
@@ -557 +591 @@ $ curl "localhost:8085/bookable?check_in=2017-08-15&check_out=2017-08-16"
-`BindQuery` function only binds the query params and not the post data. See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017).
+`ShouldBindQuery` function only binds the query params and not the post data. See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017).
@@ -581 +615 @@ func startPage(c *gin.Context) {
-	if c.BindQuery(&person) == nil {
+	if c.ShouldBindQuery(&person) == nil {
@@ -619 +653 @@ func startPage(c *gin.Context) {
-	if c.Bind(&person) == nil {
+	if c.ShouldBind(&person) == nil {
@@ -651 +685 @@ func formHandler(c *gin.Context) {
-    c.Bind(&fakeForm)
+    c.ShouldBind(&fakeForm)
@@ -698,2 +732,2 @@ func main() {
-		// c.MustBindWith(&form, binding.Form)
-		// or you can simply use autobinding with Bind method:
+		// c.ShouldBindWith(&form, binding.Form)
+		// or you can simply use autobinding with ShouldBind method:
@@ -702 +736 @@ func main() {
-		if c.Bind(&form) == nil {
+		if c.ShouldBind(&form) == nil {
diff --git a/README.md b/README.md
index 0dc165b..66c83fb 100644
--- a/README.md
+++ b/README.md
@@ -1156,0 +1157,82 @@ func main() {
+### Run multiple service using Gin
+
+See the [question](https://github.com/gin-gonic/gin/issues/346) and try the folling example:
+
+[embedmd]:# (examples/multiple-service/main.go go)
+```go
+package main
+
+import (
+	"log"
+	"net/http"
+	"time"
+
+	"github.com/gin-gonic/gin"
+	"golang.org/x/sync/errgroup"
+)
+
+var (
+	g errgroup.Group
+)
+
+func router01() http.Handler {
+	e := gin.New()
+	e.Use(gin.Recovery())
+	e.GET("/", func(c *gin.Context) {
+		c.JSON(
+			http.StatusOK,
+			gin.H{
+				"code":  http.StatusOK,
+				"error": "Welcome server 01",
+			},
+		)
+	})
+
+	return e
+}
+
+func router02() http.Handler {
+	e := gin.New()
+	e.Use(gin.Recovery())
+	e.GET("/", func(c *gin.Context) {
+		c.JSON(
+			http.StatusOK,
+			gin.H{
+				"code":  http.StatusOK,
+				"error": "Welcome server 02",
+			},
+		)
+	})
+
+	return e
+}
+
+func main() {
+	server01 := &http.Server{
+		Addr:         ":8080",
+		Handler:      router01(),
+		ReadTimeout:  5 * time.Second,
+		WriteTimeout: 10 * time.Second,
+	}
+
+	server02 := &http.Server{
+		Addr:         ":8081",
+		Handler:      router02(),
+		ReadTimeout:  5 * time.Second,
+		WriteTimeout: 10 * time.Second,
+	}
+
+	g.Go(func() error {
+		return server01.ListenAndServe()
+	})
+
+	g.Go(func() error {
+		return server02.ListenAndServe()
+	})
+
+	if err := g.Wait(); err != nil {
+		log.Fatal(err)
+	}
+}
+```
+
diff --git a/README.md b/README.md
index d16a868..0dc165b 100644
--- a/README.md
+++ b/README.md
@@ -1227 +1227 @@ func main() {
-	log.Println("Server exist")
+	log.Println("Server exiting")
diff --git a/README.md b/README.md
index 07357be..d16a868 100644
--- a/README.md
+++ b/README.md
@@ -279,0 +280,2 @@ func main() {
+	// Set a lower memory limit for multipart forms (default is 32 MiB)
+	// router.MaxMultipartMemory = 8 << 20  // 8 MiB
@@ -308,0 +311,2 @@ func main() {
+	// Set a lower memory limit for multipart forms (default is 32 MiB)
+	// router.MaxMultipartMemory = 8 << 20  // 8 MiB
diff --git a/README.md b/README.md
index 879d77b..07357be 100644
--- a/README.md
+++ b/README.md
@@ -43 +43 @@ $ go run example.go
-Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httprouter)  
+Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httprouter)
@@ -77,4 +77,4 @@ BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894
-(1): Total Repetitions achieved in constant time, higher means more confident result  
-(2): Single Repetition Duration (ns/op), lower is better  
-(3): Heap Memory (B/op), lower is better  
-(4): Average Allocations per Repetition (allocs/op), lower is better  
+(1): Total Repetitions achieved in constant time, higher means more confident result
+(2): Single Repetition Duration (ns/op), lower is better
+(3): Heap Memory (B/op), lower is better
+(4): Average Allocations per Repetition (allocs/op), lower is better
@@ -284 +284 @@ func main() {
-        
+
@@ -286,2 +286,2 @@ func main() {
-		// c.SaveUploadedFile(file, dst)       
-		
+		// c.SaveUploadedFile(file, dst)
+
@@ -316 +316 @@ func main() {
-			
+
@@ -318 +318 @@ func main() {
-			// c.SaveUploadedFile(file, dst)       
+			// c.SaveUploadedFile(file, dst)
@@ -489,0 +490,61 @@ func main() {
+### Custom Validators
+
+It is also possible to register custom validators. See the [example code](examples/custom-validation/server.go).
+
+[embedmd]:# (examples/custom-validation/server.go go)
+```go
+package main
+
+import (
+	"net/http"
+	"reflect"
+	"time"
+
+	"github.com/gin-gonic/gin"
+	"github.com/gin-gonic/gin/binding"
+	validator "gopkg.in/go-playground/validator.v8"
+)
+
+type Booking struct {
+	CheckIn  time.Time `form:"check_in" binding:"required,bookabledate" time_format:"2006-01-02"`
+	CheckOut time.Time `form:"check_out" binding:"required,gtfield=CheckIn" time_format:"2006-01-02"`
+}
+
+func bookableDate(
+	v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,
+	field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string,
+) bool {
+	if date, ok := field.Interface().(time.Time); ok {
+		today := time.Now()
+		if today.Year() > date.Year() || today.YearDay() > date.YearDay() {
+			return false
+		}
+	}
+	return true
+}
+
+func main() {
+	route := gin.Default()
+	binding.Validator.RegisterValidation("bookabledate", bookableDate)
+	route.GET("/bookable", getBookable)
+	route.Run(":8085")
+}
+
+func getBookable(c *gin.Context) {
+	var b Booking
+	if err := c.ShouldBindWith(&b, binding.Query); err == nil {
+		c.JSON(http.StatusOK, gin.H{"message": "Booking dates are valid!"})
+	} else {
+		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+	}
+}
+```
+
+```console
+$ curl "localhost:8085/bookable?check_in=2017-08-16&check_out=2017-08-17"
+{"message":"Booking dates are valid!"}
+
+$ curl "localhost:8085/bookable?check_in=2017-08-15&check_out=2017-08-16"
+{"error":"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag"}
+```
+
@@ -714 +775 @@ func main() {
-```  
+```
@@ -825 +886 @@ You may use custom delims
-```  
+```
diff --git a/README.md b/README.md
index b564446..879d77b 100644
--- a/README.md
+++ b/README.md
@@ -534,0 +535 @@ import "github.com/gin-gonic/gin"
+import "time"
@@ -537,2 +538,3 @@ type Person struct {
-	Name    string `form:"name"`
-	Address string `form:"address"`
+	Name     string    `form:"name"`
+	Address  string    `form:"address"`
+	Birthday time.Time `form:"birthday" time_format:"2006-01-02" time_utc:"1"`
@@ -554,0 +557 @@ func startPage(c *gin.Context) {
+		log.Println(person.Birthday)
@@ -560,0 +564,5 @@ func startPage(c *gin.Context) {
+Test it with:
+```sh
+$ curl -X GET "localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03-15"
+```
+
diff --git a/README.md b/README.md
index 776ae8b..b564446 100644
--- a/README.md
+++ b/README.md
@@ -416 +416 @@ func main() {
-### Output log to file
+### How to write log file
@@ -419 +419 @@ func main() {
-    // Disable Console Color, because not need color when output log to file
+    // Disable Console Color, you don't need console color when writing the logs to file.
@@ -421 +421,2 @@ func main() {
-    // Create one file to save logs
+    
+    // Logging to a file.
@@ -423 +423,0 @@ func main() {
-    // Reset gin.DefaultWriter
@@ -425 +425,2 @@ func main() {
-    // If need to output log to file and console at a time, please use the following code:
+    
+    // Use the following code if you need to write the logs to file and console at the same time.
diff --git a/README.md b/README.md
index dc3c866..776ae8b 100644
--- a/README.md
+++ b/README.md
@@ -384 +384,2 @@ func main() {
-	// Logger middleware will write the logs to gin.DefaultWriter even you set with GIN_MODE=release. By default gin.DefaultWriter = os.Stdout
+	// Logger middleware will write the logs to gin.DefaultWriter even you set with GIN_MODE=release.
+	// By default gin.DefaultWriter = os.Stdout
@@ -414,0 +416,21 @@ func main() {
+### Output log to file
+```go
+func main() {
+    // Disable Console Color, because not need color when output log to file
+    gin.DisableConsoleColor()
+    // Create one file to save logs
+    f, _ := os.Create("gin.log")
+    // Reset gin.DefaultWriter
+    gin.DefaultWriter = io.MultiWriter(f)
+    // If need to output log to file and console at a time, please use the following code:
+    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)
+
+    router := gin.Default()
+    router.GET("/ping", func(c *gin.Context) {
+        c.String(200, "pong")
+    })
+
+    r.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index b14c2a2..dc3c866 100644
--- a/README.md
+++ b/README.md
@@ -371,0 +372 @@ instead of
+// Default With the Logger and Recovery middleware already attached
@@ -382,0 +384 @@ func main() {
+	// Logger middleware will write the logs to gin.DefaultWriter even you set with GIN_MODE=release. By default gin.DefaultWriter = os.Stdout
@@ -383,0 +386,2 @@ func main() {
+	
+	// Recovery middleware recovers from any panics and writes a 500 if there was one.
diff --git a/README.md b/README.md
index 3585873..b14c2a2 100644
--- a/README.md
+++ b/README.md
@@ -793,0 +794,2 @@ You may use custom delims
+See the detail [example code](examples/template).
+
@@ -797,22 +799,31 @@ main.go
-	...
-	
-	func formatAsDate(t time.Time) string {
-		year, month, day := t.Date()
-		return fmt.Sprintf("%d/%02d/%02d", year, month, day)
-	}
-	
-	...
-	
-	router.SetFuncMap(template.FuncMap{
-		"formatAsDate": formatAsDate,
-	})
-	
-	...
-	
-	router.GET("/raw", func(c *Context) {
-		c.HTML(http.StatusOK, "raw.tmpl", map[string]interface{}{
-			"now": time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),
-		})
-	})
-	
-	...
+import (
+    "fmt"
+    "html/template"
+    "net/http"
+    "time"
+
+    "github.com/gin-gonic/gin"
+)
+
+func formatAsDate(t time.Time) string {
+    year, month, day := t.Date()
+    return fmt.Sprintf("%d%02d/%02d", year, month, day)
+}
+
+func main() {
+    router := gin.Default()
+    router.Delims("{[{", "}]}")
+    router.SetFuncMap(template.FuncMap{
+        "formatAsDate": formatAsDate,
+    })
+    router.LoadHTMLFiles("./fixtures/basic/raw.tmpl")
+
+    router.GET("/raw", func(c *gin.Context) {
+        c.HTML(http.StatusOK, "raw.tmpl", map[string]interface{}{
+            "now": time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),
+        })
+    })
+
+    router.Run(":8080")
+}
+
diff --git a/README.md b/README.md
index 07fc960..3585873 100644
--- a/README.md
+++ b/README.md
@@ -463 +463,37 @@ func main() {
-### Bind Query String
+### Only Bind Query String
+
+`BindQuery` function only binds the query params and not the post data. See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017).
+
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/gin"
+)
+
+type Person struct {
+	Name    string `form:"name"`
+	Address string `form:"address"`
+}
+
+func main() {
+	route := gin.Default()
+	route.Any("/testing", startPage)
+	route.Run(":8085")
+}
+
+func startPage(c *gin.Context) {
+	var person Person
+	if c.BindQuery(&person) == nil {
+		log.Println("====== Only Bind By Query String ======")
+		log.Println(person.Name)
+		log.Println(person.Address)
+	}
+	c.String(200, "Success")
+}
+
+```
+
+### Bind Query String or Post Data
diff --git a/README.md b/README.md
index 76ab3b0..07fc960 100644
--- a/README.md
+++ b/README.md
@@ -47,35 +47,34 @@ Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httpr
-
-Benchmark name 					| (1) 		| (2) 		| (3) 		| (4)
---------------------------------|----------:|----------:|----------:|------:
-BenchmarkAce_GithubAll 			| 10000 	| 109482 	| 13792 	| 167
-BenchmarkBear_GithubAll 		| 10000 	| 287490 	| 79952 	| 943
-BenchmarkBeego_GithubAll 		| 3000 		| 562184 	| 146272 	| 2092
-BenchmarkBone_GithubAll 		| 500 		| 2578716 	| 648016 	| 8119
-BenchmarkDenco_GithubAll 		| 20000 	| 94955 	| 20224 	| 167
-BenchmarkEcho_GithubAll 		| 30000 	| 58705 	| 0 		| 0
-**BenchmarkGin_GithubAll** 		| **30000** | **50991** | **0** 	| **0**
-BenchmarkGocraftWeb_GithubAll 	| 5000 		| 449648 	| 133280 	| 1889
-BenchmarkGoji_GithubAll 		| 2000 		| 689748 	| 56113 	| 334
-BenchmarkGoJsonRest_GithubAll 	| 5000 		| 537769 	| 135995 	| 2940
-BenchmarkGoRestful_GithubAll 	| 100 		| 18410628 	| 797236 	| 7725
-BenchmarkGorillaMux_GithubAll 	| 200 		| 8036360 	| 153137 	| 1791
-BenchmarkHttpRouter_GithubAll 	| 20000 	| 63506 	| 13792 	| 167
-BenchmarkHttpTreeMux_GithubAll 	| 10000 	| 165927 	| 56112 	| 334
-BenchmarkKocha_GithubAll 		| 10000 	| 171362 	| 23304 	| 843
-BenchmarkMacaron_GithubAll 		| 2000 		| 817008 	| 224960 	| 2315
-BenchmarkMartini_GithubAll 		| 100 		| 12609209 	| 237952 	| 2686
-BenchmarkPat_GithubAll 			| 300 		| 4830398 	| 1504101 	| 32222
-BenchmarkPossum_GithubAll 		| 10000 	| 301716 	| 97440 	| 812
-BenchmarkR2router_GithubAll 	| 10000 	| 270691 	| 77328 	| 1182
-BenchmarkRevel_GithubAll 		| 1000 		| 1491919 	| 345553 	| 5918
-BenchmarkRivet_GithubAll 		| 10000 	| 283860 	| 84272 	| 1079
-BenchmarkTango_GithubAll 		| 5000 		| 473821 	| 87078 	| 2470
-BenchmarkTigerTonic_GithubAll 	| 2000 		| 1120131 	| 241088 	| 6052
-BenchmarkTraffic_GithubAll 		| 200 		| 8708979 	| 2664762 	| 22390
-BenchmarkVulcan_GithubAll 		| 5000 		| 353392 	| 19894 	| 609
-BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-
-(1): Total Repetitions  
-(2): Single Repetition Duration (ns/op)  
-(3): Heap Memory (B/op)  
-(4): Average Allocations per Repetition (allocs/op)  
+Benchmark name                              | (1)        | (2)         | (3) 		    | (4)
+--------------------------------------------|-----------:|------------:|-----------:|---------:
+**BenchmarkGin_GithubAll**                  | **30000**  |  **48375**  |     **0**  |   **0**
+BenchmarkAce_GithubAll                      |   10000    |   134059    |   13792    |   167
+BenchmarkBear_GithubAll                     |    5000    |   534445    |   86448    |   943
+BenchmarkBeego_GithubAll                    |    3000    |   592444    |   74705    |   812
+BenchmarkBone_GithubAll                     |     200    |  6957308    |  698784    |  8453
+BenchmarkDenco_GithubAll                    |   10000    |   158819    |   20224    |   167
+BenchmarkEcho_GithubAll                     |   10000    |   154700    |    6496    |   203
+BenchmarkGocraftWeb_GithubAll               |    3000    |   570806    |  131656    |  1686
+BenchmarkGoji_GithubAll                     |    2000    |   818034    |   56112    |   334
+BenchmarkGojiv2_GithubAll                   |    2000    |  1213973    |  274768    |  3712
+BenchmarkGoJsonRest_GithubAll               |    2000    |   785796    |  134371    |  2737
+BenchmarkGoRestful_GithubAll                |     300    |  5238188    |  689672    |  4519
+BenchmarkGorillaMux_GithubAll               |     100    | 10257726    |  211840    |  2272
+BenchmarkHttpRouter_GithubAll               |   20000    |   105414    |   13792    |   167
+BenchmarkHttpTreeMux_GithubAll              |   10000    |   319934    |   65856    |   671
+BenchmarkKocha_GithubAll                    |   10000    |   209442    |   23304    |   843
+BenchmarkLARS_GithubAll                     |   20000    |    62565    |       0    |     0
+BenchmarkMacaron_GithubAll                  |    2000    |  1161270    |  204194    |  2000
+BenchmarkMartini_GithubAll                  |     200    |  9991713    |  226549    |  2325
+BenchmarkPat_GithubAll                      |     200    |  5590793    | 1499568    | 27435
+BenchmarkPossum_GithubAll                   |   10000    |   319768    |   84448    |   609
+BenchmarkR2router_GithubAll                 |   10000    |   305134    |   77328    |   979
+BenchmarkRivet_GithubAll                    |   10000    |   132134    |   16272    |   167
+BenchmarkTango_GithubAll                    |    3000    |   552754    |   63826    |  1618
+BenchmarkTigerTonic_GithubAll               |    1000    |  1439483    |  239104    |  5374
+BenchmarkTraffic_GithubAll                  |     100    | 11383067    | 2659329    | 21848
+BenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894    |   609
+
+(1): Total Repetitions achieved in constant time, higher means more confident result  
+(2): Single Repetition Duration (ns/op), lower is better  
+(3): Heap Memory (B/op), lower is better  
+(4): Average Allocations per Repetition (allocs/op), lower is better  
diff --git a/README.md b/README.md
index 7e3df99..76ab3b0 100644
--- a/README.md
+++ b/README.md
@@ -91 +90,0 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-
@@ -143,0 +143,8 @@ $ go run main.go
+## Build with [jsoniter](https://github.com/json-iterator/go)
+
+Gin use `encoding/json` as default json package but you can change to [jsoniter](https://github.com/json-iterator/go) by build from other tags.
+
+```sh
+$ go build -tags=jsoniter .
+```
+
diff --git a/README.md b/README.md
index 211ed59..7e3df99 100644
--- a/README.md
+++ b/README.md
@@ -279,2 +279,2 @@ func main() {
-        // Upload the file to specific dst.
-        // c.SaveUploadedFile(file, dst)       
+		// Upload the file to specific dst.
+		// c.SaveUploadedFile(file, dst)       
@@ -312 +312 @@ func main() {
-            // c.SaveUploadedFile(file, dst)       
+			// c.SaveUploadedFile(file, dst)       
diff --git a/README.md b/README.md
index ccc5bcc..211ed59 100644
--- a/README.md
+++ b/README.md
@@ -408,0 +409,2 @@ To bind a request body into a type, use model binding. We currently support bind
+Gin uses [**go-playground/validator.v8**](https://github.com/go-playground/validator) for validation. Check the full docs on tags usage [here](http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags).
+
diff --git a/README.md b/README.md
index 86001ae..ccc5bcc 100644
--- a/README.md
+++ b/README.md
@@ -278 +278,4 @@ func main() {
-
+        
+        // Upload the file to specific dst.
+        // c.SaveUploadedFile(file, dst)       
+		
@@ -306,0 +310,3 @@ func main() {
+			
+			// Upload the file to specific dst.
+            // c.SaveUploadedFile(file, dst)       
diff --git a/README.md b/README.md
index d4dcb9d..86001ae 100644
--- a/README.md
+++ b/README.md
@@ -308 +308 @@ func main() {
-		c.String(http.StatusOK, fmt.Printf("%d files uploaded!", len(files)))
+		c.String(http.StatusOK, fmt.Sprintf("%d files uploaded!", len(files)))
diff --git a/README.md b/README.md
index 05b696d..d4dcb9d 100644
--- a/README.md
+++ b/README.md
@@ -279 +279 @@ func main() {
-		c.String(http.StatusOK, fmt.Printf("'%s' uploaded!", file.Filename))
+		c.String(http.StatusOK, fmt.Sprintf("'%s' uploaded!", file.Filename))
diff --git a/README.md b/README.md
index cc97c7a..05b696d 100644
--- a/README.md
+++ b/README.md
@@ -483,0 +484,46 @@ func startPage(c *gin.Context) {
+### Bind HTML checkboxes
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092)
+
+main.go
+
+```go
+...
+
+type myForm struct {
+    Colors []string `form:"colors[]"`
+}
+
+...
+
+func formHandler(c *gin.Context) {
+    var fakeForm myForm
+    c.Bind(&fakeForm)
+    c.JSON(200, gin.H{"color": fakeForm.Colors})
+}
+
+...
+
+```
+
+form.html
+
+```html
+<form action="/" method="POST">
+    <p>Check some colors</p>
+    <label for="red">Red</label>
+    <input type="checkbox" name="colors[]" value="red" id="red" />
+    <label for="green">Green</label>
+    <input type="checkbox" name="colors[]" value="green" id="green" />
+    <label for="blue">Blue</label>
+    <input type="checkbox" name="colors[]" value="blue" id="blue" />
+    <input type="submit" />
+</form>
+```
+
+result:
+
+```
+{"color":["red","green","blue"]}
+```
+
diff --git a/README.md b/README.md
index eda1dd7..cc97c7a 100644
--- a/README.md
+++ b/README.md
@@ -561,0 +562,23 @@ func main() {
+#### SecureJSON
+
+Using SecureJSON to prevent json hijacking. Default prepends `"while(1),"` to response body if the given struct is array values.
+
+```go
+func main() {
+	r := gin.Default()
+
+	// You can also use your own secure json prefix
+	// r.SecureJsonPrefix(")]}',\n")
+
+	r.GET("/someJSON", func(c *gin.Context) {
+		names := []string{"lena", "austin", "foo"}
+
+		// Will output  :   while(1);["lena","austin","foo"]
+		c.SecureJSON(http.StatusOK, names)
+	})
+
+	// Listen and serve on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```  
+
diff --git a/README.md b/README.md
index 4117769..eda1dd7 100644
--- a/README.md
+++ b/README.md
@@ -474 +474 @@ func startPage(c *gin.Context) {
-	// See more at https://github.com/gin-gonic/gin/blob/develop/binding/binding.go#L45
+	// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48
diff --git a/README.md b/README.md
index fcf3b8c..4117769 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-<img align="right" width="159px" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.png">
+<img align="right" width="159px" src="https://raw.githubusercontent.com/gin-gonic/logo/master/color.png">
diff --git a/README.md b/README.md
index 191546f..fcf3b8c 100644
--- a/README.md
+++ b/README.md
@@ -1001 +1001 @@ func main() {
-## Users
+## Users  [![Sourcegraph](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
diff --git a/README.md b/README.md
index ecba666..191546f 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-<img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.png">
+<img align="right" width="159px" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.png">
diff --git a/README.md b/README.md
index 80158c8..ecba666 100644
--- a/README.md
+++ b/README.md
@@ -647,0 +648,2 @@ templates/users/index.tmpl
+#### Custom Template renderer
+
@@ -660,0 +663,2 @@ func main() {
+#### Custom Delimiters
+
@@ -669 +673 @@ You may use custom delims
-#### Add custom template funcs
+#### Custom Template Funcs
diff --git a/README.md b/README.md
index de38839..80158c8 100644
--- a/README.md
+++ b/README.md
@@ -16 +16,2 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-$ cat test.go
+# assume the following codes in example.go file
+$ cat example.go
@@ -34,0 +36,5 @@ func main() {
+```
+# run example.go and visit 0.0.0.0:8080/ping on browser
+$ go run example.go
+```
+
diff --git a/README.md b/README.md
index 8b7d9b2..de38839 100644
--- a/README.md
+++ b/README.md
@@ -913 +913 @@ func main() {
-	log.Fatal(autotls.RunWithManager(r, m))
+	log.Fatal(autotls.RunWithManager(r, &m))
diff --git a/README.md b/README.md
index 8275383..8b7d9b2 100644
--- a/README.md
+++ b/README.md
@@ -123 +123 @@ $ govendor init
-$ govendor add github.com/gin-gonic/gin@v1.2
+$ govendor fetch github.com/gin-gonic/gin@v1.2
diff --git a/README.md b/README.md
index 2200d9d..8275383 100644
--- a/README.md
+++ b/README.md
@@ -129 +129 @@ $ govendor add github.com/gin-gonic/gin@v1.2
-$ cp ~/go/src/github.com/gin-gonic/gin/examples/basic/* .
+$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go > main.go
diff --git a/README.md b/README.md
index 494cc8b..2200d9d 100644
--- a/README.md
+++ b/README.md
@@ -991,13 +990,0 @@ func main() {
-## Contributing 
-
-- With issues:
-  - Use the search tool before opening a new issue.
-  - Please provide source code and commit sha if you found a bug.
-  - Review existing issues and provide feedback or react to them.
-- With pull requests:
-  - Open your pull request against master
-  - Your pull request should have no more than two commits, if not you should squash them.
-  - It should pass all tests in the available continuous integrations systems such as TravisCI.
-  - You should add/modify tests to cover your proposed code changes.
-  - If your pull request contains a new feature, please document it on the README.
-
diff --git a/README.md b/README.md
index e35c2f9..494cc8b 100644
--- a/README.md
+++ b/README.md
@@ -105,0 +106,32 @@ import "net/http"
+### Use a vendor tool like [Govendor](https://github.com/kardianos/govendor)
+
+1. `go get` govendor
+
+```sh
+$ go get github.com/kardianos/govendor
+```
+2. Create your project folder and `cd` inside
+
+```sh
+$ mkdir -p ~/go/src/github.com/myusername/project && cd "$_"
+```
+
+3. Vendor init your project and add gin
+
+```sh
+$ govendor init
+$ govendor add github.com/gin-gonic/gin@v1.2
+```
+
+4. Copy a starting template inside your project
+
+```sh
+$ cp ~/go/src/github.com/gin-gonic/gin/examples/basic/* .
+```
+
+5. Run your project
+
+```sh
+$ go run main.go
+```
+
diff --git a/README.md b/README.md
index 76ec40d..e35c2f9 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-<img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.jpg">
+<img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.png">
diff --git a/README.md b/README.md
index 029606b..76ec40d 100644
--- a/README.md
+++ b/README.md
@@ -966 +966 @@ func main() {
-  - Open your pull request against develop
+  - Open your pull request against master
diff --git a/README.md b/README.md
index 1276c2e..029606b 100644
--- a/README.md
+++ b/README.md
@@ -630,0 +631,40 @@ You may use custom delims
+#### Add custom template funcs
+
+main.go
+
+```go
+	...
+	
+	func formatAsDate(t time.Time) string {
+		year, month, day := t.Date()
+		return fmt.Sprintf("%d/%02d/%02d", year, month, day)
+	}
+	
+	...
+	
+	router.SetFuncMap(template.FuncMap{
+		"formatAsDate": formatAsDate,
+	})
+	
+	...
+	
+	router.GET("/raw", func(c *Context) {
+		c.HTML(http.StatusOK, "raw.tmpl", map[string]interface{}{
+			"now": time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),
+		})
+	})
+	
+	...
+```
+
+raw.tmpl
+
+```html
+Date: {[{.now | formatAsDate}]}
+```
+
+Result:
+```
+Date: 2017/07/01
+```
+
diff --git a/README.md b/README.md
index 3397d6b..1276c2e 100644
--- a/README.md
+++ b/README.md
@@ -464 +464 @@ func main() {
-		// c.BindWith(&form, binding.Form)
+		// c.MustBindWith(&form, binding.Form)
diff --git a/README.md b/README.md
index 7556d48..3397d6b 100644
--- a/README.md
+++ b/README.md
@@ -622,0 +623,8 @@ func main() {
+You may use custom delims
+
+```go
+	r := gin.Default()
+	r.Delims("{[{", "}]}")
+	r.LoadHTMLGlob("/path/to/templates"))
+```  
+
diff --git a/README.md b/README.md
index 7a0df31..7556d48 100644
--- a/README.md
+++ b/README.md
@@ -91 +91 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-$ go get gopkg.in/gin-gonic/gin.v1
+$ go get github.com/gin-gonic/gin
@@ -97 +97 @@ $ go get gopkg.in/gin-gonic/gin.v1
-import "gopkg.in/gin-gonic/gin.v1"
+import "github.com/gin-gonic/gin"
@@ -106,8 +105,0 @@ import "net/http"
-4. (Optional) Use latest changes (note: they may be broken and/or unstable):
-
-```sh  
-$ GIN_PATH=$GOPATH/src/gopkg.in/gin-gonic/gin.v1
-$ git -C $GIN_PATH checkout develop
-$ git -C $GIN_PATH pull origin develop 
-```
-
@@ -460 +452 @@ import (
-	"gopkg.in/gin-gonic/gin.v1"
+	"github.com/gin-gonic/gin"
diff --git a/README.md b/README.md
index c6d3ead..7a0df31 100644
--- a/README.md
+++ b/README.md
@@ -22 +22 @@ package main
-import "gopkg.in/gin-gonic/gin.v1"
+import "github.com/gin-gonic/gin"
diff --git a/README.md b/README.md
index dc9c9e3..c6d3ead 100644
--- a/README.md
+++ b/README.md
@@ -1 +0,0 @@
-
@@ -18,0 +18 @@ $ cat test.go
+
@@ -90,3 +90,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```sh
-    $ go get gopkg.in/gin-gonic/gin.v1
-    ```
+```sh
+$ go get gopkg.in/gin-gonic/gin.v1
+```
@@ -96,3 +96,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```go
-    import "gopkg.in/gin-gonic/gin.v1"
-    ```
+```go
+import "gopkg.in/gin-gonic/gin.v1"
+```
@@ -102,3 +102,11 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```go
-    import "net/http"
-    ```
+```go
+import "net/http"
+```
+
+4. (Optional) Use latest changes (note: they may be broken and/or unstable):
+
+```sh  
+$ GIN_PATH=$GOPATH/src/gopkg.in/gin-gonic/gin.v1
+$ git -C $GIN_PATH checkout develop
+$ git -C $GIN_PATH pull origin develop 
+```
@@ -108 +116 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -111,0 +120,3 @@ func main() {
+	// Disable Console Color
+	// gin.DisableConsoleColor()
+
@@ -131 +142 @@ func main() {
-#### Parameters in path
+### Parameters in path
@@ -156 +167,2 @@ func main() {
-#### Querystring parameters
+### Querystring parameters
+
@@ -223 +235,3 @@ id: 1234; page: 1; name: manu; message: this_is_great
-### Another example: upload file
+### Upload files
+
+#### Single file
@@ -225 +239 @@ id: 1234; page: 1; name: manu; message: this_is_great
-References issue [#548](https://github.com/gin-gonic/gin/issues/548).
+References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](examples/upload-file/single).
@@ -229,0 +244,10 @@ func main() {
+	router.POST("/upload", func(c *gin.Context) {
+		// single file
+		file, _ := c.FormFile("file")
+		log.Println(file.Filename)
+
+		c.String(http.StatusOK, fmt.Printf("'%s' uploaded!", file.Filename))
+	})
+	router.Run(":8080")
+}
+```
@@ -230,0 +255,15 @@ func main() {
+How to `curl`:
+
+```bash
+curl -X POST http://localhost:8080/upload \
+  -F "file=@/Users/appleboy/test.zip" \
+  -H "Content-Type: multipart/form-data"
+```
+
+#### Multiple files
+
+See the detail [example code](examples/upload-file/multiple).
+
+```go
+func main() {
+	router := gin.Default()
@@ -231,0 +271,3 @@ func main() {
+		// Multipart form
+		form, _ := c.MultipartForm()
+		files := form.File["upload[]"]
@@ -233,12 +275,4 @@ func main() {
-	        file, header , err := c.Request.FormFile("upload")
-	        filename := header.Filename
-	        fmt.Println(header.Filename)
-	        out, err := os.Create("./tmp/"+filename+".png")
-	        if err != nil {
-	            log.Fatal(err)
-	        }
-	        defer out.Close()
-	        _, err = io.Copy(out, file)
-	        if err != nil {
-	            log.Fatal(err)
-	        }   
+		for _, file := range files {
+			log.Println(file.Filename)
+		}
+		c.String(http.StatusOK, fmt.Printf("%d files uploaded!", len(files)))
@@ -250 +284,11 @@ func main() {
-#### Grouping routes
+How to `curl`:
+
+```bash
+curl -X POST http://localhost:8080/upload \
+  -F "upload[]=@/Users/appleboy/test1.zip" \
+  -F "upload[]=@/Users/appleboy/test2.zip" \
+  -H "Content-Type: multipart/form-data"
+```
+
+### Grouping routes
+
@@ -275,2 +319 @@ func main() {
-
-#### Blank Gin without middleware by default
+### Blank Gin without middleware by default
@@ -282,0 +326 @@ r := gin.New()
+
@@ -290 +334 @@ r := gin.Default()
-#### Using middleware
+### Using middleware
@@ -325 +369 @@ func main() {
-#### Model binding and validation
+### Model binding and validation
@@ -374,0 +419,36 @@ func main() {
+### Bind Query String
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
+
+```go
+package main
+
+import "log"
+import "github.com/gin-gonic/gin"
+
+type Person struct {
+	Name    string `form:"name"`
+	Address string `form:"address"`
+}
+
+func main() {
+	route := gin.Default()
+	route.GET("/testing", startPage)
+	route.Run(":8085")
+}
+
+func startPage(c *gin.Context) {
+	var person Person
+	// If `GET`, only `Form` binding engine (`query`) used.
+	// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).
+	// See more at https://github.com/gin-gonic/gin/blob/develop/binding/binding.go#L45
+	if c.Bind(&person) == nil {
+		log.Println(person.Name)
+		log.Println(person.Address)
+	}
+
+	c.String(200, "Success")
+}
+```
+
+### Multipart/Urlencoded binding
@@ -376 +455,0 @@ func main() {
-###Multipart/Urlencoded binding
@@ -414,2 +493 @@ $ curl -v --form user=user --form password=password http://localhost:8080/login
-
-#### XML, JSON and YAML rendering
+### XML, JSON and YAML rendering
@@ -454 +532 @@ func main() {
-####Serving static files
+### Serving static files
@@ -468 +546 @@ func main() {
-####HTML rendering
+### HTML rendering
@@ -470 +548 @@ func main() {
-Using LoadHTMLTemplates()
+Using LoadHTMLGlob() or LoadHTMLFiles()
@@ -484,0 +563 @@ func main() {
+
@@ -485,0 +565 @@ templates/index.tmpl
+
@@ -512,0 +593 @@ func main() {
+
@@ -513,0 +595 @@ templates/posts/index.tmpl
+
@@ -522,0 +605 @@ templates/posts/index.tmpl
+
@@ -523,0 +607 @@ templates/users/index.tmpl
+
@@ -546,0 +631 @@ func main() {
+### Multitemplate
@@ -548 +633,3 @@ func main() {
-#### Redirects
+Gin allow by default use only one html.Template. Check [a multitemplate render](https://github.com/gin-contrib/multitemplate) for using features like go 1.6 `block template`.
+
+### Redirects
@@ -560 +647 @@ Both internal and external locations are supported.
-#### Custom Middleware
+### Custom Middleware
@@ -600 +687,2 @@ func main() {
-#### Using BasicAuth() middleware
+### Using BasicAuth() middleware
+
@@ -637,0 +726 @@ func main() {
+### Goroutines inside a middleware
@@ -639 +727,0 @@ func main() {
-#### Goroutines inside a middleware
@@ -671 +759 @@ func main() {
-#### Custom HTTP configuration
+### Custom HTTP configuration
@@ -698 +786,60 @@ func main() {
-#### Graceful restart or stop
+### Support Let's Encrypt
+
+example for 1-line LetsEncrypt HTTPS servers.
+
+[embedmd]:# (examples/auto-tls/example1.go go)
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/autotls"
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	r := gin.Default()
+
+	// Ping handler
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	log.Fatal(autotls.Run(r, "example1.com", "example2.com"))
+}
+```
+
+example for custom autocert manager.
+
+[embedmd]:# (examples/auto-tls/example2.go go)
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/autotls"
+	"github.com/gin-gonic/gin"
+	"golang.org/x/crypto/acme/autocert"
+)
+
+func main() {
+	r := gin.Default()
+
+	// Ping handler
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	m := autocert.Manager{
+		Prompt:     autocert.AcceptTOS,
+		HostPolicy: autocert.HostWhitelist("example1.com", "example2.com"),
+		Cache:      autocert.DirCache("/var/www/.cache"),
+	}
+
+	log.Fatal(autotls.RunWithManager(r, m))
+}
+```
+
+### Graceful restart or stop
@@ -714,0 +862,56 @@ An alternative to endless:
+* [graceful](https://github.com/tylerb/graceful): Graceful is a Go package enabling graceful shutdown of an http.Handler server.
+* [grace](https://github.com/facebookgo/grace): Graceful restart & zero downtime deploy for Go servers.
+
+If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](./examples/graceful-shutdown) example with gin.
+
+[embedmd]:# (examples/graceful-shutdown/graceful-shutdown/server.go go)
+```go
+// +build go1.8
+
+package main
+
+import (
+	"context"
+	"log"
+	"net/http"
+	"os"
+	"os/signal"
+	"time"
+
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	router := gin.Default()
+	router.GET("/", func(c *gin.Context) {
+		time.Sleep(5 * time.Second)
+		c.String(http.StatusOK, "Welcome Gin Server")
+	})
+
+	srv := &http.Server{
+		Addr:    ":8080",
+		Handler: router,
+	}
+
+	go func() {
+		// service connections
+		if err := srv.ListenAndServe(); err != nil {
+			log.Printf("listen: %s\n", err)
+		}
+	}()
+
+	// Wait for interrupt signal to gracefully shutdown the server with
+	// a timeout of 5 seconds.
+	quit := make(chan os.Signal)
+	signal.Notify(quit, os.Interrupt)
+	<-quit
+	log.Println("Shutdown Server ...")
+
+	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
+	defer cancel()
+	if err := srv.Shutdown(ctx); err != nil {
+		log.Fatal("Server Shutdown:", err)
+	}
+	log.Println("Server exist")
+}
+```
@@ -729 +932 @@ An alternative to endless:
-## Example
+## Users
diff --git a/README.md b/README.md
index 535ee4e..dc9c9e3 100644
--- a/README.md
+++ b/README.md
@@ -1 +0,0 @@
-# Gin Web Framework <img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.jpg">
@@ -3 +2,9 @@
-[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin) [![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin) [![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin) [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin) [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Sourcegraph Badge](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
+# Gin Web Framework
+
+<img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.jpg">
+
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
+ [![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin)
+ [![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin)
+ [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
+ [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
@@ -12 +18,0 @@ $ cat test.go
-
@@ -84,3 +90,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-```sh
-$ go get gopkg.in/gin-gonic/gin.v1
-```
+    ```sh
+    $ go get gopkg.in/gin-gonic/gin.v1
+    ```
@@ -90,3 +96,3 @@ $ go get gopkg.in/gin-gonic/gin.v1
-```go
-import "gopkg.in/gin-gonic/gin.v1"
-```
+    ```go
+    import "gopkg.in/gin-gonic/gin.v1"
+    ```
@@ -96,11 +102,3 @@ import "gopkg.in/gin-gonic/gin.v1"
-```go
-import "net/http"
-```
-
-4. (Optional) Use latest changes (note: they may be broken and/or unstable):
-
-```sh  
-$ GIN_PATH=$GOPATH/src/gopkg.in/gin-gonic/gin.v1
-$ git -C $GIN_PATH checkout develop
-$ git -C $GIN_PATH pull origin develop 
-```
+    ```go
+    import "net/http"
+    ```
@@ -110 +108 @@ $ git -C $GIN_PATH pull origin develop
-### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -114,3 +111,0 @@ func main() {
-	// Disable Console Color
-	// gin.DisableConsoleColor()
-
@@ -136 +131 @@ func main() {
-### Parameters in path
+#### Parameters in path
@@ -161,2 +156 @@ func main() {
-### Querystring parameters
-
+#### Querystring parameters
@@ -229 +223 @@ id: 1234; page: 1; name: manu; message: this_is_great
-### Upload files
+### Another example: upload file
@@ -231,3 +225 @@ id: 1234; page: 1; name: manu; message: this_is_great
-#### Single file
-
-References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](examples/upload-file/single).
+References issue [#548](https://github.com/gin-gonic/gin/issues/548).
@@ -238,12 +229,0 @@ func main() {
-	router.POST("/upload", func(c *gin.Context) {
-		// single file
-		file, _ := c.FormFile("file")
-		log.Println(file.Filename)
-
-		c.String(http.StatusOK, fmt.Printf("'%s' uploaded!", file.Filename))
-	})
-	router.Run(":8080")
-}
-```
-
-How to `curl`:
@@ -251,13 +230,0 @@ How to `curl`:
-```bash
-curl -X POST http://localhost:8080/upload \
-  -F "file=@/Users/appleboy/test.zip" \
-  -H "Content-Type: multipart/form-data"
-```
-
-#### Multiple files
-
-See the detail [example code](examples/upload-file/multiple).
-
-```go
-func main() {
-	router := gin.Default()
@@ -265,3 +231,0 @@ func main() {
-		// Multipart form
-		form, _ := c.MultipartForm()
-		files := form.File["upload[]"]
@@ -269,4 +233,12 @@ func main() {
-		for _, file := range files {
-			log.Println(file.Filename)
-		}
-		c.String(http.StatusOK, fmt.Printf("%d files uploaded!", len(files)))
+	        file, header , err := c.Request.FormFile("upload")
+	        filename := header.Filename
+	        fmt.Println(header.Filename)
+	        out, err := os.Create("./tmp/"+filename+".png")
+	        if err != nil {
+	            log.Fatal(err)
+	        }
+	        defer out.Close()
+	        _, err = io.Copy(out, file)
+	        if err != nil {
+	            log.Fatal(err)
+	        }   
@@ -278,11 +250 @@ func main() {
-How to `curl`:
-
-```bash
-curl -X POST http://localhost:8080/upload \
-  -F "upload[]=@/Users/appleboy/test1.zip" \
-  -F "upload[]=@/Users/appleboy/test2.zip" \
-  -H "Content-Type: multipart/form-data"
-```
-
-### Grouping routes
-
+#### Grouping routes
@@ -313 +275,2 @@ func main() {
-### Blank Gin without middleware by default
+
+#### Blank Gin without middleware by default
@@ -320 +282,0 @@ r := gin.New()
-
@@ -328 +290 @@ r := gin.Default()
-### Using middleware
+#### Using middleware
@@ -363 +325 @@ func main() {
-### Model binding and validation
+#### Model binding and validation
@@ -413,36 +374,0 @@ func main() {
-### Bind Query String
-
-See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
-
-```go
-package main
-
-import "log"
-import "github.com/gin-gonic/gin"
-
-type Person struct {
-	Name    string `form:"name"`
-	Address string `form:"address"`
-}
-
-func main() {
-	route := gin.Default()
-	route.GET("/testing", startPage)
-	route.Run(":8085")
-}
-
-func startPage(c *gin.Context) {
-	var person Person
-	// If `GET`, only `Form` binding engine (`query`) used.
-	// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).
-	// See more at https://github.com/gin-gonic/gin/blob/develop/binding/binding.go#L45
-	if c.Bind(&person) == nil {
-		log.Println(person.Name)
-		log.Println(person.Address)
-	}
-
-	c.String(200, "Success")
-}
-```
-
-### Multipart/Urlencoded binding
@@ -449,0 +376 @@ func startPage(c *gin.Context) {
+###Multipart/Urlencoded binding
@@ -487 +414,2 @@ $ curl -v --form user=user --form password=password http://localhost:8080/login
-### XML, JSON and YAML rendering
+
+#### XML, JSON and YAML rendering
@@ -526 +454 @@ func main() {
-### Serving static files
+####Serving static files
@@ -540 +468 @@ func main() {
-### HTML rendering
+####HTML rendering
@@ -542 +470 @@ func main() {
-Using LoadHTMLGlob() or LoadHTMLFiles()
+Using LoadHTMLTemplates()
@@ -557 +484,0 @@ func main() {
-
@@ -559 +485,0 @@ templates/index.tmpl
-
@@ -587 +512,0 @@ func main() {
-
@@ -589 +513,0 @@ templates/posts/index.tmpl
-
@@ -599 +522,0 @@ templates/posts/index.tmpl
-
@@ -601 +523,0 @@ templates/users/index.tmpl
-
@@ -625 +546,0 @@ func main() {
-### Multitemplate
@@ -627,3 +548 @@ func main() {
-Gin allow by default use only one html.Template. Check [a multitemplate render](https://github.com/gin-contrib/multitemplate) for using features like go 1.6 `block template`.
-
-### Redirects
+#### Redirects
@@ -641 +560 @@ Both internal and external locations are supported.
-### Custom Middleware
+#### Custom Middleware
@@ -681,2 +600 @@ func main() {
-### Using BasicAuth() middleware
-
+#### Using BasicAuth() middleware
@@ -720 +637,0 @@ func main() {
-### Goroutines inside a middleware
@@ -721,0 +639 @@ func main() {
+#### Goroutines inside a middleware
@@ -753 +671 @@ func main() {
-### Custom HTTP configuration
+#### Custom HTTP configuration
@@ -780,60 +698 @@ func main() {
-### Support Let's Encrypt
-
-example for 1-line LetsEncrypt HTTPS servers.
-
-[embedmd]:# (examples/auto-tls/example1.go go)
-```go
-package main
-
-import (
-	"log"
-
-	"github.com/gin-gonic/autotls"
-	"github.com/gin-gonic/gin"
-)
-
-func main() {
-	r := gin.Default()
-
-	// Ping handler
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	log.Fatal(autotls.Run(r, "example1.com", "example2.com"))
-}
-```
-
-example for custom autocert manager.
-
-[embedmd]:# (examples/auto-tls/example2.go go)
-```go
-package main
-
-import (
-	"log"
-
-	"github.com/gin-gonic/autotls"
-	"github.com/gin-gonic/gin"
-	"golang.org/x/crypto/acme/autocert"
-)
-
-func main() {
-	r := gin.Default()
-
-	// Ping handler
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	m := autocert.Manager{
-		Prompt:     autocert.AcceptTOS,
-		HostPolicy: autocert.HostWhitelist("example1.com", "example2.com"),
-		Cache:      autocert.DirCache("/var/www/.cache"),
-	}
-
-	log.Fatal(autotls.RunWithManager(r, m))
-}
-```
-
-### Graceful restart or stop
+#### Graceful restart or stop
@@ -856,56 +714,0 @@ An alternative to endless:
-* [graceful](https://github.com/tylerb/graceful): Graceful is a Go package enabling graceful shutdown of an http.Handler server.
-* [grace](https://github.com/facebookgo/grace): Graceful restart & zero downtime deploy for Go servers.
-
-If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](./examples/graceful-shutdown) example with gin.
-
-[embedmd]:# (examples/graceful-shutdown/graceful-shutdown/server.go go)
-```go
-// +build go1.8
-
-package main
-
-import (
-	"context"
-	"log"
-	"net/http"
-	"os"
-	"os/signal"
-	"time"
-
-	"github.com/gin-gonic/gin"
-)
-
-func main() {
-	router := gin.Default()
-	router.GET("/", func(c *gin.Context) {
-		time.Sleep(5 * time.Second)
-		c.String(http.StatusOK, "Welcome Gin Server")
-	})
-
-	srv := &http.Server{
-		Addr:    ":8080",
-		Handler: router,
-	}
-
-	go func() {
-		// service connections
-		if err := srv.ListenAndServe(); err != nil {
-			log.Printf("listen: %s\n", err)
-		}
-	}()
-
-	// Wait for interrupt signal to gracefully shutdown the server with
-	// a timeout of 5 seconds.
-	quit := make(chan os.Signal)
-	signal.Notify(quit, os.Interrupt)
-	<-quit
-	log.Println("Shutdown Server ...")
-
-	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
-	defer cancel()
-	if err := srv.Shutdown(ctx); err != nil {
-		log.Fatal("Server Shutdown:", err)
-	}
-	log.Println("Server exist")
-}
-```
@@ -926 +729 @@ func main() {
-## Users
+## Example
diff --git a/README.md b/README.md
index 883f9d5..535ee4e 100644
--- a/README.md
+++ b/README.md
@@ -779,0 +780,59 @@ func main() {
+### Support Let's Encrypt
+
+example for 1-line LetsEncrypt HTTPS servers.
+
+[embedmd]:# (examples/auto-tls/example1.go go)
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/autotls"
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	r := gin.Default()
+
+	// Ping handler
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	log.Fatal(autotls.Run(r, "example1.com", "example2.com"))
+}
+```
+
+example for custom autocert manager.
+
+[embedmd]:# (examples/auto-tls/example2.go go)
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gin-gonic/autotls"
+	"github.com/gin-gonic/gin"
+	"golang.org/x/crypto/acme/autocert"
+)
+
+func main() {
+	r := gin.Default()
+
+	// Ping handler
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	m := autocert.Manager{
+		Prompt:     autocert.AcceptTOS,
+		HostPolicy: autocert.HostWhitelist("example1.com", "example2.com"),
+		Cache:      autocert.DirCache("/var/www/.cache"),
+	}
+
+	log.Fatal(autotls.RunWithManager(r, m))
+}
+```
+
diff --git a/README.md b/README.md
index 9bcc8f5..883f9d5 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,3 @@
-# Gin Web Framework
-
-<img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.jpg">
-[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
-[![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin)
-[![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin)
-[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
-[![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
-[![Sourcegraph Badge](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
+# Gin Web Framework <img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.jpg">
+
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin) [![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin) [![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin) [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin) [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Sourcegraph Badge](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
diff --git a/README.md b/README.md
index ea184bb..9bcc8f5 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1 @@
-
-#Gin Web Framework
+# Gin Web Framework
@@ -18,0 +18 @@ $ cat test.go
+
@@ -90,3 +90,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```sh
-    $ go get gopkg.in/gin-gonic/gin.v1
-    ```
+```sh
+$ go get gopkg.in/gin-gonic/gin.v1
+```
@@ -96,3 +96,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```go
-    import "gopkg.in/gin-gonic/gin.v1"
-    ```
+```go
+import "gopkg.in/gin-gonic/gin.v1"
+```
@@ -102,3 +102,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```go
-    import "net/http"
-    ```
+```go
+import "net/http"
+```
@@ -108,4 +108,4 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
- ```sh  
-    $ GIN_PATH=$GOPATH/src/gopkg.in/gin-gonic/gin.v1
-    $ git -C $GIN_PATH checkout develop
-    $ git -C $GIN_PATH pull origin develop 
+```sh  
+$ GIN_PATH=$GOPATH/src/gopkg.in/gin-gonic/gin.v1
+$ git -C $GIN_PATH checkout develop
+$ git -C $GIN_PATH pull origin develop 
@@ -167,0 +168 @@ func main() {
+
@@ -318 +318,0 @@ func main() {
-
@@ -325,0 +326 @@ r := gin.New()
+
@@ -453 +453,0 @@ func startPage(c *gin.Context) {
-
@@ -493 +492,0 @@ $ curl -v --form user=user --form password=password http://localhost:8080/login
-
@@ -563,0 +563 @@ func main() {
+
@@ -564,0 +565 @@ templates/index.tmpl
+
@@ -591,0 +593 @@ func main() {
+
@@ -592,0 +595 @@ templates/posts/index.tmpl
+
@@ -601,0 +605 @@ templates/posts/index.tmpl
+
@@ -602,0 +607 @@ templates/users/index.tmpl
+
@@ -682,0 +688 @@ func main() {
+
@@ -720 +725,0 @@ func main() {
-
@@ -721,0 +727 @@ func main() {
+
@@ -796,0 +803,56 @@ An alternative to endless:
+* [graceful](https://github.com/tylerb/graceful): Graceful is a Go package enabling graceful shutdown of an http.Handler server.
+* [grace](https://github.com/facebookgo/grace): Graceful restart & zero downtime deploy for Go servers.
+
+If you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](./examples/graceful-shutdown) example with gin.
+
+[embedmd]:# (examples/graceful-shutdown/graceful-shutdown/server.go go)
+```go
+// +build go1.8
+
+package main
+
+import (
+	"context"
+	"log"
+	"net/http"
+	"os"
+	"os/signal"
+	"time"
+
+	"github.com/gin-gonic/gin"
+)
+
+func main() {
+	router := gin.Default()
+	router.GET("/", func(c *gin.Context) {
+		time.Sleep(5 * time.Second)
+		c.String(http.StatusOK, "Welcome Gin Server")
+	})
+
+	srv := &http.Server{
+		Addr:    ":8080",
+		Handler: router,
+	}
+
+	go func() {
+		// service connections
+		if err := srv.ListenAndServe(); err != nil {
+			log.Printf("listen: %s\n", err)
+		}
+	}()
+
+	// Wait for interrupt signal to gracefully shutdown the server with
+	// a timeout of 5 seconds.
+	quit := make(chan os.Signal)
+	signal.Notify(quit, os.Interrupt)
+	<-quit
+	log.Println("Shutdown Server ...")
+
+	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
+	defer cancel()
+	if err := srv.Shutdown(ctx); err != nil {
+		log.Fatal("Server Shutdown:", err)
+	}
+	log.Println("Server exist")
+}
+```
diff --git a/README.md b/README.md
index 7046b98..ea184bb 100644
--- a/README.md
+++ b/README.md
@@ -9,0 +10 @@
+[![Sourcegraph Badge](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)
diff --git a/README.md b/README.md
index c940a10..7046b98 100644
--- a/README.md
+++ b/README.md
@@ -106 +106,2 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```sh
+
+ ```sh  
@@ -109,2 +110,2 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    $ git -C $GIN_PATH pull origin develop
-    ```
+    $ git -C $GIN_PATH pull origin develop 
+```
diff --git a/README.md b/README.md
index 0c08556..c940a10 100644
--- a/README.md
+++ b/README.md
@@ -623,0 +624,3 @@ func main() {
+### Multitemplate
+
+Gin allow by default use only one html.Template. Check [a multitemplate render](https://github.com/gin-contrib/multitemplate) for using features like go 1.6 `block template`.
diff --git a/README.md b/README.md
index 571c7ce..0c08556 100644
--- a/README.md
+++ b/README.md
@@ -114 +114 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -140 +140 @@ func main() {
-#### Parameters in path
+### Parameters in path
@@ -165 +165 @@ func main() {
-#### Querystring parameters
+### Querystring parameters
@@ -232 +232 @@ id: 1234; page: 1; name: manu; message: this_is_great
-### upload file
+### Upload files
@@ -234 +234 @@ id: 1234; page: 1; name: manu; message: this_is_great
-#### upload single file
+#### Single file
@@ -246 +246 @@ func main() {
-		c.String(http.StatusOK, "Uploaded...")
+		c.String(http.StatusOK, fmt.Printf("'%s' uploaded!", file.Filename))
@@ -252 +252 @@ func main() {
-curl command:
+How to `curl`:
@@ -260 +260 @@ curl -X POST http://localhost:8080/upload \
-#### upload multiple files
+#### Multiple files
@@ -275 +275 @@ func main() {
-		c.String(http.StatusOK, "Uploaded...")
+		c.String(http.StatusOK, fmt.Printf("%d files uploaded!", len(files)))
@@ -281 +281 @@ func main() {
-curl command:
+How to `curl`:
@@ -290 +290 @@ curl -X POST http://localhost:8080/upload \
-#### Grouping routes
+### Grouping routes
@@ -317 +317 @@ func main() {
-#### Blank Gin without middleware by default
+### Blank Gin without middleware by default
@@ -331 +331 @@ r := gin.Default()
-#### Using middleware
+### Using middleware
@@ -366 +366 @@ func main() {
-#### Model binding and validation
+### Model binding and validation
@@ -416 +416 @@ func main() {
-#### Bind Query String
+### Bind Query String
@@ -492 +492 @@ $ curl -v --form user=user --form password=password http://localhost:8080/login
-#### XML, JSON and YAML rendering
+### XML, JSON and YAML rendering
@@ -531 +531 @@ func main() {
-####Serving static files
+### Serving static files
@@ -545 +545 @@ func main() {
-####HTML rendering
+### HTML rendering
@@ -625 +625 @@ func main() {
-#### Redirects
+### Redirects
@@ -637 +637 @@ Both internal and external locations are supported.
-#### Custom Middleware
+### Custom Middleware
@@ -677 +677 @@ func main() {
-#### Using BasicAuth() middleware
+### Using BasicAuth() middleware
@@ -716 +716 @@ func main() {
-#### Goroutines inside a middleware
+### Goroutines inside a middleware
@@ -748 +748 @@ func main() {
-#### Custom HTTP configuration
+### Custom HTTP configuration
@@ -775 +775 @@ func main() {
-#### Graceful restart or stop
+### Graceful restart or stop
@@ -806 +806 @@ An alternative to endless:
-## Example
+## Users
diff --git a/README.md b/README.md
index 7669edf..571c7ce 100644
--- a/README.md
+++ b/README.md
@@ -236 +236 @@ id: 1234; page: 1; name: manu; message: this_is_great
-References issue [#774](https://github.com/gin-gonic/gin/issues/774).
+References issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](examples/upload-file/single).
@@ -261,0 +262,2 @@ curl -X POST http://localhost:8080/upload \
+See the detail [example code](examples/upload-file/multiple).
+
diff --git a/README.md b/README.md
index 19d9088..7669edf 100644
--- a/README.md
+++ b/README.md
@@ -232 +232 @@ id: 1234; page: 1; name: manu; message: this_is_great
-### Another example: upload file
+### upload file
@@ -234 +234,3 @@ id: 1234; page: 1; name: manu; message: this_is_great
-References issue [#548](https://github.com/gin-gonic/gin/issues/548).
+#### upload single file
+
+References issue [#774](https://github.com/gin-gonic/gin/issues/774).
@@ -239 +240,0 @@ func main() {
-
@@ -240,0 +242,3 @@ func main() {
+		// single file
+		file, _ := c.FormFile("file")
+		log.Println(file.Filename)
@@ -242,12 +246 @@ func main() {
-	        file, header , err := c.Request.FormFile("upload")
-	        filename := header.Filename
-	        fmt.Println(header.Filename)
-	        out, err := os.Create("./tmp/"+filename+".png")
-	        if err != nil {
-	            log.Fatal(err)
-	        }
-	        defer out.Close()
-	        _, err = io.Copy(out, file)
-	        if err != nil {
-	            log.Fatal(err)
-	        }   
+		c.String(http.StatusOK, "Uploaded...")
@@ -258,0 +252,36 @@ func main() {
+curl command:
+
+```bash
+curl -X POST http://localhost:8080/upload \
+  -F "file=@/Users/appleboy/test.zip" \
+  -H "Content-Type: multipart/form-data"
+```
+
+#### upload multiple files
+
+```go
+func main() {
+	router := gin.Default()
+	router.POST("/upload", func(c *gin.Context) {
+		// Multipart form
+		form, _ := c.MultipartForm()
+		files := form.File["upload[]"]
+
+		for _, file := range files {
+			log.Println(file.Filename)
+		}
+		c.String(http.StatusOK, "Uploaded...")
+	})
+	router.Run(":8080")
+}
+```
+
+curl command:
+
+```bash
+curl -X POST http://localhost:8080/upload \
+  -F "upload[]=@/Users/appleboy/test1.zip" \
+  -F "upload[]=@/Users/appleboy/test2.zip" \
+  -H "Content-Type: multipart/form-data"
+```
+
@@ -259,0 +289 @@ func main() {
+
diff --git a/README.md b/README.md
index 4934564..19d9088 100644
--- a/README.md
+++ b/README.md
@@ -406,0 +407,3 @@ func startPage(c *gin.Context) {
+	// If `GET`, only `Form` binding engine (`query`) used.
+	// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).
+	// See more at https://github.com/gin-gonic/gin/blob/develop/binding/binding.go#L45
diff --git a/README.md b/README.md
index 536022c..4934564 100644
--- a/README.md
+++ b/README.md
@@ -383,0 +384,34 @@ func main() {
+#### Bind Query String
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
+
+```go
+package main
+
+import "log"
+import "github.com/gin-gonic/gin"
+
+type Person struct {
+	Name    string `form:"name"`
+	Address string `form:"address"`
+}
+
+func main() {
+	route := gin.Default()
+	route.GET("/testing", startPage)
+	route.Run(":8085")
+}
+
+func startPage(c *gin.Context) {
+	var person Person
+	if c.Bind(&person) == nil {
+		log.Println(person.Name)
+		log.Println(person.Address)
+	}
+
+	c.String(200, "Success")
+}
+```
+
+
+### Multipart/Urlencoded binding
@@ -385 +418,0 @@ func main() {
-###Multipart/Urlencoded binding
diff --git a/README.md b/README.md
index e0307ea..536022c 100644
--- a/README.md
+++ b/README.md
@@ -104,0 +105,7 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
+4. (Optional) Use latest changes (note: they may be broken and/or unstable):
+    ```sh
+    $ GIN_PATH=$GOPATH/src/gopkg.in/gin-gonic/gin.v1
+    $ git -C $GIN_PATH checkout develop
+    $ git -C $GIN_PATH pull origin develop
+    ```
+
@@ -377,34 +383,0 @@ func main() {
-#### Bind Query String
-
-See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
-
-```go
-package main
-
-import "log"
-import "github.com/gin-gonic/gin"
-
-type Person struct {
-	Name    string `form:"name"`
-	Address string `form:"address"`
-}
-
-func main() {
-	route := gin.Default()
-	route.GET("/testing", startPage)
-	route.Run(":8085")
-}
-
-func startPage(c *gin.Context) {
-	var person Person
-	if c.Bind(&person) == nil {
-		log.Println(person.Name)
-		log.Println(person.Address)
-	}
-
-	c.String(200, "Success")
-}
-```
-
-
-### Multipart/Urlencoded binding
@@ -411,0 +385 @@ func startPage(c *gin.Context) {
+###Multipart/Urlencoded binding
diff --git a/README.md b/README.md
index e48da26..e0307ea 100644
--- a/README.md
+++ b/README.md
@@ -376,0 +377,34 @@ func main() {
+#### Bind Query String
+
+See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).
+
+```go
+package main
+
+import "log"
+import "github.com/gin-gonic/gin"
+
+type Person struct {
+	Name    string `form:"name"`
+	Address string `form:"address"`
+}
+
+func main() {
+	route := gin.Default()
+	route.GET("/testing", startPage)
+	route.Run(":8085")
+}
+
+func startPage(c *gin.Context) {
+	var person Person
+	if c.Bind(&person) == nil {
+		log.Println(person.Name)
+		log.Println(person.Address)
+	}
+
+	c.String(200, "Success")
+}
+```
+
+
+### Multipart/Urlencoded binding
@@ -378 +411,0 @@ func main() {
-###Multipart/Urlencoded binding
diff --git a/README.md b/README.md
index b215d3f..e48da26 100644
--- a/README.md
+++ b/README.md
@@ -110,0 +111,3 @@ func main() {
+	// Disable Console Color
+	// gin.DisableConsoleColor()
+
diff --git a/README.md b/README.md
index 82ea6a5..b215d3f 100644
--- a/README.md
+++ b/README.md
@@ -469 +469 @@ func main() {
-Using LoadHTMLTemplates()
+Using LoadHTMLGlob() or LoadHTMLFiles()
diff --git a/README.md b/README.md
index f47559b..82ea6a5 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ package main
-import "github.com/gin-gonic/gin"
+import "gopkg.in/gin-gonic/gin.v1"
@@ -90 +90 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    $ go get github.com/gin-gonic/gin
+    $ go get gopkg.in/gin-gonic/gin.v1
@@ -96 +96 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    import "github.com/gin-gonic/gin"
+    import "gopkg.in/gin-gonic/gin.v1"
@@ -380,2 +380 @@ import (
-	"github.com/gin-gonic/gin"
-	"github.com/gin-gonic/gin/binding"
+	"gopkg.in/gin-gonic/gin.v1"
@@ -715,0 +715,13 @@ An alternative to endless:
+## Contributing 
+
+- With issues:
+  - Use the search tool before opening a new issue.
+  - Please provide source code and commit sha if you found a bug.
+  - Review existing issues and provide feedback or react to them.
+- With pull requests:
+  - Open your pull request against develop
+  - Your pull request should have no more than two commits, if not you should squash them.
+  - It should pass all tests in the available continuous integrations systems such as TravisCI.
+  - You should add/modify tests to cover your proposed code changes.
+  - If your pull request contains a new feature, please document it on the README.
+
diff --git a/README.md b/README.md
index 5ec78f8..f47559b 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3 @@
+
@@ -5 +6 @@
-[![Coverage Status](https://coveralls.io/repos/gin-gonic/gin/badge.svg?branch=master)](https://coveralls.io/r/gin-gonic/gin?branch=master)
+[![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin)
@@ -12,2 +12,0 @@ Gin is a web framework written in Go (Golang). It features a martini-like API wi
-
-
diff --git a/README.md b/README.md
index 75e7417..5ec78f8 100644
--- a/README.md
+++ b/README.md
@@ -31 +31 @@ func main() {
-	r.Run() // listen and server on 0.0.0.0:8080
+	r.Run() // listen and serve on 0.0.0.0:8080
@@ -91 +91 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    $ go get gopkg.in/gin-gonic/gin.v1
+    $ go get github.com/gin-gonic/gin
@@ -97 +97 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    import "gopkg.in/gin-gonic/gin.v1"
+    import "github.com/gin-gonic/gin"
@@ -320 +320 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -370 +370 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -450 +450 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -464 +464 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -596 +596 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -634 +634 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -667 +667 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
@@ -717,13 +716,0 @@ An alternative to endless:
-## Contributing 
-
-- With issues:
-  - Use the search tool before opening a new issue.
-  - Please provide source code and commit sha if you found a bug.
-  - Review existing issues and provide feedback or react to them.
-- With pull requests:
-  - Open your pull request against develop
-  - Your pull request should have no more than two commits, if not you should squash them.
-  - It should pass all tests in the available continuous integrations systems such as TravisCI.
-  - You should add/modify tests to cover your proposed code changes.
-  - If your pull request contains a new feature, please document it on the README.
-
diff --git a/README.md b/README.md
index c4cbfbb..75e7417 100644
--- a/README.md
+++ b/README.md
@@ -91 +91 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    $ go get github.com/gin-gonic/gin
+    $ go get gopkg.in/gin-gonic/gin.v1
@@ -97 +97 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    import "github.com/gin-gonic/gin"
+    import "gopkg.in/gin-gonic/gin.v1"
diff --git a/README.md b/README.md
index d6fddf4..c4cbfbb 100644
--- a/README.md
+++ b/README.md
@@ -471 +471 @@ func main() {
-Using LoadHTMLGlob() or LoadHTMLFiles()
+Using LoadHTMLTemplates()
@@ -716,0 +717,13 @@ An alternative to endless:
+## Contributing 
+
+- With issues:
+  - Use the search tool before opening a new issue.
+  - Please provide source code and commit sha if you found a bug.
+  - Review existing issues and provide feedback or react to them.
+- With pull requests:
+  - Open your pull request against develop
+  - Your pull request should have no more than two commits, if not you should squash them.
+  - It should pass all tests in the available continuous integrations systems such as TravisCI.
+  - You should add/modify tests to cover your proposed code changes.
+  - If your pull request contains a new feature, please document it on the README.
+
diff --git a/README.md b/README.md
index 8023dc5..d6fddf4 100644
--- a/README.md
+++ b/README.md
@@ -471 +471 @@ func main() {
-Using LoadHTMLTemplates()
+Using LoadHTMLGlob() or LoadHTMLFiles()
diff --git a/README.md b/README.md
index b734ac0..8023dc5 100644
--- a/README.md
+++ b/README.md
@@ -77 +77 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-##Gin v1. stable
+## Gin v1. stable
@@ -86,0 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
+
@@ -105 +106 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-##API Examples
+## API Examples
@@ -714,0 +716,7 @@ An alternative to endless:
+
+## Example
+
+Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framework.
+
+* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go
+* [gorush](https://github.com/appleboy/gorush): A push notification server written in Go.
diff --git a/README.md b/README.md
index d3d8c33..b734ac0 100644
--- a/README.md
+++ b/README.md
@@ -77 +77 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-## Gin v1. stable
+##Gin v1. stable
@@ -87 +86,0 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-
@@ -106 +105 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-## API Examples
+##API Examples
@@ -416 +415 @@ $ curl -v --form user=user --form password=password http://localhost:8080/login
-#### XML and JSON rendering
+#### XML, JSON and YAML rendering
@@ -445,0 +445,4 @@ func main() {
+	r.GET("/someYAML", func(c *gin.Context) {
+		c.YAML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
+	})
+
@@ -712,7 +714,0 @@ An alternative to endless:
-
-## Example
-
-Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framework.
-
-* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go
-* [gorush](https://github.com/appleboy/gorush): A push notification server written in Go.
diff --git a/README.md b/README.md
index 99a6d0b..d3d8c33 100644
--- a/README.md
+++ b/README.md
@@ -77 +77 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-##Gin v1. stable
+## Gin v1. stable
@@ -86,0 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
+
@@ -105 +106 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-##API Examples
+## API Examples
@@ -710,0 +712,7 @@ An alternative to endless:
+
+## Example
+
+Awesome project lists using [Gin](https://github.com/gin-gonic/gin) web framework.
+
+* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go
+* [gorush](https://github.com/appleboy/gorush): A push notification server written in Go.
diff --git a/README.md b/README.md
index 9cfba23..99a6d0b 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@
-[![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)]
+[![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin)
diff --git a/README.md b/README.md
index 47ebbed..9cfba23 100644
--- a/README.md
+++ b/README.md
@@ -5,0 +6 @@
+[![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)]
diff --git a/README.md b/README.md
index 0ffe16d..47ebbed 100644
--- a/README.md
+++ b/README.md
@@ -223 +223 @@ id: 1234; page: 1; name: manu; message: this_is_great
-Reference issue [#548](https://github.com/gin-gonic/gin/issues/548)
+References issue [#548](https://github.com/gin-gonic/gin/issues/548).
@@ -303 +303 @@ func main() {
-	// exactly the same than:
+	// exactly the same as:
@@ -648 +648 @@ func main() {
-			// note than you are using the copied context "c_cp", IMPORTANT
+			// note that you are using the copied context "cCp", IMPORTANT
@@ -696 +696 @@ Do you want to graceful restart or stop your web server?
-There be some ways.
+There are some ways this can be done.
@@ -698,5 +698 @@ There be some ways.
-We can using fvbock/endless to replace the default ListenAndServe
-
-Refer the issue for more details:
-
-https://github.com/gin-gonic/gin/issues/296
+We can use [fvbock/endless](https://github.com/fvbock/endless) to replace the default `ListenAndServe`. Refer issue [#296](https://github.com/gin-gonic/gin/issues/296) for more details.
diff --git a/README.md b/README.md
index 4e4b19c..0ffe16d 100644
--- a/README.md
+++ b/README.md
@@ -709 +708,0 @@ endless.ListenAndServe(":4242", router)
-
@@ -710,0 +710,4 @@ endless.ListenAndServe(":4242", router)
+
+An alternative to endless:
+
+* [manners](https://github.com/braintree/manners): A polite Go HTTP server that shuts down gracefully.
diff --git a/README.md b/README.md
index 37047d2..4e4b19c 100644
--- a/README.md
+++ b/README.md
@@ -220,0 +221,26 @@ id: 1234; page: 1; name: manu; message: this_is_great
+### Another example: upload file
+
+Reference issue [#548](https://github.com/gin-gonic/gin/issues/548)
+
+```go
+func main() {
+	router := gin.Default()
+
+	router.POST("/upload", func(c *gin.Context) {
+
+	        file, header , err := c.Request.FormFile("upload")
+	        filename := header.Filename
+	        fmt.Println(header.Filename)
+	        out, err := os.Create("./tmp/"+filename+".png")
+	        if err != nil {
+	            log.Fatal(err)
+	        }
+	        defer out.Close()
+	        _, err = io.Copy(out, file)
+	        if err != nil {
+	            log.Fatal(err)
+	        }   
+	})
+	router.Run(":8080")
+}
+```
@@ -683,3 +708,0 @@ endless.ListenAndServe(":4242", router)
-```
-
-An alternative to endless:
@@ -687 +710 @@ An alternative to endless:
-* [manners](https://github.com/braintree/manners): A polite Go HTTP server that shuts down gracefully.
+```
diff --git a/README.md b/README.md
index 56d9f6e..37047d2 100644
--- a/README.md
+++ b/README.md
@@ -683 +682,0 @@ endless.ListenAndServe(":4242", router)
-
@@ -684,0 +684,4 @@ endless.ListenAndServe(":4242", router)
+
+An alternative to endless:
+
+* [manners](https://github.com/braintree/manners): A polite Go HTTP server that shuts down gracefully.
diff --git a/README.md b/README.md
index f47e020..56d9f6e 100644
--- a/README.md
+++ b/README.md
@@ -9 +9 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
+Gin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
@@ -27 +27 @@ func main() {
-			"message": "hello world",
+			"message": "pong",
@@ -88,3 +88,4 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-```sh
-$ go get github.com/gin-gonic/gin
-```
+    ```sh
+    $ go get github.com/gin-gonic/gin
+    ```
+
@@ -93,3 +94,9 @@ $ go get github.com/gin-gonic/gin
-```go
-import "github.com/gin-gonic/gin"
-```
+    ```go
+    import "github.com/gin-gonic/gin"
+    ```
+
+3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
+
+    ```go
+    import "net/http"
+    ```
@@ -118 +125 @@ func main() {
-	// router.Run.Run(":3000") for a hard coded port
+	// router.Run(":3000") for a hard coded port
diff --git a/README.md b/README.md
index 9dd074a..f47e020 100644
--- a/README.md
+++ b/README.md
@@ -9 +9 @@
-Gin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
@@ -27 +27 @@ func main() {
-			"message": "pong",
+			"message": "hello world",
@@ -88,4 +88,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```sh
-    $ go get github.com/gin-gonic/gin
-    ```
-
+```sh
+$ go get github.com/gin-gonic/gin
+```
@@ -94,9 +93,3 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-    ```go
-    import "github.com/gin-gonic/gin"
-    ```
-
-3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
-
-    ```go
-    import "net/http"
-    ```
+```go
+import "github.com/gin-gonic/gin"
+```
@@ -125 +118 @@ func main() {
-	// router.Run(":3000") for a hard coded port
+	// router.Run.Run(":3000") for a hard coded port
@@ -593 +586 @@ func main() {
-		// get user, it was setted by the BasicAuth middleware
+		// get user, it was set by the BasicAuth middleware
diff --git a/README.md b/README.md
index 0086666..9dd074a 100644
--- a/README.md
+++ b/README.md
@@ -98 +98 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-3. Import net/http if required:
+3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.
diff --git a/README.md b/README.md
index 53763a3..0086666 100644
--- a/README.md
+++ b/README.md
@@ -88,3 +88,4 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-```sh
-$ go get github.com/gin-gonic/gin
-```
+    ```sh
+    $ go get github.com/gin-gonic/gin
+    ```
+
@@ -93,3 +94,9 @@ $ go get github.com/gin-gonic/gin
-```go
-import "github.com/gin-gonic/gin"
-```
+    ```go
+    import "github.com/gin-gonic/gin"
+    ```
+
+3. Import net/http if required:
+
+    ```go
+    import "net/http"
+    ```
diff --git a/README.md b/README.md
index 14bfe0e..53763a3 100644
--- a/README.md
+++ b/README.md
@@ -118 +118 @@ func main() {
-	// router.Run.Run(":3000") for a hard coded port
+	// router.Run(":3000") for a hard coded port
diff --git a/README.md b/README.md
index 7db3fb2..14bfe0e 100644
--- a/README.md
+++ b/README.md
@@ -9 +9 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
+Gin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
diff --git a/README.md b/README.md
index 2a111d2..7db3fb2 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-			"message": "hello world",
+			"message": "pong",
diff --git a/README.md b/README.md
index 0b87f3c..2a111d2 100644
--- a/README.md
+++ b/README.md
@@ -26 +26,3 @@ func main() {
-		c.String(200, "pong")
+		c.JSON(200, gin.H{
+			"message": "hello world",
+		})
@@ -28 +30 @@ func main() {
-	r.Run(":8080") // listen and serve on 0.0.0.0:8080
+	r.Run() // listen and server on 0.0.0.0:8080
@@ -113,2 +115,4 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	router.Run(":8080")
+	// By default it serves on :8080 unless a
+	// PORT environment variable was defined.
+	router.Run()
+	// router.Run.Run(":3000") for a hard coded port
diff --git a/README.md b/README.md
index 49a2b21..0b87f3c 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-<img align="right" src="https://s3.amazonaws.com/uploads.hipchat.com/36744/1498287/JVR32LgyEGCiy01/path4201%20copy%202.png">
+<img align="right" src="https://raw.githubusercontent.com/gin-gonic/gin/master/logo.jpg">
@@ -663 +663 @@ We can using fvbock/endless to replace the default ListenAndServe
-Refer the issue for more details: 
+Refer the issue for more details:
diff --git a/README.md b/README.md
index 59ea095..49a2b21 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```
+```sh
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-go get github.com/gin-gonic/gin
+$ go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-    router := gin.Default()
+	router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-    // Query string parameters are parsed using the existing underlying request object.  
-    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-    router.GET("/welcome", func(c *gin.Context) {
-        firstname := c.DefaultQuery("firstname", "Guest")
-        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+	// Query string parameters are parsed using the existing underlying request object.
+	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+	router.GET("/welcome", func(c *gin.Context) {
+		firstname := c.DefaultQuery("firstname", "Guest")
+		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-    })
-    router.Run(":8080")
+		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+	})
+	router.Run(":8080")
@@ -164,12 +164,13 @@ func main() {
-    router := gin.Default()
-
-    router.POST("/form_post", func(c *gin.Context) {
-        message := c.PostForm("message")
-        nick := c.DefaultPostForm("nick", "anonymous")
-
-        c.JSON(200, gin.H{
-            "status": "posted",
-            "message": message,
-        })
-    })
-    router.Run(":8080")
+	router := gin.Default()
+
+	router.POST("/form_post", func(c *gin.Context) {
+		message := c.PostForm("message")
+		nick := c.DefaultPostForm("nick", "anonymous")
+
+		c.JSON(200, gin.H{
+			"status":  "posted",
+			"message": message,
+			"nick":    nick,
+		})
+	})
+	router.Run(":8080")
@@ -193,4 +193,0 @@ func main() {
-        id := c.Query("id")
-        page := c.DefaultQuery("id", "0")
-        name := c.PostForm("name")
-        message := c.PostForm("message")
@@ -198 +195,6 @@ func main() {
-        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+		id := c.Query("id")
+		page := c.DefaultQuery("page", "0")
+		name := c.PostForm("name")
+		message := c.PostForm("message")
+
+		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -205 +207 @@ func main() {
-id: 1234; page: 0; name: manu; message: this_is_great
+id: 1234; page: 1; name: manu; message: this_is_great
@@ -304 +306 @@ func main() {
-    // Example for binding JSON ({"user": "manu", "password": "123"})
+	// Example for binding JSON ({"user": "manu", "password": "123"})
@@ -307,7 +309,7 @@ func main() {
-        if c.BindJSON(&json) == nil {
-            if json.User == "manu" && json.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
+		if c.BindJSON(&json) == nil {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -316,12 +318,12 @@ func main() {
-    // Example for binding a HTML form (user=manu&password=123)
-    router.POST("/loginForm", func(c *gin.Context) {
-        var form Login
-        // This will infer what binder to use depending on the content-type header.
-        if c.Bind(&form) == nil {
-            if form.User == "manu" && form.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
+	// Example for binding a HTML form (user=manu&password=123)
+	router.POST("/loginForm", func(c *gin.Context) {
+		var form Login
+		// This will infer what binder to use depending on the content-type header.
+		if c.Bind(&form) == nil {
+			if form.User == "manu" && form.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
@@ -356 +358 @@ func main() {
-        // in this case proper binding will be automatically selected
+		// in this case proper binding will be automatically selected
@@ -358,6 +360,6 @@ func main() {
-            if form.User == "user" && form.Password == "password" {
-			    c.JSON(200, gin.H{"status": "you are logged in"})
-            } else {
-			    c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
+			if form.User == "user" && form.Password == "password" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -370 +372 @@ Test it with:
-```bash
+```sh
@@ -414,4 +416,4 @@ func main() {
-    router := gin.Default()
-    router.Static("/assets", "./assets")
-    router.StaticFS("/more_static", http.Dir("my_file_system"))
-    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+	router := gin.Default()
+	router.Static("/assets", "./assets")
+	router.StaticFS("/more_static", http.Dir("my_file_system"))
+	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -419,2 +421,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    router.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	router.Run(":8080")
@@ -440,0 +443 @@ func main() {
+templates/index.tmpl
@@ -441,0 +445,29 @@ func main() {
+<html>
+	<h1>
+		{{ .title }}
+	</h1>
+</html>
+```
+
+Using templates with same name in different directories
+
+```go
+func main() {
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/**/*")
+	router.GET("/posts/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
+			"title": "Posts",
+		})
+	})
+	router.GET("/users/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
+			"title": "Users",
+		})
+	})
+	router.Run(":8080")
+}
+```
+templates/posts/index.tmpl
+```html
+{{ define "posts/index.tmpl" }}
@@ -444,0 +477 @@ func main() {
+<p>Using posts/index.tmpl</p>
@@ -445,0 +479,11 @@ func main() {
+{{ end }}
+```
+templates/users/index.tmpl
+```html
+{{ define "users/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using users/index.tmpl</p>
+</html>
+{{ end }}
@@ -562 +606 @@ func main() {
-		c_cp := c.Copy()
+		cCp := c.Copy()
@@ -568 +612 @@ func main() {
-			log.Println("Done! in path " + c_cp.Request.URL.Path)
+			log.Println("Done! in path " + cCp.Request.URL.Path)
@@ -572 +615,0 @@ func main() {
-
@@ -581,2 +624,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
diff --git a/README.md b/README.md
index 6af2d76..59ea095 100644
--- a/README.md
+++ b/README.md
@@ -611,0 +612,19 @@ func main() {
+
+#### Graceful restart or stop
+
+Do you want to graceful restart or stop your web server?
+There be some ways.
+
+We can using fvbock/endless to replace the default ListenAndServe
+
+Refer the issue for more details: 
+
+https://github.com/gin-gonic/gin/issues/296
+
+```go
+router := gin.Default()
+router.GET("/", handler)
+// [...]
+endless.ListenAndServe(":4242", router)
+
+```
diff --git a/README.md b/README.md
index d8f44c2..6af2d76 100644
--- a/README.md
+++ b/README.md
@@ -131 +131 @@ func main() {
-	// If no other routers match /user/john, it will redirect to /user/join/
+	// If no other routers match /user/john, it will redirect to /user/john/
@@ -612,19 +611,0 @@ func main() {
-
-#### Graceful restart or stop
-
-Do you want to graceful restart or stop your web server?
-There be some ways.
-
-We can using fvbock/endless to replace the default ListenAndServe
-
-Refer the issue for more details: 
-
-https://github.com/gin-gonic/gin/issues/296
-
-```go
-router := gin.Default()
-router.GET("/", handler)
-// [...]
-endless.ListenAndServe(":4242", router)
-
-```
diff --git a/README.md b/README.md
index a5553fb..d8f44c2 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```sh
+```
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-$ go get github.com/gin-gonic/gin
+go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-	router := gin.Default()
+    router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-	// Query string parameters are parsed using the existing underlying request object.
-	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-	router.GET("/welcome", func(c *gin.Context) {
-		firstname := c.DefaultQuery("firstname", "Guest")
-		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+    // Query string parameters are parsed using the existing underlying request object.  
+    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+    router.GET("/welcome", func(c *gin.Context) {
+        firstname := c.DefaultQuery("firstname", "Guest")
+        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-	})
-	router.Run(":8080")
+        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+    })
+    router.Run(":8080")
@@ -164,13 +164,12 @@ func main() {
-	router := gin.Default()
-
-	router.POST("/form_post", func(c *gin.Context) {
-		message := c.PostForm("message")
-		nick := c.DefaultPostForm("nick", "anonymous")
-
-		c.JSON(200, gin.H{
-			"status":  "posted",
-			"message": message,
-			"nick":    nick,
-		})
-	})
-	router.Run(":8080")
+    router := gin.Default()
+
+    router.POST("/form_post", func(c *gin.Context) {
+        message := c.PostForm("message")
+        nick := c.DefaultPostForm("nick", "anonymous")
+
+        c.JSON(200, gin.H{
+            "status": "posted",
+            "message": message,
+        })
+    })
+    router.Run(":8080")
@@ -193,0 +193,4 @@ func main() {
+        id := c.Query("id")
+        page := c.DefaultQuery("id", "0")
+        name := c.PostForm("name")
+        message := c.PostForm("message")
@@ -195,6 +198 @@ func main() {
-		id := c.Query("id")
-		page := c.DefaultQuery("page", "0")
-		name := c.PostForm("name")
-		message := c.PostForm("message")
-
-		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -207 +205 @@ func main() {
-id: 1234; page: 1; name: manu; message: this_is_great
+id: 1234; page: 0; name: manu; message: this_is_great
@@ -306 +304 @@ func main() {
-	// Example for binding JSON ({"user": "manu", "password": "123"})
+    // Example for binding JSON ({"user": "manu", "password": "123"})
@@ -309,7 +307,7 @@ func main() {
-		if c.BindJSON(&json) == nil {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		}
+        if c.BindJSON(&json) == nil {
+            if json.User == "manu" && json.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -318,12 +316,12 @@ func main() {
-	// Example for binding a HTML form (user=manu&password=123)
-	router.POST("/loginForm", func(c *gin.Context) {
-		var form Login
-		// This will infer what binder to use depending on the content-type header.
-		if c.Bind(&form) == nil {
-			if form.User == "manu" && form.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		}
-	})
+    // Example for binding a HTML form (user=manu&password=123)
+    router.POST("/loginForm", func(c *gin.Context) {
+        var form Login
+        // This will infer what binder to use depending on the content-type header.
+        if c.Bind(&form) == nil {
+            if form.User == "manu" && form.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
+        }
+    })
@@ -358 +356 @@ func main() {
-		// in this case proper binding will be automatically selected
+        // in this case proper binding will be automatically selected
@@ -360,6 +358,6 @@ func main() {
-			if form.User == "user" && form.Password == "password" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
+            if form.User == "user" && form.Password == "password" {
+			    c.JSON(200, gin.H{"status": "you are logged in"})
+            } else {
+			    c.JSON(401, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -372 +370 @@ Test it with:
-```sh
+```bash
@@ -416,4 +414,4 @@ func main() {
-	router := gin.Default()
-	router.Static("/assets", "./assets")
-	router.StaticFS("/more_static", http.Dir("my_file_system"))
-	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+    router := gin.Default()
+    router.Static("/assets", "./assets")
+    router.StaticFS("/more_static", http.Dir("my_file_system"))
+    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -421,2 +419,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	router.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    router.Run(":8080")
@@ -443,29 +440,0 @@ func main() {
-templates/index.tmpl
-```html
-<html>
-	<h1>
-		{{ .title }}
-	</h1>
-</html>
-```
-
-Using templates with same name in different directories
-
-```go
-func main() {
-	router := gin.Default()
-	router.LoadHTMLGlob("templates/**/*")
-	router.GET("/posts/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
-			"title": "Posts",
-		})
-	})
-	router.GET("/users/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
-			"title": "Users",
-		})
-	})
-	router.Run(":8080")
-}
-```
-templates/posts/index.tmpl
@@ -473 +441,0 @@ templates/posts/index.tmpl
-{{ define "posts/index.tmpl" }}
@@ -477 +444,0 @@ templates/posts/index.tmpl
-<p>Using posts/index.tmpl</p>
@@ -479,11 +445,0 @@ templates/posts/index.tmpl
-{{ end }}
-```
-templates/users/index.tmpl
-```html
-{{ define "users/index.tmpl" }}
-<html><h1>
-	{{ .title }}
-</h1>
-<p>Using users/index.tmpl</p>
-</html>
-{{ end }}
@@ -606 +562 @@ func main() {
-		cCp := c.Copy()
+		c_cp := c.Copy()
@@ -612 +568 @@ func main() {
-			log.Println("Done! in path " + cCp.Request.URL.Path)
+			log.Println("Done! in path " + c_cp.Request.URL.Path)
@@ -615,0 +572 @@ func main() {
+
@@ -624,2 +581,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -654,0 +612,19 @@ func main() {
+
+#### Graceful restart or stop
+
+Do you want to graceful restart or stop your web server?
+There be some ways.
+
+We can using fvbock/endless to replace the default ListenAndServe
+
+Refer the issue for more details: 
+
+https://github.com/gin-gonic/gin/issues/296
+
+```go
+router := gin.Default()
+router.GET("/", handler)
+// [...]
+endless.ListenAndServe(":4242", router)
+
+```
diff --git a/README.md b/README.md
index a45d7f0..a5553fb 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```
+```sh
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-go get github.com/gin-gonic/gin
+$ go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-    router := gin.Default()
+	router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-    // Query string parameters are parsed using the existing underlying request object.  
-    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-    router.GET("/welcome", func(c *gin.Context) {
-        firstname := c.DefaultQuery("firstname", "Guest")
-        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+	// Query string parameters are parsed using the existing underlying request object.
+	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+	router.GET("/welcome", func(c *gin.Context) {
+		firstname := c.DefaultQuery("firstname", "Guest")
+		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-    })
-    router.Run(":8080")
+		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+	})
+	router.Run(":8080")
@@ -164,12 +164,13 @@ func main() {
-    router := gin.Default()
-
-    router.POST("/form_post", func(c *gin.Context) {
-        message := c.PostForm("message")
-        nick := c.DefaultPostForm("nick", "anonymous")
-
-        c.JSON(200, gin.H{
-            "status": "posted",
-            "message": message,
-        })
-    })
-    router.Run(":8080")
+	router := gin.Default()
+
+	router.POST("/form_post", func(c *gin.Context) {
+		message := c.PostForm("message")
+		nick := c.DefaultPostForm("nick", "anonymous")
+
+		c.JSON(200, gin.H{
+			"status":  "posted",
+			"message": message,
+			"nick":    nick,
+		})
+	})
+	router.Run(":8080")
@@ -193,4 +193,0 @@ func main() {
-        id := c.Query("id")
-        page := c.DefaultQuery("page", "0")
-        name := c.PostForm("name")
-        message := c.PostForm("message")
@@ -198 +195,6 @@ func main() {
-        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+		id := c.Query("id")
+		page := c.DefaultQuery("page", "0")
+		name := c.PostForm("name")
+		message := c.PostForm("message")
+
+		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -205 +207 @@ func main() {
-id: 1234; page: 0; name: manu; message: this_is_great
+id: 1234; page: 1; name: manu; message: this_is_great
@@ -304 +306 @@ func main() {
-    // Example for binding JSON ({"user": "manu", "password": "123"})
+	// Example for binding JSON ({"user": "manu", "password": "123"})
@@ -307,7 +309,7 @@ func main() {
-        if c.BindJSON(&json) == nil {
-            if json.User == "manu" && json.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
+		if c.BindJSON(&json) == nil {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -316,12 +318,12 @@ func main() {
-    // Example for binding a HTML form (user=manu&password=123)
-    router.POST("/loginForm", func(c *gin.Context) {
-        var form Login
-        // This will infer what binder to use depending on the content-type header.
-        if c.Bind(&form) == nil {
-            if form.User == "manu" && form.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
+	// Example for binding a HTML form (user=manu&password=123)
+	router.POST("/loginForm", func(c *gin.Context) {
+		var form Login
+		// This will infer what binder to use depending on the content-type header.
+		if c.Bind(&form) == nil {
+			if form.User == "manu" && form.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
@@ -356 +358 @@ func main() {
-        // in this case proper binding will be automatically selected
+		// in this case proper binding will be automatically selected
@@ -358,6 +360,6 @@ func main() {
-            if form.User == "user" && form.Password == "password" {
-			    c.JSON(200, gin.H{"status": "you are logged in"})
-            } else {
-			    c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
+			if form.User == "user" && form.Password == "password" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -370 +372 @@ Test it with:
-```bash
+```sh
@@ -414,4 +416,4 @@ func main() {
-    router := gin.Default()
-    router.Static("/assets", "./assets")
-    router.StaticFS("/more_static", http.Dir("my_file_system"))
-    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+	router := gin.Default()
+	router.Static("/assets", "./assets")
+	router.StaticFS("/more_static", http.Dir("my_file_system"))
+	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -419,2 +421,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    router.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	router.Run(":8080")
@@ -440,0 +443 @@ func main() {
+templates/index.tmpl
@@ -441,0 +445,29 @@ func main() {
+<html>
+	<h1>
+		{{ .title }}
+	</h1>
+</html>
+```
+
+Using templates with same name in different directories
+
+```go
+func main() {
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/**/*")
+	router.GET("/posts/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
+			"title": "Posts",
+		})
+	})
+	router.GET("/users/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
+			"title": "Users",
+		})
+	})
+	router.Run(":8080")
+}
+```
+templates/posts/index.tmpl
+```html
+{{ define "posts/index.tmpl" }}
@@ -444,0 +477 @@ func main() {
+<p>Using posts/index.tmpl</p>
@@ -445,0 +479,11 @@ func main() {
+{{ end }}
+```
+templates/users/index.tmpl
+```html
+{{ define "users/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using users/index.tmpl</p>
+</html>
+{{ end }}
@@ -562 +606 @@ func main() {
-		c_cp := c.Copy()
+		cCp := c.Copy()
@@ -568 +612 @@ func main() {
-			log.Println("Done! in path " + c_cp.Request.URL.Path)
+			log.Println("Done! in path " + cCp.Request.URL.Path)
@@ -572 +615,0 @@ func main() {
-
@@ -581,2 +624,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
diff --git a/README.md b/README.md
index d26c45d..a45d7f0 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```sh
+```
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-$ go get github.com/gin-gonic/gin
+go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-	router := gin.Default()
+    router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-	// Query string parameters are parsed using the existing underlying request object.
-	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-	router.GET("/welcome", func(c *gin.Context) {
-		firstname := c.DefaultQuery("firstname", "Guest")
-		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+    // Query string parameters are parsed using the existing underlying request object.  
+    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+    router.GET("/welcome", func(c *gin.Context) {
+        firstname := c.DefaultQuery("firstname", "Guest")
+        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-	})
-	router.Run(":8080")
+        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+    })
+    router.Run(":8080")
@@ -164,13 +164,12 @@ func main() {
-	router := gin.Default()
-
-	router.POST("/form_post", func(c *gin.Context) {
-		message := c.PostForm("message")
-		nick := c.DefaultPostForm("nick", "anonymous")
-
-		c.JSON(200, gin.H{
-			"status":  "posted",
-			"message": message,
-			"nick":    nick,
-		})
-	})
-	router.Run(":8080")
+    router := gin.Default()
+
+    router.POST("/form_post", func(c *gin.Context) {
+        message := c.PostForm("message")
+        nick := c.DefaultPostForm("nick", "anonymous")
+
+        c.JSON(200, gin.H{
+            "status": "posted",
+            "message": message,
+        })
+    })
+    router.Run(":8080")
@@ -194,4 +193,4 @@ func main() {
-		id := c.Query("id")
-		page := c.DefaultQuery("page", "0")
-		name := c.PostForm("name")
-		message := c.PostForm("message")
+        id := c.Query("id")
+        page := c.DefaultQuery("page", "0")
+        name := c.PostForm("name")
+        message := c.PostForm("message")
@@ -199 +198 @@ func main() {
-		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -206 +205 @@ func main() {
-id: 1234; page: 1; name: manu; message: this_is_great
+id: 1234; page: 0; name: manu; message: this_is_great
@@ -305 +304 @@ func main() {
-	// Example for binding JSON ({"user": "manu", "password": "123"})
+    // Example for binding JSON ({"user": "manu", "password": "123"})
@@ -308,7 +307,7 @@ func main() {
-		if c.BindJSON(&json) == nil {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		}
+        if c.BindJSON(&json) == nil {
+            if json.User == "manu" && json.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -317,12 +316,12 @@ func main() {
-	// Example for binding a HTML form (user=manu&password=123)
-	router.POST("/loginForm", func(c *gin.Context) {
-		var form Login
-		// This will infer what binder to use depending on the content-type header.
-		if c.Bind(&form) == nil {
-			if form.User == "manu" && form.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		}
-	})
+    // Example for binding a HTML form (user=manu&password=123)
+    router.POST("/loginForm", func(c *gin.Context) {
+        var form Login
+        // This will infer what binder to use depending on the content-type header.
+        if c.Bind(&form) == nil {
+            if form.User == "manu" && form.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
+        }
+    })
@@ -357 +356 @@ func main() {
-		// in this case proper binding will be automatically selected
+        // in this case proper binding will be automatically selected
@@ -359,6 +358,6 @@ func main() {
-			if form.User == "user" && form.Password == "password" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
+            if form.User == "user" && form.Password == "password" {
+			    c.JSON(200, gin.H{"status": "you are logged in"})
+            } else {
+			    c.JSON(401, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -371 +370 @@ Test it with:
-```sh
+```bash
@@ -415,4 +414,4 @@ func main() {
-	router := gin.Default()
-	router.Static("/assets", "./assets")
-	router.StaticFS("/more_static", http.Dir("my_file_system"))
-	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+    router := gin.Default()
+    router.Static("/assets", "./assets")
+    router.StaticFS("/more_static", http.Dir("my_file_system"))
+    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -420,2 +419,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	router.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    router.Run(":8080")
@@ -442,29 +440,0 @@ func main() {
-templates/index.tmpl
-```html
-<html>
-	<h1>
-		{{ .title }}
-	</h1>
-</html>
-```
-
-Using templates with same name in different directories
-
-```go
-func main() {
-	router := gin.Default()
-	router.LoadHTMLGlob("templates/**/*")
-	router.GET("/posts/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
-			"title": "Posts",
-		})
-	})
-	router.GET("/users/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
-			"title": "Users",
-		})
-	})
-	router.Run(":8080")
-}
-```
-templates/posts/index.tmpl
@@ -472 +441,0 @@ templates/posts/index.tmpl
-{{ define "posts/index.tmpl" }}
@@ -476 +444,0 @@ templates/posts/index.tmpl
-<p>Using posts/index.tmpl</p>
@@ -478,11 +445,0 @@ templates/posts/index.tmpl
-{{ end }}
-```
-templates/users/index.tmpl
-```html
-{{ define "users/index.tmpl" }}
-<html><h1>
-	{{ .title }}
-</h1>
-<p>Using users/index.tmpl</p>
-</html>
-{{ end }}
@@ -605 +562 @@ func main() {
-		cCp := c.Copy()
+		c_cp := c.Copy()
@@ -611 +568 @@ func main() {
-			log.Println("Done! in path " + cCp.Request.URL.Path)
+			log.Println("Done! in path " + c_cp.Request.URL.Path)
@@ -614,0 +572 @@ func main() {
+
@@ -623,2 +581,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
diff --git a/README.md b/README.md
index 16ff089..d26c45d 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```
+```sh
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-go get github.com/gin-gonic/gin
+$ go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-    router := gin.Default()
+	router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-    // Query string parameters are parsed using the existing underlying request object.  
-    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-    router.GET("/welcome", func(c *gin.Context) {
-        firstname := c.DefaultQuery("firstname", "Guest")
-        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+	// Query string parameters are parsed using the existing underlying request object.
+	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+	router.GET("/welcome", func(c *gin.Context) {
+		firstname := c.DefaultQuery("firstname", "Guest")
+		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-    })
-    router.Run(":8080")
+		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+	})
+	router.Run(":8080")
@@ -164,12 +164,13 @@ func main() {
-    router := gin.Default()
-
-    router.POST("/form_post", func(c *gin.Context) {
-        message := c.PostForm("message")
-        nick := c.DefaultPostForm("nick", "anonymous")
-
-        c.JSON(200, gin.H{
-            "status": "posted",
-            "message": message,
-        })
-    })
-    router.Run(":8080")
+	router := gin.Default()
+
+	router.POST("/form_post", func(c *gin.Context) {
+		message := c.PostForm("message")
+		nick := c.DefaultPostForm("nick", "anonymous")
+
+		c.JSON(200, gin.H{
+			"status":  "posted",
+			"message": message,
+			"nick":    nick,
+		})
+	})
+	router.Run(":8080")
@@ -193,4 +194,4 @@ func main() {
-        id := c.Query("id")
-        page := c.DefaultQuery("id", "0")
-        name := c.PostForm("name")
-        message := c.PostForm("message")
+		id := c.Query("id")
+		page := c.DefaultQuery("page", "0")
+		name := c.PostForm("name")
+		message := c.PostForm("message")
@@ -198 +199 @@ func main() {
-        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -205 +206 @@ func main() {
-id: 1234; page: 0; name: manu; message: this_is_great
+id: 1234; page: 1; name: manu; message: this_is_great
@@ -304 +305 @@ func main() {
-    // Example for binding JSON ({"user": "manu", "password": "123"})
+	// Example for binding JSON ({"user": "manu", "password": "123"})
@@ -307,7 +308,7 @@ func main() {
-        if c.BindJSON(&json) == nil {
-            if json.User == "manu" && json.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
+		if c.BindJSON(&json) == nil {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -316,12 +317,12 @@ func main() {
-    // Example for binding a HTML form (user=manu&password=123)
-    router.POST("/loginForm", func(c *gin.Context) {
-        var form Login
-        // This will infer what binder to use depending on the content-type header.
-        if c.Bind(&form) == nil {
-            if form.User == "manu" && form.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
+	// Example for binding a HTML form (user=manu&password=123)
+	router.POST("/loginForm", func(c *gin.Context) {
+		var form Login
+		// This will infer what binder to use depending on the content-type header.
+		if c.Bind(&form) == nil {
+			if form.User == "manu" && form.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
@@ -356 +357 @@ func main() {
-        // in this case proper binding will be automatically selected
+		// in this case proper binding will be automatically selected
@@ -358,6 +359,6 @@ func main() {
-            if form.User == "user" && form.Password == "password" {
-			    c.JSON(200, gin.H{"status": "you are logged in"})
-            } else {
-			    c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
+			if form.User == "user" && form.Password == "password" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -370 +371 @@ Test it with:
-```bash
+```sh
@@ -414,4 +415,4 @@ func main() {
-    router := gin.Default()
-    router.Static("/assets", "./assets")
-    router.StaticFS("/more_static", http.Dir("my_file_system"))
-    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+	router := gin.Default()
+	router.Static("/assets", "./assets")
+	router.StaticFS("/more_static", http.Dir("my_file_system"))
+	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -419,2 +420,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    router.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	router.Run(":8080")
@@ -443,3 +444,4 @@ templates/index.tmpl
-<html><h1>
-	{{ .title }}
-</h1>
+<html>
+	<h1>
+		{{ .title }}
+	</h1>
@@ -603 +605 @@ func main() {
-		c_cp := c.Copy()
+		cCp := c.Copy()
@@ -609 +611 @@ func main() {
-			log.Println("Done! in path " + c_cp.Request.URL.Path)
+			log.Println("Done! in path " + cCp.Request.URL.Path)
@@ -613 +614,0 @@ func main() {
-
@@ -622,2 +623,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
diff --git a/README.md b/README.md
index e84fa34..16ff089 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```sh
+```
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-$ go get github.com/gin-gonic/gin
+go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-	router := gin.Default()
+    router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-	// Query string parameters are parsed using the existing underlying request object.
-	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-	router.GET("/welcome", func(c *gin.Context) {
-		firstname := c.DefaultQuery("firstname", "Guest")
-		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+    // Query string parameters are parsed using the existing underlying request object.  
+    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+    router.GET("/welcome", func(c *gin.Context) {
+        firstname := c.DefaultQuery("firstname", "Guest")
+        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-	})
-	router.Run(":8080")
+        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+    })
+    router.Run(":8080")
@@ -164,13 +164,12 @@ func main() {
-	router := gin.Default()
-
-	router.POST("/form_post", func(c *gin.Context) {
-		message := c.PostForm("message")
-		nick := c.DefaultPostForm("nick", "anonymous")
-
-		c.JSON(200, gin.H{
-			"status":  "posted",
-			"message": message,
-			"nick":    nick,
-		})
-	})
-	router.Run(":8080")
+    router := gin.Default()
+
+    router.POST("/form_post", func(c *gin.Context) {
+        message := c.PostForm("message")
+        nick := c.DefaultPostForm("nick", "anonymous")
+
+        c.JSON(200, gin.H{
+            "status": "posted",
+            "message": message,
+        })
+    })
+    router.Run(":8080")
@@ -194,4 +193,4 @@ func main() {
-		id := c.Query("id")
-		page := c.DefaultQuery("page", "0")
-		name := c.PostForm("name")
-		message := c.PostForm("message")
+        id := c.Query("id")
+        page := c.DefaultQuery("id", "0")
+        name := c.PostForm("name")
+        message := c.PostForm("message")
@@ -199 +198 @@ func main() {
-		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -206 +205 @@ func main() {
-id: 1234; page: 1; name: manu; message: this_is_great
+id: 1234; page: 0; name: manu; message: this_is_great
@@ -305 +304 @@ func main() {
-	// Example for binding JSON ({"user": "manu", "password": "123"})
+    // Example for binding JSON ({"user": "manu", "password": "123"})
@@ -308,7 +307,7 @@ func main() {
-		if c.BindJSON(&json) == nil {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		}
+        if c.BindJSON(&json) == nil {
+            if json.User == "manu" && json.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -317,12 +316,12 @@ func main() {
-	// Example for binding a HTML form (user=manu&password=123)
-	router.POST("/loginForm", func(c *gin.Context) {
-		var form Login
-		// This will infer what binder to use depending on the content-type header.
-		if c.Bind(&form) == nil {
-			if form.User == "manu" && form.Password == "123" {
-				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-			}
-		}
-	})
+    // Example for binding a HTML form (user=manu&password=123)
+    router.POST("/loginForm", func(c *gin.Context) {
+        var form Login
+        // This will infer what binder to use depending on the content-type header.
+        if c.Bind(&form) == nil {
+            if form.User == "manu" && form.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
+        }
+    })
@@ -357 +356 @@ func main() {
-		// in this case proper binding will be automatically selected
+        // in this case proper binding will be automatically selected
@@ -359,6 +358,6 @@ func main() {
-			if form.User == "user" && form.Password == "password" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
+            if form.User == "user" && form.Password == "password" {
+			    c.JSON(200, gin.H{"status": "you are logged in"})
+            } else {
+			    c.JSON(401, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -371 +370 @@ Test it with:
-```sh
+```bash
@@ -415,4 +414,4 @@ func main() {
-	router := gin.Default()
-	router.Static("/assets", "./assets")
-	router.StaticFS("/more_static", http.Dir("my_file_system"))
-	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+    router := gin.Default()
+    router.Static("/assets", "./assets")
+    router.StaticFS("/more_static", http.Dir("my_file_system"))
+    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -420,2 +419,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	router.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    router.Run(":8080")
@@ -441,0 +441 @@ func main() {
+templates/index.tmpl
@@ -443,4 +443,3 @@ func main() {
-<html>
-	<h1>
-		{{ .title }}
-	</h1>
+<html><h1>
+	{{ .title }}
+</h1>
@@ -449,0 +449,40 @@ func main() {
+Using templates with same name in different directories
+
+```go
+func main() {
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/**/*")
+	router.GET("/posts/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
+			"title": "Posts",
+		})
+	})
+	router.GET("/users/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
+			"title": "Users",
+		})
+	})
+	router.Run(":8080")
+}
+```
+templates/posts/index.tmpl
+```html
+{{ define "posts/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using posts/index.tmpl</p>
+</html>
+{{ end }}
+```
+templates/users/index.tmpl
+```html
+{{ define "users/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using users/index.tmpl</p>
+</html>
+{{ end }}
+```
+
@@ -564 +603 @@ func main() {
-		cCp := c.Copy()
+		c_cp := c.Copy()
@@ -570 +609 @@ func main() {
-			log.Println("Done! in path " + cCp.Request.URL.Path)
+			log.Println("Done! in path " + c_cp.Request.URL.Path)
@@ -573,0 +613 @@ func main() {
+
@@ -582,2 +622,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
diff --git a/README.md b/README.md
index a5d4591..e84fa34 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-```
+```sh
@@ -87 +87 @@ BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
-go get github.com/gin-gonic/gin
+$ go get github.com/gin-gonic/gin
@@ -146 +146 @@ func main() {
-    router := gin.Default()
+	router := gin.Default()
@@ -148,5 +148,5 @@ func main() {
-    // Query string parameters are parsed using the existing underlying request object.  
-    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-    router.GET("/welcome", func(c *gin.Context) {
-        firstname := c.DefaultQuery("firstname", "Guest")
-        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+	// Query string parameters are parsed using the existing underlying request object.
+	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+	router.GET("/welcome", func(c *gin.Context) {
+		firstname := c.DefaultQuery("firstname", "Guest")
+		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
@@ -154,3 +154,3 @@ func main() {
-        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-    })
-    router.Run(":8080")
+		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+	})
+	router.Run(":8080")
@@ -164,12 +164,13 @@ func main() {
-    router := gin.Default()
-
-    router.POST("/form_post", func(c *gin.Context) {
-        message := c.PostForm("message")
-        nick := c.DefaultPostForm("nick", "anonymous")
-
-        c.JSON(200, gin.H{
-            "status": "posted",
-            "message": message,
-        })
-    })
-    router.Run(":8080")
+	router := gin.Default()
+
+	router.POST("/form_post", func(c *gin.Context) {
+		message := c.PostForm("message")
+		nick := c.DefaultPostForm("nick", "anonymous")
+
+		c.JSON(200, gin.H{
+			"status":  "posted",
+			"message": message,
+			"nick":    nick,
+		})
+	})
+	router.Run(":8080")
@@ -193,4 +194,4 @@ func main() {
-        id := c.Query("id")
-        page := c.DefaultQuery("page", "0")
-        name := c.PostForm("name")
-        message := c.PostForm("message")
+		id := c.Query("id")
+		page := c.DefaultQuery("page", "0")
+		name := c.PostForm("name")
+		message := c.PostForm("message")
@@ -198 +199 @@ func main() {
-        fmt.Print("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+		fmt.Printf("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -304 +305 @@ func main() {
-    // Example for binding JSON ({"user": "manu", "password": "123"})
+	// Example for binding JSON ({"user": "manu", "password": "123"})
@@ -307,7 +308,7 @@ func main() {
-        if c.BindJSON(&json) == nil {
-            if json.User == "manu" && json.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
+		if c.BindJSON(&json) == nil {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -316,12 +317,12 @@ func main() {
-    // Example for binding a HTML form (user=manu&password=123)
-    router.POST("/loginForm", func(c *gin.Context) {
-        var form Login
-        // This will infer what binder to use depending on the content-type header.
-        if c.Bind(&form) == nil {
-            if form.User == "manu" && form.Password == "123" {
-                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-            } else {
-                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
+	// Example for binding a HTML form (user=manu&password=123)
+	router.POST("/loginForm", func(c *gin.Context) {
+		var form Login
+		// This will infer what binder to use depending on the content-type header.
+		if c.Bind(&form) == nil {
+			if form.User == "manu" && form.Password == "123" {
+				c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
@@ -356 +357 @@ func main() {
-        // in this case proper binding will be automatically selected
+		// in this case proper binding will be automatically selected
@@ -358,6 +359,6 @@ func main() {
-            if form.User == "user" && form.Password == "password" {
-			    c.JSON(200, gin.H{"status": "you are logged in"})
-            } else {
-			    c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
+			if form.User == "user" && form.Password == "password" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -370 +371 @@ Test it with:
-```bash
+```sh
@@ -414,4 +415,4 @@ func main() {
-    router := gin.Default()
-    router.Static("/assets", "./assets")
-    router.StaticFS("/more_static", http.Dir("my_file_system"))
-    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
+	router := gin.Default()
+	router.Static("/assets", "./assets")
+	router.StaticFS("/more_static", http.Dir("my_file_system"))
+	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -419,2 +420,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    router.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	router.Run(":8080")
@@ -442,3 +443,4 @@ func main() {
-<html><h1>
-	{{ .title }}
-</h1>
+<html>
+	<h1>
+		{{ .title }}
+	</h1>
@@ -562 +564 @@ func main() {
-		c_cp := c.Copy()
+		cCp := c.Copy()
@@ -568 +570 @@ func main() {
-			log.Println("Done! in path " + c_cp.Request.URL.Path)
+			log.Println("Done! in path " + cCp.Request.URL.Path)
@@ -572 +573,0 @@ func main() {
-
@@ -581,2 +582,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
diff --git a/README.md b/README.md
index e83952d..a5d4591 100644
--- a/README.md
+++ b/README.md
@@ -194 +194 @@ func main() {
-        page := c.DefaultQuery("id", "0")
+        page := c.DefaultQuery("page", "0")
@@ -198 +198 @@ func main() {
-        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+        fmt.Print("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
@@ -205 +205 @@ func main() {
-id: 1234; page: 0; name: manu; message: this_is_great
+id: 1234; page: 1; name: manu; message: this_is_great
diff --git a/README.md b/README.md
index 8d88a77..e83952d 100644
--- a/README.md
+++ b/README.md
@@ -101,2 +101,2 @@ func main() {
-	// Creates a gin router with default middlewares:
-	// logger and recovery (crash-free) middlewares
+	// Creates a gin router with default middleware:
+	// logger and recovery (crash-free) middleware
@@ -194 +194 @@ func main() {
-        page := c.DefaultQuery("page", "0")
+        page := c.DefaultQuery("id", "0")
@@ -235 +235 @@ func main() {
-#### Blank Gin without middlewares by default
+#### Blank Gin without middleware by default
@@ -249 +249 @@ r := gin.Default()
-#### Using middlewares
+#### Using middleware
@@ -255 +255 @@ func main() {
-	// Global middlewares
+	// Global middleware
@@ -259 +259 @@ func main() {
-	// Per route middlewares, you can add as many as you desire.
+	// Per route middleware, you can add as many as you desire.
@@ -266 +266 @@ func main() {
-	// per group middlewares! in this case we use the custom created
+	// per group middleware! in this case we use the custom created
@@ -474 +474 @@ Both internal and external locations are supported.
-#### Custom Middlewares
+#### Custom Middleware
diff --git a/README.md b/README.md
index d5600e6..8d88a77 100644
--- a/README.md
+++ b/README.md
@@ -194 +194 @@ func main() {
-        page := c.DefaultQuery("id", "0")
+        page := c.DefaultQuery("page", "0")
diff --git a/README.md b/README.md
index 6ca8cbb..d5600e6 100644
--- a/README.md
+++ b/README.md
@@ -1 +0,0 @@
-<img align="left" style="margin-right:15px" src="https://s3.amazonaws.com/uploads.hipchat.com/36744/1498287/JVR32LgyEGCiy01/path4201%20copy%202.png">
@@ -4 +3 @@
-
+<img align="right" src="https://s3.amazonaws.com/uploads.hipchat.com/36744/1498287/JVR32LgyEGCiy01/path4201%20copy%202.png">
@@ -7 +6,2 @@
-[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)  [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
+[![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
diff --git a/README.md b/README.md
index d66f58a..6ca8cbb 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-<img align="right" src="https://s3.amazonaws.com/uploads.hipchat.com/36744/1498287/JVR32LgyEGCiy01/path4201%20copy%202.png">
+<img align="left" style="margin-right:15px" src="https://s3.amazonaws.com/uploads.hipchat.com/36744/1498287/JVR32LgyEGCiy01/path4201%20copy%202.png">
diff --git a/README.md b/README.md
index a14fc0e..d66f58a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-#Gin Web Framework  
+<img align="right" src="https://s3.amazonaws.com/uploads.hipchat.com/36744/1498287/JVR32LgyEGCiy01/path4201%20copy%202.png">
@@ -3 +3 @@
-![Gin Logo](https://gin-gonic.github.io/gin/images/logo.jpg)
+#Gin Web Framework
@@ -10,0 +11,2 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
+
+
diff --git a/README.md b/README.md
index 0171c33..a14fc0e 100644
--- a/README.md
+++ b/README.md
@@ -37,29 +37,29 @@ Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httpr
-```
-BenchmarkAce_GithubAll     10000        109482 ns/op       13792 B/op        167 allocs/op
-BenchmarkBear_GithubAll    10000        287490 ns/op       79952 B/op        943 allocs/op
-BenchmarkBeego_GithubAll        3000        562184 ns/op      146272 B/op       2092 allocs/op
-BenchmarkBone_GithubAll      500       2578716 ns/op      648016 B/op       8119 allocs/op
-BenchmarkDenco_GithubAll       20000         94955 ns/op       20224 B/op        167 allocs/op
-BenchmarkEcho_GithubAll    30000         58705 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GithubAll     30000         50991 ns/op           0 B/op          0 allocs/op
-BenchmarkGocraftWeb_GithubAll       5000        449648 ns/op      133280 B/op       1889 allocs/op
-BenchmarkGoji_GithubAll     2000        689748 ns/op       56113 B/op        334 allocs/op
-BenchmarkGoJsonRest_GithubAll       5000        537769 ns/op      135995 B/op       2940 allocs/op
-BenchmarkGoRestful_GithubAll         100      18410628 ns/op      797236 B/op       7725 allocs/op
-BenchmarkGorillaMux_GithubAll        200       8036360 ns/op      153137 B/op       1791 allocs/op
-BenchmarkHttpRouter_GithubAll      20000         63506 ns/op       13792 B/op        167 allocs/op
-BenchmarkHttpTreeMux_GithubAll     10000        165927 ns/op       56112 B/op        334 allocs/op
-BenchmarkKocha_GithubAll       10000        171362 ns/op       23304 B/op        843 allocs/op
-BenchmarkMacaron_GithubAll      2000        817008 ns/op      224960 B/op       2315 allocs/op
-BenchmarkMartini_GithubAll       100      12609209 ns/op      237952 B/op       2686 allocs/op
-BenchmarkPat_GithubAll       300       4830398 ns/op     1504101 B/op      32222 allocs/op
-BenchmarkPossum_GithubAll      10000        301716 ns/op       97440 B/op        812 allocs/op
-BenchmarkR2router_GithubAll    10000        270691 ns/op       77328 B/op       1182 allocs/op
-BenchmarkRevel_GithubAll        1000       1491919 ns/op      345553 B/op       5918 allocs/op
-BenchmarkRivet_GithubAll       10000        283860 ns/op       84272 B/op       1079 allocs/op
-BenchmarkTango_GithubAll        5000        473821 ns/op       87078 B/op       2470 allocs/op
-BenchmarkTigerTonic_GithubAll       2000       1120131 ns/op      241088 B/op       6052 allocs/op
-BenchmarkTraffic_GithubAll       200       8708979 ns/op     2664762 B/op      22390 allocs/op
-BenchmarkVulcan_GithubAll       5000        353392 ns/op       19894 B/op        609 allocs/op
-BenchmarkZeus_GithubAll     2000        944234 ns/op      300688 B/op       2648 allocs/op
-```
+Benchmark name 					| (1) 		| (2) 		| (3) 		| (4)
+--------------------------------|----------:|----------:|----------:|------:
+BenchmarkAce_GithubAll 			| 10000 	| 109482 	| 13792 	| 167
+BenchmarkBear_GithubAll 		| 10000 	| 287490 	| 79952 	| 943
+BenchmarkBeego_GithubAll 		| 3000 		| 562184 	| 146272 	| 2092
+BenchmarkBone_GithubAll 		| 500 		| 2578716 	| 648016 	| 8119
+BenchmarkDenco_GithubAll 		| 20000 	| 94955 	| 20224 	| 167
+BenchmarkEcho_GithubAll 		| 30000 	| 58705 	| 0 		| 0
+**BenchmarkGin_GithubAll** 		| **30000** | **50991** | **0** 	| **0**
+BenchmarkGocraftWeb_GithubAll 	| 5000 		| 449648 	| 133280 	| 1889
+BenchmarkGoji_GithubAll 		| 2000 		| 689748 	| 56113 	| 334
+BenchmarkGoJsonRest_GithubAll 	| 5000 		| 537769 	| 135995 	| 2940
+BenchmarkGoRestful_GithubAll 	| 100 		| 18410628 	| 797236 	| 7725
+BenchmarkGorillaMux_GithubAll 	| 200 		| 8036360 	| 153137 	| 1791
+BenchmarkHttpRouter_GithubAll 	| 20000 	| 63506 	| 13792 	| 167
+BenchmarkHttpTreeMux_GithubAll 	| 10000 	| 165927 	| 56112 	| 334
+BenchmarkKocha_GithubAll 		| 10000 	| 171362 	| 23304 	| 843
+BenchmarkMacaron_GithubAll 		| 2000 		| 817008 	| 224960 	| 2315
+BenchmarkMartini_GithubAll 		| 100 		| 12609209 	| 237952 	| 2686
+BenchmarkPat_GithubAll 			| 300 		| 4830398 	| 1504101 	| 32222
+BenchmarkPossum_GithubAll 		| 10000 	| 301716 	| 97440 	| 812
+BenchmarkR2router_GithubAll 	| 10000 	| 270691 	| 77328 	| 1182
+BenchmarkRevel_GithubAll 		| 1000 		| 1491919 	| 345553 	| 5918
+BenchmarkRivet_GithubAll 		| 10000 	| 283860 	| 84272 	| 1079
+BenchmarkTango_GithubAll 		| 5000 		| 473821 	| 87078 	| 2470
+BenchmarkTigerTonic_GithubAll 	| 2000 		| 1120131 	| 241088 	| 6052
+BenchmarkTraffic_GithubAll 		| 200 		| 8708979 	| 2664762 	| 22390
+BenchmarkVulcan_GithubAll 		| 5000 		| 353392 	| 19894 	| 609
+BenchmarkZeus_GithubAll 		| 2000 		| 944234 	| 300688 	| 2648
@@ -66,0 +67,4 @@ BenchmarkZeus_GithubAll     2000        944234 ns/op      300688 B/op       2648
+(1): Total Repetitions  
+(2): Single Repetition Duration (ns/op)  
+(3): Heap Memory (B/op)  
+(4): Average Allocations per Repetition (allocs/op)  
diff --git a/README.md b/README.md
index 458cd06..0171c33 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-#Gin Web Framework [![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin) [![Coverage Status](https://coveralls.io/repos/gin-gonic/gin/badge.svg?branch=master)](https://coveralls.io/r/gin-gonic/gin?branch=master)  
+#Gin Web Framework  
@@ -3 +3,5 @@
- [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)  [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+![Gin Logo](https://gin-gonic.github.io/gin/images/logo.jpg)
+
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
+[![Coverage Status](https://coveralls.io/repos/gin-gonic/gin/badge.svg?branch=master)](https://coveralls.io/r/gin-gonic/gin?branch=master)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)  [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
diff --git a/README.md b/README.md
index 8d2e07f..458cd06 100644
--- a/README.md
+++ b/README.md
@@ -91,2 +91,2 @@ func main() {
-	// Creates a gin router with default middleware:
-	// logger and recovery (crash-free) middleware
+	// Creates a gin router with default middlewares:
+	// logger and recovery (crash-free) middlewares
@@ -168,0 +169,30 @@ func main() {
+### Another example: query + post form
+
+```
+POST /post?id=1234&page=1 HTTP/1.1
+Content-Type: application/x-www-form-urlencoded
+
+name=manu&message=this_is_great
+```
+
+```go
+func main() {
+	router := gin.Default()
+
+	router.POST("/post", func(c *gin.Context) {
+        id := c.Query("id")
+        page := c.DefaultQuery("id", "0")
+        name := c.PostForm("name")
+        message := c.PostForm("message")
+
+        fmt.Println("id: %s; page: %s; name: %s; message: %s", id, page, name, message)
+	})
+	router.Run(":8080")
+}
+```
+
+```
+id: 1234; page: 0; name: manu; message: this_is_great
+```
+
+
@@ -195 +225 @@ func main() {
-#### Blank Gin without middleware by default
+#### Blank Gin without middlewares by default
@@ -209 +239 @@ r := gin.Default()
-#### Using middleware
+#### Using middlewares
@@ -215 +245 @@ func main() {
-	// Global middleware
+	// Global middlewares
@@ -219 +249 @@ func main() {
-	// Per route middleware, you can add as many as you desire.
+	// Per route middlewares, you can add as many as you desire.
@@ -226 +256 @@ func main() {
-	// per group middleware! in this case we use the custom created
+	// per group middlewares! in this case we use the custom created
@@ -256,9 +286,3 @@ You can also specify that specific fields are required. If a field is decorated
-type LoginJSON struct {
-	User     string `json:"user" binding:"required"`
-	Password string `json:"password" binding:"required"`
-}
-
-// Binding from form values
-type LoginForm struct {
-    User     string `form:"user" binding:"required"`
-    Password string `form:"password" binding:"required"`
+type Login struct {
+	User     string `form:"user" json:"user" binding:"required"`
+	Password string `form:"password" json:"password" binding:"required"`
@@ -268 +292 @@ func main() {
-	r := gin.Default()
+	router := gin.Default()
@@ -271,8 +295,8 @@ func main() {
-	r.POST("/loginJSON", func(c *gin.Context) {
-		var json LoginJSON
-
-        c.Bind(&json) // This will infer what binder to use depending on the content-type header.
-        if json.User == "manu" && json.Password == "123" {
-            c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-        } else {
-            c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+	router.POST("/loginJSON", func(c *gin.Context) {
+		var json Login
+        if c.BindJSON(&json) == nil {
+            if json.User == "manu" && json.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
@@ -283,8 +307,9 @@ func main() {
-    r.POST("/loginHTML", func(c *gin.Context) {
-        var form LoginForm
-
-        c.BindWith(&form, binding.Form) // You can also specify which binder to use. We support binding.Form, binding.JSON and binding.XML.
-        if form.User == "manu" && form.Password == "123" {
-            c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
-        } else {
-            c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+    router.POST("/loginForm", func(c *gin.Context) {
+        var form Login
+        // This will infer what binder to use depending on the content-type header.
+        if c.Bind(&form) == nil {
+            if form.User == "manu" && form.Password == "123" {
+                c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
+            } else {
+                c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
+            }
@@ -295 +320 @@ func main() {
-	r.Run(":8080")
+	router.Run(":8080")
@@ -315 +339,0 @@ func main() {
-
@@ -317 +340,0 @@ func main() {
-
@@ -323,7 +346,8 @@ func main() {
-		c.Bind(&form) // in this case proper binding will be automatically selected
-
-		if form.User == "user" && form.Password == "password" {
-			c.JSON(200, gin.H{"status": "you are logged in"})
-		} else {
-			c.JSON(401, gin.H{"status": "unauthorized"})
-		}
+        // in this case proper binding will be automatically selected
+		if c.Bind(&form) == nil {
+            if form.User == "user" && form.Password == "password" {
+			    c.JSON(200, gin.H{"status": "you are logged in"})
+            } else {
+			    c.JSON(401, gin.H{"status": "unauthorized"})
+            }
+        }
@@ -331 +354,0 @@ func main() {
-
@@ -333 +355,0 @@ func main() {
-
@@ -442 +464 @@ Both internal and external locations are supported.
-#### Custom Middleware
+#### Custom Middlewares
diff --git a/README.md b/README.md
index 67c9fa8..8d2e07f 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin. 
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.
@@ -12 +12 @@ $ cat test.go
-```go 
+```go
@@ -91,2 +91,2 @@ func main() {
-	// Creates a gin router with default middlewares:
-	// logger and recovery (crash-free) middlewares
+	// Creates a gin router with default middleware:
+	// logger and recovery (crash-free) middleware
@@ -113 +113 @@ func main() {
-	
+
@@ -128 +128 @@ func main() {
-	
+
@@ -150 +150 @@ func main() {
-### Multipart/Urlencoded Form 
+### Multipart/Urlencoded Form
@@ -159 +159 @@ func main() {
-                
+
@@ -195 +195 @@ func main() {
-#### Blank Gin without middlewares by default
+#### Blank Gin without middleware by default
@@ -209 +209 @@ r := gin.Default()
-#### Using middlewares
+#### Using middleware
@@ -215 +215 @@ func main() {
-	// Global middlewares
+	// Global middleware
@@ -219 +219 @@ func main() {
-	// Per route middlewares, you can add as many as you desire.
+	// Per route middleware, you can add as many as you desire.
@@ -226 +226 @@ func main() {
-	// per group middlewares! in this case we use the custom created
+	// per group middleware! in this case we use the custom created
@@ -250 +250 @@ Note that you need to set the corresponding binding tag on all fields you want t
-When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use BindWith. 
+When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use BindWith.
@@ -264 +264 @@ type LoginForm struct {
-    Password string `form:"password" binding:"required"`   
+    Password string `form:"password" binding:"required"`
@@ -300 +300 @@ func main() {
-###Multipart/Urlencoded binding 
+###Multipart/Urlencoded binding
@@ -442 +442 @@ Both internal and external locations are supported.
-#### Custom Middlewares
+#### Custom Middleware
diff --git a/README.md b/README.md
index ce6bb42..67c9fa8 100644
--- a/README.md
+++ b/README.md
@@ -28 +27,0 @@ func main() {
-Comparision with the second fastest mutex: echo.
diff --git a/README.md b/README.md
index 89352bd..ce6bb42 100644
--- a/README.md
+++ b/README.md
@@ -35,32 +35,27 @@ Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httpr
-BenchmarkEcho_Param 10000000           129 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_Param  10000000           130 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_Param5     5000000           258 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_Param5  5000000           221 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_Param20    2000000           690 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_Param20     3000000           542 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_ParamWrite     5000000           243 ns/op           8 B/op          1 allocs/op
-BenchmarkGin_ParamWrite  5000000           324 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GithubStatic  10000000           170 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GithubStatic   10000000           157 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GithubParam    5000000           296 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GithubParam     5000000           250 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GithubAll    30000         59623 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GithubAll     30000         51971 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GPlusStatic   10000000           127 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GPlusStatic    20000000           123 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GPlusParam    10000000           173 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GPlusParam 10000000           168 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GPlus2Params   5000000           238 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GPlus2Params   10000000           209 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_GPlusAll    500000          2934 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_GPlusAll     500000          2564 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_ParseStatic   10000000           131 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_ParseStatic    10000000           128 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_ParseParam    10000000           143 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_ParseParam 10000000           138 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_Parse2Params  10000000           181 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_Parse2Params   10000000           164 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_ParseAll    300000          5227 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_ParseAll     300000          4734 ns/op           0 B/op          0 allocs/op
-BenchmarkEcho_StaticAll    50000         40169 ns/op           0 B/op          0 allocs/op
-BenchmarkGin_StaticAll     50000         33080 ns/op           0 B/op          0 allocs/op
+BenchmarkAce_GithubAll     10000        109482 ns/op       13792 B/op        167 allocs/op
+BenchmarkBear_GithubAll    10000        287490 ns/op       79952 B/op        943 allocs/op
+BenchmarkBeego_GithubAll        3000        562184 ns/op      146272 B/op       2092 allocs/op
+BenchmarkBone_GithubAll      500       2578716 ns/op      648016 B/op       8119 allocs/op
+BenchmarkDenco_GithubAll       20000         94955 ns/op       20224 B/op        167 allocs/op
+BenchmarkEcho_GithubAll    30000         58705 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GithubAll     30000         50991 ns/op           0 B/op          0 allocs/op
+BenchmarkGocraftWeb_GithubAll       5000        449648 ns/op      133280 B/op       1889 allocs/op
+BenchmarkGoji_GithubAll     2000        689748 ns/op       56113 B/op        334 allocs/op
+BenchmarkGoJsonRest_GithubAll       5000        537769 ns/op      135995 B/op       2940 allocs/op
+BenchmarkGoRestful_GithubAll         100      18410628 ns/op      797236 B/op       7725 allocs/op
+BenchmarkGorillaMux_GithubAll        200       8036360 ns/op      153137 B/op       1791 allocs/op
+BenchmarkHttpRouter_GithubAll      20000         63506 ns/op       13792 B/op        167 allocs/op
+BenchmarkHttpTreeMux_GithubAll     10000        165927 ns/op       56112 B/op        334 allocs/op
+BenchmarkKocha_GithubAll       10000        171362 ns/op       23304 B/op        843 allocs/op
+BenchmarkMacaron_GithubAll      2000        817008 ns/op      224960 B/op       2315 allocs/op
+BenchmarkMartini_GithubAll       100      12609209 ns/op      237952 B/op       2686 allocs/op
+BenchmarkPat_GithubAll       300       4830398 ns/op     1504101 B/op      32222 allocs/op
+BenchmarkPossum_GithubAll      10000        301716 ns/op       97440 B/op        812 allocs/op
+BenchmarkR2router_GithubAll    10000        270691 ns/op       77328 B/op       1182 allocs/op
+BenchmarkRevel_GithubAll        1000       1491919 ns/op      345553 B/op       5918 allocs/op
+BenchmarkRivet_GithubAll       10000        283860 ns/op       84272 B/op       1079 allocs/op
+BenchmarkTango_GithubAll        5000        473821 ns/op       87078 B/op       2470 allocs/op
+BenchmarkTigerTonic_GithubAll       2000       1120131 ns/op      241088 B/op       6052 allocs/op
+BenchmarkTraffic_GithubAll       200       8708979 ns/op     2664762 B/op      22390 allocs/op
+BenchmarkVulcan_GithubAll       5000        353392 ns/op       19894 B/op        609 allocs/op
+BenchmarkZeus_GithubAll     2000        944234 ns/op      300688 B/op       2648 allocs/op
diff --git a/README.md b/README.md
index 8b655b9..89352bd 100644
--- a/README.md
+++ b/README.md
@@ -27,0 +28,6 @@ func main() {
+Comparision with the second fastest mutex: echo.
+Gin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httprouter)  
+
+[See all benchmarks](/BENCHMARKS.md)
+
+
@@ -29,26 +35,32 @@ func main() {
-BenchmarkAce_Param5  2000000           579 ns/op         160 B/op          1 allocs/op
-BenchmarkBear_Param5     1000000          1599 ns/op         469 B/op          5 allocs/op
-BenchmarkBeego_Param5    1000000          3472 ns/op         992 B/op         13 allocs/op
-BenchmarkBone_Param5     1000000          1558 ns/op         432 B/op          3 allocs/op
-BenchmarkDenco_Param5    3000000           554 ns/op         160 B/op          1 allocs/op
-BenchmarkGin_Param5 10000000           215 ns/op           0 B/op          0 allocs/op
-BenchmarkGocraftWeb_Param5   1000000          2689 ns/op         928 B/op         12 allocs/op
-BenchmarkGoji_Param5     1000000          1194 ns/op         336 B/op          2 allocs/op
-BenchmarkGoJsonRest_Param5    500000          3765 ns/op        1105 B/op         17 allocs/op
-BenchmarkGoRestful_Param5     200000         11263 ns/op        2672 B/op         31 allocs/op
-BenchmarkGorillaMux_Param5    300000          6050 ns/op         912 B/op          9 allocs/op
-BenchmarkHttpRouter_Param5   5000000           397 ns/op         160 B/op          1 allocs/op
-BenchmarkHttpTreeMux_Param5  1000000          1088 ns/op         336 B/op          2 allocs/op
-BenchmarkKocha_Param5    1000000          1608 ns/op         440 B/op         10 allocs/op
-BenchmarkMacaron_Param5   300000          4506 ns/op        1376 B/op         14 allocs/op
-BenchmarkMartini_Param5   100000         15237 ns/op        1280 B/op         12 allocs/op
-BenchmarkPat_Param5   300000          4988 ns/op        1008 B/op         42 allocs/op
-BenchmarkPossum_Param5   1000000          2012 ns/op         624 B/op          7 allocs/op
-BenchmarkR2router_Param5     1000000          1531 ns/op         432 B/op          6 allocs/op
-BenchmarkRevel_Param5     200000          7964 ns/op        2024 B/op         35 allocs/op
-BenchmarkRivet_Param5    1000000          1895 ns/op         528 B/op          9 allocs/op
-BenchmarkTango_Param5    1000000          3093 ns/op         944 B/op         18 allocs/op
-BenchmarkTigerTonic_Param5    200000         11992 ns/op        2519 B/op         53 allocs/op
-BenchmarkTraffic_Param5   200000          8537 ns/op        2280 B/op         31 allocs/op
-BenchmarkVulcan_Param5   1000000          1290 ns/op          98 B/op          3 allocs/op
-BenchmarkZeus_Param5     1000000          1537 ns/op         416 B/op          3 allocs/op
+BenchmarkEcho_Param 10000000           129 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_Param  10000000           130 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_Param5     5000000           258 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_Param5  5000000           221 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_Param20    2000000           690 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_Param20     3000000           542 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_ParamWrite     5000000           243 ns/op           8 B/op          1 allocs/op
+BenchmarkGin_ParamWrite  5000000           324 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GithubStatic  10000000           170 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GithubStatic   10000000           157 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GithubParam    5000000           296 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GithubParam     5000000           250 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GithubAll    30000         59623 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GithubAll     30000         51971 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GPlusStatic   10000000           127 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GPlusStatic    20000000           123 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GPlusParam    10000000           173 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GPlusParam 10000000           168 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GPlus2Params   5000000           238 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GPlus2Params   10000000           209 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_GPlusAll    500000          2934 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_GPlusAll     500000          2564 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_ParseStatic   10000000           131 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_ParseStatic    10000000           128 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_ParseParam    10000000           143 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_ParseParam 10000000           138 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_Parse2Params  10000000           181 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_Parse2Params   10000000           164 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_ParseAll    300000          5227 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_ParseAll     300000          4734 ns/op           0 B/op          0 allocs/op
+BenchmarkEcho_StaticAll    50000         40169 ns/op           0 B/op          0 allocs/op
+BenchmarkGin_StaticAll     50000         33080 ns/op           0 B/op          0 allocs/op
@@ -57 +68,0 @@ BenchmarkZeus_Param5     1000000          1537 ns/op         416 B/op          3
-[https://github.com/gin-gonic/go-http-routing-benchmark/blob/master/round2.md](https://github.com/gin-gonic/go-http-routing-benchmark/blob/master/round2.md)
@@ -404,38 +414,0 @@ func main() {
-templates/index.tmpl
-```html
-<html><h1>
-	{{ .title }}
-</h1>
-</html>
-```
-
-Using templates with same name in different directories
-
-```go
-func main() {
-	router := gin.Default()
-	router.LoadHTMLGlob("templates/**/*")
-	router.GET("/posts/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
-			"title": "Posts",
-		})
-	})
-	router.GET("/users/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
-			"title": "Users",
-		})
-	})
-	router.Run(":8080")
-}
-```
-templates/posts/index.tmpl
-```html
-{{ define "posts/index.tmpl" }}
-<html><h1>
-	{{ .title }}
-</h1>
-<p>Using posts/index.tmpl</p>
-</html>
-{{ end }}
-```
-templates/users/index.tmpl
@@ -443 +415,0 @@ templates/users/index.tmpl
-{{ define "users/index.tmpl" }}
@@ -447 +418,0 @@ templates/users/index.tmpl
-<p>Using users/index.tmpl</p>
@@ -449 +419,0 @@ templates/users/index.tmpl
-{{ end }}
diff --git a/README.md b/README.md
index de79ec1..8b655b9 100644
--- a/README.md
+++ b/README.md
@@ -418,2 +418,2 @@ func main() {
-	router.GET("/post/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "post/index.tmpl", gin.H{
+	router.GET("/posts/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{
@@ -423,2 +423,2 @@ func main() {
-	router.GET("/user/index", func(c *gin.Context) {
-		c.HTML(http.StatusOK, "user/index.tmpl", gin.H{
+	router.GET("/users/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "users/index.tmpl", gin.H{
@@ -431 +431 @@ func main() {
-templates/post/index.tmpl
+templates/posts/index.tmpl
@@ -433 +433 @@ templates/post/index.tmpl
-{{ define "post/index.tmpl" }}
+{{ define "posts/index.tmpl" }}
@@ -437 +437 @@ templates/post/index.tmpl
-<p>Using post/index.tmpl</p>
+<p>Using posts/index.tmpl</p>
@@ -441 +441 @@ templates/post/index.tmpl
-templates/user/index.tmpl
+templates/users/index.tmpl
@@ -443 +443 @@ templates/user/index.tmpl
-{{ define "user/index.tmpl" }}
+{{ define "users/index.tmpl" }}
@@ -447 +447 @@ templates/user/index.tmpl
-<p>Using user/index.tmpl</p>
+<p>Using users/index.tmpl</p>
diff --git a/README.md b/README.md
index 0195556..de79ec1 100644
--- a/README.md
+++ b/README.md
@@ -403,0 +404 @@ func main() {
+templates/index.tmpl
@@ -410,0 +412,40 @@ func main() {
+Using templates with same name in different directories
+
+```go
+func main() {
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/**/*")
+	router.GET("/post/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "post/index.tmpl", gin.H{
+			"title": "Posts",
+		})
+	})
+	router.GET("/user/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "user/index.tmpl", gin.H{
+			"title": "Users",
+		})
+	})
+	router.Run(":8080")
+}
+```
+templates/post/index.tmpl
+```html
+{{ define "post/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using post/index.tmpl</p>
+</html>
+{{ end }}
+```
+templates/user/index.tmpl
+```html
+{{ define "user/index.tmpl" }}
+<html><h1>
+	{{ .title }}
+</h1>
+<p>Using user/index.tmpl</p>
+</html>
+{{ end }}
+```
+
diff --git a/README.md b/README.md
index d4ceb82..0195556 100644
--- a/README.md
+++ b/README.md
@@ -26 +26,35 @@ func main() {
-##Gin v1. released
+## Benchmarks
+
+```
+BenchmarkAce_Param5  2000000           579 ns/op         160 B/op          1 allocs/op
+BenchmarkBear_Param5     1000000          1599 ns/op         469 B/op          5 allocs/op
+BenchmarkBeego_Param5    1000000          3472 ns/op         992 B/op         13 allocs/op
+BenchmarkBone_Param5     1000000          1558 ns/op         432 B/op          3 allocs/op
+BenchmarkDenco_Param5    3000000           554 ns/op         160 B/op          1 allocs/op
+BenchmarkGin_Param5 10000000           215 ns/op           0 B/op          0 allocs/op
+BenchmarkGocraftWeb_Param5   1000000          2689 ns/op         928 B/op         12 allocs/op
+BenchmarkGoji_Param5     1000000          1194 ns/op         336 B/op          2 allocs/op
+BenchmarkGoJsonRest_Param5    500000          3765 ns/op        1105 B/op         17 allocs/op
+BenchmarkGoRestful_Param5     200000         11263 ns/op        2672 B/op         31 allocs/op
+BenchmarkGorillaMux_Param5    300000          6050 ns/op         912 B/op          9 allocs/op
+BenchmarkHttpRouter_Param5   5000000           397 ns/op         160 B/op          1 allocs/op
+BenchmarkHttpTreeMux_Param5  1000000          1088 ns/op         336 B/op          2 allocs/op
+BenchmarkKocha_Param5    1000000          1608 ns/op         440 B/op         10 allocs/op
+BenchmarkMacaron_Param5   300000          4506 ns/op        1376 B/op         14 allocs/op
+BenchmarkMartini_Param5   100000         15237 ns/op        1280 B/op         12 allocs/op
+BenchmarkPat_Param5   300000          4988 ns/op        1008 B/op         42 allocs/op
+BenchmarkPossum_Param5   1000000          2012 ns/op         624 B/op          7 allocs/op
+BenchmarkR2router_Param5     1000000          1531 ns/op         432 B/op          6 allocs/op
+BenchmarkRevel_Param5     200000          7964 ns/op        2024 B/op         35 allocs/op
+BenchmarkRivet_Param5    1000000          1895 ns/op         528 B/op          9 allocs/op
+BenchmarkTango_Param5    1000000          3093 ns/op         944 B/op         18 allocs/op
+BenchmarkTigerTonic_Param5    200000         11992 ns/op        2519 B/op         53 allocs/op
+BenchmarkTraffic_Param5   200000          8537 ns/op        2280 B/op         31 allocs/op
+BenchmarkVulcan_Param5   1000000          1290 ns/op          98 B/op          3 allocs/op
+BenchmarkZeus_Param5     1000000          1537 ns/op         416 B/op          3 allocs/op
+```
+
+[https://github.com/gin-gonic/go-http-routing-benchmark/blob/master/round2.md](https://github.com/gin-gonic/go-http-routing-benchmark/blob/master/round2.md)
+
+##Gin v1. stable
+
diff --git a/README.md b/README.md
index 70bf978..d4ceb82 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-#Gin Web Framework [![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin) [![Coverage Status](https://coveralls.io/repos/gin-gonic/gin/badge.svg?branch=develop)](https://coveralls.io/r/gin-gonic/gin?branch=develop)
+#Gin Web Framework [![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin) [![Coverage Status](https://coveralls.io/repos/gin-gonic/gin/badge.svg?branch=master)](https://coveralls.io/r/gin-gonic/gin?branch=master)  
@@ -12 +12 @@ $ cat test.go
-```go
+```go 
@@ -15,4 +15 @@ package main
-import (
-	"net/http"
-	"github.com/gin-gonic/gin"
-)
+import "github.com/gin-gonic/gin"
@@ -21,12 +18,3 @@ func main() {
-	router := gin.Default()
-	router.GET("/", func(c *gin.Context) {
-		c.String(http.StatusOK, "hello world")
-	})
-	router.GET("/ping", func(c *gin.Context) {
-		c.String(http.StatusOK, "pong")
-	})
-	router.POST("/submit", func(c *gin.Context) {
-		c.String(http.StatusUnauthorized, "not authorized")
-	})
-	router.PUT("/error", func(c *gin.Context) {
-		c.String(http.StatusInternalServerError, "an error happened :(")
+	r := gin.Default()
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
@@ -34 +22 @@ func main() {
-	router.Run(":8080")
+	r.Run(":8080") // listen and serve on 0.0.0.0:8080
@@ -38,22 +26,6 @@ func main() {
-##Gin is new, will it be supported?
-
-Yes, Gin is an internal tool of [Manu](https://github.com/manucorporat) and [Javi](https://github.com/javierprovecho) for many of our projects/start-ups. We developed it and we are going to continue using and improve it.
-
-
-##Roadmap for v1.0
-- [ ] Ask our designer for a cool logo
-- [ ] Add tons of unit tests
-- [ ] Add internal benchmarks suite
-- [ ] More powerful validation API
-- [ ] Improve documentation
-- [ ] Add Swagger support
-- [x] Stable API
-- [x] Improve logging system
-- [x] Improve JSON/XML validation using bindings
-- [x] Improve XML support
-- [x] Flexible rendering system
-- [x] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
-- [x] Continuous integration
-- [x] Performance improments, reduce allocation and garbage collection overhead
-- [x] Fix bugs
-
+##Gin v1. released
+- [x] Zero allocation router.
+- [x] Still the fastest http router and framework. From routing to writing.
+- [x] Complete suite of unit tests
+- [x] Battle tested
+- [x] API frozen, new releases will not break your code.
@@ -63,2 +35 @@ Yes, Gin is an internal tool of [Manu](https://github.com/manucorporat) and [Jav
-Obviously, you need to have Git and Go already installed to run Gin.  
-Run this in your terminal
+1. Download and install it:
@@ -66 +37 @@ Run this in your terminal
-```
+```sh
@@ -69 +40 @@ go get github.com/gin-gonic/gin
-Then import it in your Go code:
+2. Import it in your code:
@@ -71 +42 @@ Then import it in your Go code:
-```
+```go
@@ -77,20 +47,0 @@ import "github.com/gin-gonic/gin"
-#### Create most basic PING/PONG HTTP endpoint
-```go 
-package main
-
-import (
-	"net/http"
-	"github.com/gin-gonic/gin"
-)
-
-func main() {
-	r := gin.Default()
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(http.StatusOK, "pong")
-	})
-
-	// Listen and serve on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
@@ -101,2 +52,3 @@ func main() {
-	// Creates a gin router + logger and recovery (crash-free) middlewares
-	r := gin.Default()
+	// Creates a gin router with default middlewares:
+	// logger and recovery (crash-free) middlewares
+	router := gin.Default()
@@ -104,7 +56,7 @@ func main() {
-	r.GET("/someGet", getting)
-	r.POST("/somePost", posting)
-	r.PUT("/somePut", putting)
-	r.DELETE("/someDelete", deleting)
-	r.PATCH("/somePatch", patching)
-	r.HEAD("/someHead", head)
-	r.OPTIONS("/someOptions", options)
+	router.GET("/someGet", getting)
+	router.POST("/somePost", posting)
+	router.PUT("/somePut", putting)
+	router.DELETE("/someDelete", deleting)
+	router.PATCH("/somePatch", patching)
+	router.HEAD("/someHead", head)
+	router.OPTIONS("/someOptions", options)
@@ -113 +65 @@ func main() {
-	r.Run(":8080")
+	router.Run(":8080")
@@ -121 +73 @@ func main() {
-	r := gin.Default()
+	router := gin.Default()
@@ -124,4 +76,3 @@ func main() {
-	r.GET("/user/:name", func(c *gin.Context) {
-		name := c.Params.ByName("name")
-		message := "Hello "+name
-		c.String(http.StatusOK, message)
+	router.GET("/user/:name", func(c *gin.Context) {
+		name := c.Param("name")
+		c.String(http.StatusOK, "Hello %s", name)
@@ -132,3 +83,3 @@ func main() {
-	r.GET("/user/:name/*action", func(c *gin.Context) {
-		name := c.Params.ByName("name")
-		action := c.Params.ByName("action")
+	router.GET("/user/:name/*action", func(c *gin.Context) {
+		name := c.Param("name")
+		action := c.Param("action")
@@ -139,2 +90 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+	router.Run(":8080")
@@ -161,19 +111 @@ func main() {
-###Form parameters
-```go
-func main() {
-	r := gin.Default()
-	
-	// This will respond to urls like search?firstname=Jane&lastname=Doe
-	r.GET("/search", func(c *gin.Context) {
-		// You need to call ParseForm() on the request to receive url and form params first
-		c.Request.ParseForm()
-		
-		firstname := c.Request.Form.Get("firstname")
-		lastname := c.Request.Form.Get("lastname")
-
-		message := "Hello "+ firstname + lastname
-		c.String(http.StatusOK, message)
-	})
-	r.Run(":8080")
-}
-```
+### Multipart/Urlencoded Form 
@@ -181 +112,0 @@ func main() {
-###Multipart Form
@@ -183,12 +113,0 @@ func main() {
-package main
-
-import (
-	"github.com/gin-gonic/gin"
-	"github.com/gin-gonic/gin/binding"
-)
-
-type LoginForm struct {
-	User     string `form:"user" binding:"required"`
-	Password string `form:"password" binding:"required"`
-}
-
@@ -195,0 +115 @@ func main() {
+    router := gin.Default()
@@ -197,21 +117,10 @@ func main() {
-	r := gin.Default()
-
-	r.POST("/login", func(c *gin.Context) {
-
-		var form LoginForm
-
-		// you can bind multipart form with explicit binding declaration:
-		// c.BindWith(&form, binding.Form)
-		// or you can simply use autobinding with Bind method:
-		c.Bind(&form) // in this case proper binding will be automatically selected
-
-		if form.User == "user" && form.Password == "password" {
-			c.JSON(200, gin.H{"status": "you are logged in"})
-		} else {
-			c.JSON(401, gin.H{"status": "unauthorized"})
-		}
-
-	})
-
-	r.Run(":8080")
-
+    router.POST("/form_post", func(c *gin.Context) {
+        message := c.PostForm("message")
+        nick := c.DefaultPostForm("nick", "anonymous")
+                
+        c.JSON(200, gin.H{
+            "status": "posted",
+            "message": message,
+        })
+    })
+    router.Run(":8080")
@@ -221,5 +129,0 @@ func main() {
-Test it with:
-```bash
-$ curl -v --form user=user --form password=password http://localhost:8080/login
-```
-
@@ -229 +133 @@ func main() {
-	r := gin.Default()
+	router := gin.Default()
@@ -232 +136 @@ func main() {
-	v1 := r.Group("/v1")
+	v1 := router.Group("/v1")
@@ -240 +144 @@ func main() {
-	v2 := r.Group("/v2")
+	v2 := router.Group("/v2")
@@ -247,2 +151 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+	router.Run(":8080")
@@ -356,0 +260,44 @@ func main() {
+
+###Multipart/Urlencoded binding 
+```go
+package main
+
+import (
+	"github.com/gin-gonic/gin"
+	"github.com/gin-gonic/gin/binding"
+)
+
+type LoginForm struct {
+	User     string `form:"user" binding:"required"`
+	Password string `form:"password" binding:"required"`
+}
+
+func main() {
+
+	router := gin.Default()
+
+	router.POST("/login", func(c *gin.Context) {
+		// you can bind multipart form with explicit binding declaration:
+		// c.BindWith(&form, binding.Form)
+		// or you can simply use autobinding with Bind method:
+		var form LoginForm
+		c.Bind(&form) // in this case proper binding will be automatically selected
+
+		if form.User == "user" && form.Password == "password" {
+			c.JSON(200, gin.H{"status": "you are logged in"})
+		} else {
+			c.JSON(401, gin.H{"status": "unauthorized"})
+		}
+	})
+
+	router.Run(":8080")
+
+}
+```
+
+Test it with:
+```bash
+$ curl -v --form user=user --form password=password http://localhost:8080/login
+```
+
+
@@ -393 +339,0 @@ func main() {
-Use Engine.ServeFiles(path string, root http.FileSystem):
@@ -397,2 +343,4 @@ func main() {
-    r := gin.Default()
-    r.Static("/assets", "./assets")
+    router := gin.Default()
+    router.Static("/assets", "./assets")
+    router.StaticFS("/more_static", http.Dir("my_file_system"))
+    router.StaticFile("/favicon.ico", "./resources/favicon.ico")
@@ -401 +349 @@ func main() {
-    r.Run(":8080")
+    router.Run(":8080")
@@ -405,9 +352,0 @@ func main() {
-Use the following example to serve static files at top level route of your domain. Files are being served from directory ./html.
-
-```
-r := gin.Default()
-r.Use(static.Serve("/", static.LocalFile("html", false)))
-```
-
-Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
-
@@ -420,5 +359,7 @@ func main() {
-	r := gin.Default()
-	r.LoadHTMLGlob("templates/*")
-	r.GET("/index", func(c *gin.Context) {
-		obj := gin.H{"title": "Main website"}
-		c.HTML(http.StatusOK, "index.tmpl", obj)
+	router := gin.Default()
+	router.LoadHTMLGlob("templates/*")
+	//router.LoadHTMLFiles("templates/template1.html", "templates/template2.html")
+	router.GET("/index", func(c *gin.Context) {
+		c.HTML(http.StatusOK, "index.tmpl", gin.H{
+			"title": "Main website",
+		})
@@ -426,3 +367 @@ func main() {
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+	router.Run(":8080")
@@ -432 +371 @@ func main() {
-<h1>
+<html><h1>
@@ -434,0 +374 @@ func main() {
+</html>
@@ -443 +383 @@ func main() {
-	r := gin.Default()
+	router := gin.Default()
@@ -445,4 +385,2 @@ func main() {
-	r.SetHTMLTemplate(html)
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+	router.SetHTMLTemplate(html)
+	router.Run(":8080")
@@ -452,26 +389,0 @@ func main() {
-#####Using layout files with templates
-```go
-var baseTemplate = "main.tmpl"
-
-r.GET("/", func(c *gin.Context) {
-    r.SetHTMLTemplate(template.Must(template.ParseFiles(baseTemplate, "whatever.tmpl")))
-    c.HTML(200, "base", data)
-})
-```
-main.tmpl
-```html
-{{define "base"}}
-<html>
-    <head></head>
-    <body>
-        {{template "content" .}}
-    </body>
-</html>
-{{end}}
-```
-whatever.tmpl
-```html
-{{define "content"}}
-<h1>Hello World!</h1>
-{{end}}
-```
diff --git a/README.md b/README.md
index 95634c1..70bf978 100644
--- a/README.md
+++ b/README.md
@@ -142,0 +143,18 @@ func main() {
+
+#### Querystring parameters
+```go
+func main() {
+    router := gin.Default()
+
+    // Query string parameters are parsed using the existing underlying request object.  
+    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+    router.GET("/welcome", func(c *gin.Context) {
+        firstname := c.DefaultQuery("firstname", "Guest")
+        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+
+        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+    })
+    router.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index ee26758..95634c1 100644
--- a/README.md
+++ b/README.md
@@ -188 +187,0 @@ func main() {
-
diff --git a/README.md b/README.md
index ffe43c8..ee26758 100644
--- a/README.md
+++ b/README.md
@@ -143,18 +142,0 @@ func main() {
-
-#### Querystring parameters
-```go
-func main() {
-    router := gin.Default()
-
-    // Query string parameters are parsed using the existing underlying request object.  
-    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
-    router.GET("/welcome", func(c *gin.Context) {
-        firstname := c.DefaultQuery("firstname", "Guest")
-        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
-
-        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
-    })
-    router.Run(":8080")
-}
-```
-
@@ -202 +184,6 @@ func main() {
-		c.BindWith(&form, binding.MultipartForm)
+
+		// you can bind multipart form with explicit binding declaration:
+		// c.BindWith(&form, binding.Form)
+		// or you can simply use autobinding with Bind method:
+
+		c.Bind(&form) // in this case proper binding will be automatically selected
diff --git a/README.md b/README.md
index d6d11d2..ffe43c8 100644
--- a/README.md
+++ b/README.md
@@ -147,11 +147,11 @@ func main() {
-	r := gin.Default()
-	
-	// Query string parameters are parsed using the existing underlying request object.  
-	// The request responds to a url matching:  /search?firstname=Jane&lastname=Doe
-	r.GET("/search", func(c *gin.Context) {
-		firstname := c.Request.URL.Query().Get("firstname")
-		lastname := c.Request.URL.Quert().Get("lastname")
-		message := "Hello " + firstname + lastname
-		c.String(http.StatusOK, message)
-	})
-	r.Run(":8080")
+    router := gin.Default()
+
+    // Query string parameters are parsed using the existing underlying request object.  
+    // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
+    router.GET("/welcome", func(c *gin.Context) {
+        firstname := c.DefaultQuery("firstname", "Guest")
+        lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")
+
+        c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
+    })
+    router.Run(":8080")
diff --git a/README.md b/README.md
index 594b065..d6d11d2 100644
--- a/README.md
+++ b/README.md
@@ -149 +149 @@ func main() {
-	// Query string parameters are parsed used the existing underlying request object.  
+	// Query string parameters are parsed using the existing underlying request object.  
diff --git a/README.md b/README.md
index 1ae003e..594b065 100644
--- a/README.md
+++ b/README.md
@@ -152,2 +152,2 @@ func main() {
-		firstname := c.Request.URL.Query().Get("latitude")
-		lastname := c.Request.URL.Quert().Get("longitude")
+		firstname := c.Request.URL.Query().Get("firstname")
+		lastname := c.Request.URL.Quert().Get("lastname")
diff --git a/README.md b/README.md
index c8fe60e..1ae003e 100644
--- a/README.md
+++ b/README.md
@@ -142,0 +143,18 @@ func main() {
+
+#### Querystring parameters
+```go
+func main() {
+	r := gin.Default()
+	
+	// Query string parameters are parsed used the existing underlying request object.  
+	// The request responds to a url matching:  /search?firstname=Jane&lastname=Doe
+	r.GET("/search", func(c *gin.Context) {
+		firstname := c.Request.URL.Query().Get("latitude")
+		lastname := c.Request.URL.Quert().Get("longitude")
+		message := "Hello " + firstname + lastname
+		c.String(http.StatusOK, message)
+	})
+	r.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index 2e81d81..c8fe60e 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-#Gin Web Framework [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin) [![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
+#Gin Web Framework [![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin) [![Coverage Status](https://coveralls.io/repos/gin-gonic/gin/badge.svg?branch=develop)](https://coveralls.io/r/gin-gonic/gin?branch=develop)
@@ -3 +3 @@
-[![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+ [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)  [![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
@@ -75,12 +74,0 @@ import "github.com/gin-gonic/gin"
-
-##Community
-If you'd like to help out with the project, there's a mailing list and IRC channel where Gin discussions normally happen.
-
-* IRC
- * [irc.freenode.net #getgin](irc://irc.freenode.net:6667/getgin)
- * [Webchat](http://webchat.freenode.net?randomnick=1&channels=%23getgin)
-* Mailing List
- * Subscribe: [getgin@librelist.org](mailto:getgin@librelist.org)
- * [Archives](http://librelist.com/browser/getgin/)
-
-
diff --git a/README.md b/README.md
index 8305578..2e81d81 100644
--- a/README.md
+++ b/README.md
@@ -32 +32 @@ func main() {
-		c.String(http.StatusInternalServerError, "and error happened :(")
+		c.String(http.StatusInternalServerError, "an error happened :(")
diff --git a/README.md b/README.md
index 92d6a0b..8305578 100644
--- a/README.md
+++ b/README.md
@@ -441,0 +442,27 @@ func main() {
+#####Using layout files with templates
+```go
+var baseTemplate = "main.tmpl"
+
+r.GET("/", func(c *gin.Context) {
+    r.SetHTMLTemplate(template.Must(template.ParseFiles(baseTemplate, "whatever.tmpl")))
+    c.HTML(200, "base", data)
+})
+```
+main.tmpl
+```html
+{{define "base"}}
+<html>
+    <head></head>
+    <body>
+        {{template "content" .}}
+    </body>
+</html>
+{{end}}
+```
+whatever.tmpl
+```html
+{{define "content"}}
+<h1>Hello World!</h1>
+{{end}}
+```
+
diff --git a/README.md b/README.md
index b6020a2..92d6a0b 100644
--- a/README.md
+++ b/README.md
@@ -174,0 +175,41 @@ func main() {
+###Multipart Form
+```go
+package main
+
+import (
+	"github.com/gin-gonic/gin"
+	"github.com/gin-gonic/gin/binding"
+)
+
+type LoginForm struct {
+	User     string `form:"user" binding:"required"`
+	Password string `form:"password" binding:"required"`
+}
+
+func main() {
+
+	r := gin.Default()
+
+	r.POST("/login", func(c *gin.Context) {
+
+		var form LoginForm
+		c.BindWith(&form, binding.MultipartForm)
+
+		if form.User == "user" && form.Password == "password" {
+			c.JSON(200, gin.H{"status": "you are logged in"})
+		} else {
+			c.JSON(401, gin.H{"status": "unauthorized"})
+		}
+
+	})
+
+	r.Run(":8080")
+
+}
+```
+
+Test it with:
+```bash
+$ curl -v --form user=user --form password=password http://localhost:8080/login
+```
+
diff --git a/README.md b/README.md
index 2658662..b6020a2 100644
--- a/README.md
+++ b/README.md
@@ -17 +16,0 @@ import (
-
@@ -96 +94,0 @@ import (
-
diff --git a/README.md b/README.md
index 32ca3a2..2658662 100644
--- a/README.md
+++ b/README.md
@@ -15 +15,5 @@ package main
-import "github.com/gin-gonic/gin"
+import (
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+)
@@ -20 +24 @@ func main() {
-		c.String(200, "hello world")
+		c.String(http.StatusOK, "hello world")
@@ -23 +27 @@ func main() {
-		c.String(200, "pong")
+		c.String(http.StatusOK, "pong")
@@ -26 +30 @@ func main() {
-		c.String(401, "not authorized")
+		c.String(http.StatusUnauthorized, "not authorized")
@@ -29 +33 @@ func main() {
-		c.String(500, "and error happened :(")
+		c.String(http.StatusInternalServerError, "and error happened :(")
@@ -90 +94,5 @@ package main
-import "github.com/gin-gonic/gin"
+import (
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+)
@@ -95 +103 @@ func main() {
-		c.String(200, "pong")
+		c.String(http.StatusOK, "pong")
@@ -133 +141 @@ func main() {
-		c.String(200, message)
+		c.String(http.StatusOK, message)
@@ -142 +150 @@ func main() {
-		c.String(200, message)
+		c.String(http.StatusOK, message)
@@ -163 +171 @@ func main() {
-		c.String(200, message)
+		c.String(http.StatusOK, message)
@@ -277 +285 @@ func main() {
-            c.JSON(200, gin.H{"status": "you are logged in"})
+            c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
@@ -279 +287 @@ func main() {
-            c.JSON(401, gin.H{"status": "unauthorized"})
+            c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
@@ -289 +297 @@ func main() {
-            c.JSON(200, gin.H{"status": "you are logged in"})
+            c.JSON(http.StatusOK, gin.H{"status": "you are logged in"})
@@ -291 +299 @@ func main() {
-            c.JSON(401, gin.H{"status": "unauthorized"})
+            c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
@@ -308 +316 @@ func main() {
-		c.JSON(200, gin.H{"message": "hey", "status": 200})
+		c.JSON(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
@@ -323 +331 @@ func main() {
-		c.JSON(200, msg)
+		c.JSON(http.StatusOK, msg)
@@ -327 +335 @@ func main() {
-		c.XML(200, gin.H{"message": "hey", "status": 200})
+		c.XML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
@@ -367 +375 @@ func main() {
-		c.HTML(200, "index.tmpl", obj)
+		c.HTML(http.StatusOK, "index.tmpl", obj)
@@ -401 +409 @@ r.GET("/test", func(c *gin.Context) {
-	c.Redirect(301, "http://www.google.com/")
+	c.Redirect(http.StatusMovedPermanently, "http://www.google.com/")
@@ -474 +482 @@ func main() {
-			c.JSON(200, gin.H{"user": user, "secret": secret})
+			c.JSON(http.StatusOK, gin.H{"user": user, "secret": secret})
@@ -476 +484 @@ func main() {
-			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
+			c.JSON(http.StatusOK, gin.H{"user": user, "secret": "NO SECRET :("})
diff --git a/README.md b/README.md
index e4c1ec2..32ca3a2 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,2 @@
+[![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
diff --git a/README.md b/README.md
index d4b9eca..e4c1ec2 100644
--- a/README.md
+++ b/README.md
@@ -334 +333,0 @@ func main() {
-
@@ -346,0 +346,7 @@ func main() {
+Use the following example to serve static files at top level route of your domain. Files are being served from directory ./html.
+
+```
+r := gin.Default()
+r.Use(static.Serve("/", static.LocalFile("html", false)))
+```
+
diff --git a/README.md b/README.md
index df4bf28..d4b9eca 100644
--- a/README.md
+++ b/README.md
@@ -441 +441 @@ func main() {
-// similate some private data
+// simulate some private data
diff --git a/README.md b/README.md
index bda1ceb..df4bf28 100644
--- a/README.md
+++ b/README.md
@@ -96 +96 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
diff --git a/README.md b/README.md
index 92e7447..bda1ceb 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-		c.String(500, "and error hapenned :(")
+		c.String(500, "and error happened :(")
@@ -96 +96 @@ func main() {
-	// Listen and serve on 0.0.0.0:8080
+	// Listen and server on 0.0.0.0:8080
@@ -158 +158 @@ func main() {
-		lastname := c.Request.Form.get("lastname")
+		lastname := c.Request.Form.Get("lastname")
diff --git a/README.md b/README.md
index 872b882..92e7447 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-		c.String(500, "and error happened :(")
+		c.String(500, "and error hapenned :(")
@@ -96 +96 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
+	// Listen and serve on 0.0.0.0:8080
diff --git a/README.md b/README.md
index e3714ed..872b882 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-		c.String(500, "and error hapenned :(")
+		c.String(500, "and error happened :(")
@@ -158 +158 @@ func main() {
-		lastname := c.Request.Form.Get("lastname")
+		lastname := c.Request.Form.get("lastname")
diff --git a/README.md b/README.md
index 3c6ca7e..e3714ed 100644
--- a/README.md
+++ b/README.md
@@ -158 +158 @@ func main() {
-		lastname := c.Request.Form.get("lastname")
+		lastname := c.Request.Form.Get("lastname")
diff --git a/README.md b/README.md
index 8732edf..3c6ca7e 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1 @@
-#Gin Web Framework
-
-[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
-[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
+#Gin Web Framework [![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin) [![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -8 +5 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](http://forzefield.com/gin_example.png)
+![Gin console logger](https://gin-gonic.github.io/gin/other/console.png)
diff --git a/README.md b/README.md
index a28d985..8732edf 100644
--- a/README.md
+++ b/README.md
@@ -137 +137,2 @@ func main() {
-	// However, this one will match /user/john and also /user/john/send
+	// However, this one will match /user/john/ and also /user/john/send
+	// If no other routers match /user/john, it will redirect to /user/join/
diff --git a/README.md b/README.md
index df1ed21..a28d985 100644
--- a/README.md
+++ b/README.md
@@ -149 +149,19 @@ func main() {
-
+###Form parameters
+```go
+func main() {
+	r := gin.Default()
+	
+	// This will respond to urls like search?firstname=Jane&lastname=Doe
+	r.GET("/search", func(c *gin.Context) {
+		// You need to call ParseForm() on the request to receive url and form params first
+		c.Request.ParseForm()
+		
+		firstname := c.Request.Form.Get("firstname")
+		lastname := c.Request.Form.get("lastname")
+
+		message := "Hello "+ firstname + lastname
+		c.String(200, message)
+	})
+	r.Run(":8080")
+}
+```
diff --git a/README.md b/README.md
index d38ca93..df1ed21 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](https://gin-gonic.github.io/gin/other/console.png)
+![Gin console logger](http://forzefield.com/gin_example.png)
@@ -38 +38 @@ func main() {
-Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcoming startup. We developed it and we are going to continue using and improve it.
+Yes, Gin is an internal tool of [Manu](https://github.com/manucorporat) and [Javi](https://github.com/javierprovecho) for many of our projects/start-ups. We developed it and we are going to continue using and improve it.
@@ -42,3 +41,0 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [x] Performance improments, reduce allocation and garbage collection overhead
-- [x] Fix bugs
-- [ ] Stable API
@@ -47,0 +45,4 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
+- [ ] More powerful validation API
+- [ ] Improve documentation
+- [ ] Add Swagger support
+- [x] Stable API
@@ -52,3 +53 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ] More powerful validation API
-- [ ] Improve documentation
-- [X] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
+- [x] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
@@ -55,0 +55,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
+- [x] Performance improments, reduce allocation and garbage collection overhead
+- [x] Fix bugs
@@ -332,16 +332,0 @@ Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
-####Serving static files
-
-Use Engine.ServeFiles(path string, root http.FileSystem):
-
-```go
-func main() {
-    r := gin.Default()
-    r.Static("/assets", "./assets")
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
-
-Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
-
diff --git a/README.md b/README.md
index ce3ea7a..d38ca93 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](http://forzefield.com/gin_example.png)
+![Gin console logger](https://gin-gonic.github.io/gin/other/console.png)
@@ -54 +54 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
+- [X] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
@@ -331,0 +332,16 @@ Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
+####Serving static files
+
+Use Engine.ServeFiles(path string, root http.FileSystem):
+
+```go
+func main() {
+    r := gin.Default()
+    r.Static("/assets", "./assets")
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
+
+Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
+
diff --git a/README.md b/README.md
index f1ac5fb..ce3ea7a 100644
--- a/README.md
+++ b/README.md
@@ -136,2 +136 @@ func main() {
-	// However, this one will match /user/john/ and also /user/john/send
-	// If no other routers match /user/john, it will redirect to /user/join/
+	// However, this one will match /user/john and also /user/john/send
@@ -316,0 +316,15 @@ func main() {
+####Serving static files
+
+Use Engine.ServeFiles(path string, root http.FileSystem):
+
+```go
+func main() {
+    r := gin.Default()
+    r.Static("/assets", "./assets")
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
+
+Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
diff --git a/README.md b/README.md
index b49c9b0..f1ac5fb 100644
--- a/README.md
+++ b/README.md
@@ -136 +136,2 @@ func main() {
-	// However, this one will match /user/john and also /user/john/send
+	// However, this one will match /user/john/ and also /user/john/send
+	// If no other routers match /user/john, it will redirect to /user/join/
diff --git a/README.md b/README.md
index b1974ea..b49c9b0 100644
--- a/README.md
+++ b/README.md
@@ -324 +324 @@ func main() {
-	r.LoadHTMLTemplates("templates/*")
+	r.LoadHTMLGlob("templates/*")
@@ -333,0 +334,5 @@ func main() {
+```html
+<h1>
+	{{ .title }}
+</h1>
+```
diff --git a/README.md b/README.md
index cf2eec2..b1974ea 100644
--- a/README.md
+++ b/README.md
@@ -253 +253 @@ func main() {
-	r.POST("/login", func(c *gin.Context) {
+	r.POST("/loginJSON", func(c *gin.Context) {
@@ -265 +265 @@ func main() {
-    r.POST("/login", func(c *gin.Context) {
+    r.POST("/loginHTML", func(c *gin.Context) {
@@ -427 +427 @@ func main() {
-		user := c.Get(gin.AuthUserKey).(string)
+		user := c.MustGet(gin.AuthUserKey).(string)
diff --git a/README.md b/README.md
index 94fd949..cf2eec2 100644
--- a/README.md
+++ b/README.md
@@ -6,2 +6,29 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin.  
-![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin. 
+
+![Gin console logger](http://forzefield.com/gin_example.png)
+
+```
+$ cat test.go
+```
+```go
+package main
+
+import "github.com/gin-gonic/gin"
+
+func main() {
+	router := gin.Default()
+	router.GET("/", func(c *gin.Context) {
+		c.String(200, "hello world")
+	})
+	router.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+	router.POST("/submit", func(c *gin.Context) {
+		c.String(401, "not authorized")
+	})
+	router.PUT("/error", func(c *gin.Context) {
+		c.String(500, "and error hapenned :(")
+	})
+	router.Run(":8080")
+}
+```
@@ -33 +60 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Obviously, you need to have Git and Go! already installed to run Gin.  
+Obviously, you need to have Git and Go already installed to run Gin.  
@@ -39 +66 @@ go get github.com/gin-gonic/gin
-Then import it in your Go! code:
+Then import it in your Go code:
@@ -237 +264 @@ func main() {
-    // Example for binding a HTLM form (user=manu&password=123)
+    // Example for binding a HTML form (user=manu&password=123)
@@ -260 +287 @@ func main() {
-	// gin.H is a shortcup for map[string]interface{}
+	// gin.H is a shortcut for map[string]interface{}
@@ -290,16 +316,0 @@ func main() {
-####Serving static files
-
-Use Engine.ServeFiles(path string, root http.FileSystem):
-
-```go
-func main() {
-    r := gin.Default()
-    r.Static("/assets", "./assets")
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
-
-Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
-
@@ -332 +343 @@ func main() {
-	r.HTMLTemplates = html
+	r.SetHTMLTemplate(html)
diff --git a/README.md b/README.md
index dcffa74..94fd949 100644
--- a/README.md
+++ b/README.md
@@ -6,29 +6,2 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin. 
-
-![Gin console logger](http://forzefield.com/gin_example.png)
-
-```
-$ cat test.go
-```
-```go
-package main
-
-import "github.com/gin-gonic/gin"
-
-func main() {
-	router := gin.Default()
-	router.GET("/", func(c *gin.Context) {
-		c.String(200, "hello world")
-	})
-	router.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-	router.POST("/submit", func(c *gin.Context) {
-		c.String(401, "not authorized")
-	})
-	router.PUT("/error", func(c *gin.Context) {
-		c.String(500, "and error hapenned :(")
-	})
-	router.Run(":8080")
-}
-```
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin.  
+![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
@@ -60 +33 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Obviously, you need to have Git and Go already installed to run Gin.  
+Obviously, you need to have Git and Go! already installed to run Gin.  
@@ -66 +39 @@ go get github.com/gin-gonic/gin
-Then import it in your Go code:
+Then import it in your Go! code:
@@ -264 +237 @@ func main() {
-    // Example for binding a HTML form (user=manu&password=123)
+    // Example for binding a HTLM form (user=manu&password=123)
@@ -316,0 +290,16 @@ func main() {
+####Serving static files
+
+Use Engine.ServeFiles(path string, root http.FileSystem):
+
+```go
+func main() {
+    r := gin.Default()
+    r.Static("/assets", "./assets")
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
+
+Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
+
diff --git a/README.md b/README.md
index f0ef3e9..dcffa74 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin. 
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin. 
@@ -287 +287 @@ func main() {
-	// gin.H is a shortcut for map[string]interface{}
+	// gin.H is a shortcup for map[string]interface{}
@@ -343 +343 @@ func main() {
-	r.SetHTMLTemplate(html)
+	r.HTMLTemplates = html
diff --git a/README.md b/README.md
index a378c79..f0ef3e9 100644
--- a/README.md
+++ b/README.md
@@ -287 +287 @@ func main() {
-	// gin.H is a shortcup for map[string]interface{}
+	// gin.H is a shortcut for map[string]interface{}
diff --git a/README.md b/README.md
index 44c3099..a378c79 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin. 
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin. 
@@ -264 +264 @@ func main() {
-    // Example for binding a HTLM form (user=manu&password=123)
+    // Example for binding a HTML form (user=manu&password=123)
@@ -343 +343 @@ func main() {
-	r.HTMLTemplates = html
+	r.SetHTMLTemplate(html)
diff --git a/README.md b/README.md
index 82a1584..44c3099 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin. 
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin. 
@@ -264 +264 @@ func main() {
-    // Example for binding a HTML form (user=manu&password=123)
+    // Example for binding a HTLM form (user=manu&password=123)
diff --git a/README.md b/README.md
index 43b19cc..82a1584 100644
--- a/README.md
+++ b/README.md
@@ -264 +264 @@ func main() {
-    // Example for binding a HTLM form (user=manu&password=123)
+    // Example for binding a HTML form (user=manu&password=123)
diff --git a/README.md b/README.md
index 67d8d96..43b19cc 100644
--- a/README.md
+++ b/README.md
@@ -6 +6,2 @@
-Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin.  
+Gin is a web framework written in Golang. It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity, you will love Gin. 
+
@@ -8,0 +10,26 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
+```
+$ cat test.go
+```
+```go
+package main
+
+import "github.com/gin-gonic/gin"
+
+func main() {
+	router := gin.Default()
+	router.GET("/", func(c *gin.Context) {
+		c.String(200, "hello world")
+	})
+	router.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+	router.POST("/submit", func(c *gin.Context) {
+		c.String(401, "not authorized")
+	})
+	router.PUT("/error", func(c *gin.Context) {
+		c.String(500, "and error hapenned :(")
+	})
+	router.Run(":8080")
+}
+```
+
diff --git a/README.md b/README.md
index 5ceab2f..67d8d96 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
+![Gin console logger](http://forzefield.com/gin_example.png)
diff --git a/README.md b/README.md
index c97164d..5ceab2f 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Obviously, you need to have Git and Go! already installed to run Gin.  
+Obviously, you need to have Git and Go already installed to run Gin.  
@@ -39 +39 @@ go get github.com/gin-gonic/gin
-Then import it in your Go! code:
+Then import it in your Go code:
diff --git a/README.md b/README.md
index f150f43..c97164d 100644
--- a/README.md
+++ b/README.md
@@ -327 +327,2 @@ Issuing a HTTP redirect is easy:
-```r.GET("/test", func(c *gin.Context) {
+```go
+r.GET("/test", func(c *gin.Context) {
@@ -330,2 +330,0 @@ Issuing a HTTP redirect is easy:
-
-Both internal and external locations are supported.
@@ -332,0 +332,2 @@ Both internal and external locations are supported.
+Both internal and external locations are supported.
+
diff --git a/README.md b/README.md
index 782137d..f150f43 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.png)](https://godoc.org/github.com/gin-gonic/gin)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
diff --git a/README.md b/README.md
index af6b3a5..782137d 100644
--- a/README.md
+++ b/README.md
@@ -198,0 +199 @@ func main() {
+#### Model binding and validation
@@ -200 +201,7 @@ func main() {
-#### JSON parsing and validation
+To bind a request body into a type, use model binding. We currently support binding of JSON, XML and standard form values (foo=bar&boo=baz).
+
+Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set `json:"fieldname"`.
+
+When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use BindWith. 
+
+You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, the current request will fail with an error.
@@ -202,0 +210 @@ func main() {
+// Binding from JSON
@@ -207,0 +216,6 @@ type LoginJSON struct {
+// Binding from form values
+type LoginForm struct {
+    User     string `form:"user" binding:"required"`
+    Password string `form:"password" binding:"required"`   
+}
+
@@ -210,0 +225 @@ func main() {
+    // Example for binding JSON ({"user": "manu", "password": "123"})
@@ -214,10 +229,6 @@ func main() {
-		// If EnsureBody returns false, it will write automatically the error
-		// in the HTTP stream and return a 400 error. If you want custom error
-		// handling you should use: c.ParseBody(interface{}) error
-		if c.EnsureBody(&json) {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
+        c.Bind(&json) // This will infer what binder to use depending on the content-type header.
+        if json.User == "manu" && json.Password == "123" {
+            c.JSON(200, gin.H{"status": "you are logged in"})
+        } else {
+            c.JSON(401, gin.H{"status": "unauthorized"})
+        }
@@ -225,0 +237,12 @@ func main() {
+    // Example for binding a HTLM form (user=manu&password=123)
+    r.POST("/login", func(c *gin.Context) {
+        var form LoginForm
+
+        c.BindWith(&form, binding.Form) // You can also specify which binder to use. We support binding.Form, binding.JSON and binding.XML.
+        if form.User == "manu" && form.Password == "123" {
+            c.JSON(200, gin.H{"status": "you are logged in"})
+        } else {
+            c.JSON(401, gin.H{"status": "unauthorized"})
+        }
+    })
+
@@ -231 +254 @@ func main() {
-#### XML, and JSON rendering
+#### XML and JSON rendering
@@ -299,0 +323,10 @@ func main() {
+#### Redirects
+
+Issuing a HTTP redirect is easy:
+
+```r.GET("/test", func(c *gin.Context) {
+	c.Redirect(301, "http://www.google.com/")
+})
+
+Both internal and external locations are supported.
+```
diff --git a/README.md b/README.md
index a96eaed..af6b3a5 100644
--- a/README.md
+++ b/README.md
@@ -199 +198,0 @@ func main() {
-#### Model binding and validation
@@ -201,7 +200 @@ func main() {
-To bind a request body into a type, use model binding. We currently support binding of JSON, XML and standard form values (foo=bar&boo=baz).
-
-Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set `json:"fieldname"`.
-
-When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use BindWith. 
-
-You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, the current request will fail with an error.
+#### JSON parsing and validation
@@ -210 +202,0 @@ You can also specify that specific fields are required. If a field is decorated
-// Binding from JSON
@@ -216,6 +207,0 @@ type LoginJSON struct {
-// Binding from form values
-type LoginForm struct {
-    User     string `form:"user" binding:"required"`
-    Password string `form:"password" binding:"required"`   
-}
-
@@ -225 +210,0 @@ func main() {
-    // Example for binding JSON ({"user": "manu", "password": "123"})
@@ -229,6 +214,10 @@ func main() {
-        c.Bind(&json) // This will infer what binder to use depending on the content-type header.
-        if json.User == "manu" && json.Password == "123" {
-            c.JSON(200, gin.H{"status": "you are logged in"})
-        } else {
-            c.JSON(401, gin.H{"status": "unauthorized"})
-        }
+		// If EnsureBody returns false, it will write automatically the error
+		// in the HTTP stream and return a 400 error. If you want custom error
+		// handling you should use: c.ParseBody(interface{}) error
+		if c.EnsureBody(&json) {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
@@ -237,12 +225,0 @@ func main() {
-    // Example for binding a HTLM form (user=manu&password=123)
-    r.POST("/login", func(c *gin.Context) {
-        var form LoginForm
-
-        c.BindWith(&form, binding.Form) // You can also specify which binder to use. We support binding.Form, binding.JSON and binding.XML.
-        if form.User == "manu" && form.Password == "123" {
-            c.JSON(200, gin.H{"status": "you are logged in"})
-        } else {
-            c.JSON(401, gin.H{"status": "unauthorized"})
-        }
-    })
-
@@ -254 +231 @@ func main() {
-#### XML and JSON rendering
+#### XML, and JSON rendering
@@ -323,10 +299,0 @@ func main() {
-#### Redirects
-
-Issuing a HTTP redirect is easy:
-
-```r.GET("/test", func(c *gin.Context) {
-	c.Redirect(301, "http://www.google.com/")
-})
-
-Both internal and external locations are supported.
-```
@@ -428 +395 @@ func main() {
-			log.Println("Done! in path " + c_cp.Req.URL.Path)
+			log.Println("Done! in path " + c_cp.Request.URL.Path)
@@ -438 +405 @@ func main() {
-		log.Println("Done! in path " + c.Req.URL.Path)
+		log.Println("Done! in path " + c.Request.URL.Path)
diff --git a/README.md b/README.md
index a9fe8d3..a96eaed 100644
--- a/README.md
+++ b/README.md
@@ -254 +254 @@ func main() {
-#### XML, and JSON rendering
+#### XML and JSON rendering
@@ -322,0 +323,10 @@ func main() {
+#### Redirects
+
+Issuing a HTTP redirect is easy:
+
+```r.GET("/test", func(c *gin.Context) {
+	c.Redirect(301, "http://www.google.com/")
+})
+
+Both internal and external locations are supported.
+```
diff --git a/README.md b/README.md
index 7b9196d..a9fe8d3 100644
--- a/README.md
+++ b/README.md
@@ -198,0 +199 @@ func main() {
+#### Model binding and validation
@@ -200 +201,7 @@ func main() {
-#### JSON parsing and validation
+To bind a request body into a type, use model binding. We currently support binding of JSON, XML and standard form values (foo=bar&boo=baz).
+
+Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set `json:"fieldname"`.
+
+When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use BindWith. 
+
+You can also specify that specific fields are required. If a field is decorated with `binding:"required"` and has a empty value when binding, the current request will fail with an error.
@@ -202,0 +210 @@ func main() {
+// Binding from JSON
@@ -207,0 +216,6 @@ type LoginJSON struct {
+// Binding from form values
+type LoginForm struct {
+    User     string `form:"user" binding:"required"`
+    Password string `form:"password" binding:"required"`   
+}
+
@@ -210,0 +225 @@ func main() {
+    // Example for binding JSON ({"user": "manu", "password": "123"})
@@ -214,10 +229,6 @@ func main() {
-		// If EnsureBody returns false, it will write automatically the error
-		// in the HTTP stream and return a 400 error. If you want custom error
-		// handling you should use: c.ParseBody(interface{}) error
-		if c.EnsureBody(&json) {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
+        c.Bind(&json) // This will infer what binder to use depending on the content-type header.
+        if json.User == "manu" && json.Password == "123" {
+            c.JSON(200, gin.H{"status": "you are logged in"})
+        } else {
+            c.JSON(401, gin.H{"status": "unauthorized"})
+        }
@@ -225,0 +237,12 @@ func main() {
+    // Example for binding a HTLM form (user=manu&password=123)
+    r.POST("/login", func(c *gin.Context) {
+        var form LoginForm
+
+        c.BindWith(&form, binding.Form) // You can also specify which binder to use. We support binding.Form, binding.JSON and binding.XML.
+        if form.User == "manu" && form.Password == "123" {
+            c.JSON(200, gin.H{"status": "you are logged in"})
+        } else {
+            c.JSON(401, gin.H{"status": "unauthorized"})
+        }
+    })
+
@@ -231 +254 @@ func main() {
-#### XML and JSON rendering
+#### XML, and JSON rendering
@@ -300,10 +322,0 @@ func main() {
-#### Redirects
-
-Issuing a HTTP redirect is easy:
-
-```r.GET("/test", func(c *gin.Context) {
-	c.Redirect(301, "http://www.google.com/")
-})
-
-Both internal and external locations are supported.
-```
diff --git a/README.md b/README.md
index 15868de..7b9196d 100644
--- a/README.md
+++ b/README.md
@@ -305 +305 @@ Issuing a HTTP redirect is easy:
-	c.Redirect("http://www.google.com/", 302)
+	c.Redirect(301, "http://www.google.com/")
diff --git a/README.md b/README.md
index b0d5f4b..15868de 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.png)](https://godoc.org/github.com/gin-gonic/gin)
@@ -231 +231 @@ func main() {
-#### XML, and JSON rendering
+#### XML and JSON rendering
@@ -299,0 +300,10 @@ func main() {
+#### Redirects
+
+Issuing a HTTP redirect is easy:
+
+```r.GET("/test", func(c *gin.Context) {
+	c.Redirect("http://www.google.com/", 302)
+})
+
+Both internal and external locations are supported.
+```
diff --git a/README.md b/README.md
index 6fa52d0..b0d5f4b 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.png)](https://godoc.org/github.com/gin-gonic/gin)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)
diff --git a/README.md b/README.md
index cbda621..6fa52d0 100644
--- a/README.md
+++ b/README.md
@@ -45,0 +46,11 @@ import "github.com/gin-gonic/gin"
+##Community
+If you'd like to help out with the project, there's a mailing list and IRC channel where Gin discussions normally happen.
+
+* IRC
+ * [irc.freenode.net #getgin](irc://irc.freenode.net:6667/getgin)
+ * [Webchat](http://webchat.freenode.net?randomnick=1&channels=%23getgin)
+* Mailing List
+ * Subscribe: [getgin@librelist.org](mailto:getgin@librelist.org)
+ * [Archives](http://librelist.com/browser/getgin/)
+
+
diff --git a/README.md b/README.md
index f38d3be..cbda621 100644
--- a/README.md
+++ b/README.md
@@ -14 +14 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap for v0.2
+##Roadmap for v1.0
@@ -16,0 +17 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
+- [ ] Stable API
@@ -22,0 +24,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
+- [x] Flexible rendering system
+- [ ] More powerful validation API
@@ -43,11 +45,0 @@ import "github.com/gin-gonic/gin"
-##Community
-If you'd like to help out with the project, there's a mailing list and IRC channel where Gin discussions normally happen.
-
-* IRC
- * [irc.freenode.net #getgin](irc://irc.freenode.net:6667/getgin)
- * [Webchat](http://webchat.freenode.net?randomnick=1&channels=%23getgin)
-* Mailing List
- * Subscribe: [getgin@librelist.org](mailto:getgin@librelist.org)
- * [Archives](http://librelist.com/browser/getgin/)
-
-
diff --git a/README.md b/README.md
index dc9b1a8..f38d3be 100644
--- a/README.md
+++ b/README.md
@@ -7,2 +7 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-[Check out the official web site](http://gin-gonic.github.io/gin/)
-
+![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
@@ -15,11 +14,12 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap
-- Performance improments, reduce allocation and garbage collection overhead
-- Fix bugs
-- Ask our designer for a cool logo
-- Add tons of unit tests and benchmarks
-- Improve logging system
-- Improve JSON/XML validation using bindings
-- Improve XML support
-- Improve documentation
-- Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
-- Continuous integration
+##Roadmap for v0.2
+- [x] Performance improments, reduce allocation and garbage collection overhead
+- [x] Fix bugs
+- [ ] Ask our designer for a cool logo
+- [ ] Add tons of unit tests
+- [ ] Add internal benchmarks suite
+- [x] Improve logging system
+- [x] Improve JSON/XML validation using bindings
+- [x] Improve XML support
+- [ ] Improve documentation
+- [ ] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
+- [x] Continuous integration
@@ -30 +30,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Run:
+Obviously, you need to have Git and Go! already installed to run Gin.  
+Run this in your terminal
@@ -35 +36 @@ go get github.com/gin-gonic/gin
-Then import it in your Golang code:
+Then import it in your Go! code:
@@ -41,0 +43,11 @@ import "github.com/gin-gonic/gin"
+##Community
+If you'd like to help out with the project, there's a mailing list and IRC channel where Gin discussions normally happen.
+
+* IRC
+ * [irc.freenode.net #getgin](irc://irc.freenode.net:6667/getgin)
+ * [Webchat](http://webchat.freenode.net?randomnick=1&channels=%23getgin)
+* Mailing List
+ * Subscribe: [getgin@librelist.org](mailto:getgin@librelist.org)
+ * [Archives](http://librelist.com/browser/getgin/)
+
+
@@ -45,0 +58,2 @@ import "github.com/gin-gonic/gin"
+package main
+
@@ -49,7 +63,7 @@ func main() {
-    r := gin.Default()
-    r.GET("/ping", func(c *gin.Context){
-        c.String(200, "pong")
-    })
-    
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -59 +73 @@ func main() {
-#### Using GET, POST, PUT, PATCH and DELETE
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -63,11 +77,13 @@ func main() {
-    // Creates a gin router + logger and recovery (crash-free) middlewares
-    r := gin.Default()
-    
-    r.GET("/someGet", getting)
-    r.POST("/somePost", posting)
-    r.PUT("/somePut", putting)
-    r.DELETE("/someDelete", deleting)
-    r.PATCH("/somePatch", patching)
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Creates a gin router + logger and recovery (crash-free) middlewares
+	r := gin.Default()
+
+	r.GET("/someGet", getting)
+	r.POST("/somePost", posting)
+	r.PUT("/somePut", putting)
+	r.DELETE("/someDelete", deleting)
+	r.PATCH("/somePatch", patching)
+	r.HEAD("/someHead", head)
+	r.OPTIONS("/someOptions", options)
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -81,10 +97,19 @@ func main() {
-    r := gin.Default()
-    
-    r.GET("/user/:name", func(c *gin.Context) {
-        name := c.Params.ByName("name")
-        message := "Hello "+name
-        c.String(200, message)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	
+	// This handler will match /user/john but will not match neither /user/ or /user
+	r.GET("/user/:name", func(c *gin.Context) {
+		name := c.Params.ByName("name")
+		message := "Hello "+name
+		c.String(200, message)
+	})
+
+	// However, this one will match /user/john and also /user/john/send
+	r.GET("/user/:name/*action", func(c *gin.Context) {
+		name := c.Params.ByName("name")
+		action := c.Params.ByName("action")
+		message := name + " is " + action
+		c.String(200, message)
+	})
+	
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -98,20 +123,20 @@ func main() {
-    r := gin.Default()
-    
-    // Simple group: v1
-    v1 := r.Group("/v1")
-    {
-        v1.POST("/login", loginEndpoint)
-        v1.POST("/submit", submitEndpoint)
-        v1.POST("/read", readEndpoint)
-    }
-    
-    // Simple group: v2
-    v2 := r.Group("/v2")
-    {
-        v2.POST("/login", loginEndpoint)
-        v2.POST("/submit", submitEndpoint)
-        v2.POST("/read", readEndpoint)
-    }
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	// Simple group: v1
+	v1 := r.Group("/v1")
+	{
+		v1.POST("/login", loginEndpoint)
+		v1.POST("/submit", submitEndpoint)
+		v1.POST("/read", readEndpoint)
+	}
+
+	// Simple group: v2
+	v2 := r.Group("/v2")
+	{
+		v2.POST("/login", loginEndpoint)
+		v2.POST("/submit", submitEndpoint)
+		v2.POST("/read", readEndpoint)
+	}
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -139,29 +164,29 @@ func main() {
-    // Creates a router without any middleware by default
-    r := gin.New()
-    
-    // Global middlewares
-    r.Use(gin.Logger())
-    r.Use(gin.Recovery())
-    
-    // Per route middlewares, you can add as many as you desire.
-    r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
-
-    // Authorization group
-    // authorized := r.Group("/", AuthRequired())
-    // exactly the same than:
-    authorized := r.Group("/")
-    // per group middlewares! in this case we use the custom created
-    // AuthRequired() middleware just in the "authorized" group.
-    authorized.Use(AuthRequired())
-    {
-        authorized.POST("/login", loginEndpoint)
-        authorized.POST("/submit", submitEndpoint)
-        authorized.POST("/read", readEndpoint)
-        
-        // nested group
-        testing := authorized.Group("testing")
-        testing.GET("/analytics", analyticsEndpoint)
-    }
-   
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Creates a router without any middleware by default
+	r := gin.New()
+
+	// Global middlewares
+	r.Use(gin.Logger())
+	r.Use(gin.Recovery())
+
+	// Per route middlewares, you can add as many as you desire.
+	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
+
+	// Authorization group
+	// authorized := r.Group("/", AuthRequired())
+	// exactly the same than:
+	authorized := r.Group("/")
+	// per group middlewares! in this case we use the custom created
+	// AuthRequired() middleware just in the "authorized" group.
+	authorized.Use(AuthRequired())
+	{
+		authorized.POST("/login", loginEndpoint)
+		authorized.POST("/submit", submitEndpoint)
+		authorized.POST("/read", readEndpoint)
+
+		// nested group
+		testing := authorized.Group("testing")
+		testing.GET("/analytics", analyticsEndpoint)
+	}
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -176,2 +201,2 @@ type LoginJSON struct {
-    User     string `json:"user" binding:"required"`
-    Password string `json:"password" binding:"required"`
+	User     string `json:"user" binding:"required"`
+	Password string `json:"password" binding:"required"`
@@ -181,19 +206,19 @@ func main() {
-    r := gin.Default()
-    
-    r.POST("/login", func(c *gin.Context) {
-        var json LoginJSON
-        
-        // If EnsureBody returns false, it will write automatically the error
-        // in the HTTP stream and return a 400 error. If you want custom error 
-        // handling you should use: c.ParseBody(interface{}) error
-        if c.EnsureBody(&json) {
-            if json.User=="manu" && json.Password=="123" {
-                c.JSON(200, gin.H{"status": "you are logged in"})
-            }else{
-                c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	r.POST("/login", func(c *gin.Context) {
+		var json LoginJSON
+
+		// If EnsureBody returns false, it will write automatically the error
+		// in the HTTP stream and return a 400 error. If you want custom error
+		// handling you should use: c.ParseBody(interface{}) error
+		if c.EnsureBody(&json) {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -207,43 +232,28 @@ func main() {
-    r := gin.Default()
-    
-    // gin.H is a shortcup for map[string]interface{}
-    r.GET("/someJSON", func(c *gin.Context) {
-        c.JSON(200, gin.H{"message": "hey", "status": 200})
-    })
-    
-    r.GET("/moreJSON", func(c *gin.Context) {
-        // You also can use a struct
-        var msg struct {
-            Name string `json:"user"`
-            Message string
-            Number int
-        }
-        msg.Name = "Lena"
-        msg.Message = "hey"
-        msg.Number = 123
-        // Note that msg.Name becomes "user" in the JSON
-        // Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
-        c.JSON(200, msg)
-    })
-    
-    r.GET("/someXML", func(c *gin.Context) {
-        c.XML(200, gin.H{"message": "hey", "status": 200})
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
-
-
-####Serving static files
-
-Use Engine.ServeFiles(path string, root http.FileSystem):
-
-```go
-func main() {
-    r := gin.Default()
-    r.Static("/assets", "./assets")
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	// gin.H is a shortcup for map[string]interface{}
+	r.GET("/someJSON", func(c *gin.Context) {
+		c.JSON(200, gin.H{"message": "hey", "status": 200})
+	})
+
+	r.GET("/moreJSON", func(c *gin.Context) {
+		// You also can use a struct
+		var msg struct {
+			Name    string `json:"user"`
+			Message string
+			Number  int
+		}
+		msg.Name = "Lena"
+		msg.Message = "hey"
+		msg.Number = 123
+		// Note that msg.Name becomes "user" in the JSON
+		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
+		c.JSON(200, msg)
+	})
+
+	r.GET("/someXML", func(c *gin.Context) {
+		c.XML(200, gin.H{"message": "hey", "status": 200})
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -253 +262,0 @@ func main() {
-Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
@@ -261,9 +270,9 @@ func main() {
-    r := gin.Default()
-    r.LoadHTMLTemplates("templates/*")
-    r.GET("/index", func(c *gin.Context) {
-        obj := gin.H{"title": "Main website"}
-        c.HTML(200, "index.tmpl", obj)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	r.LoadHTMLTemplates("templates/*")
+	r.GET("/index", func(c *gin.Context) {
+		obj := gin.H{"title": "Main website"}
+		c.HTML(200, "index.tmpl", obj)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -276,0 +286 @@ import "html/template"
+
@@ -278,3 +288,3 @@ func main() {
-    r := gin.Default()
-    html := template.Must(template.ParseFiles("file1", "file2"))
-    r.HTMLTemplates = html
+	r := gin.Default()
+	html := template.Must(template.ParseFiles("file1", "file2"))
+	r.HTMLTemplates = html
@@ -282,2 +292,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -292,14 +302,18 @@ func Logger() gin.HandlerFunc {
-    return func(c *gin.Context) {
-        t := time.Now()
-        
-        // Set example variable
-        c.Set("example", "12345")
-        
-        // before request
-        
-        c.Next()
-        
-        // after request
-        latency := time.Since(t)
-        log.Print(latency)
-    }
+	return func(c *gin.Context) {
+		t := time.Now()
+
+		// Set example variable
+		c.Set("example", "12345")
+
+		// before request
+
+		c.Next()
+
+		// after request
+		latency := time.Since(t)
+		log.Print(latency)
+
+		// access the status we are sending
+		status := c.Writer.Status()
+		log.Println(status)
+	}
@@ -309,9 +323,2 @@ func main() {
-    r := gin.New()
-    r.Use(Logger())
-    
-    r.GET("/test", func(c *gin.Context){
-        example := r.Get("example").(string)
-        
-        // it would print: "12345"
-        log.Println(example)
-    })
+	r := gin.New()
+	r.Use(Logger())
@@ -319,2 +326,9 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r.GET("/test", func(c *gin.Context) {
+		example := c.MustGet("example").(string)
+
+		// it would print: "12345"
+		log.Println(example)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -323,0 +338,8 @@ func main() {
+#### Using BasicAuth() middleware
+```go
+// similate some private data
+var secrets = gin.H{
+	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
+	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
+	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
+}
@@ -324,0 +347,43 @@ func main() {
+func main() {
+	r := gin.Default()
+
+	// Group using gin.BasicAuth() middleware
+	// gin.Accounts is a shortcut for map[string]string
+	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
+		"foo":    "bar",
+		"austin": "1234",
+		"lena":   "hello2",
+		"manu":   "4321",
+	}))
+
+	// /admin/secrets endpoint
+	// hit "localhost:8080/admin/secrets
+	authorized.GET("/secrets", func(c *gin.Context) {
+		// get user, it was setted by the BasicAuth middleware
+		user := c.Get(gin.AuthUserKey).(string)
+		if secret, ok := secrets[user]; ok {
+			c.JSON(200, gin.H{"user": user, "secret": secret})
+		} else {
+			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
+		}
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+
+#### Goroutines inside a middleware
+When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/long_async", func(c *gin.Context) {
+		// create copy to be used inside the goroutine
+		c_cp := c.Copy()
+		go func() {
+			// simulate a long task with time.Sleep(). 5 seconds
+			time.Sleep(5 * time.Second)
@@ -325,0 +391,18 @@ func main() {
+			// note than you are using the copied context "c_cp", IMPORTANT
+			log.Println("Done! in path " + c_cp.Req.URL.Path)
+		}()
+	})
+
+
+	r.GET("/long_sync", func(c *gin.Context) {
+		// simulate a long task with time.Sleep(). 5 seconds
+		time.Sleep(5 * time.Second)
+
+		// since we are NOT using a goroutine, we do not have to copy the context
+		log.Println("Done! in path " + c.Req.URL.Path)
+	})
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
@@ -333,2 +416,2 @@ func main() {
-    router := gin.Default()
-    http.ListenAndServe(":8080", router)
+	router := gin.Default()
+	http.ListenAndServe(":8080", router)
@@ -341,10 +424,10 @@ func main() {
-    router := gin.Default()
-
-    s := &http.Server{
-	    Addr:           ":8080",
-	    Handler:        router,
-	    ReadTimeout:    10 * time.Second,
-	    WriteTimeout:   10 * time.Second,
-	    MaxHeaderBytes: 1 << 20,
-    }
-    s.ListenAndServe()
+	router := gin.Default()
+
+	s := &http.Server{
+		Addr:           ":8080",
+		Handler:        router,
+		ReadTimeout:    10 * time.Second,
+		WriteTimeout:   10 * time.Second,
+		MaxHeaderBytes: 1 << 20,
+	}
+	s.ListenAndServe()
diff --git a/README.md b/README.md
index 63c67e8..dc9b1a8 100644
--- a/README.md
+++ b/README.md
@@ -7 +7,2 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
+[Check out the official web site](http://gin-gonic.github.io/gin/)
+
@@ -14,12 +15,11 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap for v0.2
-- [x] Performance improments, reduce allocation and garbage collection overhead
-- [x] Fix bugs
-- [ ] Ask our designer for a cool logo
-- [ ] Add tons of unit tests
-- [ ] Add internal benchmarks suite
-- [x] Improve logging system
-- [x] Improve JSON/XML validation using bindings
-- [x] Improve XML support
-- [ ] Improve documentation
-- [ ] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
-- [x] Continuous integration
+##Roadmap
+- Performance improments, reduce allocation and garbage collection overhead
+- Fix bugs
+- Ask our designer for a cool logo
+- Add tons of unit tests and benchmarks
+- Improve logging system
+- Improve JSON/XML validation using bindings
+- Improve XML support
+- Improve documentation
+- Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- Continuous integration
@@ -30,2 +30 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Obviously, you need to have Git and Go! already installed to run Gin.  
-Run this in your terminal
+Run:
@@ -36 +35 @@ go get github.com/gin-gonic/gin
-Then import it in your Go! code:
+Then import it in your Golang code:
@@ -47,2 +45,0 @@ import "github.com/gin-gonic/gin"
-package main
-
@@ -52,7 +49,7 @@ func main() {
-	r := gin.Default()
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    r.GET("/ping", func(c *gin.Context){
+        c.String(200, "pong")
+    })
+    
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -62 +59 @@ func main() {
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+#### Using GET, POST, PUT, PATCH and DELETE
@@ -66,13 +63,11 @@ func main() {
-	// Creates a gin router + logger and recovery (crash-free) middlewares
-	r := gin.Default()
-
-	r.GET("/someGet", getting)
-	r.POST("/somePost", posting)
-	r.PUT("/somePut", putting)
-	r.DELETE("/someDelete", deleting)
-	r.PATCH("/somePatch", patching)
-	r.HEAD("/someHead", head)
-	r.OPTIONS("/someOptions", options)
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Creates a gin router + logger and recovery (crash-free) middlewares
+    r := gin.Default()
+    
+    r.GET("/someGet", getting)
+    r.POST("/somePost", posting)
+    r.PUT("/somePut", putting)
+    r.DELETE("/someDelete", deleting)
+    r.PATCH("/somePatch", patching)
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -86,19 +81,10 @@ func main() {
-	r := gin.Default()
-	
-	// This handler will match /user/john but will not match neither /user/ or /user
-	r.GET("/user/:name", func(c *gin.Context) {
-		name := c.Params.ByName("name")
-		message := "Hello "+name
-		c.String(200, message)
-	})
-
-	// However, this one will match /user/john and also /user/john/send
-	r.GET("/user/:name/*action", func(c *gin.Context) {
-		name := c.Params.ByName("name")
-		action := c.Params.ByName("action")
-		message := name + " is " + action
-		c.String(200, message)
-	})
-	
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    r.GET("/user/:name", func(c *gin.Context) {
+        name := c.Params.ByName("name")
+        message := "Hello "+name
+        c.String(200, message)
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -112,20 +98,20 @@ func main() {
-	r := gin.Default()
-
-	// Simple group: v1
-	v1 := r.Group("/v1")
-	{
-		v1.POST("/login", loginEndpoint)
-		v1.POST("/submit", submitEndpoint)
-		v1.POST("/read", readEndpoint)
-	}
-
-	// Simple group: v2
-	v2 := r.Group("/v2")
-	{
-		v2.POST("/login", loginEndpoint)
-		v2.POST("/submit", submitEndpoint)
-		v2.POST("/read", readEndpoint)
-	}
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    // Simple group: v1
+    v1 := r.Group("/v1")
+    {
+        v1.POST("/login", loginEndpoint)
+        v1.POST("/submit", submitEndpoint)
+        v1.POST("/read", readEndpoint)
+    }
+    
+    // Simple group: v2
+    v2 := r.Group("/v2")
+    {
+        v2.POST("/login", loginEndpoint)
+        v2.POST("/submit", submitEndpoint)
+        v2.POST("/read", readEndpoint)
+    }
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -153,29 +139,29 @@ func main() {
-	// Creates a router without any middleware by default
-	r := gin.New()
-
-	// Global middlewares
-	r.Use(gin.Logger())
-	r.Use(gin.Recovery())
-
-	// Per route middlewares, you can add as many as you desire.
-	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
-
-	// Authorization group
-	// authorized := r.Group("/", AuthRequired())
-	// exactly the same than:
-	authorized := r.Group("/")
-	// per group middlewares! in this case we use the custom created
-	// AuthRequired() middleware just in the "authorized" group.
-	authorized.Use(AuthRequired())
-	{
-		authorized.POST("/login", loginEndpoint)
-		authorized.POST("/submit", submitEndpoint)
-		authorized.POST("/read", readEndpoint)
-
-		// nested group
-		testing := authorized.Group("testing")
-		testing.GET("/analytics", analyticsEndpoint)
-	}
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Creates a router without any middleware by default
+    r := gin.New()
+    
+    // Global middlewares
+    r.Use(gin.Logger())
+    r.Use(gin.Recovery())
+    
+    // Per route middlewares, you can add as many as you desire.
+    r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
+
+    // Authorization group
+    // authorized := r.Group("/", AuthRequired())
+    // exactly the same than:
+    authorized := r.Group("/")
+    // per group middlewares! in this case we use the custom created
+    // AuthRequired() middleware just in the "authorized" group.
+    authorized.Use(AuthRequired())
+    {
+        authorized.POST("/login", loginEndpoint)
+        authorized.POST("/submit", submitEndpoint)
+        authorized.POST("/read", readEndpoint)
+        
+        // nested group
+        testing := authorized.Group("testing")
+        testing.GET("/analytics", analyticsEndpoint)
+    }
+   
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -190,2 +176,2 @@ type LoginJSON struct {
-	User     string `json:"user" binding:"required"`
-	Password string `json:"password" binding:"required"`
+    User     string `json:"user" binding:"required"`
+    Password string `json:"password" binding:"required"`
@@ -195,19 +181,19 @@ func main() {
-	r := gin.Default()
-
-	r.POST("/login", func(c *gin.Context) {
-		var json LoginJSON
-
-		// If EnsureBody returns false, it will write automatically the error
-		// in the HTTP stream and return a 400 error. If you want custom error
-		// handling you should use: c.ParseBody(interface{}) error
-		if c.EnsureBody(&json) {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    r.POST("/login", func(c *gin.Context) {
+        var json LoginJSON
+        
+        // If EnsureBody returns false, it will write automatically the error
+        // in the HTTP stream and return a 400 error. If you want custom error 
+        // handling you should use: c.ParseBody(interface{}) error
+        if c.EnsureBody(&json) {
+            if json.User=="manu" && json.Password=="123" {
+                c.JSON(200, gin.H{"status": "you are logged in"})
+            }else{
+                c.JSON(401, gin.H{"status": "unauthorized"})
+            }
+        }
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -221,28 +207,28 @@ func main() {
-	r := gin.Default()
-
-	// gin.H is a shortcup for map[string]interface{}
-	r.GET("/someJSON", func(c *gin.Context) {
-		c.JSON(200, gin.H{"message": "hey", "status": 200})
-	})
-
-	r.GET("/moreJSON", func(c *gin.Context) {
-		// You also can use a struct
-		var msg struct {
-			Name    string `json:"user"`
-			Message string
-			Number  int
-		}
-		msg.Name = "Lena"
-		msg.Message = "hey"
-		msg.Number = 123
-		// Note that msg.Name becomes "user" in the JSON
-		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
-		c.JSON(200, msg)
-	})
-
-	r.GET("/someXML", func(c *gin.Context) {
-		c.XML(200, gin.H{"message": "hey", "status": 200})
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    // gin.H is a shortcup for map[string]interface{}
+    r.GET("/someJSON", func(c *gin.Context) {
+        c.JSON(200, gin.H{"message": "hey", "status": 200})
+    })
+    
+    r.GET("/moreJSON", func(c *gin.Context) {
+        // You also can use a struct
+        var msg struct {
+            Name string `json:"user"`
+            Message string
+            Number int
+        }
+        msg.Name = "Lena"
+        msg.Message = "hey"
+        msg.Number = 123
+        // Note that msg.Name becomes "user" in the JSON
+        // Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
+        c.JSON(200, msg)
+    })
+    
+    r.GET("/someXML", func(c *gin.Context) {
+        c.XML(200, gin.H{"message": "hey", "status": 200})
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -252,0 +239,16 @@ func main() {
+####Serving static files
+
+Use Engine.ServeFiles(path string, root http.FileSystem):
+
+```go
+func main() {
+    r := gin.Default()
+    r.Static("/assets", "./assets")
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
+
+Note: this will use `httpNotFound` instead of the Router's `NotFound` handler.
+
@@ -259,9 +261,9 @@ func main() {
-	r := gin.Default()
-	r.LoadHTMLTemplates("templates/*")
-	r.GET("/index", func(c *gin.Context) {
-		obj := gin.H{"title": "Main website"}
-		c.HTML(200, "index.tmpl", obj)
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    r.LoadHTMLTemplates("templates/*")
+    r.GET("/index", func(c *gin.Context) {
+        obj := gin.H{"title": "Main website"}
+        c.HTML(200, "index.tmpl", obj)
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -275 +276,0 @@ import "html/template"
-
@@ -277,3 +278,3 @@ func main() {
-	r := gin.Default()
-	html := template.Must(template.ParseFiles("file1", "file2"))
-	r.HTMLTemplates = html
+    r := gin.Default()
+    html := template.Must(template.ParseFiles("file1", "file2"))
+    r.HTMLTemplates = html
@@ -281,2 +282,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -291,18 +292,14 @@ func Logger() gin.HandlerFunc {
-	return func(c *gin.Context) {
-		t := time.Now()
-
-		// Set example variable
-		c.Set("example", "12345")
-
-		// before request
-
-		c.Next()
-
-		// after request
-		latency := time.Since(t)
-		log.Print(latency)
-
-		// access the status we are sending
-		status := c.Writer.Status()
-		log.Println(status)
-	}
+    return func(c *gin.Context) {
+        t := time.Now()
+        
+        // Set example variable
+        c.Set("example", "12345")
+        
+        // before request
+        
+        c.Next()
+        
+        // after request
+        latency := time.Since(t)
+        log.Print(latency)
+    }
@@ -312,14 +309,9 @@ func main() {
-	r := gin.New()
-	r.Use(Logger())
-
-	r.GET("/test", func(c *gin.Context) {
-		example := c.MustGet("example").(string)
-
-		// it would print: "12345"
-		log.Println(example)
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
+    r := gin.New()
+    r.Use(Logger())
+    
+    r.GET("/test", func(c *gin.Context){
+        example := r.Get("example").(string)
+        
+        // it would print: "12345"
+        log.Println(example)
+    })
@@ -327,35 +319,2 @@ func main() {
-#### Using BasicAuth() middleware
-```go
-// similate some private data
-var secrets = gin.H{
-	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
-	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
-	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
-}
-
-func main() {
-	r := gin.Default()
-
-	// Group using gin.BasicAuth() middleware
-	// gin.Accounts is a shortcut for map[string]string
-	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
-		"foo":    "bar",
-		"austin": "1234",
-		"lena":   "hello2",
-		"manu":   "4321",
-	}))
-
-	// /admin/secrets endpoint
-	// hit "localhost:8080/admin/secrets
-	authorized.GET("/secrets", func(c *gin.Context) {
-		// get user, it was setted by the BasicAuth middleware
-		user := c.Get(gin.AuthUserKey).(string)
-		if secret, ok := secrets[user]; ok {
-			c.JSON(200, gin.H{"user": user, "secret": secret})
-		} else {
-			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
-		}
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -366,27 +324,0 @@ func main() {
-#### Goroutines inside a middleware
-When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
-
-```go
-func main() {
-	r := gin.Default()
-
-	r.GET("/long_async", func(c *gin.Context) {
-		// create copy to be used inside the goroutine
-		c_cp := c.Copy()
-		go func() {
-			// simulate a long task with time.Sleep(). 5 seconds
-			time.Sleep(5 * time.Second)
-
-			// note than you are using the copied context "c_cp", IMPORTANT
-			log.Println("Done! in path " + c_cp.Req.URL.Path)
-		}()
-	})
-
-
-	r.GET("/long_sync", func(c *gin.Context) {
-		// simulate a long task with time.Sleep(). 5 seconds
-		time.Sleep(5 * time.Second)
-
-		// since we are NOT using a goroutine, we do not have to copy the context
-		log.Println("Done! in path " + c.Req.URL.Path)
-	})
@@ -394,4 +325,0 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
@@ -405,2 +333,2 @@ func main() {
-	router := gin.Default()
-	http.ListenAndServe(":8080", router)
+    router := gin.Default()
+    http.ListenAndServe(":8080", router)
@@ -413,10 +341,10 @@ func main() {
-	router := gin.Default()
-
-	s := &http.Server{
-		Addr:           ":8080",
-		Handler:        router,
-		ReadTimeout:    10 * time.Second,
-		WriteTimeout:   10 * time.Second,
-		MaxHeaderBytes: 1 << 20,
-	}
-	s.ListenAndServe()
+    router := gin.Default()
+
+    s := &http.Server{
+	    Addr:           ":8080",
+	    Handler:        router,
+	    ReadTimeout:    10 * time.Second,
+	    WriteTimeout:   10 * time.Second,
+	    MaxHeaderBytes: 1 << 20,
+    }
+    s.ListenAndServe()
diff --git a/README.md b/README.md
index acba80f..63c67e8 100644
--- a/README.md
+++ b/README.md
@@ -87 +87,2 @@ func main() {
-
+	
+	// This handler will match /user/john but will not match neither /user/ or /user
@@ -94 +95,2 @@ func main() {
-	r.GET("/user/:name/:action", func(c *gin.Context) {
+	// However, this one will match /user/john and also /user/john/send
+	r.GET("/user/:name/*action", func(c *gin.Context) {
@@ -100 +102 @@ func main() {
-
+	
diff --git a/README.md b/README.md
index 32e418d..acba80f 100644
--- a/README.md
+++ b/README.md
@@ -7,2 +7 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-[Check out the official web site](http://gin-gonic.github.io/gin/)
-
+![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
@@ -15,11 +14,12 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap
-- Performance improments, reduce allocation and garbage collection overhead
-- Fix bugs
-- Ask our designer for a cool logo
-- Add tons of unit tests and benchmarks
-- Improve logging system
-- Improve JSON/XML validation using bindings
-- Improve XML support
-- Improve documentation
-- Add more cool middlewares, for example redis caching (this also helps developers to understand the framework)
-- Continuous integration
+##Roadmap for v0.2
+- [x] Performance improments, reduce allocation and garbage collection overhead
+- [x] Fix bugs
+- [ ] Ask our designer for a cool logo
+- [ ] Add tons of unit tests
+- [ ] Add internal benchmarks suite
+- [x] Improve logging system
+- [x] Improve JSON/XML validation using bindings
+- [x] Improve XML support
+- [ ] Improve documentation
+- [ ] Add more cool middlewares, for example redis caching (this also helps developers to understand the framework).
+- [x] Continuous integration
@@ -30 +30,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Run:
+Obviously, you need to have Git and Go! already installed to run Gin.  
+Run this in your terminal
@@ -35 +36 @@ go get github.com/gin-gonic/gin
-Then import it in your Golang code:
+Then import it in your Go! code:
@@ -45,0 +47,2 @@ import "github.com/gin-gonic/gin"
+package main
+
@@ -49,7 +52,7 @@ func main() {
-    r := gin.Default()
-    r.GET("/ping", func(c *gin.Context){
-        c.String(200, "pong")
-    })
-    
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -59 +62 @@ func main() {
-#### Using GET, POST, PUT, PATCH and DELETE
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -63,11 +66,13 @@ func main() {
-    // Creates a gin router + logger and recovery (crash-free) middlewares
-    r := gin.Default()
-    
-    r.GET("/someGet", getting)
-    r.POST("/somePost", posting)
-    r.PUT("/somePut", putting)
-    r.DELETE("/someDelete", deleting)
-    r.PATCH("/somePatch", patching)
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Creates a gin router + logger and recovery (crash-free) middlewares
+	r := gin.Default()
+
+	r.GET("/someGet", getting)
+	r.POST("/somePost", posting)
+	r.PUT("/somePut", putting)
+	r.DELETE("/someDelete", deleting)
+	r.PATCH("/somePatch", patching)
+	r.HEAD("/someHead", head)
+	r.OPTIONS("/someOptions", options)
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -81,10 +86,17 @@ func main() {
-    r := gin.Default()
-    
-    r.GET("/user/:name", func(c *gin.Context) {
-        name := c.Params.ByName("name")
-        message := "Hello "+name
-        c.String(200, message)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	r.GET("/user/:name", func(c *gin.Context) {
+		name := c.Params.ByName("name")
+		message := "Hello "+name
+		c.String(200, message)
+	})
+
+	r.GET("/user/:name/:action", func(c *gin.Context) {
+		name := c.Params.ByName("name")
+		action := c.Params.ByName("action")
+		message := name + " is " + action
+		c.String(200, message)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -98,20 +110,20 @@ func main() {
-    r := gin.Default()
-    
-    // Simple group: v1
-    v1 := r.Group("/v1")
-    {
-        v1.POST("/login", loginEndpoint)
-        v1.POST("/submit", submitEndpoint)
-        v1.POST("/read", readEndpoint)
-    }
-    
-    // Simple group: v2
-    v2 := r.Group("/v2")
-    {
-        v2.POST("/login", loginEndpoint)
-        v2.POST("/submit", submitEndpoint)
-        v2.POST("/read", readEndpoint)
-    }
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	// Simple group: v1
+	v1 := r.Group("/v1")
+	{
+		v1.POST("/login", loginEndpoint)
+		v1.POST("/submit", submitEndpoint)
+		v1.POST("/read", readEndpoint)
+	}
+
+	// Simple group: v2
+	v2 := r.Group("/v2")
+	{
+		v2.POST("/login", loginEndpoint)
+		v2.POST("/submit", submitEndpoint)
+		v2.POST("/read", readEndpoint)
+	}
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -139,29 +151,29 @@ func main() {
-    // Creates a router without any middleware by default
-    r := gin.New()
-    
-    // Global middlewares
-    r.Use(gin.Logger())
-    r.Use(gin.Recovery())
-    
-    // Per route middlewares, you can add as many as you desire.
-    r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
-
-    // Authorization group
-    // authorized := r.Group("/", AuthRequired())
-    // exactly the same than:
-    authorized := r.Group("/")
-    // per group middlewares! in this case we use the custom created
-    // AuthRequired() middleware just in the "authorized" group.
-    authorized.Use(AuthRequired())
-    {
-        authorized.POST("/login", loginEndpoint)
-        authorized.POST("/submit", submitEndpoint)
-        authorized.POST("/read", readEndpoint)
-        
-        // nested group
-        testing := authorized.Group("testing")
-        testing.GET("/analytics", analyticsEndpoint)
-    }
-   
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Creates a router without any middleware by default
+	r := gin.New()
+
+	// Global middlewares
+	r.Use(gin.Logger())
+	r.Use(gin.Recovery())
+
+	// Per route middlewares, you can add as many as you desire.
+	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
+
+	// Authorization group
+	// authorized := r.Group("/", AuthRequired())
+	// exactly the same than:
+	authorized := r.Group("/")
+	// per group middlewares! in this case we use the custom created
+	// AuthRequired() middleware just in the "authorized" group.
+	authorized.Use(AuthRequired())
+	{
+		authorized.POST("/login", loginEndpoint)
+		authorized.POST("/submit", submitEndpoint)
+		authorized.POST("/read", readEndpoint)
+
+		// nested group
+		testing := authorized.Group("testing")
+		testing.GET("/analytics", analyticsEndpoint)
+	}
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -176,2 +188,2 @@ type LoginJSON struct {
-    User     string `json:"user" binding:"required"`
-    Password string `json:"password" binding:"required"`
+	User     string `json:"user" binding:"required"`
+	Password string `json:"password" binding:"required"`
@@ -181,19 +193,19 @@ func main() {
-    r := gin.Default()
-    
-    r.POST("/login", func(c *gin.Context) {
-        var json LoginJSON
-        
-        // If EnsureBody returns false, it will write automatically the error
-        // in the HTTP stream and return a 400 error. If you want custom error 
-        // handling you should use: c.ParseBody(interface{}) error
-        if c.EnsureBody(&json) {
-            if json.User=="manu" && json.Password=="123" {
-                c.JSON(200, gin.H{"status": "you are logged in"})
-            }else{
-                c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	r.POST("/login", func(c *gin.Context) {
+		var json LoginJSON
+
+		// If EnsureBody returns false, it will write automatically the error
+		// in the HTTP stream and return a 400 error. If you want custom error
+		// handling you should use: c.ParseBody(interface{}) error
+		if c.EnsureBody(&json) {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -207,28 +219,28 @@ func main() {
-    r := gin.Default()
-    
-    // gin.H is a shortcup for map[string]interface{}
-    r.GET("/someJSON", func(c *gin.Context) {
-        c.JSON(200, gin.H{"message": "hey", "status": 200})
-    })
-    
-    r.GET("/moreJSON", func(c *gin.Context) {
-        // You also can use a struct
-        var msg struct {
-            Name string `json:"user"`
-            Message string
-            Number int
-        }
-        msg.Name = "Lena"
-        msg.Message = "hey"
-        msg.Number = 123
-        // Note that msg.Name becomes "user" in the JSON
-        // Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
-        c.JSON(200, msg)
-    })
-    
-    r.GET("/someXML", func(c *gin.Context) {
-        c.XML(200, gin.H{"message": "hey", "status": 200})
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	// gin.H is a shortcup for map[string]interface{}
+	r.GET("/someJSON", func(c *gin.Context) {
+		c.JSON(200, gin.H{"message": "hey", "status": 200})
+	})
+
+	r.GET("/moreJSON", func(c *gin.Context) {
+		// You also can use a struct
+		var msg struct {
+			Name    string `json:"user"`
+			Message string
+			Number  int
+		}
+		msg.Name = "Lena"
+		msg.Message = "hey"
+		msg.Number = 123
+		// Note that msg.Name becomes "user" in the JSON
+		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
+		c.JSON(200, msg)
+	})
+
+	r.GET("/someXML", func(c *gin.Context) {
+		c.XML(200, gin.H{"message": "hey", "status": 200})
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -245,9 +257,9 @@ func main() {
-    r := gin.Default()
-    r.LoadHTMLTemplates("templates/*")
-    r.GET("/index", func(c *gin.Context) {
-        obj := gin.H{"title": "Main website"}
-        c.HTML(200, "index.tmpl", obj)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	r.LoadHTMLTemplates("templates/*")
+	r.GET("/index", func(c *gin.Context) {
+		obj := gin.H{"title": "Main website"}
+		c.HTML(200, "index.tmpl", obj)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -260,0 +273 @@ import "html/template"
+
@@ -262,3 +275,3 @@ func main() {
-    r := gin.Default()
-    html := template.Must(template.ParseFiles("file1", "file2"))
-    r.HTMLTemplates = html
+	r := gin.Default()
+	html := template.Must(template.ParseFiles("file1", "file2"))
+	r.HTMLTemplates = html
@@ -266,2 +279,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -276,14 +289,18 @@ func Logger() gin.HandlerFunc {
-    return func(c *gin.Context) {
-        t := time.Now()
-        
-        // Set example variable
-        c.Set("example", "12345")
-        
-        // before request
-        
-        c.Next()
-        
-        // after request
-        latency := time.Since(t)
-        log.Print(latency)
-    }
+	return func(c *gin.Context) {
+		t := time.Now()
+
+		// Set example variable
+		c.Set("example", "12345")
+
+		// before request
+
+		c.Next()
+
+		// after request
+		latency := time.Since(t)
+		log.Print(latency)
+
+		// access the status we are sending
+		status := c.Writer.Status()
+		log.Println(status)
+	}
@@ -293,9 +310,2 @@ func main() {
-    r := gin.New()
-    r.Use(Logger())
-    
-    r.GET("/test", func(c *gin.Context){
-        example := c.Get("example").(string)
-        
-        // it would print: "12345"
-        log.Println(example)
-    })
+	r := gin.New()
+	r.Use(Logger())
@@ -303,2 +313,47 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r.GET("/test", func(c *gin.Context) {
+		example := c.MustGet("example").(string)
+
+		// it would print: "12345"
+		log.Println(example)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+#### Using BasicAuth() middleware
+```go
+// similate some private data
+var secrets = gin.H{
+	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
+	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
+	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
+}
+
+func main() {
+	r := gin.Default()
+
+	// Group using gin.BasicAuth() middleware
+	// gin.Accounts is a shortcut for map[string]string
+	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
+		"foo":    "bar",
+		"austin": "1234",
+		"lena":   "hello2",
+		"manu":   "4321",
+	}))
+
+	// /admin/secrets endpoint
+	// hit "localhost:8080/admin/secrets
+	authorized.GET("/secrets", func(c *gin.Context) {
+		// get user, it was setted by the BasicAuth middleware
+		user := c.Get(gin.AuthUserKey).(string)
+		if secret, ok := secrets[user]; ok {
+			c.JSON(200, gin.H{"user": user, "secret": secret})
+		} else {
+			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
+		}
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -308,0 +364,18 @@ func main() {
+#### Goroutines inside a middleware
+When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/long_async", func(c *gin.Context) {
+		// create copy to be used inside the goroutine
+		c_cp := c.Copy()
+		go func() {
+			// simulate a long task with time.Sleep(). 5 seconds
+			time.Sleep(5 * time.Second)
+
+			// note than you are using the copied context "c_cp", IMPORTANT
+			log.Println("Done! in path " + c_cp.Req.URL.Path)
+		}()
+	})
@@ -310,0 +384,13 @@ func main() {
+	r.GET("/long_sync", func(c *gin.Context) {
+		// simulate a long task with time.Sleep(). 5 seconds
+		time.Sleep(5 * time.Second)
+
+		// since we are NOT using a goroutine, we do not have to copy the context
+		log.Println("Done! in path " + c.Req.URL.Path)
+	})
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
+
@@ -317,2 +403,2 @@ func main() {
-    router := gin.Default()
-    http.ListenAndServe(":8080", router)
+	router := gin.Default()
+	http.ListenAndServe(":8080", router)
@@ -325,10 +411,10 @@ func main() {
-    router := gin.Default()
-
-    s := &http.Server{
-	    Addr:           ":8080",
-	    Handler:        router,
-	    ReadTimeout:    10 * time.Second,
-	    WriteTimeout:   10 * time.Second,
-	    MaxHeaderBytes: 1 << 20,
-    }
-    s.ListenAndServe()
+	router := gin.Default()
+
+	s := &http.Server{
+		Addr:           ":8080",
+		Handler:        router,
+		ReadTimeout:    10 * time.Second,
+		WriteTimeout:   10 * time.Second,
+		MaxHeaderBytes: 1 << 20,
+	}
+	s.ListenAndServe()
diff --git a/README.md b/README.md
index da1a6d4..32e418d 100644
--- a/README.md
+++ b/README.md
@@ -24 +24 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- Add more cool middlewares, for example redis caching (this also helps developers to understand the framework)
diff --git a/README.md b/README.md
index 2bd6eb0..da1a6d4 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -7,0 +9,20 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
+
+##Gin is new, will it be supported?
+
+Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcoming startup. We developed it and we are going to continue using and improve it.
+
+
+##Roadmap
+- Performance improments, reduce allocation and garbage collection overhead
+- Fix bugs
+- Ask our designer for a cool logo
+- Add tons of unit tests and benchmarks
+- Improve logging system
+- Improve JSON/XML validation using bindings
+- Improve XML support
+- Improve documentation
+- Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- Continuous integration
+
+
+
@@ -242 +263 @@ func main() {
-    html := template.ParseFiles("file1", "file2")
+    html := template.Must(template.ParseFiles("file1", "file2"))
diff --git a/README.md b/README.md
index 2817ae7..2bd6eb0 100644
--- a/README.md
+++ b/README.md
@@ -4 +3,0 @@
-[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -9,20 +7,0 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-
-##Gin is new, will it be supported?
-
-Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcoming startup. We developed it and we are going to continue using and improve it.
-
-
-##Roadmap
-- Performance improments, reduce allocation and garbage collection overhead
-- Fix bugs
-- Ask our designer for a cool logo
-- Add tons of unit tests and benchmarks
-- Improve logging system
-- Improve JSON/XML validation using bindings
-- Improve XML support
-- Improve documentation
-- Add more cool middlewares, for example redis caching (this also helps developers to understand the framework)
-- Continuous integration
-
-
-
@@ -263 +242 @@ func main() {
-    html := template.Must(template.ParseFiles("file1", "file2"))
+    html := template.ParseFiles("file1", "file2")
@@ -297 +276 @@ func main() {
-        example := r.Get("example").(string)
+        example := c.Get("example").(string)
diff --git a/README.md b/README.md
index 6ebc4ac..2817ae7 100644
--- a/README.md
+++ b/README.md
@@ -7 +7,2 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
+[Check out the official web site](http://gin-gonic.github.io/gin/)
+
@@ -14,12 +15,11 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap for v0.2
-- [x] Performance improments, reduce allocation and garbage collection overhead
-- [x] Fix bugs
-- [ ] Ask our designer for a cool logo
-- [ ] Add tons of unit tests
-- [ ] Add internal benchmarks suite
-- [x] Improve logging system
-- [x] Improve JSON/XML validation using bindings
-- [x] Improve XML support
-- [ ] Improve documentation
-- [ ] Add more cool middlewares, for example redis catching (this also helps developers to understand the framework).
-- [x] Continuous integration
+##Roadmap
+- Performance improments, reduce allocation and garbage collection overhead
+- Fix bugs
+- Ask our designer for a cool logo
+- Add tons of unit tests and benchmarks
+- Improve logging system
+- Improve JSON/XML validation using bindings
+- Improve XML support
+- Improve documentation
+- Add more cool middlewares, for example redis caching (this also helps developers to understand the framework)
+- Continuous integration
@@ -30,2 +30 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Obviously, you need to have Git and Go! already installed to run Gin.  
-Run this in your terminal
+Run:
@@ -36 +35 @@ go get github.com/gin-gonic/gin
-Then import it in your Go! code:
+Then import it in your Golang code:
@@ -47,2 +45,0 @@ import "github.com/gin-gonic/gin"
-package main
-
@@ -52,7 +49,7 @@ func main() {
-	r := gin.Default()
-	r.GET("/ping", func(c *gin.Context) {
-		c.String(200, "pong")
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    r.GET("/ping", func(c *gin.Context){
+        c.String(200, "pong")
+    })
+    
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -62 +59 @@ func main() {
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+#### Using GET, POST, PUT, PATCH and DELETE
@@ -66,13 +63,11 @@ func main() {
-	// Creates a gin router + logger and recovery (crash-free) middlewares
-	r := gin.Default()
-
-	r.GET("/someGet", getting)
-	r.POST("/somePost", posting)
-	r.PUT("/somePut", putting)
-	r.DELETE("/someDelete", deleting)
-	r.PATCH("/somePatch", patching)
-	r.HEAD("/someHead", head)
-	r.OPTIONS("/someOptions", options)
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Creates a gin router + logger and recovery (crash-free) middlewares
+    r := gin.Default()
+    
+    r.GET("/someGet", getting)
+    r.POST("/somePost", posting)
+    r.PUT("/somePut", putting)
+    r.DELETE("/someDelete", deleting)
+    r.PATCH("/somePatch", patching)
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -86,17 +81,10 @@ func main() {
-	r := gin.Default()
-
-	r.GET("/user/:name", func(c *gin.Context) {
-		name := c.Params.ByName("name")
-		message := "Hello "+name
-		c.String(200, message)
-	})
-
-	r.GET("/user/:name/:action", func(c *gin.Context) {
-		name := c.Params.ByName("name")
-		action := c.Params.ByName("action")
-		message := name + " is " + action
-		c.String(200, message)
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    r.GET("/user/:name", func(c *gin.Context) {
+        name := c.Params.ByName("name")
+        message := "Hello "+name
+        c.String(200, message)
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -110,20 +98,20 @@ func main() {
-	r := gin.Default()
-
-	// Simple group: v1
-	v1 := r.Group("/v1")
-	{
-		v1.POST("/login", loginEndpoint)
-		v1.POST("/submit", submitEndpoint)
-		v1.POST("/read", readEndpoint)
-	}
-
-	// Simple group: v2
-	v2 := r.Group("/v2")
-	{
-		v2.POST("/login", loginEndpoint)
-		v2.POST("/submit", submitEndpoint)
-		v2.POST("/read", readEndpoint)
-	}
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    // Simple group: v1
+    v1 := r.Group("/v1")
+    {
+        v1.POST("/login", loginEndpoint)
+        v1.POST("/submit", submitEndpoint)
+        v1.POST("/read", readEndpoint)
+    }
+    
+    // Simple group: v2
+    v2 := r.Group("/v2")
+    {
+        v2.POST("/login", loginEndpoint)
+        v2.POST("/submit", submitEndpoint)
+        v2.POST("/read", readEndpoint)
+    }
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -151,29 +139,29 @@ func main() {
-	// Creates a router without any middleware by default
-	r := gin.New()
-
-	// Global middlewares
-	r.Use(gin.Logger())
-	r.Use(gin.Recovery())
-
-	// Per route middlewares, you can add as many as you desire.
-	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
-
-	// Authorization group
-	// authorized := r.Group("/", AuthRequired())
-	// exactly the same than:
-	authorized := r.Group("/")
-	// per group middlewares! in this case we use the custom created
-	// AuthRequired() middleware just in the "authorized" group.
-	authorized.Use(AuthRequired())
-	{
-		authorized.POST("/login", loginEndpoint)
-		authorized.POST("/submit", submitEndpoint)
-		authorized.POST("/read", readEndpoint)
-
-		// nested group
-		testing := authorized.Group("testing")
-		testing.GET("/analytics", analyticsEndpoint)
-	}
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Creates a router without any middleware by default
+    r := gin.New()
+    
+    // Global middlewares
+    r.Use(gin.Logger())
+    r.Use(gin.Recovery())
+    
+    // Per route middlewares, you can add as many as you desire.
+    r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
+
+    // Authorization group
+    // authorized := r.Group("/", AuthRequired())
+    // exactly the same than:
+    authorized := r.Group("/")
+    // per group middlewares! in this case we use the custom created
+    // AuthRequired() middleware just in the "authorized" group.
+    authorized.Use(AuthRequired())
+    {
+        authorized.POST("/login", loginEndpoint)
+        authorized.POST("/submit", submitEndpoint)
+        authorized.POST("/read", readEndpoint)
+        
+        // nested group
+        testing := authorized.Group("testing")
+        testing.GET("/analytics", analyticsEndpoint)
+    }
+   
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -188,2 +176,2 @@ type LoginJSON struct {
-	User     string `json:"user" binding:"required"`
-	Password string `json:"password" binding:"required"`
+    User     string `json:"user" binding:"required"`
+    Password string `json:"password" binding:"required"`
@@ -193,19 +181,19 @@ func main() {
-	r := gin.Default()
-
-	r.POST("/login", func(c *gin.Context) {
-		var json LoginJSON
-
-		// If EnsureBody returns false, it will write automatically the error
-		// in the HTTP stream and return a 400 error. If you want custom error
-		// handling you should use: c.ParseBody(interface{}) error
-		if c.EnsureBody(&json) {
-			if json.User == "manu" && json.Password == "123" {
-				c.JSON(200, gin.H{"status": "you are logged in"})
-			} else {
-				c.JSON(401, gin.H{"status": "unauthorized"})
-			}
-		}
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    r.POST("/login", func(c *gin.Context) {
+        var json LoginJSON
+        
+        // If EnsureBody returns false, it will write automatically the error
+        // in the HTTP stream and return a 400 error. If you want custom error 
+        // handling you should use: c.ParseBody(interface{}) error
+        if c.EnsureBody(&json) {
+            if json.User=="manu" && json.Password=="123" {
+                c.JSON(200, gin.H{"status": "you are logged in"})
+            }else{
+                c.JSON(401, gin.H{"status": "unauthorized"})
+            }
+        }
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -219,28 +207,28 @@ func main() {
-	r := gin.Default()
-
-	// gin.H is a shortcup for map[string]interface{}
-	r.GET("/someJSON", func(c *gin.Context) {
-		c.JSON(200, gin.H{"message": "hey", "status": 200})
-	})
-
-	r.GET("/moreJSON", func(c *gin.Context) {
-		// You also can use a struct
-		var msg struct {
-			Name    string `json:"user"`
-			Message string
-			Number  int
-		}
-		msg.Name = "Lena"
-		msg.Message = "hey"
-		msg.Number = 123
-		// Note that msg.Name becomes "user" in the JSON
-		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
-		c.JSON(200, msg)
-	})
-
-	r.GET("/someXML", func(c *gin.Context) {
-		c.XML(200, gin.H{"message": "hey", "status": 200})
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    
+    // gin.H is a shortcup for map[string]interface{}
+    r.GET("/someJSON", func(c *gin.Context) {
+        c.JSON(200, gin.H{"message": "hey", "status": 200})
+    })
+    
+    r.GET("/moreJSON", func(c *gin.Context) {
+        // You also can use a struct
+        var msg struct {
+            Name string `json:"user"`
+            Message string
+            Number int
+        }
+        msg.Name = "Lena"
+        msg.Message = "hey"
+        msg.Number = 123
+        // Note that msg.Name becomes "user" in the JSON
+        // Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
+        c.JSON(200, msg)
+    })
+    
+    r.GET("/someXML", func(c *gin.Context) {
+        c.XML(200, gin.H{"message": "hey", "status": 200})
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -257,9 +245,9 @@ func main() {
-	r := gin.Default()
-	r.LoadHTMLTemplates("templates/*")
-	r.GET("/index", func(c *gin.Context) {
-		obj := gin.H{"title": "Main website"}
-		c.HTML(200, "index.tmpl", obj)
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    r := gin.Default()
+    r.LoadHTMLTemplates("templates/*")
+    r.GET("/index", func(c *gin.Context) {
+        obj := gin.H{"title": "Main website"}
+        c.HTML(200, "index.tmpl", obj)
+    })
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -273 +260,0 @@ import "html/template"
-
@@ -275,3 +262,3 @@ func main() {
-	r := gin.Default()
-	html := template.Must(template.ParseFiles("file1", "file2"))
-	r.HTMLTemplates = html
+    r := gin.Default()
+    html := template.Must(template.ParseFiles("file1", "file2"))
+    r.HTMLTemplates = html
@@ -279,2 +266,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -289,18 +276,14 @@ func Logger() gin.HandlerFunc {
-	return func(c *gin.Context) {
-		t := time.Now()
-
-		// Set example variable
-		c.Set("example", "12345")
-
-		// before request
-
-		c.Next()
-
-		// after request
-		latency := time.Since(t)
-		log.Print(latency)
-
-		// access the status we are sending
-		status := c.Writer.Status()
-		log.Println(status)
-	}
+    return func(c *gin.Context) {
+        t := time.Now()
+        
+        // Set example variable
+        c.Set("example", "12345")
+        
+        // before request
+        
+        c.Next()
+        
+        // after request
+        latency := time.Since(t)
+        log.Print(latency)
+    }
@@ -310,9 +293,9 @@ func main() {
-	r := gin.New()
-	r.Use(Logger())
-
-	r.GET("/test", func(c *gin.Context) {
-		example := r.Get("example").(string)
-
-		// it would print: "12345"
-		log.Println(example)
-	})
+    r := gin.New()
+    r.Use(Logger())
+    
+    r.GET("/test", func(c *gin.Context){
+        example := r.Get("example").(string)
+        
+        // it would print: "12345"
+        log.Println(example)
+    })
@@ -320,40 +303,2 @@ func main() {
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
-}
-```
-
-#### Using BasicAuth() middleware
-```go
-// similate some private data
-var secrets = gin.H{
-	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
-	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
-	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
-}
-
-func main() {
-	r := gin.Default()
-
-	// Group using gin.BasicAuth() middleware
-	// gin.Accounts is a shortcut for map[string]string
-	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
-		"foo":    "bar",
-		"austin": "1234",
-		"lena":   "hello2",
-		"manu":   "4321",
-	}))
-
-	// /admin/secrets endpoint
-	// hit "localhost:8080/admin/secrets
-	authorized.GET("/secrets", func(c *gin.Context) {
-		// get user, it was setted by the BasicAuth middleware
-		user := c.Get(gin.AuthUserKey).(string)
-		if secret, ok := secrets[user]; ok {
-			c.JSON(200, gin.H{"user": user, "secret": secret})
-		} else {
-			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
-		}
-	})
-
-	// Listen and server on 0.0.0.0:8080
-	r.Run(":8080")
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -364,18 +308,0 @@ func main() {
-#### Goroutines inside a middleware
-When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
-
-```go
-func main() {
-	r := gin.Default()
-
-	r.GET("/long_async", func(c *gin.Context) {
-		// create copy to be used inside the goroutine
-		c_cp := c.Copy()
-		go func() {
-			// simulate a long task with time.Sleep(). 5 seconds
-			time.Sleep(5 * time.Second)
-
-			// note than you are using the copied context "c_cp", IMPORTANT
-			log.Println("Done! in path " + c_cp.Req.URL.Path)
-		}()
-	})
@@ -384,13 +310,0 @@ func main() {
-	r.GET("/long_sync", func(c *gin.Context) {
-		// simulate a long task with time.Sleep(). 5 seconds
-		time.Sleep(5 * time.Second)
-
-		// since we are NOT using a goroutine, we do not have to copy the context
-		log.Println("Done! in path " + c.Req.URL.Path)
-	})
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
-
@@ -403,2 +317,2 @@ func main() {
-	router := gin.Default()
-	http.ListenAndServe(":8080", router)
+    router := gin.Default()
+    http.ListenAndServe(":8080", router)
@@ -411,10 +325,10 @@ func main() {
-	router := gin.Default()
-
-	s := &http.Server{
-		Addr:           ":8080",
-		Handler:        router,
-		ReadTimeout:    10 * time.Second,
-		WriteTimeout:   10 * time.Second,
-		MaxHeaderBytes: 1 << 20,
-	}
-	s.ListenAndServe()
+    router := gin.Default()
+
+    s := &http.Server{
+	    Addr:           ":8080",
+	    Handler:        router,
+	    ReadTimeout:    10 * time.Second,
+	    WriteTimeout:   10 * time.Second,
+	    MaxHeaderBytes: 1 << 20,
+    }
+    s.ListenAndServe()
diff --git a/README.md b/README.md
index f920543..6ebc4ac 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ] Fix bugs
+- [x] Fix bugs
@@ -18 +18,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ] Add tons of unit tests and benchmarks
+- [ ] Add tons of unit tests
+- [ ] Add internal benchmarks suite
@@ -21 +22 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ] Improve XML support
+- [x] Improve XML support
@@ -23 +24 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ] Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- [ ] Add more cool middlewares, for example redis catching (this also helps developers to understand the framework).
diff --git a/README.md b/README.md
index 9c8a729..f920543 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [] Fix bugs
+- [ ] Fix bugs
@@ -22,3 +22,3 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- [ ]Improve documentation
-- [ ]Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
-- [x]Continuous integration
+- [ ] Improve documentation
+- [ ] Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- [x] Continuous integration
diff --git a/README.md b/README.md
index b035fdf..9c8a729 100644
--- a/README.md
+++ b/README.md
@@ -15,10 +15,10 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-- Performance improments, reduce allocation and garbage collection overhead
-- Fix bugs
-- Ask our designer for a cool logo
-- Add tons of unit tests and benchmarks
-- Improve logging system
-- Improve JSON/XML validation using bindings
-- Improve XML support
-- Improve documentation
-- Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
-- Continuous integration
+- [x] Performance improments, reduce allocation and garbage collection overhead
+- [] Fix bugs
+- [ ] Ask our designer for a cool logo
+- [ ] Add tons of unit tests and benchmarks
+- [x] Improve logging system
+- [x] Improve JSON/XML validation using bindings
+- [ ] Improve XML support
+- [ ]Improve documentation
+- [ ]Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- [x]Continuous integration
diff --git a/README.md b/README.md
index 20a2a03..b035fdf 100644
--- a/README.md
+++ b/README.md
@@ -7,2 +7 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-[Check out the official web site](http://gin-gonic.github.io/gin/)
-
+![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
@@ -15 +14 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap
+##Roadmap for v0.2
@@ -30 +29,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Run:
+Obviously, you need to have Git and Go! already installed to run Gin.  
+Run this in your terminal
@@ -35 +35 @@ go get github.com/gin-gonic/gin
-Then import it in your Golang code:
+Then import it in your Go! code:
@@ -61 +61 @@ func main() {
-#### Using GET, POST, PUT, PATCH and DELETE
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -72,0 +73,2 @@ func main() {
+	r.HEAD("/someHead", head)
+	r.OPTIONS("/someOptions", options)
@@ -87 +89,8 @@ func main() {
-		message := "Hello " + name
+		message := "Hello "+name
+		c.String(200, message)
+	})
+
+	r.GET("/user/:name/:action", func(c *gin.Context) {
+		name := c.Params.ByName("name")
+		action := c.Params.ByName("action")
+		message := name + " is " + action
@@ -291,0 +301,4 @@ func Logger() gin.HandlerFunc {
+
+		// access the status we are sending
+		status := c.Writer.Status()
+		log.Println(status)
@@ -310,0 +324,8 @@ func main() {
+#### Using BasicAuth() middleware
+```go
+// similate some private data
+var secrets = gin.H{
+	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
+	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
+	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
+}
@@ -311,0 +333,23 @@ func main() {
+func main() {
+	r := gin.Default()
+
+	// Group using gin.BasicAuth() middleware
+	// gin.Accounts is a shortcut for map[string]string
+	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
+		"foo":    "bar",
+		"austin": "1234",
+		"lena":   "hello2",
+		"manu":   "4321",
+	}))
+
+	// /admin/secrets endpoint
+	// hit "localhost:8080/admin/secrets
+	authorized.GET("/secrets", func(c *gin.Context) {
+		// get user, it was setted by the BasicAuth middleware
+		user := c.Get(gin.AuthUserKey).(string)
+		if secret, ok := secrets[user]; ok {
+			c.JSON(200, gin.H{"user": user, "secret": secret})
+		} else {
+			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
+		}
+	})
@@ -312,0 +357,38 @@ func main() {
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
+}
+```
+
+
+#### Goroutines inside a middleware
+When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
+
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/long_async", func(c *gin.Context) {
+		// create copy to be used inside the goroutine
+		c_cp := c.Copy()
+		go func() {
+			// simulate a long task with time.Sleep(). 5 seconds
+			time.Sleep(5 * time.Second)
+
+			// note than you are using the copied context "c_cp", IMPORTANT
+			log.Println("Done! in path " + c_cp.Req.URL.Path)
+		}()
+	})
+
+
+	r.GET("/long_sync", func(c *gin.Context) {
+		// simulate a long task with time.Sleep(). 5 seconds
+		time.Sleep(5 * time.Second)
+
+		// since we are NOT using a goroutine, we do not have to copy the context
+		log.Println("Done! in path " + c.Req.URL.Path)
+	})
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
diff --git a/README.md b/README.md
index 7575c4f..20a2a03 100644
--- a/README.md
+++ b/README.md
@@ -7 +7,2 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
+[Check out the official web site](http://gin-gonic.github.io/gin/)
+
@@ -14 +15 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap for v0.2
+##Roadmap
@@ -29,2 +30 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Obviously, you need to have Git and Go! already installed to run Gin.  
-Run this in your terminal
+Run:
@@ -35 +35 @@ go get github.com/gin-gonic/gin
-Then import it in your Go! code:
+Then import it in your Golang code:
@@ -45,0 +46,2 @@ import "github.com/gin-gonic/gin"
+package main
+
@@ -49,7 +51,7 @@ func main() {
-    r := gin.Default()
-    r.GET("/ping", func(c *gin.Context){
-        c.String(200, "pong")
-    })
-    
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	r.GET("/ping", func(c *gin.Context) {
+		c.String(200, "pong")
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -59 +61 @@ func main() {
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+#### Using GET, POST, PUT, PATCH and DELETE
@@ -63,13 +65,11 @@ func main() {
-    // Creates a gin router + logger and recovery (crash-free) middlewares
-    r := gin.Default()
-    
-    r.GET("/someGet", getting)
-    r.POST("/somePost", posting)
-    r.PUT("/somePut", putting)
-    r.DELETE("/someDelete", deleting)
-    r.PATCH("/somePatch", patching)
-    r.HEAD("/someHead", head)
-    r.OPTIONS("/someOptions", options)
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Creates a gin router + logger and recovery (crash-free) middlewares
+	r := gin.Default()
+
+	r.GET("/someGet", getting)
+	r.POST("/somePost", posting)
+	r.PUT("/somePut", putting)
+	r.DELETE("/someDelete", deleting)
+	r.PATCH("/somePatch", patching)
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -83,17 +83,10 @@ func main() {
-    r := gin.Default()
-    
-    r.GET("/user/:name", func(c *gin.Context) {
-        name := c.Params.ByName("name")
-        message := "Hello "+name
-        c.String(200, message)
-    })
-
-    r.GET("/user/:name/:action", func(c *gin.Context) {
-        name := c.Params.ByName("name")
-        action := c.Params.ByName("action")
-        message := name + " is " + action
-        c.String(200, message)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	r.GET("/user/:name", func(c *gin.Context) {
+		name := c.Params.ByName("name")
+		message := "Hello " + name
+		c.String(200, message)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -107,20 +100,20 @@ func main() {
-    r := gin.Default()
-    
-    // Simple group: v1
-    v1 := r.Group("/v1")
-    {
-        v1.POST("/login", loginEndpoint)
-        v1.POST("/submit", submitEndpoint)
-        v1.POST("/read", readEndpoint)
-    }
-    
-    // Simple group: v2
-    v2 := r.Group("/v2")
-    {
-        v2.POST("/login", loginEndpoint)
-        v2.POST("/submit", submitEndpoint)
-        v2.POST("/read", readEndpoint)
-    }
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	// Simple group: v1
+	v1 := r.Group("/v1")
+	{
+		v1.POST("/login", loginEndpoint)
+		v1.POST("/submit", submitEndpoint)
+		v1.POST("/read", readEndpoint)
+	}
+
+	// Simple group: v2
+	v2 := r.Group("/v2")
+	{
+		v2.POST("/login", loginEndpoint)
+		v2.POST("/submit", submitEndpoint)
+		v2.POST("/read", readEndpoint)
+	}
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -148,29 +141,29 @@ func main() {
-    // Creates a router without any middleware by default
-    r := gin.New()
-    
-    // Global middlewares
-    r.Use(gin.Logger())
-    r.Use(gin.Recovery())
-    
-    // Per route middlewares, you can add as many as you desire.
-    r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
-
-    // Authorization group
-    // authorized := r.Group("/", AuthRequired())
-    // exactly the same than:
-    authorized := r.Group("/")
-    // per group middlewares! in this case we use the custom created
-    // AuthRequired() middleware just in the "authorized" group.
-    authorized.Use(AuthRequired())
-    {
-        authorized.POST("/login", loginEndpoint)
-        authorized.POST("/submit", submitEndpoint)
-        authorized.POST("/read", readEndpoint)
-        
-        // nested group
-        testing := authorized.Group("testing")
-        testing.GET("/analytics", analyticsEndpoint)
-    }
-   
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Creates a router without any middleware by default
+	r := gin.New()
+
+	// Global middlewares
+	r.Use(gin.Logger())
+	r.Use(gin.Recovery())
+
+	// Per route middlewares, you can add as many as you desire.
+	r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
+
+	// Authorization group
+	// authorized := r.Group("/", AuthRequired())
+	// exactly the same than:
+	authorized := r.Group("/")
+	// per group middlewares! in this case we use the custom created
+	// AuthRequired() middleware just in the "authorized" group.
+	authorized.Use(AuthRequired())
+	{
+		authorized.POST("/login", loginEndpoint)
+		authorized.POST("/submit", submitEndpoint)
+		authorized.POST("/read", readEndpoint)
+
+		// nested group
+		testing := authorized.Group("testing")
+		testing.GET("/analytics", analyticsEndpoint)
+	}
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -185,2 +178,2 @@ type LoginJSON struct {
-    User     string `json:"user" binding:"required"`
-    Password string `json:"password" binding:"required"`
+	User     string `json:"user" binding:"required"`
+	Password string `json:"password" binding:"required"`
@@ -190,19 +183,19 @@ func main() {
-    r := gin.Default()
-    
-    r.POST("/login", func(c *gin.Context) {
-        var json LoginJSON
-        
-        // If EnsureBody returns false, it will write automatically the error
-        // in the HTTP stream and return a 400 error. If you want custom error 
-        // handling you should use: c.ParseBody(interface{}) error
-        if c.EnsureBody(&json) {
-            if json.User=="manu" && json.Password=="123" {
-                c.JSON(200, gin.H{"status": "you are logged in"})
-            }else{
-                c.JSON(401, gin.H{"status": "unauthorized"})
-            }
-        }
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	r.POST("/login", func(c *gin.Context) {
+		var json LoginJSON
+
+		// If EnsureBody returns false, it will write automatically the error
+		// in the HTTP stream and return a 400 error. If you want custom error
+		// handling you should use: c.ParseBody(interface{}) error
+		if c.EnsureBody(&json) {
+			if json.User == "manu" && json.Password == "123" {
+				c.JSON(200, gin.H{"status": "you are logged in"})
+			} else {
+				c.JSON(401, gin.H{"status": "unauthorized"})
+			}
+		}
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -216,28 +209,28 @@ func main() {
-    r := gin.Default()
-    
-    // gin.H is a shortcup for map[string]interface{}
-    r.GET("/someJSON", func(c *gin.Context) {
-        c.JSON(200, gin.H{"message": "hey", "status": 200})
-    })
-    
-    r.GET("/moreJSON", func(c *gin.Context) {
-        // You also can use a struct
-        var msg struct {
-            Name string `json:"user"`
-            Message string
-            Number int
-        }
-        msg.Name = "Lena"
-        msg.Message = "hey"
-        msg.Number = 123
-        // Note that msg.Name becomes "user" in the JSON
-        // Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
-        c.JSON(200, msg)
-    })
-    
-    r.GET("/someXML", func(c *gin.Context) {
-        c.XML(200, gin.H{"message": "hey", "status": 200})
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+
+	// gin.H is a shortcup for map[string]interface{}
+	r.GET("/someJSON", func(c *gin.Context) {
+		c.JSON(200, gin.H{"message": "hey", "status": 200})
+	})
+
+	r.GET("/moreJSON", func(c *gin.Context) {
+		// You also can use a struct
+		var msg struct {
+			Name    string `json:"user"`
+			Message string
+			Number  int
+		}
+		msg.Name = "Lena"
+		msg.Message = "hey"
+		msg.Number = 123
+		// Note that msg.Name becomes "user" in the JSON
+		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
+		c.JSON(200, msg)
+	})
+
+	r.GET("/someXML", func(c *gin.Context) {
+		c.XML(200, gin.H{"message": "hey", "status": 200})
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -254,9 +247,9 @@ func main() {
-    r := gin.Default()
-    r.LoadHTMLTemplates("templates/*")
-    r.GET("/index", func(c *gin.Context) {
-        obj := gin.H{"title": "Main website"}
-        c.HTML(200, "index.tmpl", obj)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	r := gin.Default()
+	r.LoadHTMLTemplates("templates/*")
+	r.GET("/index", func(c *gin.Context) {
+		obj := gin.H{"title": "Main website"}
+		c.HTML(200, "index.tmpl", obj)
+	})
+
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -269,0 +263 @@ import "html/template"
+
@@ -271,3 +265,3 @@ func main() {
-    r := gin.Default()
-    html := template.Must(template.ParseFiles("file1", "file2"))
-    r.HTMLTemplates = html
+	r := gin.Default()
+	html := template.Must(template.ParseFiles("file1", "file2"))
+	r.HTMLTemplates = html
@@ -275,2 +269,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
@@ -285,5 +279,2 @@ func Logger() gin.HandlerFunc {
-    return func(c *gin.Context) {
-        t := time.Now()
-
-        // Set example variable
-        c.Set("example", "12345")
+	return func(c *gin.Context) {
+		t := time.Now()
@@ -291 +282,2 @@ func Logger() gin.HandlerFunc {
-        // before request
+		// Set example variable
+		c.Set("example", "12345")
@@ -293 +285 @@ func Logger() gin.HandlerFunc {
-        c.Next()
+		// before request
@@ -295,3 +287 @@ func Logger() gin.HandlerFunc {
-        // after request
-        latency := time.Since(t)
-        log.Print(latency)
+		c.Next()
@@ -299,4 +289,4 @@ func Logger() gin.HandlerFunc {
-        // access the status we are sending
-        status := c.Writer.Status()
-        log.Println(status)
-    }
+		// after request
+		latency := time.Since(t)
+		log.Print(latency)
+	}
@@ -306,2 +296,2 @@ func main() {
-    r := gin.New()
-    r.Use(Logger())
+	r := gin.New()
+	r.Use(Logger())
@@ -309,2 +299,2 @@ func main() {
-    r.GET("/test", func(c *gin.Context){
-        example := c.MustGet("example").(string)
+	r.GET("/test", func(c *gin.Context) {
+		example := r.Get("example").(string)
@@ -312,40 +302,2 @@ func main() {
-        // it would print: "12345"
-        log.Println(example)
-    })
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
-
-#### Using BasicAuth() middleware
-```go
-// similate some private data
-var secrets = gin.H{
-	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
-	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
-	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
-}
-
-func main() {
-	r := gin.Default()
-
-	// Group using gin.BasicAuth() middleware
-	// gin.Accounts is a shortcut for map[string]string
-	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
-		"foo":    "bar",
-		"austin": "1234",
-		"lena":   "hello2",
-		"manu":   "4321",
-	}))
-
-	// /admin/secrets endpoint
-	// hit "localhost:8080/admin/secrets
-	authorized.GET("/secrets", func(c *gin.Context) {
-		// get user, it was setted by the BasicAuth middleware
-		user := c.Get(gin.AuthUserKey).(string)
-		if secret, ok := secrets[user]; ok {
-			c.JSON(200, gin.H{"user": user, "secret": secret})
-		} else {
-			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
-		}
+		// it would print: "12345"
+		log.Println(example)
@@ -360,6 +311,0 @@ func main() {
-#### Goroutines inside a middleware
-When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
-
-```go
-func main() {
-	r := gin.Default()
@@ -367,25 +312,0 @@ func main() {
-	r.GET("/long_async", func(c *gin.Context) {
-		// create copy to be used inside the goroutine
-		c_cp := c.Copy()
-		go func() {
-			// simulate a long task with time.Sleep(). 5 seconds
-			time.Sleep(5 * time.Second)
-
-			// note than you are using the copied context "c_cp", IMPORTANT
-			log.Println("Done! in path " + c_cp.Req.URL.Path)
-		}()
-	})
-
-
-	r.GET("/long_sync", func(c *gin.Context) {
-		// simulate a long task with time.Sleep(). 5 seconds
-		time.Sleep(5 * time.Second)
-
-		// since we are NOT using a goroutine, we do not have to copy the context
-		log.Println("Done! in path " + c.Req.URL.Path)
-	})
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
-}
-```
@@ -399,2 +320,2 @@ func main() {
-    router := gin.Default()
-    http.ListenAndServe(":8080", router)
+	router := gin.Default()
+	http.ListenAndServe(":8080", router)
@@ -407,10 +328,10 @@ func main() {
-    router := gin.Default()
-
-    s := &http.Server{
-	    Addr:           ":8080",
-	    Handler:        router,
-	    ReadTimeout:    10 * time.Second,
-	    WriteTimeout:   10 * time.Second,
-	    MaxHeaderBytes: 1 << 20,
-    }
-    s.ListenAndServe()
+	router := gin.Default()
+
+	s := &http.Server{
+		Addr:           ":8080",
+		Handler:        router,
+		ReadTimeout:    10 * time.Second,
+		WriteTimeout:   10 * time.Second,
+		MaxHeaderBytes: 1 << 20,
+	}
+	s.ListenAndServe()
diff --git a/README.md b/README.md
index 72a87a1..7575c4f 100644
--- a/README.md
+++ b/README.md
@@ -287 +287 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -290 +290 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -292 +292 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -294 +294 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -308 +308 @@ func main() {
-    
+
@@ -310,2 +310,2 @@ func main() {
-        example := r.Get("example").(string)
-        
+        example := c.MustGet("example").(string)
+
diff --git a/README.md b/README.md
index e81f5c9..72a87a1 100644
--- a/README.md
+++ b/README.md
@@ -322,0 +323,7 @@ func main() {
+// similate some private data
+var secrets = gin.H{
+	"foo":    gin.H{"email": "foo@bar.com", "phone": "123433"},
+	"austin": gin.H{"email": "austin@example.com", "phone": "666"},
+	"lena":   gin.H{"email": "lena@guapa.com", "phone": "523443"},
+}
+
@@ -324,7 +331 @@ func main() {
-    r := gin.Default()
-	// note than: type gin.H map[string]interface{}
-	secrets := gin.H{
-		"foo": gin.H{"email": "foo@bar.com", "phone": "123433"},
-		"austin": gin.H{"email": "austin@example.com", "phone": "666"},
-		"lena": gin.H{"email": "lena@guapa.com", "phone": "523443"}
-	}
+	r := gin.Default()
@@ -331,0 +333,2 @@ func main() {
+	// Group using gin.BasicAuth() middleware
+	// gin.Accounts is a shortcut for map[string]string
@@ -333 +336 @@ func main() {
-		"foo": "bar",
+		"foo":    "bar",
@@ -335,3 +338,6 @@ func main() {
-		"lena": "hello2",
-		"manu": "4321"
-	}
+		"lena":   "hello2",
+		"manu":   "4321",
+	}))
+
+	// /admin/secrets endpoint
+	// hit "localhost:8080/admin/secrets
@@ -340 +346 @@ func main() {
-		user := c.GET(gin.AuthUserKey).(string)
+		user := c.Get(gin.AuthUserKey).(string)
@@ -342,4 +348 @@ func main() {
-			c.JSON(200, gin.H{
-				"user": user,
-				"secret": secret
-			}
+			c.JSON(200, gin.H{"user": user, "secret": secret})
@@ -347,4 +350 @@ func main() {
-			c.JSON(200, gin.H{
-				"user": user,
-				"secret": "NO SECRET :("
-			}
+			c.JSON(200, gin.H{"user": user, "secret": "NO SECRET :("})
@@ -352,2 +352 @@ func main() {
-	}
-	// hit "localhost:8080/admin/secrets
+	})
@@ -355,2 +354,2 @@ func main() {
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
+	// Listen and server on 0.0.0.0:8080
+	r.Run(":8080")
diff --git a/README.md b/README.md
index 344390c..e81f5c9 100644
--- a/README.md
+++ b/README.md
@@ -14 +14 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-##Roadmap
+##Roadmap for v0.2
@@ -29 +29,2 @@ Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcomin
-Run:
+Obviously, you need to have Git and Go! already installed to run Gin.  
+Run this in your terminal
@@ -34 +35 @@ go get github.com/gin-gonic/gin
-Then import it in your Golang code:
+Then import it in your Go! code:
@@ -69,0 +71 @@ func main() {
+    r.HEAD("/someHead", head)
@@ -88,0 +91,7 @@ func main() {
+    r.GET("/user/:name/:action", func(c *gin.Context) {
+        name := c.Params.ByName("name")
+        action := c.Params.ByName("action")
+        message := name + " is " + action
+        c.String(200, message)
+    })
+
@@ -311,0 +321,39 @@ func main() {
+#### Using BasicAuth() middleware
+```go
+func main() {
+    r := gin.Default()
+	// note than: type gin.H map[string]interface{}
+	secrets := gin.H{
+		"foo": gin.H{"email": "foo@bar.com", "phone": "123433"},
+		"austin": gin.H{"email": "austin@example.com", "phone": "666"},
+		"lena": gin.H{"email": "lena@guapa.com", "phone": "523443"}
+	}
+
+	authorized := r.Group("/admin", gin.BasicAuth(gin.Accounts{
+		"foo": "bar",
+		"austin": "1234",
+		"lena": "hello2",
+		"manu": "4321"
+	}
+	authorized.GET("/secrets", func(c *gin.Context) {
+		// get user, it was setted by the BasicAuth middleware
+		user := c.GET(gin.AuthUserKey).(string)
+		if secret, ok := secrets[user]; ok {
+			c.JSON(200, gin.H{
+				"user": user,
+				"secret": secret
+			}
+		} else {
+			c.JSON(200, gin.H{
+				"user": user,
+				"secret": "NO SECRET :("
+			}
+		}
+	}
+	// hit "localhost:8080/admin/secrets
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
+
@@ -312,0 +361,2 @@ func main() {
+#### Goroutines inside a middleware
+When starting inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.
@@ -313,0 +364,29 @@ func main() {
+```go
+func main() {
+	r := gin.Default()
+
+	r.GET("/long_async", func(c *gin.Context) {
+		// create copy to be used inside the goroutine
+		c_cp := c.Copy()
+		go func() {
+			// simulate a long task with time.Sleep(). 5 seconds
+			time.Sleep(5 * time.Second)
+
+			// note than you are using the copied context "c_cp", IMPORTANT
+			log.Println("Done! in path " + c_cp.Req.URL.Path)
+		}()
+	})
+
+
+	r.GET("/long_sync", func(c *gin.Context) {
+		// simulate a long task with time.Sleep(). 5 seconds
+		time.Sleep(5 * time.Second)
+
+		// since we are NOT using a goroutine, we do not have to copy the context
+		log.Println("Done! in path " + c.Req.URL.Path)
+	})
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
+}
+```
diff --git a/README.md b/README.md
index 7c36793..344390c 100644
--- a/README.md
+++ b/README.md
@@ -7,2 +7 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-[Check out the official web site](http://gin-gonic.github.io/gin/)
-
+![Gin console logger](http://gin-gonic.github.io/gin/other/console.png)
@@ -59 +58 @@ func main() {
-#### Using GET, POST, PUT, PATCH and DELETE
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -70,0 +70 @@ func main() {
+    r.OPTIONS("/someOptions", options)
@@ -278 +278 @@ func Logger() gin.HandlerFunc {
-
+        
@@ -281 +281 @@ func Logger() gin.HandlerFunc {
-
+        
@@ -283 +283 @@ func Logger() gin.HandlerFunc {
-
+        
@@ -285 +285 @@ func Logger() gin.HandlerFunc {
-
+        
@@ -288,0 +289,4 @@ func Logger() gin.HandlerFunc {
+
+        // access the status we are sending
+        status := c.Writer.Status()
+        log.Println(status)
@@ -295 +299 @@ func main() {
-
+    
@@ -297,2 +301,2 @@ func main() {
-        example := c.MustGet("example").(string)
-
+        example := r.Get("example").(string)
+        
diff --git a/README.md b/README.md
index 02ffaa4..7c36793 100644
--- a/README.md
+++ b/README.md
@@ -59 +59 @@ func main() {
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+#### Using GET, POST, PUT, PATCH and DELETE
@@ -71 +70,0 @@ func main() {
-    r.OPTIONS("/someOptions", options)
@@ -279 +278 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -282 +281 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -284 +283 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -286 +285 @@ func Logger() gin.HandlerFunc {
-        
+
@@ -290,4 +288,0 @@ func Logger() gin.HandlerFunc {
-
-        // access the status we are sending
-        status := c.Writer.Status()
-        log.Println(status)
@@ -300 +295 @@ func main() {
-    
+
@@ -302,2 +297,2 @@ func main() {
-        example := r.Get("example").(string)
-        
+        example := c.MustGet("example").(string)
+
diff --git a/README.md b/README.md
index 97e80af..02ffaa4 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -263 +264 @@ func main() {
-    html := template.ParseFiles("file1", "file2")
+    html := template.Must(template.ParseFiles("file1", "file2"))
diff --git a/README.md b/README.md
index 53efb20..97e80af 100644
--- a/README.md
+++ b/README.md
@@ -4 +3,0 @@
-[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -59 +58 @@ func main() {
-#### Using GET, POST, PUT, PATCH and DELETE
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -70,0 +70 @@ func main() {
+    r.OPTIONS("/someOptions", options)
@@ -263 +263 @@ func main() {
-    html := template.Must(template.ParseFiles("file1", "file2"))
+    html := template.ParseFiles("file1", "file2")
@@ -288,0 +289,4 @@ func Logger() gin.HandlerFunc {
+
+        // access the status we are sending
+        status := c.Writer.Status()
+        log.Println(status)
diff --git a/README.md b/README.md
index 041b49c..53efb20 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
diff --git a/README.md b/README.md
index d924989..041b49c 100644
--- a/README.md
+++ b/README.md
@@ -4 +3,0 @@
-[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -263 +262 @@ func main() {
-    html := template.ParseFiles("file1", "file2")
+    html := template.Must(template.ParseFiles("file1", "file2"))
diff --git a/README.md b/README.md
index d80f07a..d924989 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)
@@ -58 +59 @@ func main() {
-#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
+#### Using GET, POST, PUT, PATCH and DELETE
@@ -70 +70,0 @@ func main() {
-    r.OPTIONS("/someOptions", options)
diff --git a/README.md b/README.md
index c2a5f11..d80f07a 100644
--- a/README.md
+++ b/README.md
@@ -58 +58 @@ func main() {
-#### Using GET, POST, PUT, PATCH and DELETE
+#### Using GET, POST, PUT, PATCH, DELETE and OPTIONS
@@ -69,0 +70 @@ func main() {
+    r.OPTIONS("/someOptions", options)
diff --git a/README.md b/README.md
index 850ee12..c2a5f11 100644
--- a/README.md
+++ b/README.md
@@ -7,0 +8,20 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
+
+##Gin is new, will it be supported?
+
+Yes, Gin is an internal project of [my](https://github.com/manucorporat) upcoming startup. We developed it and we are going to continue using and improve it.
+
+
+##Roadmap
+- Performance improments, reduce allocation and garbage collection overhead
+- Fix bugs
+- Ask our designer for a cool logo
+- Add tons of unit tests and benchmarks
+- Improve logging system
+- Improve JSON/XML validation using bindings
+- Improve XML support
+- Improve documentation
+- Add more cool middlewares, for example redis catching (this also helps developers to understand the framework)
+- Continuous integration
+
+
+
diff --git a/README.md b/README.md
index 07e3bd0..850ee12 100644
--- a/README.md
+++ b/README.md
@@ -256 +256 @@ func Logger() gin.HandlerFunc {
-        t : time.Now()
+        t := time.Now()
diff --git a/README.md b/README.md
index 3c2fe1a..07e3bd0 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![GoDoc](https://godoc.org/github.com/golang/gddo?status.png)](http://godoc.org/github.com/golang/gddo)
+[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.png)](https://godoc.org/github.com/gin-gonic/gin)
diff --git a/README.md b/README.md
index 744f380..3c2fe1a 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![GoDoc]https://godoc.org/github.com/gin-gonic/gin?status.png)](https://godoc.org/github.com/gin-gonic/gin)  
+[![GoDoc](https://godoc.org/github.com/golang/gddo?status.png)](http://godoc.org/github.com/golang/gddo)
diff --git a/README.md b/README.md
index 8a051d0..744f380 100644
--- a/README.md
+++ b/README.md
@@ -1,0 +2,3 @@
+
+[![GoDoc]https://godoc.org/github.com/gin-gonic/gin?status.png)](https://godoc.org/github.com/gin-gonic/gin)  
+
diff --git a/README.md b/README.md
index 1239620..8a051d0 100644
--- a/README.md
+++ b/README.md
@@ -193 +193 @@ func main() {
-            Name string
+            Name string `json:"user"`
@@ -200 +200,2 @@ func main() {
-        // Will output  :   {"Name": "Lena", "Message": "hey", "Number": 123}
+        // Note that msg.Name becomes "user" in the JSON
+        // Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
diff --git a/README.md b/README.md
index baebc79..1239620 100644
--- a/README.md
+++ b/README.md
@@ -192,0 +193 @@ func main() {
+            Name string
@@ -194 +195 @@ func main() {
-            Status  int
+            Number int
@@ -195,0 +197 @@ func main() {
+        msg.Name = "Lena"
@@ -197,2 +199,3 @@ func main() {
-        msg.Status = 200
-        c.JSON(200, msg.Status)
+        msg.Number = 123
+        // Will output  :   {"Name": "Lena", "Message": "hey", "Number": 123}
+        c.JSON(200, msg)
diff --git a/README.md b/README.md
index 9d5c8ee..baebc79 100644
--- a/README.md
+++ b/README.md
@@ -63,0 +64,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -169,0 +173,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -197,0 +204,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -213,0 +223,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -224,0 +237,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -258,0 +274,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
diff --git a/README.md b/README.md
index 4801c27..9d5c8ee 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ func main() {
-    r.GET("ping", func(c *gin.Context){
+    r.GET("/ping", func(c *gin.Context){
@@ -64,3 +63,0 @@ func main() {
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
@@ -173,3 +169,0 @@ func main() {
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
@@ -204,3 +197,0 @@ func main() {
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
@@ -219 +210 @@ func main() {
-    r.GET("index", func(c *gin.Context) {
+    r.GET("/index", func(c *gin.Context) {
@@ -223,3 +213,0 @@ func main() {
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
@@ -237,3 +224,0 @@ func main() {
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
@@ -268 +253 @@ func main() {
-    r.GET("test", func(c *gin.Context){
+    r.GET("/test", func(c *gin.Context){
@@ -274,3 +258,0 @@ func main() {
-
-    // Listen and server on 0.0.0.0:8080
-    r.Run(":8080")
diff --git a/README.md b/README.md
index 35f8962..4801c27 100644
--- a/README.md
+++ b/README.md
@@ -63,0 +64,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -169,0 +173,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -197,0 +204,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -213,0 +223,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -224,0 +237,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
@@ -258,0 +274,3 @@ func main() {
+
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":8080")
diff --git a/README.md b/README.md
index cf006e9..35f8962 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ func main() {
-    r.GET("/ping", func(c *gin.Context){
+    r.GET("ping", func(c *gin.Context){
@@ -39 +39 @@ func main() {
-    // Creates a gin router + logger and recovery (crash-free) middlwares
+    // Creates a gin router + logger and recovery (crash-free) middlewares
@@ -81 +81 @@ func main() {
-    // Simple group: v1
+    // Simple group: v2
@@ -112 +112 @@ func main() {
-    // Creates a router without any middlware by default
+    // Creates a router without any middleware by default
@@ -115 +115 @@ func main() {
-    // Global middlwares
+    // Global middlewares
@@ -119 +119 @@ func main() {
-    // Per route middlwares, you can add as many as you desire.
+    // Per route middlewares, you can add as many as you desire.
@@ -126,2 +126,2 @@ func main() {
-    // per group middlwares! in this case we use the custom created
-    // AuthRequired() middlware just in the "authorized" group.
+    // per group middlewares! in this case we use the custom created
+    // AuthRequired() middleware just in the "authorized" group.
@@ -130,3 +130,3 @@ func main() {
-        authorized.Use.POST("/login", loginEndpoint)
-        authorized.Use.POST("/submit", submitEndpoint)
-        authorized.Use.POST("/read", readEndpoint)
+        authorized.POST("/login", loginEndpoint)
+        authorized.POST("/submit", submitEndpoint)
+        authorized.POST("/read", readEndpoint)
@@ -210 +210 @@ func main() {
-    r.GET("/index", func(c *gin.Context) {
+    r.GET("index", func(c *gin.Context) {
@@ -253 +253 @@ func main() {
-    r.GET("/test", func(c *gin.Context){
+    r.GET("test", func(c *gin.Context){
diff --git a/README.md b/README.md
index ed6467d..cf006e9 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ func main() {
-    r.GET("ping", func(c *gin.Context){
+    r.GET("/ping", func(c *gin.Context){
@@ -210 +210 @@ func main() {
-    r.GET("index", func(c *gin.Context) {
+    r.GET("/index", func(c *gin.Context) {
@@ -253 +253 @@ func main() {
-    r.GET("test", func(c *gin.Context){
+    r.GET("/test", func(c *gin.Context){
diff --git a/README.md b/README.md
index 46784d4..ed6467d 100644
--- a/README.md
+++ b/README.md
@@ -211,2 +211,2 @@ func main() {
-        obj := gin.h{"title": "Main website"}
-        c.HTML(200, "templates/index.tmpl", obj)
+        obj := gin.H{"title": "Main website"}
+        c.HTML(200, "index.tmpl", obj)
diff --git a/README.md b/README.md
index 444f6d4..46784d4 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-        c.String("pong")
+        c.String(200, "pong")
diff --git a/README.md b/README.md
index 12dbee1..444f6d4 100644
--- a/README.md
+++ b/README.md
@@ -31 +31 @@ func main() {
-    r.Run(":80")
+    r.Run(":8080")
@@ -46 +46 @@ func main() {
-    r.PATCH("/somePATCH", patching)
+    r.PATCH("/somePatch", patching)
@@ -290 +290 @@ func main() {
-```
\ No newline at end of file
+```
diff --git a/README.md b/README.md
index f6c6548..12dbee1 100644
--- a/README.md
+++ b/README.md
@@ -31 +31 @@ func main() {
-    r.Run(":8080")
+    r.Run(":80")
@@ -46 +46 @@ func main() {
-    r.PATCH("/somePatch", patching)
+    r.PATCH("/somePATCH", patching)
@@ -86 +86 @@ func main() {
-        v2.POST("/read"", readEndpoint)
+        v2.POST("/read", readEndpoint)
@@ -290 +290 @@ func main() {
-```
+```
\ No newline at end of file
diff --git a/README.md b/README.md
index 1c40f13..f6c6548 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-        c.String(200, "pong")
+        c.String("pong")
@@ -31 +31 @@ func main() {
-    r.Run(":80")
+    r.Run(":8080")
@@ -46 +46 @@ func main() {
-    r.PATCH("/somePATCH", patching)
+    r.PATCH("/somePatch", patching)
@@ -85 +85 @@ func main() {
-        v2.POST("/submit"", submitEndpoint)
+        v2.POST("/submit", submitEndpoint)
diff --git a/README.md b/README.md
index b0c4e91..1c40f13 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ func main() {
-        c.String("pong")
+        c.String(200, "pong")
@@ -290 +290 @@ func main() {
-```
\ No newline at end of file
+```
diff --git a/README.md b/README.md
index f910801..b0c4e91 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@ Gin is a web framework written in Golang. It features a martini-like API with mu
-[Check out the official web site](http://gingonic.github.com)
+[Check out the official web site](http://gin-gonic.github.io/gin/)
@@ -21 +21,3 @@ import "github.com/gin-gonic/gin"
-```
+```go 
+import "github.com/gin-gonic/gin"
+
@@ -23 +24,0 @@ func main() {
-    // Creates a gin router + logger and recovery (crash-free) middlwares
@@ -25 +26 @@ func main() {
-    r.GET("/ping", func(c *gin.Context){
+    r.GET("ping", func(c *gin.Context){
@@ -28,0 +30,13 @@ func main() {
+    // Listen and server on 0.0.0.0:8080
+    r.Run(":80")
+}
+```
+
+#### Using GET, POST, PUT, PATCH and DELETE
+
+```go
+func main() {
+    // Creates a gin router + logger and recovery (crash-free) middlwares
+    r := gin.Default()
+    
+    r.GET("/someGet", getting)
@@ -41 +55 @@ func main() {
-```
+```go
@@ -55 +69 @@ func main() {
-```
+```go
@@ -85 +99 @@ Use
-```
+```go
@@ -90 +104 @@ instead of
-```
+```go
@@ -96 +110 @@ r := gin.Default()
-```
+```go
@@ -132 +145,0 @@ func main() {
-```
@@ -133,0 +147 @@ func main() {
+```go
@@ -161 +175 @@ func main() {
-```
+```go
@@ -192 +206 @@ Using LoadHTMLTemplates()
-```
+```go
@@ -205 +219 @@ You can also use your own html template render
-```
+```go
@@ -217 +231 @@ func main() {
-```
+```go
@@ -244,0 +259 @@ func main() {
+}
@@ -252 +267 @@ func main() {
-Do not use the `Run()` method, instead use this:
+Use `http.ListenAndServe()` directly, like this:
@@ -254 +269 @@ Do not use the `Run()` method, instead use this:
-```
+```go
@@ -262 +277 @@ or
-```
+```go
@@ -275,3 +290 @@ func main() {
-```
-
-
+```
\ No newline at end of file
