diff --git a/README.md b/README.md
index 0c445603e..a51169807 100644
--- a/README.md
+++ b/README.md
@@ -59,2 +59 @@ Time:
-Join Hangouts Meet
-meet.google.com/umg-nrxn-qvs
+Join Hangouts Meet: [meet.google.com/umg-nrxn-qvs](https://meet.google.com/umg-nrxn-qvs)
@@ -62,3 +61 @@ meet.google.com/umg-nrxn-qvs
-Join by phone
-‪+1 405-792-0633‬ PIN: ‪299 906‬#
-More phone numbers
+Join by phone: +1 405-792-0633‬ PIN: ‪299 906‬#
diff --git a/README.md b/README.md
index 980c304a2..0c445603e 100644
--- a/README.md
+++ b/README.md
@@ -55 +55 @@ Time:
-- Sep 19, 2019 11:00 AM
+- [Sep 19, 2019 11:00 AM video](https://youtu.be/SqfxU9DhBOc)
diff --git a/README.md b/README.md
index 655d31408..980c304a2 100644
--- a/README.md
+++ b/README.md
@@ -75 +75 @@ For more installation guides, please check out [play.etcd.io](http://play.etcd.i
-For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.12+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.13+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
diff --git a/README.md b/README.md
index 330c2fc00..655d31408 100644
--- a/README.md
+++ b/README.md
@@ -137,0 +138,6 @@ Every cluster member and proxy accepts key value reads and key value writes.
+Follow the steps in [Procfile.learner](./Procfile.learner) to add a learner node to the cluster. Start the learner node with:
+
+```bash
+goreman -f ./Procfile.learner start
+```
+
diff --git a/README.md b/README.md
index 0a07dc8a2..330c2fc00 100644
--- a/README.md
+++ b/README.md
@@ -54 +54 @@ Time:
-- Aug 22, 2019 11:00 AM
+- [Aug 22, 2019 11:00 AM video](https://youtu.be/6IBQ-VxQmuM) 
diff --git a/README.md b/README.md
index af04feb0b..0a07dc8a2 100644
--- a/README.md
+++ b/README.md
@@ -38,2 +37,0 @@ See [etcdctl][etcdctl] for a simple command line client.
-*Community meeting will resume at 11:00 am on Thursday, January 10th, 2019.*
-
@@ -46,5 +43,0 @@ An initial agenda will be posted to the [shared Google docs][shared-meeting-note
-Please download and import the following iCalendar (.ics) files to calendar system.
-
-Weekly: https://zoom.us/meeting/916003437/ics?icsToken=e4a085b6837f5802d9aef0d2ded4777d0faf1a71e39279c4a6d8b577993d879c
-
-Join Zoom Meeting https://zoom.us/j/916003437
@@ -52,4 +45,13 @@ Join Zoom Meeting https://zoom.us/j/916003437
-```
-One tap mobile
-+14086380986,,916003437# US (San Jose)
-+16465588665,,916003437# US (New York)
+Time:
+- [Jan 10th, 2019 11:00 AM video](https://www.youtube.com/watch?v=0Cphtbd1OSc&feature=youtu.be)
+- [Feb 7th, 2019 11:00 AM video](https://youtu.be/U80b--oAlYM)
+- [Mar 7th, 2019 11:00 AM video](https://youtu.be/w9TI5B7D1zg)
+- [Apr 4th, 2019 11:00 AM video](https://youtu.be/oqQR2XH1L_A)
+- [May 2nd, 2019 11:00 AM video](https://youtu.be/wFwQePuDWVw)
+- [May 30th, 2019 11:00 AM video](https://youtu.be/2t1R5NATYG4)
+- [Jul 11th, 2019 11:00 AM video](https://youtu.be/k_FZEipWD6Y)
+- [Jul 25, 2019 11:00 AM video](https://youtu.be/VSUJTACO93I)
+- Aug 22, 2019 11:00 AM
+- Sep 19, 2019 11:00 AM
+- Nov 14, 2019 11:00 AM
+- Dec 12, 2019 11:00 AM
@@ -57,3 +59,2 @@ One tap mobile
-Dial by location
-        +1 408 638 0986 US (San Jose)
-        +1 646 558 8665 US (New York)
+Join Hangouts Meet
+meet.google.com/umg-nrxn-qvs
@@ -61,2 +62,3 @@ Dial by location
-Meeting ID: 916 003 437
-```
+Join by phone
+‪+1 405-792-0633‬ PIN: ‪299 906‬#
+More phone numbers
@@ -64 +65,0 @@ Meeting ID: 916 003 437
-To Find local number: https://zoom.us/u/actX55uPfS
diff --git a/README.md b/README.md
index 89763fc9b..af04feb0b 100644
--- a/README.md
+++ b/README.md
@@ -174 +174 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-A security vulnerability can be reported as an issue, however, GitHub and mailing lists may NOT always be an appropriate place for reporting vulnerabilities. In that case, please reach out to the project [MAINTAINERS](https://github.com/etcd-io/etcd/blob/master/MAINTAINERS) to first discuss the vulnerabilities with them and take necessary action per such discussion.
+See [security disclosure and release process](security/README.md) for details on how to report a security vulnerability and how the etcd team manages it.
diff --git a/README.md b/README.md
index b77da71fc..89763fc9b 100644
--- a/README.md
+++ b/README.md
@@ -74 +74 @@ For more installation guides, please check out [play.etcd.io](http://play.etcd.i
-For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.11+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.12+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
diff --git a/README.md b/README.md
index 7105480e0..b77da71fc 100644
--- a/README.md
+++ b/README.md
@@ -175,0 +176,6 @@ A security vulnerability can be reported as an issue, however, GitHub and mailin
+## Issue and PR management
+
+See [issue triage guidelines](Documentation/triage/issues.md) for details on how issues are managed.
+
+See [PR management](Documentation/triage/PRs.md) for guidelines on how pull requests are managed.
+
diff --git a/README.md b/README.md
index 9a0d219e2..7105480e0 100644
--- a/README.md
+++ b/README.md
@@ -174,3 +174 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-Due to their public nature, GitHub and mailing lists are NOT appropriate places for reporting vulnerabilities. Please refer to CoreOS's [security disclosure][disclosure] process when reporting issues that may be security related.
-
-[disclosure]: https://coreos.com/security/disclosure/
+A security vulnerability can be reported as an issue, however, GitHub and mailing lists may NOT always be an appropriate place for reporting vulnerabilities. In that case, please reach out to the project [MAINTAINERS](https://github.com/etcd-io/etcd/blob/master/MAINTAINERS) to first discuss the vulnerabilities with them and take necessary action per such discussion.
diff --git a/README.md b/README.md
index ddc029c38..9a0d219e2 100644
--- a/README.md
+++ b/README.md
@@ -182,0 +183 @@ These emeritus maintainers dedicated a part of their career to etcd and reviewed
+* Anthony Romano 
diff --git a/README.md b/README.md
index a1742db00..ddc029c38 100644
--- a/README.md
+++ b/README.md
@@ -180 +180 @@ Due to their public nature, GitHub and mailing lists are NOT appropriate places
-These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Thank you.
+These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated.
diff --git a/README.md b/README.md
index ef0d08c01..a1742db00 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@
-[![Docs](https://readthedocs.org/projects/etcd/badge/?version=latest&style=flat-square)](https://etcd.readthedocs.io/en/latest/?badge=latest)
+[![Docs](https://img.shields.io/badge/docs-latest-green.svg)](https://etcd.io/docs)
@@ -180 +180 @@ Due to their public nature, GitHub and mailing lists are NOT appropriate places
-These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated.
+These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Thank you.
diff --git a/README.md b/README.md
index c053183b2..ef0d08c01 100644
--- a/README.md
+++ b/README.md
@@ -180 +180 @@ Due to their public nature, GitHub and mailing lists are NOT appropriate places
-These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Thank you.
+These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated.
diff --git a/README.md b/README.md
index e16ef3dc8..c053183b2 100644
--- a/README.md
+++ b/README.md
@@ -178 +178 @@ Due to their public nature, GitHub and mailing lists are NOT appropriate places
-## etcd Emeritus
+## etcd Emeritus Maintainers
@@ -180 +180,3 @@ Due to their public nature, GitHub and mailing lists are NOT appropriate places
-Fanmin Shi
+These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Thank you.
+
+* Fanmin Shi 
diff --git a/README.md b/README.md
index ec8ff8029..e16ef3dc8 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@
-[![Docs](https://img.shields.io/badge/docs-latest-green.svg)](https://etcd.io/docs)
+[![Docs](https://readthedocs.org/projects/etcd/badge/?version=latest&style=flat-square)](https://etcd.readthedocs.io/en/latest/?badge=latest)
@@ -177,0 +178,4 @@ Due to their public nature, GitHub and mailing lists are NOT appropriate places
+## etcd Emeritus
+
+Fanmin Shi
+
diff --git a/README.md b/README.md
index 7ca545b10..ec8ff8029 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@
-[![Docs](https://readthedocs.org/projects/etcd/badge/?version=latest&style=flat-square)](https://etcd.readthedocs.io/en/latest/?badge=latest)
+[![Docs](https://img.shields.io/badge/docs-latest-green.svg)](https://etcd.io/docs)
@@ -174 +174,3 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-A security vulnerability can be reported as an issue, however, GitHub and mailing lists may NOT always be an appropriate place for reporting vulnerabilities. In that case, please reach out to the project [MAINTAINERS](https://github.com/etcd-io/etcd/blob/master/MAINTAINERS) to first discuss the vulnerabilities with them and take necessary action per such discussion.
+Due to their public nature, GitHub and mailing lists are NOT appropriate places for reporting vulnerabilities. Please refer to CoreOS's [security disclosure][disclosure] process when reporting issues that may be security related.
+
+[disclosure]: https://coreos.com/security/disclosure/
diff --git a/README.md b/README.md
index d1cd2fc62..7ca545b10 100644
--- a/README.md
+++ b/README.md
@@ -174,3 +174 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-Due to their public nature, GitHub and mailing lists are NOT appropriate places for reporting vulnerabilities. Please refer to CoreOS's [security disclosure][disclosure] process when reporting issues that may be security related.
-
-[disclosure]: https://coreos.com/security/disclosure/
+A security vulnerability can be reported as an issue, however, GitHub and mailing lists may NOT always be an appropriate place for reporting vulnerabilities. In that case, please reach out to the project [MAINTAINERS](https://github.com/etcd-io/etcd/blob/master/MAINTAINERS) to first discuss the vulnerabilities with them and take necessary action per such discussion.
diff --git a/README.md b/README.md
index 917164859..d1cd2fc62 100644
--- a/README.md
+++ b/README.md
@@ -108,2 +108,2 @@ Next, let's set a single key, and then retrieve it:
-ETCDCTL_API=3 etcdctl put mykey "this is awesome"
-ETCDCTL_API=3 etcdctl get mykey
+etcdctl put mykey "this is awesome"
+etcdctl get mykey
diff --git a/README.md b/README.md
index 9e2444ce2..917164859 100644
--- a/README.md
+++ b/README.md
@@ -46 +46,2 @@ An initial agenda will be posted to the [shared Google docs][shared-meeting-note
-Please download and import the following iCalendar (.ics) files to your calendar system.
+Please download and import the following iCalendar (.ics) files to calendar system.
+
@@ -49,2 +50 @@ Weekly: https://zoom.us/meeting/916003437/ics?icsToken=e4a085b6837f5802d9aef0d2d
-Join Zoom Meeting
-https://zoom.us/j/916003437
+Join Zoom Meeting https://zoom.us/j/916003437
@@ -51,0 +52 @@ https://zoom.us/j/916003437
+```
@@ -56 +57 @@ One tap mobile
-Dial by your location
+Dial by location
@@ -58,0 +60 @@ Dial by your location
+
@@ -60 +62,3 @@ Meeting ID: 916 003 437
-Find your local number: https://zoom.us/u/actX55uPfS
+```
+
+To Find local number: https://zoom.us/u/actX55uPfS
diff --git a/README.md b/README.md
index 6e3dc67f3..9e2444ce2 100644
--- a/README.md
+++ b/README.md
@@ -38 +38 @@ See [etcdctl][etcdctl] for a simple command line client.
-*Community meeting is put on hold for now.*
+*Community meeting will resume at 11:00 am on Thursday, January 10th, 2019.*
@@ -40 +40 @@ See [etcdctl][etcdctl] for a simple command line client.
-etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays.
+etcd contributors and maintainers have monthly (every four weeks) meetings at 11:00 AM (USA Pacific) on Thursday.
@@ -45,0 +46,16 @@ An initial agenda will be posted to the [shared Google docs][shared-meeting-note
+Please download and import the following iCalendar (.ics) files to your calendar system.
+Weekly: https://zoom.us/meeting/916003437/ics?icsToken=e4a085b6837f5802d9aef0d2ded4777d0faf1a71e39279c4a6d8b577993d879c
+
+Join Zoom Meeting
+https://zoom.us/j/916003437
+
+One tap mobile
++14086380986,,916003437# US (San Jose)
++16465588665,,916003437# US (New York)
+
+Dial by your location
+        +1 408 638 0986 US (San Jose)
+        +1 646 558 8665 US (New York)
+Meeting ID: 916 003 437
+Find your local number: https://zoom.us/u/actX55uPfS
+
diff --git a/README.md b/README.md
index 048a8ba60..6e3dc67f3 100644
--- a/README.md
+++ b/README.md
@@ -54 +54 @@ For more installation guides, please check out [play.etcd.io](http://play.etcd.i
-For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.10+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.11+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
diff --git a/README.md b/README.md
index ff53815e1..048a8ba60 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@
-[![Build Status Travis](https://img.shields.io/travis/etcd-io/etcdlabs.svg?style=flat-square&&branch=master)](https://travis-ci.org/etcd-io/etcd)
+[![Build Status Travis](https://img.shields.io/travis/etcd-io/etcdlabs.svg?style=flat-square&&branch=master)](https://travis-ci.com/etcd-io/etcd)
diff --git a/README.md b/README.md
index 42c1e18f5..ff53815e1 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +0,0 @@
-
-
-**WARNING**: etcd will be transferred from https://github.com/coreos to https://github.com/etcd-io, on 5PM PST, Mon, August 27, 2018. See https://github.com/coreos/etcd/issues/9965 for detailed timeline.
-
-
@@ -8,4 +3,4 @@
-[![Go Report Card](https://goreportcard.com/badge/github.com/coreos/etcd?style=flat-square)](https://goreportcard.com/report/github.com/coreos/etcd)
-[![Coverage](https://codecov.io/gh/coreos/etcd/branch/master/graph/badge.svg)](https://codecov.io/gh/coreos/etcd)
-[![Build Status Travis](https://img.shields.io/travis/coreos/etcdlabs.svg?style=flat-square&&branch=master)](https://travis-ci.org/coreos/etcd)
-[![Build Status Semaphore](https://semaphoreci.com/api/v1/coreos/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/coreos/etcd)
+[![Go Report Card](https://goreportcard.com/badge/github.com/etcd-io/etcd?style=flat-square)](https://goreportcard.com/report/github.com/etcd-io/etcd)
+[![Coverage](https://codecov.io/gh/etcd-io/etcd/branch/master/graph/badge.svg)](https://codecov.io/gh/etcd-io/etcd)
+[![Build Status Travis](https://img.shields.io/travis/etcd-io/etcdlabs.svg?style=flat-square&&branch=master)](https://travis-ci.org/etcd-io/etcd)
+[![Build Status Semaphore](https://semaphoreci.com/api/v1/etcd-io/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/etcd-io/etcd)
@@ -13,3 +8,3 @@
-[![Godoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/coreos/etcd)
-[![Releases](https://img.shields.io/github/release/coreos/etcd/all.svg?style=flat-square)](https://github.com/coreos/etcd/releases)
-[![LICENSE](https://img.shields.io/github/license/coreos/etcd.svg?style=flat-square)](https://github.com/coreos/etcd/blob/master/LICENSE)
+[![Godoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/etcd-io/etcd)
+[![Releases](https://img.shields.io/github/release/etcd-io/etcd/all.svg?style=flat-square)](https://github.com/etcd-io/etcd/releases)
+[![LICENSE](https://img.shields.io/github/license/etcd-io/etcd.svg?style=flat-square)](https://github.com/etcd-io/etcd/blob/master/LICENSE)
@@ -19,2 +13,0 @@
-*the etcd v2 [documentation](Documentation/v2/README.md) has moved*
-
@@ -32 +25 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
-etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by [**rigorous testing**](https://github.com/coreos/etcd/tree/master/functional).
+etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by [**rigorous testing**](https://github.com/etcd-io/etcd/tree/master/functional).
@@ -41 +34 @@ See [etcdctl][etcdctl] for a simple command line client.
-[etcdctl]: https://github.com/coreos/etcd/tree/master/etcdctl
+[etcdctl]: https://github.com/etcd-io/etcd/tree/master/etcdctl
@@ -45 +38,5 @@ See [etcdctl][etcdctl] for a simple command line client.
-etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays. Anyone is welcome to join via [BlueJeans][bluejeans]. An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
+*Community meeting is put on hold for now.*
+
+etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays.
+
+An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
@@ -47 +43,0 @@ etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacif
-[bluejeans]: https://bluejeans.com/2732309610
@@ -56 +52 @@ The easiest way to get etcd is to use one of the pre-built release binaries whic
-For more installation guides, please check out [play.etcd.io](http://play.etcd.io) and [operating etcd](https://github.com/coreos/etcd/tree/master/Documentation#operating-etcd-clusters).
+For more installation guides, please check out [play.etcd.io](http://play.etcd.io) and [operating etcd](https://github.com/etcd-io/etcd/tree/master/Documentation#operating-etcd-clusters).
@@ -60 +56 @@ For those wanting to try the very latest version, [build the latest version of e
-[github-release]: https://github.com/coreos/etcd/releases
+[github-release]: https://github.com/etcd-io/etcd/releases
@@ -70 +66 @@ If etcd is installed using the [pre-built release binaries][github-release], run
-```sh
+```bash
@@ -76 +72 @@ The etcd command can be simply run as such if it is moved to the system path as
-```sh
+```bash
@@ -83 +79 @@ If etcd is [built from the master branch][dl-build], run it as below:
-```sh
+```bash
@@ -113 +109 @@ Our [Procfile script](./Procfile) will set up a local example cluster. Start it
-```sh
+```bash
@@ -121,4 +116,0 @@ Every cluster member and proxy accepts key value reads and key value writes.
-### Running etcd on Kubernetes
-
-To run an etcd cluster on Kubernetes, try [etcd operator](https://github.com/coreos/etcd-operator).
-
@@ -149,2 +141,2 @@ Now it's time to dig into the full etcd API and other guides.
-- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/milestones), [roadmap](./ROADMAP.md)
-- Bugs: [issues](https://github.com/coreos/etcd/issues)
+- Planning/Roadmap: [milestones](https://github.com/etcd-io/etcd/milestones), [roadmap](./ROADMAP.md)
+- Bugs: [issues](https://github.com/etcd-io/etcd/issues)
diff --git a/README.md b/README.md
index 7c6f3e030..42c1e18f5 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,5 @@
+
+
+**WARNING**: etcd will be transferred from https://github.com/coreos to https://github.com/etcd-io, on 5PM PST, Mon, August 27, 2018. See https://github.com/coreos/etcd/issues/9965 for detailed timeline.
+
+
diff --git a/README.md b/README.md
index 1e762b6a4..7c6f3e030 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@
-<img src="https://readthedocs.org/projects/etcd/badge/?version=latest&style=flat-square">
+[![Docs](https://readthedocs.org/projects/etcd/badge/?version=latest&style=flat-square)](https://etcd.readthedocs.io/en/latest/?badge=latest)
diff --git a/README.md b/README.md
index 1d2d92914..1e762b6a4 100644
--- a/README.md
+++ b/README.md
@@ -6,0 +7 @@
+<img src="https://readthedocs.org/projects/etcd/badge/?version=latest&style=flat-square">
diff --git a/README.md b/README.md
index ecdc9f64b..1d2d92914 100644
--- a/README.md
+++ b/README.md
@@ -66,0 +67 @@ If etcd is installed using the [pre-built release binaries][github-release], run
+
@@ -74 +75 @@ etcd
-If etcd is [build from the master branch][dl-build], run it as below:
+If etcd is [built from the master branch][dl-build], run it as below:
diff --git a/README.md b/README.md
index 31627a5e2..ecdc9f64b 100644
--- a/README.md
+++ b/README.md
@@ -152,0 +153,6 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
+## Reporting a security vulnerability
+
+Due to their public nature, GitHub and mailing lists are NOT appropriate places for reporting vulnerabilities. Please refer to CoreOS's [security disclosure][disclosure] process when reporting issues that may be security related.
+
+[disclosure]: https://coreos.com/security/disclosure/
+
diff --git a/README.md b/README.md
index 849e3ded7..31627a5e2 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@
-![etcd Logo](logos/etcd-horizontal-color.png)
+![etcd Logo](logos/etcd-horizontal-color.svg)
diff --git a/README.md b/README.md
index abf6f9380..849e3ded7 100644
--- a/README.md
+++ b/README.md
@@ -42 +42 @@ etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacif
-[shared-meeting-notes]: https://docs.google.com/document/d/1DbVXOHvd9scFsSmL2oNg4YGOHJdXqtx583DmeVWrB_M/edit#
+[shared-meeting-notes]: https://docs.google.com/document/d/16XEGyPBisZvmmoIHSZzv__LoyOeluC5a4x353CX0SIM/edit
diff --git a/README.md b/README.md
index a9024f5bb..abf6f9380 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
-etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by rigorous [testing][etcd-tests].
+etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by [**rigorous testing**](https://github.com/coreos/etcd/tree/master/functional).
@@ -36 +35,0 @@ See [etcdctl][etcdctl] for a simple command line client.
-[etcd-tests]: http://dash.etcd.io
@@ -49 +48,3 @@ etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacif
-The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, [rkt][rkt], and Docker. Instructions for using these binaries are on the [GitHub releases page][github-release].
+The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, and Docker on the [release page][github-release].
+
+For more installation guides, please check out [play.etcd.io](http://play.etcd.io) and [operating etcd](https://github.com/coreos/etcd/tree/master/Documentation#operating-etcd-clusters).
@@ -53,2 +54 @@ For those wanting to try the very latest version, [build the latest version of e
-[rkt]: https://github.com/rkt/rkt/releases/
-[github-release]: https://github.com/coreos/etcd/releases/
+[github-release]: https://github.com/coreos/etcd/releases
@@ -71 +70,0 @@ mv /tmp/etcd-download-test/etcd /usr/local/bin/
-
@@ -90,4 +89 @@ ETCDCTL_API=3 etcdctl get mykey
-That's it! etcd is now running and serving client requests. For more
-
-- [Animated quick demo][demo-gif]
-- [Interactive etcd playground][etcd-play]
+etcd is now running and serving client requests. For more, please check out:
@@ -95,2 +91,2 @@ That's it! etcd is now running and serving client requests. For more
-[demo-gif]: ./Documentation/demo.md
-[etcd-play]: http://play.etcd.io/
+- [Interactive etcd playground](http://play.etcd.io)
+- [Animated quick demo](./Documentation/demo.md)
diff --git a/README.md b/README.md
index ef3437f03..a9024f5bb 100644
--- a/README.md
+++ b/README.md
@@ -40 +40 @@ See [etcdctl][etcdctl] for a simple command line client.
-etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays. There is an [iCalendar][rfc5545] format for the meetings [here](meeting.ics). Anyone is welcome to join via [BlueJeans][bluejeans] or audio-only: +1 669 900 6833. An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
+etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays. Anyone is welcome to join via [BlueJeans][bluejeans]. An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
@@ -42 +41,0 @@ etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacif
-[rfc5545]: https://tools.ietf.org/html/rfc5545
diff --git a/README.md b/README.md
index ca19a0381..ef3437f03 100644
--- a/README.md
+++ b/README.md
@@ -40 +40 @@ See [etcdctl][etcdctl] for a simple command line client.
-etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays. There is an [iCalendar][rfc5545] format for the meetings [here](meeting.ics). Anyone is welcome to join via [Zoom][zoom] or audio-only: +1 669 900 6833. An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
+etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays. There is an [iCalendar][rfc5545] format for the meetings [here](meeting.ics). Anyone is welcome to join via [BlueJeans][bluejeans] or audio-only: +1 669 900 6833. An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
@@ -43 +43 @@ etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacif
-[zoom]: https://coreos.zoom.us/j/854793406
+[bluejeans]: https://bluejeans.com/2732309610
diff --git a/README.md b/README.md
index 6efb73712..ca19a0381 100644
--- a/README.md
+++ b/README.md
@@ -52 +52 @@ The easiest way to get etcd is to use one of the pre-built release binaries whic
-For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.9+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.10+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
diff --git a/README.md b/README.md
index a3e4bfa4e..6efb73712 100644
--- a/README.md
+++ b/README.md
@@ -71 +71 @@ The etcd command can be simply run as such if it is moved to the system path as
-mv /tmp/etcd-download-test/etcd /usr/locale/bin/
+mv /tmp/etcd-download-test/etcd /usr/local/bin/
diff --git a/README.md b/README.md
index 2b559014e..a3e4bfa4e 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
-etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by rigorous [testing][etcd-tests].
+etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by rigorous [testing][etcd-tests].
@@ -33 +32,0 @@ See [etcdctl][etcdctl] for a simple command line client.
-[fleet]: https://github.com/coreos/fleet
diff --git a/README.md b/README.md
index 6a3bcab7e..2b559014e 100644
--- a/README.md
+++ b/README.md
@@ -38,0 +39,8 @@ See [etcdctl][etcdctl] for a simple command line client.
+## Community meetings
+
+etcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays. There is an [iCalendar][rfc5545] format for the meetings [here](meeting.ics). Anyone is welcome to join via [Zoom][zoom] or audio-only: +1 669 900 6833. An initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.
+
+[rfc5545]: https://tools.ietf.org/html/rfc5545
+[zoom]: https://coreos.zoom.us/j/854793406
+[shared-meeting-notes]: https://docs.google.com/document/d/1DbVXOHvd9scFsSmL2oNg4YGOHJdXqtx583DmeVWrB_M/edit#
+
diff --git a/README.md b/README.md
index 473b7d3f0..6a3bcab7e 100644
--- a/README.md
+++ b/README.md
@@ -54 +54,16 @@ For those wanting to try the very latest version, [build the latest version of e
-First start a single-member cluster of etcd:
+First start a single-member cluster of etcd.
+
+If etcd is installed using the [pre-built release binaries][github-release], run it from the installation location as below:
+
+```sh
+/tmp/etcd-download-test/etcd
+```
+The etcd command can be simply run as such if it is moved to the system path as below:
+
+```sh
+mv /tmp/etcd-download-test/etcd /usr/locale/bin/
+
+etcd
+```
+
+If etcd is [build from the master branch][dl-build], run it as below:
diff --git a/README.md b/README.md
index 7f8cf08d0..473b7d3f0 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![Go Report Card](https://goreportcard.com/badge/github.com/coreos/etcd)](https://goreportcard.com/report/github.com/coreos/etcd)
+[![Go Report Card](https://goreportcard.com/badge/github.com/coreos/etcd?style=flat-square)](https://goreportcard.com/report/github.com/coreos/etcd)
@@ -5,3 +5,5 @@
-[![Build Status](https://travis-ci.org/coreos/etcd.svg?branch=master)](https://travis-ci.org/coreos/etcd)
-[![Build Status](https://semaphoreci.com/api/v1/coreos/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/coreos/etcd)
-[![Docker Repository on Quay.io](https://quay.io/repository/coreos/etcd-git/status "Docker Repository on Quay.io")](https://quay.io/repository/coreos/etcd-git)
+[![Build Status Travis](https://img.shields.io/travis/coreos/etcdlabs.svg?style=flat-square&&branch=master)](https://travis-ci.org/coreos/etcd)
+[![Build Status Semaphore](https://semaphoreci.com/api/v1/coreos/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/coreos/etcd)
+[![Godoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/coreos/etcd)
+[![Releases](https://img.shields.io/github/release/coreos/etcd/all.svg?style=flat-square)](https://github.com/coreos/etcd/releases)
+[![LICENSE](https://img.shields.io/github/license/coreos/etcd.svg?style=flat-square)](https://github.com/coreos/etcd/blob/master/LICENSE)
diff --git a/README.md b/README.md
index b807a74bd..7f8cf08d0 100644
--- a/README.md
+++ b/README.md
@@ -91 +91 @@ goreman start
-This will bring up 3 etcd members `infra1`, `infra2` and `infra3` and etcd proxy `proxy`, which runs locally and composes a cluster.
+This will bring up 3 etcd members `infra1`, `infra2` and `infra3` and etcd `grpc-proxy`, which runs locally and composes a cluster.
diff --git a/README.md b/README.md
index 55ee92bd7..b807a74bd 100644
--- a/README.md
+++ b/README.md
@@ -43 +43 @@ The easiest way to get etcd is to use one of the pre-built release binaries whic
-For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.8+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.9+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
diff --git a/README.md b/README.md
index 8ab28492c..55ee92bd7 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Coverage](https://codecov.io/gh/coreos/etcd/branch/master/graph/badge.svg)](https://codecov.io/gh/coreos/etcd)
diff --git a/README.md b/README.md
index b6ce1ff9e..8ab28492c 100644
--- a/README.md
+++ b/README.md
@@ -44 +44 @@ For those wanting to try the very latest version, [build the latest version of e
-[rkt]: https://github.com/coreos/rkt/releases/
+[rkt]: https://github.com/rkt/rkt/releases/
@@ -78 +78 @@ The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for
-[iana-ports]: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=etcd
+[iana-ports]: http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
@@ -136,2 +135,0 @@ etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for detail
-
-
diff --git a/README.md b/README.md
index 4a0b41b24..b6ce1ff9e 100644
--- a/README.md
+++ b/README.md
@@ -14 +14 @@
-etcd is a distributed, consistent key-value store for shared configuration and service discovery, with a focus on being:
+etcd is a distributed reliable key-value store for the most critical data of a distributed system, with a focus on being:
@@ -44 +44 @@ For those wanting to try the very latest version, [build the latest version of e
-[rkt]: https://github.com/rkt/rkt/releases/
+[rkt]: https://github.com/coreos/rkt/releases/
@@ -78 +78 @@ The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for
-[iana-ports]: http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
+[iana-ports]: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=etcd
@@ -135,0 +136,2 @@ etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for detail
+
+
diff --git a/README.md b/README.md
index 24467d06d..4a0b41b24 100644
--- a/README.md
+++ b/README.md
@@ -78 +78 @@ The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for
-[iana-ports]: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=etcd
+[iana-ports]: http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
@@ -136,2 +135,0 @@ etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for detail
-
-
diff --git a/README.md b/README.md
index 8a4982403..24467d06d 100644
--- a/README.md
+++ b/README.md
@@ -44 +44 @@ For those wanting to try the very latest version, [build the latest version of e
-[rkt]: https://github.com/coreos/rkt/releases/
+[rkt]: https://github.com/rkt/rkt/releases/
diff --git a/README.md b/README.md
index e042337ae..8a4982403 100644
--- a/README.md
+++ b/README.md
@@ -42 +42 @@ The easiest way to get etcd is to use one of the pre-built release binaries whic
-For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.7+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.8+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
@@ -76 +76 @@ That's it! etcd is now running and serving client requests. For more
-The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication. 
+The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication.
diff --git a/README.md b/README.md
index e04307368..e042337ae 100644
--- a/README.md
+++ b/README.md
@@ -42,4 +42 @@ The easiest way to get etcd is to use one of the pre-built release binaries whic
-For those wanting to try the very latest version, you can [build the latest version of etcd][dl-build] from the `master` branch.
-You will first need [*Go*](https://golang.org/) installed on your machine (version 1.7+ is required).
-All development occurs on `master`, including new features and bug fixes.
-Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
+For those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.7+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
@@ -99 +96 @@ Every cluster member and proxy accepts key value reads and key value writes.
-If you want to run etcd cluster on Kubernetes, try [etcd operator](https://github.com/coreos/etcd-operator).
+To run an etcd cluster on Kubernetes, try [etcd operator](https://github.com/coreos/etcd-operator).
@@ -134 +131 @@ See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the co
-See [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issue you may encounter.
+See [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issues.
diff --git a/README.md b/README.md
index c8b4b7148..e04307368 100644
--- a/README.md
+++ b/README.md
@@ -109 +109 @@ Now it's time to dig into the full etcd API and other guides.
-- Find [language bindings and tools][libraries-and-tools].
+- Find [language bindings and tools][integrations].
@@ -117 +117 @@ Now it's time to dig into the full etcd API and other guides.
-[libraries-and-tools]: ./Documentation/libraries-and-tools.md
+[integrations]: ./Documentation/integrations.md
diff --git a/README.md b/README.md
index e7d4e2332..c8b4b7148 100644
--- a/README.md
+++ b/README.md
@@ -40 +40 @@ See [etcdctl][etcdctl] for a simple command line client.
-The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, AppC (ACI), and Docker. Instructions for using these binaries are on the [GitHub releases page][github-release].
+The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, [rkt][rkt], and Docker. Instructions for using these binaries are on the [GitHub releases page][github-release].
@@ -43 +43 @@ For those wanting to try the very latest version, you can [build the latest vers
-You will first need [*Go*](https://golang.org/) installed on your machine (version 1.6+ is required).
+You will first need [*Go*](https://golang.org/) installed on your machine (version 1.7+ is required).
@@ -46,0 +47 @@ Bug fixes are first targeted at `master` and subsequently ported to release bran
+[rkt]: https://github.com/coreos/rkt/releases/
diff --git a/README.md b/README.md
index 29915b127..e7d4e2332 100644
--- a/README.md
+++ b/README.md
@@ -95,0 +96,4 @@ Every cluster member and proxy accepts key value reads and key value writes.
+### Running etcd on Kubernetes
+
+If you want to run etcd cluster on Kubernetes, try [etcd operator](https://github.com/coreos/etcd-operator).
+
@@ -134,0 +139 @@ etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for detail
+
diff --git a/README.md b/README.md
index 30c16d9bf..29915b127 100644
--- a/README.md
+++ b/README.md
@@ -42 +42 @@ The easiest way to get etcd is to use one of the pre-built release binaries whic
-For those wanting to try the very latest version, you can build the latest version of etcd from the `master` branch.
+For those wanting to try the very latest version, you can [build the latest version of etcd][dl-build] from the `master` branch.
@@ -48,0 +49 @@ Bug fixes are first targeted at `master` and subsequently ported to release bran
+[dl-build]: ./Documentation/dl_build.md#build-the-latest-version
diff --git a/README.md b/README.md
index 1f59c4645..30c16d9bf 100644
--- a/README.md
+++ b/README.md
@@ -43 +43 @@ For those wanting to try the very latest version, you can build the latest versi
-You will first need [*Go*](https://golang.org/) installed on your machine (version 1.5+ is required).
+You will first need [*Go*](https://golang.org/) installed on your machine (version 1.6+ is required).
diff --git a/README.md b/README.md
index 5d5624556..1f59c4645 100644
--- a/README.md
+++ b/README.md
@@ -130,31 +129,0 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-## Project details
-
-### Versioning
-
-#### Service versioning
-
-etcd uses [semantic versioning](http://semver.org)
-New minor versions may add additional features to the API.
-
-Get the running etcd cluster version with `etcdctl`:
-
-```sh
-ETCDCTL_API=3 etcdctl --endpoints=127.0.0.1:2379 endpoint status
-```
-
-#### API versioning
-
-The `v3` API responses should not change after the 3.0.0 release but new features will be added over time.
-
-#### 32-bit and other unsupported systems
-
-etcd has known issues on 32-bit systems due to a bug in the Go runtime. See #[358][358] for more information.
-
-To avoid inadvertently running a possibly unstable etcd server, `etcd` on unsupported architectures will print
-a warning message and immediately exit if the environment variable `ETCD_UNSUPPORTED_ARCH` is not set to
-the target architecture.
-
-Currently only the amd64 architecture is officially supported by `etcd`.
-
-[358]: https://github.com/coreos/etcd/issues/358
-
@@ -163,0 +133 @@ etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for detail
+
diff --git a/README.md b/README.md
index ded78b56b..5d5624556 100644
--- a/README.md
+++ b/README.md
@@ -23 +23 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
-etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others.
+etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by rigorous [testing][etcd-tests].
@@ -33,0 +34 @@ See [etcdctl][etcdctl] for a simple command line client.
+[etcd-tests]: http://dash.etcd.io
@@ -66 +67,7 @@ ETCDCTL_API=3 etcdctl get mykey
-That's it! etcd is now running and serving client requests.
+That's it! etcd is now running and serving client requests. For more
+
+- [Animated quick demo][demo-gif]
+- [Interactive etcd playground][etcd-play]
+
+[demo-gif]: ./Documentation/demo.md
+[etcd-play]: http://play.etcd.io/
diff --git a/README.md b/README.md
index a4b2c919f..ded78b56b 100644
--- a/README.md
+++ b/README.md
@@ -66 +66 @@ ETCDCTL_API=3 etcdctl get mykey
-That's it-- etcd is running and serving keys.
+That's it! etcd is now running and serving client requests.
diff --git a/README.md b/README.md
index 0aed67576..a4b2c919f 100644
--- a/README.md
+++ b/README.md
@@ -18 +18 @@ etcd is a distributed, consistent key-value store for shared configuration and s
-* *Fast*: benchmarked 40,000 writes/sec per instance
+* *Fast*: benchmarked 10,000 writes/sec
diff --git a/README.md b/README.md
index 7eec0b336..0aed67576 100644
--- a/README.md
+++ b/README.md
@@ -18 +18 @@ etcd is a distributed, consistent key-value store for shared configuration and s
-* *Fast*: benchmarked 1000s of writes/s per instance
+* *Fast*: benchmarked 40,000 writes/sec per instance
@@ -23 +23 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
-etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], and many others.
+etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others.
@@ -28,0 +29 @@ See [etcdctl][etcdctl] for a simple command line client.
+[doorman]: https://github.com/youtube/doorman
diff --git a/README.md b/README.md
index b17c3a929..7eec0b336 100644
--- a/README.md
+++ b/README.md
@@ -102 +102 @@ Now it's time to dig into the full etcd API and other guides.
-[configuration]: op-guide/configuration.md
+[configuration]: ./Documentation/op-guide/configuration.md
diff --git a/README.md b/README.md
index d6fa8b10f..b17c3a929 100644
--- a/README.md
+++ b/README.md
@@ -17 +17 @@ etcd is a distributed, consistent key-value store for shared configuration and s
-* *Secure*: optional SSL client cert authentication
+* *Secure*: automatic TLS with optional client cert authentication
diff --git a/README.md b/README.md
index c56d0b62e..d6fa8b10f 100644
--- a/README.md
+++ b/README.md
@@ -145 +145 @@ etcd has known issues on 32-bit systems due to a bug in the Go runtime. See #[35
-To avoid inadvertantly running a possibly unstable etcd server, `etcd` on unsupported architectures will print
+To avoid inadvertently running a possibly unstable etcd server, `etcd` on unsupported architectures will print
diff --git a/README.md b/README.md
index 8829a0e0d..c56d0b62e 100644
--- a/README.md
+++ b/README.md
@@ -62 +62 @@ ETCDCTL_API=3 etcdctl put mykey "this is awesome"
-ETCDCTL_API=3 etcdctl put mykey
+ETCDCTL_API=3 etcdctl get mykey
diff --git a/README.md b/README.md
index bc33f1bf2..8829a0e0d 100644
--- a/README.md
+++ b/README.md
@@ -9,0 +10,2 @@
+*the etcd v2 [documentation](Documentation/v2/README.md) has moved*
+
@@ -14 +16 @@ etcd is a distributed, consistent key-value store for shared configuration and s
-* *Simple*: curl'able user-facing API (HTTP+JSON)
+* *Simple*: well-defined, user-facing API (gRPC)
@@ -24 +25,0 @@ See [etcdctl][etcdctl] for a simple command line client.
-Or feel free to just use `curl`, as in the examples below.
@@ -33 +34 @@ Or feel free to just use `curl`, as in the examples below.
-## Getting Started
+## Getting started
@@ -60,2 +61,2 @@ Next, let's set a single key, and then retrieve it:
-curl -L http://127.0.0.1:2379/v2/keys/mykey -XPUT -d value="this is awesome"
-curl -L http://127.0.0.1:2379/v2/keys/mykey
+ETCDCTL_API=3 etcdctl put mykey "this is awesome"
+ETCDCTL_API=3 etcdctl put mykey
@@ -64 +65 @@ curl -L http://127.0.0.1:2379/v2/keys/mykey
-You have successfully started an etcd and written a key to the store.
+That's it-- etcd is running and serving keys.
@@ -68 +69 @@ You have successfully started an etcd and written a key to the store.
-The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication. To maintain compatibility, some etcd configuration and documentation continues to refer to the legacy ports 4001 and 7001, but all new etcd use and discussion should adopt the IANA-assigned ports. The legacy ports 4001 and 7001 will be fully deprecated, and support for their use removed, in future etcd releases.
+The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication. 
@@ -72 +73 @@ The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for
-### Running local etcd cluster
+### Running a local etcd cluster
@@ -76 +77 @@ First install [goreman](https://github.com/mattn/goreman), which manages Procfil
-Our [Procfile script](./Procfile) will set up a local example cluster. You can start it with:
+Our [Procfile script](./Procfile) will set up a local example cluster. Start it with:
@@ -84 +85 @@ This will bring up 3 etcd members `infra1`, `infra2` and `infra3` and etcd proxy
-You can write a key to the cluster and retrieve the value back from any member or proxy.
+Every cluster member and proxy accepts key value reads and key value writes.
@@ -86 +87 @@ You can write a key to the cluster and retrieve the value back from any member o
-### Next Steps
+### Next steps
@@ -90 +91,2 @@ Now it's time to dig into the full etcd API and other guides.
-- Explore the full [API][api].
+- Read the full [documentation][fulldoc].
+- Explore the full gRPC [API][api].
@@ -96 +97,0 @@ Now it's time to dig into the full etcd API and other guides.
-- [Upgrade from 0.4.9+ to 2.2.0][upgrade].
@@ -98,3 +99,4 @@ Now it's time to dig into the full etcd API and other guides.
-[api]: ./Documentation/api.md
-[clustering]: ./Documentation/clustering.md
-[configuration]: ./Documentation/configuration.md
+[fulldoc]: ./Documentation/docs.md
+[api]: ./Documentation/dev-guide/api_reference_v3.md
+[clustering]: ./Documentation/op-guide/clustering.md
+[configuration]: op-guide/configuration.md
@@ -102 +104 @@ Now it's time to dig into the full etcd API and other guides.
-[security]: ./Documentation/security.md
+[security]: ./Documentation/op-guide/security.md
@@ -104 +105,0 @@ Now it's time to dig into the full etcd API and other guides.
-[upgrade]: ./Documentation/04_to_2_snapshot_migration.md
@@ -121 +122 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-## Project Details
+## Project details
@@ -125 +126 @@ See [reporting bugs](Documentation/reporting_bugs.md) for details about reportin
-#### Service Versioning
+#### Service versioning
@@ -130 +131 @@ New minor versions may add additional features to the API.
-You can get the version of etcd by issuing a request to /version:
+Get the running etcd cluster version with `etcdctl`:
@@ -133 +134 @@ You can get the version of etcd by issuing a request to /version:
-curl -L http://127.0.0.1:2379/version
+ETCDCTL_API=3 etcdctl --endpoints=127.0.0.1:2379 endpoint status
@@ -136 +137 @@ curl -L http://127.0.0.1:2379/version
-#### API Versioning
+#### API versioning
@@ -138 +139 @@ curl -L http://127.0.0.1:2379/version
-The `v2` API responses should not change after the 2.0.0 release but new features will be added over time.
+The `v3` API responses should not change after the 3.0.0 release but new features will be added over time.
diff --git a/README.md b/README.md
index 9ea7b355b..bc33f1bf2 100644
--- a/README.md
+++ b/README.md
@@ -140 +140 @@ The `v2` API responses should not change after the 2.0.0 release but new feature
-#### 32-bit systems
+#### 32-bit and other unsupported systems
@@ -144,2 +144,5 @@ etcd has known issues on 32-bit systems due to a bug in the Go runtime. See #[35
-To avoid inadvertantly producing an unstable etcd server, 32-bit builds emit an `etcd` that prints
-a warning message and immediately exits.
+To avoid inadvertantly running a possibly unstable etcd server, `etcd` on unsupported architectures will print
+a warning message and immediately exit if the environment variable `ETCD_UNSUPPORTED_ARCH` is not set to
+the target architecture.
+
+Currently only the amd64 architecture is officially supported by `etcd`.
diff --git a/README.md b/README.md
index 3c01677ca..9ea7b355b 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@
-[![Build Status](https://semaphoreci.com/api/v1/projects/406f9909-2f4f-4839-b59e-95082cb088f1/575109/badge.svg)](https://semaphoreci.com/coreos/etcd)
+[![Build Status](https://semaphoreci.com/api/v1/coreos/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/coreos/etcd)
diff --git a/README.md b/README.md
index a4b5911bd..3c01677ca 100644
--- a/README.md
+++ b/README.md
@@ -40 +40 @@ For those wanting to try the very latest version, you can build the latest versi
-You will first need [*Go*](https://golang.org/) installed on your machine (version 1.4+ is required).
+You will first need [*Go*](https://golang.org/) installed on your machine (version 1.5+ is required).
diff --git a/README.md b/README.md
index 6d844612a..a4b5911bd 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3 @@
+[![Go Report Card](https://goreportcard.com/badge/github.com/coreos/etcd)](https://goreportcard.com/report/github.com/coreos/etcd)
diff --git a/README.md b/README.md
index e37c73c0f..6d844612a 100644
--- a/README.md
+++ b/README.md
@@ -64,0 +65,6 @@ You have successfully started an etcd and written a key to the store.
+### etcd TCP ports
+
+The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication. To maintain compatibility, some etcd configuration and documentation continues to refer to the legacy ports 4001 and 7001, but all new etcd use and discussion should adopt the IANA-assigned ports. The legacy ports 4001 and 7001 will be fully deprecated, and support for their use removed, in future etcd releases.
+
+[iana-ports]: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=etcd
+
diff --git a/README.md b/README.md
index 4be075bd8..e37c73c0f 100644
--- a/README.md
+++ b/README.md
@@ -65,6 +64,0 @@ You have successfully started an etcd and written a key to the store.
-### etcd TCP ports
-
-The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication. To maintain compatibility, some etcd configuration and documentation continues to refer to the legacy ports 4001 and 7001, but all new etcd use and discussion should adopt the IANA-assigned ports. The legacy ports 4001 and 7001 will be fully deprecated, and support for their use removed, in future etcd releases.
-
-[iana-ports]: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=etcd
-
@@ -142,0 +137,3 @@ etcd has known issues on 32-bit systems due to a bug in the Go runtime. See #[35
+To avoid inadvertantly producing an unstable etcd server, 32-bit builds emit an `etcd` that prints
+a warning message and immediately exits.
+
diff --git a/README.md b/README.md
index cd7bc5c33..4be075bd8 100644
--- a/README.md
+++ b/README.md
@@ -64,0 +65,6 @@ You have successfully started an etcd and written a key to the store.
+### etcd TCP ports
+
+The [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication. To maintain compatibility, some etcd configuration and documentation continues to refer to the legacy ports 4001 and 7001, but all new etcd use and discussion should adopt the IANA-assigned ports. The legacy ports 4001 and 7001 will be fully deprecated, and support for their use removed, in future etcd releases.
+
+[iana-ports]: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=etcd
+
diff --git a/README.md b/README.md
index f8eb43f09..cd7bc5c33 100644
--- a/README.md
+++ b/README.md
@@ -25 +25 @@ Or feel free to just use `curl`, as in the examples below.
-[raft]: http://raftconsensus.github.io/
+[raft]: https://raft.github.io/
diff --git a/README.md b/README.md
index 15eae3cbd..f8eb43f09 100644
--- a/README.md
+++ b/README.md
@@ -20 +20 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
-etcd is used in production by many companies, and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], and many others.
+etcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], and many others.
diff --git a/README.md b/README.md
index 403ce6761..15eae3cbd 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@
-**Note**: `master` branch may be in *unstable or even broken state* during development. Please use [releases][github-release] instead of `master` branch to get stable binaries.
+**Note**: The `master` branch may be in an *unstable or even broken state* during development. Please use [releases][github-release] instead of the `master` branch in order to get stable binaries.
@@ -13 +13 @@ etcd is a distributed, consistent key-value store for shared configuration and s
-* *Simple*: curl'able user facing API (HTTP+JSON)
+* *Simple*: curl'able user-facing API (HTTP+JSON)
@@ -19,0 +20,2 @@ etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a
+etcd is used in production by many companies, and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [fleet][fleet], [locksmith][locksmith], [vulcand][vulcand], and many others.
+
@@ -21 +23 @@ See [etcdctl][etcdctl] for a simple command line client.
-Or feel free to just use curl, as in the examples below.
+Or feel free to just use `curl`, as in the examples below.
@@ -23,0 +26,4 @@ Or feel free to just use curl, as in the examples below.
+[k8s]: http://kubernetes.io/
+[fleet]: https://github.com/coreos/fleet
+[locksmith]: https://github.com/coreos/locksmith
+[vulcand]: https://github.com/vulcand/vulcand
@@ -26,2 +31,0 @@ Or feel free to just use curl, as in the examples below.
-If you're considering etcd for production use, please see: [production-ready.md](./Documentation/production-ready.md)
-
diff --git a/README.md b/README.md
index 9efb55fdd..403ce6761 100644
--- a/README.md
+++ b/README.md
@@ -32 +32 @@ If you're considering etcd for production use, please see: [production-ready.md]
-The easiest way to get etcd is to use a pre-built release binary which are available for OSX, Linux, Windows, AppC Images (ACI), and Docker. Instructions are available on the [GitHub releases page][github-release].
+The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, AppC (ACI), and Docker. Instructions for using these binaries are on the [GitHub releases page][github-release].
diff --git a/README.md b/README.md
index 8fe1a0b31..9efb55fdd 100644
--- a/README.md
+++ b/README.md
@@ -32 +32 @@ If you're considering etcd for production use, please see: [production-ready.md]
-The easiest way to get etcd is to install one of the pre-built binaries from the tagged releases: instructions are available on [GitHub][github-release].
+The easiest way to get etcd is to use a pre-built release binary which are available for OSX, Linux, Windows, AppC Images (ACI), and Docker. Instructions are available on the [GitHub releases page][github-release].
diff --git a/README.md b/README.md
index 9f4d14d2d..8fe1a0b31 100644
--- a/README.md
+++ b/README.md
@@ -108 +108 @@ See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the co
-See [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issue you may encounter..
+See [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issue you may encounter.
diff --git a/README.md b/README.md
index a67e7c4f3..9f4d14d2d 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Build Status](https://semaphoreci.com/api/v1/projects/406f9909-2f4f-4839-b59e-95082cb088f1/575109/badge.svg)](https://semaphoreci.com/coreos/etcd)
diff --git a/README.md b/README.md
index a7d1a0333..a67e7c4f3 100644
--- a/README.md
+++ b/README.md
@@ -33,0 +34 @@ For those wanting to try the very latest version, you can build the latest versi
+You will first need [*Go*](https://golang.org/) installed on your machine (version 1.4+ is required).
diff --git a/README.md b/README.md
index 5cee7be3a..a7d1a0333 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![Build Status](https://travis-ci.org/coreos/etcd.png?branch=master)](https://travis-ci.org/coreos/etcd)
+[![Build Status](https://travis-ci.org/coreos/etcd.svg?branch=master)](https://travis-ci.org/coreos/etcd)
diff --git a/README.md b/README.md
index b35d09c6b..5cee7be3a 100644
--- a/README.md
+++ b/README.md
@@ -5,0 +6,2 @@
+**Note**: `master` branch may be in *unstable or even broken state* during development. Please use [releases][github-release] instead of `master` branch to get stable binaries.
+
diff --git a/README.md b/README.md
index 39501f451..b35d09c6b 100644
--- a/README.md
+++ b/README.md
@@ -81 +81 @@ Now it's time to dig into the full etcd API and other guides.
-- [Upgrade from 0.4.6 to 2.0.0][upgrade].
+- [Upgrade from 0.4.9+ to 2.2.0][upgrade].
@@ -89 +89 @@ Now it's time to dig into the full etcd API and other guides.
-[upgrade]: ./tools/etcd-migrate/README.md
+[upgrade]: ./Documentation/04_to_2_snapshot_migration.md
diff --git a/README.md b/README.md
index a459b70d2..39501f451 100644
--- a/README.md
+++ b/README.md
@@ -101,0 +102,4 @@ See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the co
+## Reporting bugs
+
+See [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issue you may encounter..
+
diff --git a/README.md b/README.md
index 5c404f9b4..a459b70d2 100644
--- a/README.md
+++ b/README.md
@@ -95 +95 @@ Now it's time to dig into the full etcd API and other guides.
-- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/milestones)
+- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/milestones), [roadmap](./ROADMAP.md)
diff --git a/README.md b/README.md
index 402aa7585..5c404f9b4 100644
--- a/README.md
+++ b/README.md
@@ -94 +94 @@ Now it's time to dig into the full etcd API and other guides.
-- IRC: #[coreos](irc://irc.freenode.org:6667/#coreos) on freenode.org
+- IRC: #[etcd](irc://irc.freenode.org:6667/#etcd) on freenode.org
diff --git a/README.md b/README.md
index da1f6fa66..402aa7585 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@
-etcd is a distributed, consistent key value store for shared configuration and service discovery with a focus on being:
+etcd is a distributed, consistent key-value store for shared configuration and service discovery, with a focus on being:
@@ -20,2 +19,0 @@ Or feel free to just use curl, as in the examples below.
-[zookeeper]: http://zookeeper.apache.org/
-[doozer]: https://github.com/ha/doozerd
@@ -31 +29 @@ If you're considering etcd for production use, please see: [production-ready.md]
-The latest release and setup instructions are available at [GitHub][github-release].
+The easiest way to get etcd is to install one of the pre-built binaries from the tagged releases: instructions are available on [GitHub][github-release].
@@ -33,3 +31,3 @@ The latest release and setup instructions are available at [GitHub][github-relea
-You can build a latest etcd from master branch. All development occurs on the master branch which includes new features and bug fixes.
-
-Bug fixes should target the master branch and ported to the appropriate release branch as described in the [branch management](./Documentation/branch_management.md) guide.
+For those wanting to try the very latest version, you can build the latest version of etcd from the `master` branch.
+All development occurs on `master`, including new features and bug fixes.
+Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.
@@ -37,0 +36 @@ Bug fixes should target the master branch and ported to the appropriate release
+[branch-management]: ./Documentation/branch_management.md
diff --git a/README.md b/README.md
index 2f83c9878..da1f6fa66 100644
--- a/README.md
+++ b/README.md
@@ -90 +90 @@ Now it's time to dig into the full etcd API and other guides.
-[upgrade]: ./Documentation/0_4_migration_tool.md
+[upgrade]: ./tools/etcd-migrate/README.md
diff --git a/README.md b/README.md
index 6afdffc1a..2f83c9878 100644
--- a/README.md
+++ b/README.md
@@ -47 +47 @@ First start a single-member cluster of etcd:
-This will bring up etcd listening on port 4001 for client communication and on port 7001 for server-to-server communication.
+This will bring up etcd listening on port 2379 for client communication and on port 2380 for server-to-server communication.
@@ -52,2 +52,2 @@ Next, let's set a single key, and then retrieve it:
-curl -L http://127.0.0.1:4001/v2/keys/mykey -XPUT -d value="this is awesome"
-curl -L http://127.0.0.1:4001/v2/keys/mykey
+curl -L http://127.0.0.1:2379/v2/keys/mykey -XPUT -d value="this is awesome"
+curl -L http://127.0.0.1:2379/v2/keys/mykey
@@ -115 +115 @@ You can get the version of etcd by issuing a request to /version:
-curl -L http://127.0.0.1:4001/version
+curl -L http://127.0.0.1:2379/version
diff --git a/README.md b/README.md
index d9c3ff78e..6afdffc1a 100644
--- a/README.md
+++ b/README.md
@@ -62 +62 @@ First install [goreman](https://github.com/mattn/goreman), which manages Procfil
-Our [Profile script](./Procfile) will set up a local example cluster. You can start it with:
+Our [Procfile script](./Procfile) will set up a local example cluster. You can start it with:
diff --git a/README.md b/README.md
index 45d9bb316..d9c3ff78e 100644
--- a/README.md
+++ b/README.md
@@ -32,0 +33,4 @@ The latest release and setup instructions are available at [GitHub][github-relea
+You can build a latest etcd from master branch. All development occurs on the master branch which includes new features and bug fixes.
+
+Bug fixes should target the master branch and ported to the appropriate release branch as described in the [branch management](./Documentation/branch_management.md) guide.
+
diff --git a/README.md b/README.md
index efd295019..45d9bb316 100644
--- a/README.md
+++ b/README.md
@@ -8,2 +8 @@
-A highly-available key value store for shared configuration and service discovery.
-etcd is inspired by [Apache ZooKeeper][zookeeper] and [doozer][doozer], with a focus on being:
+etcd is a distributed, consistent key value store for shared configuration and service discovery with a focus on being:
diff --git a/README.md b/README.md
index ceb68ed46..efd295019 100644
--- a/README.md
+++ b/README.md
@@ -6,5 +5,0 @@
-### Release Candidate Disclaimer ###
-
-The current `master` branch of etcd is tracking the forthcoming 2.0.0 release.
-We encourage users to work with the [latest release candidate](https://github.com/coreos/etcd/releases/tag/v2.0.0-rc.1), but those looking for a stable release should obtain the latest 0.4.x release, [0.4.6](https://github.com/coreos/etcd/releases/tag/v0.4.6).
-
@@ -122,3 +117 @@ curl -L http://127.0.0.1:4001/version
-The `v2` API responses should not change after the 0.2.0 release but new features will be added over time.
-
-The `v1` API has been deprecated and will not be supported. It will be removed in the 2.0.0 release.
+The `v2` API responses should not change after the 2.0.0 release but new features will be added over time.
diff --git a/README.md b/README.md
index 0ecbb2ef0..ceb68ed46 100644
--- a/README.md
+++ b/README.md
@@ -43 +43 @@ The latest release and setup instructions are available at [GitHub][github-relea
-First start a single-machine cluster of etcd:
+First start a single-member cluster of etcd:
@@ -58 +58,15 @@ curl -L http://127.0.0.1:4001/v2/keys/mykey
-You have successfully started an etcd on a single machine and written a key to the store. Now it's time to dig into the full etcd API and other guides.
+You have successfully started an etcd and written a key to the store.
+
+### Running local etcd cluster
+
+First install [goreman](https://github.com/mattn/goreman), which manages Procfile-based applications.
+
+Our [Profile script](./Procfile) will set up a local example cluster. You can start it with:
+
+```sh
+goreman start
+```
+
+This will bring up 3 etcd members `infra1`, `infra2` and `infra3` and etcd proxy `proxy`, which runs locally and composes a cluster.
+
+You can write a key to the cluster and retrieve the value back from any member or proxy.
@@ -61,0 +76,2 @@ You have successfully started an etcd on a single machine and written a key to t
+Now it's time to dig into the full etcd API and other guides.
+
diff --git a/README.md b/README.md
index fdfa31b07..0ecbb2ef0 100644
--- a/README.md
+++ b/README.md
@@ -70,7 +70,7 @@ You have successfully started an etcd on a single machine and written a key to t
-[api]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
-[clustering]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
-[configuration]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
-[libraries-and-tools]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
-[security]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
-[tuning]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
-[upgrade]: https://github.com/coreos/etcd/blob/master/Documentation/0_4_migration_tool.md
+[api]: ./Documentation/api.md
+[clustering]: ./Documentation/clustering.md
+[configuration]: ./Documentation/configuration.md
+[libraries-and-tools]: ./Documentation/libraries-and-tools.md
+[security]: ./Documentation/security.md
+[tuning]: ./Documentation/tuning.md
+[upgrade]: ./Documentation/0_4_migration_tool.md
diff --git a/README.md b/README.md
index 1a96c5333..fdfa31b07 100644
--- a/README.md
+++ b/README.md
@@ -11,3 +10,0 @@ We encourage users to work with the [latest release candidate](https://github.co
-Unless otherwise noted, the etcd documentation below and in [`Documentation/`](Documentation) refers to configuring and running 0.4.x releases.
-Documentation related to the 2.0.0 release candidates can be found in the [`Documentation/2.0`](Documentation/2.0) directory.
-
@@ -16,2 +12,0 @@ Documentation related to the 2.0.0 release candidates can be found in the [`Docu
-## README version 0.4.6
-
@@ -71 +65,0 @@ You have successfully started an etcd on a single machine and written a key to t
-- Learn about the dashboard, lock and leader election [modules][modules].
@@ -74 +68 @@ You have successfully started an etcd on a single machine and written a key to t
-- [Upgrade from old version][upgrade].
+- [Upgrade from 0.4.6 to 2.0.0][upgrade].
@@ -80 +73,0 @@ You have successfully started an etcd on a single machine and written a key to t
-[modules]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
@@ -83 +76 @@ You have successfully started an etcd on a single machine and written a key to t
-[upgrade]: https://github.com/coreos/etcd/blob/master/Documentation/upgrade.md
+[upgrade]: https://github.com/coreos/etcd/blob/master/Documentation/0_4_migration_tool.md
diff --git a/README.md b/README.md
index 8c40fb5b2..1a96c5333 100644
--- a/README.md
+++ b/README.md
@@ -12 +12 @@ Unless otherwise noted, the etcd documentation below and in [`Documentation/`](D
-Documentation related to the 2.0.0 release candidates can be found in the [`Documentation/2.0`](Documentation/) directory.
+Documentation related to the 2.0.0 release candidates can be found in the [`Documentation/2.0`](Documentation/2.0) directory.
diff --git a/README.md b/README.md
index 75b241840..8c40fb5b2 100644
--- a/README.md
+++ b/README.md
@@ -34 +34 @@ Or feel free to just use curl, as in the examples below.
-[etcdctl]: http://github.com/coreos/etcdctl/
+[etcdctl]: https://github.com/coreos/etcd/tree/master/etcdctl
diff --git a/README.md b/README.md
index d8faf1b79..75b241840 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@
-### Release Candidate Warning ###
+### Release Candidate Disclaimer ###
@@ -8 +8,2 @@
-The current `master` branch of etcd is under development in anticipation of the forthcoming 2.0.0 release.
+The current `master` branch of etcd is tracking the forthcoming 2.0.0 release.
+We encourage users to work with the [latest release candidate](https://github.com/coreos/etcd/releases/tag/v2.0.0-rc.1), but those looking for a stable release should obtain the latest 0.4.x release, [0.4.6](https://github.com/coreos/etcd/releases/tag/v0.4.6).
@@ -10,4 +11,2 @@ The current `master` branch of etcd is under development in anticipation of the
-It is strongly recommended that users work with the latest 0.4.x release (0.4.6), which can be found on the [releases](https://github.com/coreos/etcd/releases) page.
-
-Unless otherwise noted, the etcd documentation refers to configuring and running 0.4.x releases.
-Documentation related to the 2.0.0 release candidates can be found in the `Documentation/2.0` directory.
+Unless otherwise noted, the etcd documentation below and in [`Documentation/`](Documentation) refers to configuring and running 0.4.x releases.
+Documentation related to the 2.0.0 release candidates can be found in the [`Documentation/2.0`](Documentation/) directory.
@@ -116,3 +115 @@ The `v2` API responses should not change after the 0.2.0 release but new feature
-The `v1` API has been deprecated and will not be supported.
-
-During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
+The `v1` API has been deprecated and will not be supported. It will be removed in the 2.0.0 release.
diff --git a/README.md b/README.md
index bef3c7df5..d8faf1b79 100644
--- a/README.md
+++ b/README.md
@@ -14,0 +15,2 @@ Documentation related to the 2.0.0 release candidates can be found in the `Docum
+![etcd Logo](logos/etcd-horizontal-color.png)
+
diff --git a/README.md b/README.md
index 8fdb13844..bef3c7df5 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@
-### WARNING ###
+### Release Candidate Warning ###
@@ -8 +8 @@
-The current `master` branch of etcd is under heavy development in anticipation of the forthcoming 0.5.0 release. 
+The current `master` branch of etcd is under development in anticipation of the forthcoming 2.0.0 release.
@@ -12,0 +13 @@ Unless otherwise noted, the etcd documentation refers to configuring and running
+Documentation related to the 2.0.0 release candidates can be found in the `Documentation/2.0` directory.
diff --git a/README.md b/README.md
index 2c7f9b659..8fdb13844 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4 @@
+[![Docker Repository on Quay.io](https://quay.io/repository/coreos/etcd-git/status "Docker Repository on Quay.io")](https://quay.io/repository/coreos/etcd-git)
diff --git a/README.md b/README.md
index 69ac01626..2c7f9b659 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,2 @@
+[![Build Status](https://travis-ci.org/coreos/etcd.png?branch=master)](https://travis-ci.org/coreos/etcd)
+
diff --git a/README.md b/README.md
index d4ff8efad..69ac01626 100644
--- a/README.md
+++ b/README.md
@@ -116 +116,3 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
-etcd has known issues on 32-bit systems.
+etcd has known issues on 32-bit systems due to a bug in the Go runtime. See #[358][358] for more information.
+
+[358]: https://github.com/coreos/etcd/issues/358
diff --git a/README.md b/README.md
index 48f46756f..d4ff8efad 100644
--- a/README.md
+++ b/README.md
@@ -41,16 +41 @@ The latest release and setup instructions are available at [GitHub][github-relea
-
-### Building
-
-You can build etcd using the standard go workflow - ensure `GOPATH` is set appropriately, and then:
-
-```sh
-go get github.com/coreos/etcd
-```
-
-which will generate a binary at `$GOPATH/bin/etcd`
-
-_NOTE_: etcd requires go 1.2+. Please check your installation with
-
-```
-go version
-```
+### Running etcd
diff --git a/README.md b/README.md
index 1e926f0b3..48f46756f 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-## WARNING ##
+### WARNING ###
diff --git a/README.md b/README.md
index 3824fba2b..1e926f0b3 100644
--- a/README.md
+++ b/README.md
@@ -3 +3,9 @@
-README version 0.4.6
+## WARNING ##
+
+The current `master` branch of etcd is under heavy development in anticipation of the forthcoming 0.5.0 release. 
+
+It is strongly recommended that users work with the latest 0.4.x release (0.4.6), which can be found on the [releases](https://github.com/coreos/etcd/releases) page.
+
+Unless otherwise noted, the etcd documentation refers to configuring and running 0.4.x releases.
+
+## README version 0.4.6
@@ -50,6 +57,0 @@ go version
-See the [development tools documentation][development-tools] for alternative build methods like using Vagrant.
-
-[development-tools]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
-
-### Running
-
@@ -127 +129 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
-#### 32bit systems
+#### 32-bit systems
@@ -129 +131 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
-etcd has known issues on 32bit systems. We plan to address these issues after the 0.4 release.
+etcd has known issues on 32-bit systems.
diff --git a/README.md b/README.md
index c95baf31e..3824fba2b 100644
--- a/README.md
+++ b/README.md
@@ -36 +36 @@ The latest release and setup instructions are available at [GitHub][github-relea
-You can build etcd from source:
+You can build etcd using the standard go workflow - ensure `GOPATH` is set appropriately, and then:
@@ -39,3 +39 @@ You can build etcd from source:
-git clone https://github.com/coreos/etcd
-cd etcd
-./build
+go get github.com/coreos/etcd
@@ -44 +42 @@ cd etcd
-This will generate a binary called `./bin/etcd`.
+which will generate a binary at `$GOPATH/bin/etcd`
@@ -46 +44 @@ This will generate a binary called `./bin/etcd`.
-_NOTE_: you need go 1.2+. Please check your installation with
+_NOTE_: etcd requires go 1.2+. Please check your installation with
diff --git a/README.md b/README.md
index f686518d1..c95baf31e 100644
--- a/README.md
+++ b/README.md
@@ -36,10 +36 @@ The latest release and setup instructions are available at [GitHub][github-relea
-You can build etcd using the standard go workflow:
-
-```sh
-export GOPATH=/path/to/gopath
-go get github.com/coreos/etcd
-```
-
-which will generate a binary at `$GOPATH/bin/etcd`
-
-Or build from source using the provided `build` script, which generates a binary at `./bin/etcd`:
+You can build etcd from source:
@@ -53 +44,3 @@ cd etcd
-_NOTE_: etcd requires go 1.2+. Please check your installation with
+This will generate a binary called `./bin/etcd`.
+
+_NOTE_: you need go 1.2+. Please check your installation with
diff --git a/README.md b/README.md
index c95baf31e..f686518d1 100644
--- a/README.md
+++ b/README.md
@@ -36 +36,10 @@ The latest release and setup instructions are available at [GitHub][github-relea
-You can build etcd from source:
+You can build etcd using the standard go workflow:
+
+```sh
+export GOPATH=/path/to/gopath
+go get github.com/coreos/etcd
+```
+
+which will generate a binary at `$GOPATH/bin/etcd`
+
+Or build from source using the provided `build` script, which generates a binary at `./bin/etcd`:
@@ -44,3 +53 @@ cd etcd
-This will generate a binary called `./bin/etcd`.
-
-_NOTE_: you need go 1.2+. Please check your installation with
+_NOTE_: etcd requires go 1.2+. Please check your installation with
diff --git a/README.md b/README.md
index 99c5adbba..c95baf31e 100644
--- a/README.md
+++ b/README.md
@@ -123,2 +122,0 @@ curl -L http://127.0.0.1:4001/version
-Clients are encouraged to use the `v2` API. The `v1` API will not change.
-
@@ -126,0 +125,2 @@ The `v2` API responses should not change after the 0.2.0 release but new feature
+The `v1` API has been deprecated and will not be supported.
+
diff --git a/README.md b/README.md
index e0bd27e15..99c5adbba 100644
--- a/README.md
+++ b/README.md
@@ -99 +99 @@ You have successfully started an etcd on a single machine and written a key to t
-- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/issues/milestones)
+- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/milestones)
diff --git a/README.md b/README.md
index 215700f88..e0bd27e15 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.4.5
+README version 0.4.6
diff --git a/README.md b/README.md
index 5b0446402..215700f88 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.4.4
+README version 0.4.5
diff --git a/README.md b/README.md
index 2498991fb..5b0446402 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.4.3
+README version 0.4.4
diff --git a/README.md b/README.md
index 314eaa314..2498991fb 100644
--- a/README.md
+++ b/README.md
@@ -98 +98 @@ You have successfully started an etcd on a single machine and written a key to t
-- IRC: #[coreos](irc://irc.freenode.org:6667/#coreos) oon freenode.org
+- IRC: #[coreos](irc://irc.freenode.org:6667/#coreos) on freenode.org
diff --git a/README.md b/README.md
index 779cdc9f3..314eaa314 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.4.2
+README version 0.4.3
diff --git a/README.md b/README.md
index e3d20773d..779cdc9f3 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.4.1
+README version 0.4.2
diff --git a/README.md b/README.md
index 3f433105a..e3d20773d 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.4.0
+README version 0.4.1
diff --git a/README.md b/README.md
index 9946304de..3f433105a 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.3.0
+README version 0.4.0
diff --git a/README.md b/README.md
index 16874732e..9946304de 100644
--- a/README.md
+++ b/README.md
@@ -128,0 +129,4 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
+#### 32bit systems
+
+etcd has known issues on 32bit systems. We plan to address these issues after the 0.4 release.
+
diff --git a/README.md b/README.md
index 05661d1f0..16874732e 100644
--- a/README.md
+++ b/README.md
@@ -83,0 +84 @@ You have successfully started an etcd on a single machine and written a key to t
+- [Upgrade from old version][upgrade].
@@ -91,0 +93 @@ You have successfully started an etcd on a single machine and written a key to t
+[upgrade]: https://github.com/coreos/etcd/blob/master/Documentation/upgrade.md
diff --git a/README.md b/README.md
index 3f08da39c..05661d1f0 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@ A highly-available key value store for shared configuration and service discover
-etcd is inspired by zookeeper and doozer, with a focus on:
+etcd is inspired by [Apache ZooKeeper][zookeeper] and [doozer][doozer], with a focus on being:
@@ -8,4 +8,4 @@ etcd is inspired by zookeeper and doozer, with a focus on:
-* Simple: curl'able user facing API (HTTP+JSON)
-* Secure: optional SSL client cert authentication
-* Fast: benchmarked 1000s of writes/s per instance
-* Reliable: Properly distributed using Raft
+* *Simple*: curl'able user facing API (HTTP+JSON)
+* *Secure*: optional SSL client cert authentication
+* *Fast*: benchmarked 1000s of writes/s per instance
+* *Reliable*: properly distributed using Raft
@@ -13 +13 @@ etcd is inspired by zookeeper and doozer, with a focus on:
-Etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
+etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
@@ -17,0 +18,2 @@ Or feel free to just use curl, as in the examples below.
+[zookeeper]: http://zookeeper.apache.org/
+[doozer]: https://github.com/ha/doozerd
@@ -27 +29 @@ If you're considering etcd for production use, please see: [production-ready.md]
-The latest release and setup instructions are available at [Github][github-release].
+The latest release and setup instructions are available at [GitHub][github-release].
@@ -50 +52 @@ go version
-See the [development tools documentation][development-tools.md] for alternative build methods like using Vagrant.
+See the [development tools documentation][development-tools] for alternative build methods like using Vagrant.
@@ -52 +54 @@ See the [development tools documentation][development-tools.md] for alternative
-[development-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
+[development-tools]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
@@ -56 +58 @@ See the [development tools documentation][development-tools.md] for alternative
-First start a single machine cluster of etcd:
+First start a single-machine cluster of etcd:
@@ -64 +66 @@ This will bring up etcd listening on port 4001 for client communication and on p
-Next lets set a single key and then retrieve it:
+Next, let's set a single key, and then retrieve it:
@@ -71 +73 @@ curl -L http://127.0.0.1:4001/v2/keys/mykey
-You have successfully started an etcd on a single machine and written a key to the store. Now it time to dig into the full etcd API and other guides.
+You have successfully started an etcd on a single machine and written a key to the store. Now it's time to dig into the full etcd API and other guides.
@@ -75,15 +77,15 @@ You have successfully started an etcd on a single machine and written a key to t
-- Explore the full [API][api.md].
-- Setup a [multi-machine cluster][clustering.md].
-- Learn the [config format, env variables and flags][configuration.md].
-- Find [language bindings and tools][libraries-and-tools.md].
-- Learn about the dashboard, lock and leader election [modules][modules.md].
-- Use TLS to [secure an etcd cluster][security.md].
-- [Tune etcd][tuning.md].
-
-[api.md]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
-[clustering.md]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
-[configuration.md]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
-[libraries-and-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
-[modules.md]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
-[security.md]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
-[tuning.md]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
+- Explore the full [API][api].
+- Set up a [multi-machine cluster][clustering].
+- Learn the [config format, env variables and flags][configuration].
+- Find [language bindings and tools][libraries-and-tools].
+- Learn about the dashboard, lock and leader election [modules][modules].
+- Use TLS to [secure an etcd cluster][security].
+- [Tune etcd][tuning].
+
+[api]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
+[clustering]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
+[configuration]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
+[libraries-and-tools]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
+[modules]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
+[security]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
+[tuning]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
@@ -93,4 +95,4 @@ You have successfully started an etcd on a single machine and written a key to t
-- Mailing list: http://coreos.com/lists/etcd-dev/
-- IRC: #coreos on irc.freenode.net
-- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
-- Bugs: https://github.com/coreos/etcd/issues
+- Mailing list: [etcd-dev](https://groups.google.com/forum/?hl=en#!forum/etcd-dev)
+- IRC: #[coreos](irc://irc.freenode.org:6667/#coreos) oon freenode.org
+- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/issues/milestones)
+- Bugs: [issues](https://github.com/coreos/etcd/issues)
@@ -100 +102 @@ You have successfully started an etcd on a single machine and written a key to t
-See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) for details on submitting patches and contacting developers via IRC and mailing lists.
+See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.
@@ -108 +110 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-etcd uses [semantic versioning][semver].
+etcd uses [semantic versioning](http://semver.org)
@@ -117,2 +118,0 @@ curl -L http://127.0.0.1:4001/version
-[semver]: http://semver.org/
-
@@ -129,3 +129 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
-etcd is under the Apache 2.0 license. See the [LICENSE][license] file for details.
-
-[license]: https://github.com/coreos/etcd/blob/master/LICENSE
+etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.
diff --git a/README.md b/README.md
index 51d434174..3f08da39c 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@ A highly-available key value store for shared configuration and service discover
-etcd is inspired by [Apache ZooKeeper][zookeeper] and [doozer][doozer], with a focus on being:
+etcd is inspired by zookeeper and doozer, with a focus on:
@@ -8,4 +8,4 @@ etcd is inspired by [Apache ZooKeeper][zookeeper] and [doozer][doozer], with a f
-* *Simple*: curl'able user facing API (HTTP+JSON)
-* *Secure*: optional SSL client cert authentication
-* *Fast*: benchmarked 1000s of writes/s per instance
-* *Reliable*: properly distributed using Raft
+* Simple: curl'able user facing API (HTTP+JSON)
+* Secure: optional SSL client cert authentication
+* Fast: benchmarked 1000s of writes/s per instance
+* Reliable: Properly distributed using Raft
@@ -13 +13 @@ etcd is inspired by [Apache ZooKeeper][zookeeper] and [doozer][doozer], with a f
-etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
+Etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
@@ -18,2 +17,0 @@ Or feel free to just use curl, as in the examples below.
-[zookeeper]: http://zookeeper.apache.org/
-[doozer]: https://github.com/ha/doozerd
@@ -22,0 +21,2 @@ Or feel free to just use curl, as in the examples below.
+If you're considering etcd for production use, please see: [production-ready.md](./Documentation/production-ready.md)
+
@@ -27 +27 @@ Or feel free to just use curl, as in the examples below.
-The latest release and setup instructions are available at [GitHub][github-release].
+The latest release and setup instructions are available at [Github][github-release].
@@ -50 +50 @@ go version
-See the [development tools documentation][development-tools] for alternative build methods like using Vagrant.
+See the [development tools documentation][development-tools.md] for alternative build methods like using Vagrant.
@@ -52 +52 @@ See the [development tools documentation][development-tools] for alternative bui
-[development-tools]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
+[development-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
@@ -56 +56 @@ See the [development tools documentation][development-tools] for alternative bui
-First start a single-machine cluster of etcd:
+First start a single machine cluster of etcd:
@@ -64 +64 @@ This will bring up etcd listening on port 4001 for client communication and on p
-Next, let's set a single key, and then retrieve it:
+Next lets set a single key and then retrieve it:
@@ -71 +71 @@ curl -L http://127.0.0.1:4001/v2/keys/mykey
-You have successfully started an etcd on a single machine and written a key to the store. Now it's time to dig into the full etcd API and other guides.
+You have successfully started an etcd on a single machine and written a key to the store. Now it time to dig into the full etcd API and other guides.
@@ -75,15 +75,15 @@ You have successfully started an etcd on a single machine and written a key to t
-- Explore the full [API][api].
-- Set up a [multi-machine cluster][clustering].
-- Learn the [config format, env variables and flags][configuration].
-- Find [language bindings and tools][libraries-and-tools].
-- Learn about the dashboard, lock and leader election [modules][modules].
-- Use TLS to [secure an etcd cluster][security].
-- [Tune etcd][tuning].
-
-[api]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
-[clustering]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
-[configuration]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
-[libraries-and-tools]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
-[modules]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
-[security]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
-[tuning]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
+- Explore the full [API][api.md].
+- Setup a [multi-machine cluster][clustering.md].
+- Learn the [config format, env variables and flags][configuration.md].
+- Find [language bindings and tools][libraries-and-tools.md].
+- Learn about the dashboard, lock and leader election [modules][modules.md].
+- Use TLS to [secure an etcd cluster][security.md].
+- [Tune etcd][tuning.md].
+
+[api.md]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
+[clustering.md]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
+[configuration.md]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
+[libraries-and-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
+[modules.md]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
+[security.md]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
+[tuning.md]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
@@ -93,4 +93,4 @@ You have successfully started an etcd on a single machine and written a key to t
-- Mailing list: [etcd-dev](https://groups.google.com/forum/?hl=en#!forum/etcd-dev)
-- IRC: #[coreos](irc://irc.freenode.org:6667/#coreos) oon freenode.org
-- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/issues/milestones)
-- Bugs: [issues](https://github.com/coreos/etcd/issues)
+- Mailing list: http://coreos.com/lists/etcd-dev/
+- IRC: #coreos on irc.freenode.net
+- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
+- Bugs: https://github.com/coreos/etcd/issues
@@ -100 +100 @@ You have successfully started an etcd on a single machine and written a key to t
-See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.
+See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) for details on submitting patches and contacting developers via IRC and mailing lists.
@@ -108 +108 @@ See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the co
-etcd uses [semantic versioning](http://semver.org)
+etcd uses [semantic versioning][semver].
@@ -116,0 +117,2 @@ curl -L http://127.0.0.1:4001/version
+[semver]: http://semver.org/
+
@@ -127 +129,3 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
-etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.
+etcd is under the Apache 2.0 license. See the [LICENSE][license] file for details.
+
+[license]: https://github.com/coreos/etcd/blob/master/LICENSE
diff --git a/README.md b/README.md
index 85050e1b3..51d434174 100644
--- a/README.md
+++ b/README.md
@@ -93 +93 @@ You have successfully started an etcd on a single machine and written a key to t
-- Mailing list: [etcd-dev](http://coreos.com/lists/etcd-dev/)
+- Mailing list: [etcd-dev](https://groups.google.com/forum/?hl=en#!forum/etcd-dev)
diff --git a/README.md b/README.md
index 56eba30b1..85050e1b3 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@ A highly-available key value store for shared configuration and service discover
-etcd is inspired by zookeeper and doozer, with a focus on:
+etcd is inspired by [Apache ZooKeeper][zookeeper] and [doozer][doozer], with a focus on being:
@@ -8,4 +8,4 @@ etcd is inspired by zookeeper and doozer, with a focus on:
-* Simple: curl'able user facing API (HTTP+JSON)
-* Secure: optional SSL client cert authentication
-* Fast: benchmarked 1000s of writes/s per instance
-* Reliable: Properly distributed using Raft
+* *Simple*: curl'able user facing API (HTTP+JSON)
+* *Secure*: optional SSL client cert authentication
+* *Fast*: benchmarked 1000s of writes/s per instance
+* *Reliable*: properly distributed using Raft
@@ -13 +13 @@ etcd is inspired by zookeeper and doozer, with a focus on:
-Etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
+etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
@@ -17,0 +18,2 @@ Or feel free to just use curl, as in the examples below.
+[zookeeper]: http://zookeeper.apache.org/
+[doozer]: https://github.com/ha/doozerd
@@ -25 +27 @@ Or feel free to just use curl, as in the examples below.
-The latest release and setup instructions are available at [Github][github-release].
+The latest release and setup instructions are available at [GitHub][github-release].
@@ -48 +50 @@ go version
-See the [development tools documentation][development-tools.md] for alternative build methods like using Vagrant.
+See the [development tools documentation][development-tools] for alternative build methods like using Vagrant.
@@ -50 +52 @@ See the [development tools documentation][development-tools.md] for alternative
-[development-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
+[development-tools]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
@@ -54 +56 @@ See the [development tools documentation][development-tools.md] for alternative
-First start a single machine cluster of etcd:
+First start a single-machine cluster of etcd:
@@ -62 +64 @@ This will bring up etcd listening on port 4001 for client communication and on p
-Next lets set a single key and then retrieve it:
+Next, let's set a single key, and then retrieve it:
@@ -69 +71 @@ curl -L http://127.0.0.1:4001/v2/keys/mykey
-You have successfully started an etcd on a single machine and written a key to the store. Now it time to dig into the full etcd API and other guides.
+You have successfully started an etcd on a single machine and written a key to the store. Now it's time to dig into the full etcd API and other guides.
@@ -73,15 +75,15 @@ You have successfully started an etcd on a single machine and written a key to t
-- Explore the full [API][api.md].
-- Setup a [multi-machine cluster][clustering.md].
-- Learn the [config format, env variables and flags][configuration.md].
-- Find [language bindings and tools][libraries-and-tools.md].
-- Learn about the dashboard, lock and leader election [modules][modules.md].
-- Use TLS to [secure an etcd cluster][security.md].
-- [Tune etcd][tuning.md].
-
-[api.md]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
-[clustering.md]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
-[configuration.md]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
-[libraries-and-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
-[modules.md]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
-[security.md]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
-[tuning.md]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
+- Explore the full [API][api].
+- Set up a [multi-machine cluster][clustering].
+- Learn the [config format, env variables and flags][configuration].
+- Find [language bindings and tools][libraries-and-tools].
+- Learn about the dashboard, lock and leader election [modules][modules].
+- Use TLS to [secure an etcd cluster][security].
+- [Tune etcd][tuning].
+
+[api]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
+[clustering]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
+[configuration]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
+[libraries-and-tools]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
+[modules]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
+[security]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
+[tuning]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
@@ -91,4 +93,4 @@ You have successfully started an etcd on a single machine and written a key to t
-- Mailing list: http://coreos.com/lists/etcd-dev/
-- IRC: #coreos on irc.freenode.net
-- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
-- Bugs: https://github.com/coreos/etcd/issues
+- Mailing list: [etcd-dev](http://coreos.com/lists/etcd-dev/)
+- IRC: #[coreos](irc://irc.freenode.org:6667/#coreos) oon freenode.org
+- Planning/Roadmap: [milestones](https://github.com/coreos/etcd/issues/milestones)
+- Bugs: [issues](https://github.com/coreos/etcd/issues)
@@ -98 +100 @@ You have successfully started an etcd on a single machine and written a key to t
-See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) for details on submitting patches and contacting developers via IRC and mailing lists.
+See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.
@@ -106 +108 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-etcd uses [semantic versioning][semver].
+etcd uses [semantic versioning](http://semver.org)
@@ -115,2 +116,0 @@ curl -L http://127.0.0.1:4001/version
-[semver]: http://semver.org/
-
@@ -127,3 +127 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
-etcd is under the Apache 2.0 license. See the [LICENSE][license] file for details.
-
-[license]: https://github.com/coreos/etcd/blob/master/LICENSE
+etcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.
diff --git a/README.md b/README.md
index b500720c2..56eba30b1 100644
--- a/README.md
+++ b/README.md
@@ -47,0 +48,4 @@ go version
+See the [development tools documentation][development-tools.md] for alternative build methods like using Vagrant.
+
+[development-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/development-tools.md
+
diff --git a/README.md b/README.md
index 4c0e9b0c5..b500720c2 100644
--- a/README.md
+++ b/README.md
@@ -5,2 +4,0 @@ README version 0.3.0
-[![Build Status](https://drone.io/github.com/coreos/etcd/status.png)](https://drone.io/github.com/coreos/etcd/latest)
-
diff --git a/README.md b/README.md
index 7897f712e..4c0e9b0c5 100644
--- a/README.md
+++ b/README.md
@@ -20 +20 @@ Or feel free to just use curl, as in the examples below.
-[raft]: https://github.com/coreos/go-raft
+[raft]: http://raftconsensus.github.io/
diff --git a/README.md b/README.md
index d4d8f1a37..7897f712e 100644
--- a/README.md
+++ b/README.md
@@ -23,8 +22,0 @@ Or feel free to just use curl, as in the examples below.
-## Contact
-
-- Mailing list: http://coreos.com/lists/etcd-dev/
-- IRC: #coreos on irc.freenode.net
-- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
-- Bugs: https://github.com/coreos/etcd/issues
-
-
@@ -94,0 +87,7 @@ You have successfully started an etcd on a single machine and written a key to t
+## Contact
+
+- Mailing list: http://coreos.com/lists/etcd-dev/
+- IRC: #coreos on irc.freenode.net
+- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
+- Bugs: https://github.com/coreos/etcd/issues
+
diff --git a/README.md b/README.md
index f0fc349c2..d4d8f1a37 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-README version 0.2.0
+README version 0.3.0
diff --git a/README.md b/README.md
index c38f00cd5..f0fc349c2 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@ README version 0.2.0
-[![Build Status](https://travis-ci.org/coreos/etcd.png)](https://travis-ci.org/coreos/etcd)
+[![Build Status](https://drone.io/github.com/coreos/etcd/status.png)](https://drone.io/github.com/coreos/etcd/latest)
diff --git a/README.md b/README.md
index 0d7840a48..c38f00cd5 100644
--- a/README.md
+++ b/README.md
@@ -52 +52 @@ This will generate a binary called `./bin/etcd`.
-_NOTE_: you need go 1.1+. Please check your installation with
+_NOTE_: you need go 1.2+. Please check your installation with
diff --git a/README.md b/README.md
index 6384ad8ab..0d7840a48 100644
--- a/README.md
+++ b/README.md
@@ -50 +50 @@ cd etcd
-This will generate a binary in the base directory called `./etcd`.
+This will generate a binary called `./bin/etcd`.
@@ -52 +52 @@ This will generate a binary in the base directory called `./etcd`.
-_NOTE_: you need go 1.2+. Please check your installation with
+_NOTE_: you need go 1.1+. Please check your installation with
@@ -63 +63 @@ First start a single machine cluster of etcd:
-./etcd
+./bin/etcd
diff --git a/README.md b/README.md
index 0e67f34e9..6384ad8ab 100644
--- a/README.md
+++ b/README.md
@@ -52 +52 @@ This will generate a binary in the base directory called `./etcd`.
-_NOTE_: you need go 1.1+. Please check your installation with
+_NOTE_: you need go 1.2+. Please check your installation with
diff --git a/README.md b/README.md
index 46e224f25..0e67f34e9 100644
--- a/README.md
+++ b/README.md
@@ -71,2 +71,2 @@ Next lets set a single key and then retrieve it:
-curl -L http://127.0.0.1:4002/v2/keys/mykey -XPUT -d value="this is awesome"
-curl -L http://127.0.0.1:4002/v2/keys/mykey
+curl -L http://127.0.0.1:4001/v2/keys/mykey -XPUT -d value="this is awesome"
+curl -L http://127.0.0.1:4001/v2/keys/mykey
diff --git a/README.md b/README.md
index 414a03e3c..46e224f25 100644
--- a/README.md
+++ b/README.md
@@ -80,0 +81 @@ You have successfully started an etcd on a single machine and written a key to t
+- Learn the [config format, env variables and flags][configuration.md].
@@ -87,0 +89 @@ You have successfully started an etcd on a single machine and written a key to t
+[configuration.md]: https://github.com/coreos/etcd/blob/master/Documentation/configuration.md
diff --git a/README.md b/README.md
index d7767b2c0..414a03e3c 100644
--- a/README.md
+++ b/README.md
@@ -57,0 +58 @@ go version
+### Running
@@ -59,4 +60 @@ go version
-### Running a single machine
-
-These examples will use a single machine cluster to show you the basics of the etcd REST API.
-Let's start etcd:
+First start a single machine cluster of etcd:
@@ -65 +63 @@ Let's start etcd:
-./etcd -data-dir machine0 -name machine0
+./etcd
@@ -69,155 +66,0 @@ This will bring up etcd listening on port 4001 for client communication and on p
-The `-data-dir machine0` argument tells etcd to write machine configuration, logs and snapshots to the `./machine0/` directory.
-The `-name machine` tells the rest of the cluster that this machine is named machine0.
-
-
-
-## Usage
-
-### Setting the value to a key
-
-Let’s set the first key-value pair to the datastore.
-In this case the key is `/message` and the value is `Hello world`.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/message -X PUT -d value="Hello world"
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 2,
-        "key": "/message",
-        "modifiedIndex": 2,
-        "value": "Hello world"
-    }
-}
-```
-
-The response object contains several attributes:
-
-1. `action`: the action of the request that was just made.
-The request attempted to modify `node.value` via a `PUT` HTTP request, thus the value of action is `set`.
-
-2. `node.key`: the HTTP path the to which the request was made.
-We set `/message` to `Hello world`, so the key field is `/message`.
-Etcd uses a file-system-like structure to represent the key-value pairs, therefore all keys start with `/`.
-
-3. `node.value`: the value of the key after resolving the request.
-In this case, a successful request was made that attempted to change the node's value to `Hello world`.
-
-4. `node.createdIndex`: an index is a unique, monotonically-incrementing integer created for each change to etcd.
-This specific index reflects at which point in the etcd state machine a given key was created.
-You may notice that in this example the index is `2` even though it is the first request you sent to the server.
-This is because there are internal commands that also change the state behind the scenes like adding and syncing servers.
-
-5. `node.modifiedIndex`: like `node.createdIndex`, this attribute is also an etcd index.
-Actions that cause the value to change include `set`, `delete`, `update`, `create` and `compareAndSwap`.
-Since the `get` and `watch` commands do not change state in the store, they do not change the value of `node.modifiedIndex`.
-
-
-### Response Headers
-
-etcd includes a few HTTP headers that provide global information about the etcd cluster that serviced a request:
-
-```
-X-Etcd-Index: 35
-X-Raft-Index: 5398
-X-Raft-Term: 0
-```
-
-- `X-Etcd-Index` is the current etcd index as explained above.
-- `X-Raft-Index` is similar to the etcd index but is for the underlying raft protocol
-- `X-Raft-Term` this number will increase when an etcd master election happens. If this number is increasing rapdily you may need to tune the election timeout. See the [tuning][tuning] section for details.
-
-[tuning]: #tuning
-
-### Get the value of a key
-
-We can get the value that we just set in `/message` by issuing a `GET` request:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/message
-```
-
-```json
-{
-    "action": "get",
-    "node": {
-        "createdIndex": 2,
-        "key": "/message",
-        "modifiedIndex": 2,
-        "value": "Hello world"
-    }
-}
-```
-
-
-### Changing the value of a key
-
-You can change the value of `/message` from `Hello world` to `Hello etcd` with another `PUT` request to the key:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 3,
-        "key": "/message",
-        "modifiedIndex": 3,
-        "value": "Hello etcd"
-    }
-}
-```
-
-### Deleting a key
-
-You can remove the `/message` key with a `DELETE` request:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-```
-
-```json
-{
-    "action": "delete",
-    "node": {
-        "createdIndex": 3,
-        "key": "/message",
-        "modifiedIndex": 4
-    }
-}
-```
-
-
-### Using key TTL
-
-Keys in etcd can be set to expire after a specified number of seconds.
-You can do this by setting a TTL (time to live) on the key when send a `PUT` request:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 5,
-        "expiration": "2013-12-04T12:01:21.874888581-08:00",
-        "key": "/foo",
-        "modifiedIndex": 5,
-        "ttl": 5,
-        "value": "bar"
-    }
-}
-```
-
-Note the two new fields in response:
-
-1. The `expiration` is the time that this key will expire and be deleted.
-
-2. The `ttl` is the time to live for the key, in seconds.
@@ -225 +68 @@ Note the two new fields in response:
-_NOTE_: Keys can only be expired by a cluster leader so if a machine gets disconnected from the cluster, its keys will not expire until it rejoins.
+Next lets set a single key and then retrieve it:
@@ -227,110 +69,0 @@ _NOTE_: Keys can only be expired by a cluster leader so if a machine gets discon
-Now you can try to get the key by sending a `GET` request:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo
-```
-
-If the TTL has expired, the key will be deleted, and you will be returned a 100.
-
-```json
-{
-    "cause": "/foo",
-    "errorCode": 100,
-    "index": 6,
-    "message": "Key Not Found"
-}
-```
-
-### Waiting for a change
-
-We can watch for a change on a key and receive a notification by using long polling.
-This also works for child keys by passing `recursive=true` in curl.
-
-In one terminal, we send a get request with `wait=true` :
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
-```
-
-Now we are waiting for any changes at path `/foo`.
-
-In another terminal, we set a key `/foo` with value `bar`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-```
-
-The first terminal should get the notification and return with the same response as the set request.
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 7,
-        "key": "/foo",
-        "modifiedIndex": 7,
-        "value": "bar"
-    }
-}
-```
-
-However, the watch command can do more than this.
-Using the the index we can watch for commands that has happened in the past.
-This is useful for ensuring you don't miss events between watch commands.
-
-Let's try to watch for the set command of index 7 again:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
-```
-
-The watch command returns immediately with the same response as previous.
-
-
-### Atomically Creating In-Order Keys
-
-Using the `POST` on a directory you can create keys with key names that are created in-order.
-This can be used in a variety of useful patterns like implementing queues of keys that need to be processed in strict order.
-An example use case is the [locking module][lockmod] which uses it to ensure clients get fair access to a mutex.
-
-Creating an in-order key is easy
-
-```sh
-curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job1
-```
-
-```json
-{
-    "action": "create",
-    "node": {
-        "createdIndex": 6,
-        "key": "/queue/6",
-        "modifiedIndex": 6,
-        "value": "Job1"
-    }
-}
-```
-
-If you create another entry some time later it is guaranteed to have a key name that is greater than the previous key.
-Also note the key names use the global etcd index so the next key can be more than `previous + 1`.
-
-```sh
-curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job2
-```
-
-```json
-{
-    "action": "create",
-    "node": {
-        "createdIndex": 29,
-        "key": "/queue/29",
-        "modifiedIndex": 29,
-        "value": "Job2"
-    }
-}
-```
-
-To enumerate the in-order keys as a sorted list, use the "sorted" parameter.
-
-```sh
-curl -s -X GET 'http://127.0.0.1:4001/v2/keys/queue?recursive=true&sorted=true'
@@ -338,58 +71,2 @@ curl -s -X GET 'http://127.0.0.1:4001/v2/keys/queue?recursive=true&sorted=true'
-
-```json
-{
-    "action": "get",
-    "node": {
-        "createdIndex": 2,
-        "dir": true,
-        "key": "/queue",
-        "modifiedIndex": 2,
-        "nodes": [
-            {
-                "createdIndex": 2,
-                "key": "/queue/2",
-                "modifiedIndex": 2,
-                "value": "Job1"
-            },
-            {
-                "createdIndex": 3,
-                "key": "/queue/3",
-                "modifiedIndex": 3,
-                "value": "Job2"
-            }
-        ]
-    }
-}
-```
-
-[lockmod]: #lock
-
-
-### Using a directory TTL
-
-Like keys, directories in etcd can be set to expire after a specified number of seconds.
-You can do this by setting a TTL (time to live) on a directory when it is created with a `PUT`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d ttl=30 -d dir=true
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 17,
-        "dir": true,
-        "expiration": "2013-12-11T10:37:33.689275857-08:00",
-        "key": "/newdir",
-        "modifiedIndex": 17,
-        "ttl": 30
-    }
-}
-```
-
-The directories TTL can be refreshed by making an update.
-You can do this by making a PUT with `prevExist=true` and a new TTL.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d ttl=30 -d dir=true -d prevExist=true
+curl -L http://127.0.0.1:4002/v2/keys/mykey -XPUT -d value="this is awesome"
+curl -L http://127.0.0.1:4002/v2/keys/mykey
@@ -398,337 +75 @@ curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d ttl=30 -d dir=true -d prevExi
-Keys that are under this directory work as usual, but when the directory expires a watcher on a key under the directory will get an expire event:
-
-```sh
-curl -X GET http://127.0.0.1:4001/v2/keys/dir/asdf\?consistent\=true\&wait\=true
-```
-
-```json
-{
-    "action": "expire",
-    "node": {
-        "createdIndex": 8,
-        "key": "/dir",
-        "modifiedIndex": 15
-    }
-}
-```
-
-
-### Atomic Compare-and-Swap (CAS)
-
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation used to build a distributed lock service.
-
-This command will set the value of a key only if the client-provided conditions are equal to the current conditions.
-
-The current comparable conditions are:
-
-1. `prevValue` - checks the previous value of the key.
-
-2. `prevIndex` - checks the previous index of the key.
-
-3. `prevExist` - checks existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
-
-Here is a simple example.
-Let's create a key-value pair first: `foo=one`.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=one
-```
-
-Let's try some invalid `CompareAndSwap` commands first.
-
-Trying to set this existing key with `prevExist=false` fails as expected:
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevExist=false -XPUT -d value=three
-```
-
-The error code explains the problem:
-
-```json
-{
-    "cause": "/foo",
-    "errorCode": 105,
-    "index": 39776,
-    "message": "Already exists"
-}
-```
-
-Now lets provide a `prevValue` parameter:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=two -XPUT -d value=three
-```
-
-This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
-
-```json
-{
-    "cause": "[two != one] [0 != 8]",
-    "errorCode": 101,
-    "index": 8,
-    "message": "Test Failed"
-}
-```
-
-which means `CompareAndSwap` failed.
-
-Let's try a valid condition:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
-```
-
-The response should be
-
-```json
-{
-    "action": "compareAndSwap",
-    "node": {
-        "createdIndex": 8,
-        "key": "/foo",
-        "modifiedIndex": 9,
-        "value": "two"
-    }
-}
-```
-
-We successfully changed the value from "one" to "two" since we gave the correct previous value.
-
-### Creating Directories
-
-In most cases directories for a key are automatically created.
-But, there are cases where you will want to create a directory or remove one.
-
-Creating a directory is just like a key only you cannot provide a value and must add the `dir=true` parameter.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d dir=true
-```
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 30,
-        "dir": true,
-        "key": "/dir",
-        "modifiedIndex": 30
-    }
-}
-```
-
-### Listing a directory
-
-In etcd we can store two types of things: keys and directories.
-Keys store a single string value.
-Directories store a set of keys and/or other directories.
-
-In this example, let's first create some keys:
-
-We already have `/foo=two` so now we'll create another one called `/foo_dir/foo` with the value of `bar`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 2,
-        "key": "/foo_dir/foo",
-        "modifiedIndex": 2,
-        "value": "bar"
-    }
-}
-```
-
-Now we can list the keys under root `/`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/
-```
-
-We should see the response as an array of items:
-
-```json
-{
-    "action": "get",
-    "node": {
-        "dir": true,
-        "key": "/",
-        "nodes": [
-            {
-                "createdIndex": 2,
-                "dir": true,
-                "key": "/foo_dir",
-                "modifiedIndex": 2
-            }
-        ]
-    }
-}
-```
-
-Here we can see `/foo` is a key-value pair under `/` and `/foo_dir` is a directory.
-We can also recursively get all the contents under a directory by adding `recursive=true`.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-```
-
-```json
-{
-    "action": "get",
-    "node": {
-        "dir": true,
-        "key": "/",
-        "nodes": [
-            {
-                "createdIndex": 2,
-                "dir": true,
-                "key": "/foo_dir",
-                "modifiedIndex": 2,
-                "nodes": [
-                    {
-                        "createdIndex": 2,
-                        "key": "/foo_dir/foo",
-                        "modifiedIndex": 2,
-                        "value": "bar"
-                    }
-                ]
-            }
-        ]
-    }
-}
-```
-
-
-### Deleting a Directory
-
-Now let's try to delete the directory `/foo_dir`.
-
-You can remove an empty directory using the `DELETE` verb and the `dir=true` parameter.
-
-```sh
-curl -L -X DELETE 'http://127.0.0.1:4001/v2/keys/dir?dir=true'
-```
-```json
-{
-    "action": "delete",
-    "node": {
-        "createdIndex": 30,
-        "dir": true,
-        "key": "/dir",
-        "modifiedIndex": 31
-    }
-}
-```
-
-To delete a directory that holds keys, you must add `recursive=true`.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/dir?recursive=true -XDELETE
-```
-
-```json
-{
-    "action": "delete",
-    "node": {
-        "createdIndex": 10,
-        "dir": true,
-        "key": "/dir",
-        "modifiedIndex": 11
-    }
-}
-```
-
-
-### Creating a hidden node
-
-We can create a hidden key-value pair or directory by add a `_` prefix.
-The hidden item will not be listed when sending a `GET` request for a directory.
-
-First we'll add a hidden key named `/_message`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 3,
-        "key": "/_message",
-        "modifiedIndex": 3,
-        "value": "Hello hidden world"
-    }
-}
-```
-
-
-Next we'll add a regular key named `/message`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 4,
-        "key": "/message",
-        "modifiedIndex": 4,
-        "value": "Hello world"
-    }
-}
-```
-
-Now let's try to get a listing of keys under the root directory, `/`:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/
-```
-
-```json
-{
-    "action": "get",
-    "node": {
-        "dir": true,
-        "key": "/",
-        "nodes": [
-            {
-                "createdIndex": 2,
-                "dir": true,
-                "key": "/foo_dir",
-                "modifiedIndex": 2
-            },
-            {
-                "createdIndex": 4,
-                "key": "/message",
-                "modifiedIndex": 4,
-                "value": "Hello world"
-            }
-        ]
-    }
-}
-```
-
-Here we see the `/message` key but our hidden `/_message` key is not returned.
-
-## Advanced Usage
-
-### Transport security with HTTPS
-
-Etcd supports SSL/TLS and client cert authentication for clients to server, as well as server to server communication.
-
-First, you need to have a CA cert `clientCA.crt` and signed key pair `client.crt`, `client.key`.
-This site has a good reference for how to generate self-signed key pairs:
-http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-
-For testing you can use the certificates in the `fixtures/ca` directory.
-
-Let's configure etcd to use this keypair:
-
-```sh
-./etcd -f -name machine0 -data-dir machine0 -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
-```
+You have successfully started an etcd on a single machine and written a key to the store. Now it time to dig into the full etcd API and other guides.
@@ -736 +77 @@ Let's configure etcd to use this keypair:
-There are a few new options we're using:
+### Next Steps
@@ -738,352 +79,6 @@ There are a few new options we're using:
-* `-f` - forces a new machine configuration, even if an existing configuration is found. (WARNING: data loss!)
-* `-cert-file` and `-key-file` specify the location of the cert and key files to be used for for transport layer security between the client and server.
-
-You can now test the configuration using HTTPS:
-
-```sh
-curl --cacert ./fixtures/ca/server-chain.pem https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
-```
-
-You should be able to see the handshake succeed.
-
-**OSX 10.9+ Users**: curl 7.30.0 on OSX 10.9+ doesn't understand certificates passed in on the command line.
-Instead you must import the dummy ca.crt directly into the keychain or add the `-k` flag to curl to ignore errors.
-If you want to test without the `-k` flag run `open ./fixtures/ca/ca.crt` and follow the prompts.
-Please remove this certificate after you are done testing!
-If you know of a workaround let us know.
-
-```
-...
-SSLv3, TLS handshake, Finished (20):
-...
-```
-
-And also the response from the etcd server:
-
-```json
-{
-    "action": "set",
-    "key": "/foo",
-    "modifiedIndex": 3,
-    "value": "bar"
-}
-```
-
-
-### Authentication with HTTPS client certificates
-
-We can also do authentication using CA certs.
-The clients will provide their cert to the server and the server will check whether the cert is signed by the CA and decide whether to serve the request.
-
-```sh
-./etcd -f -name machine0 -data-dir machine0 -ca-file=./fixtures/ca/ca.crt -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
-```
-
-```-ca-file``` is the path to the CA cert.
-
-Try the same request to this server:
-
-```sh
-curl --cacert ./fixtures/ca/server-chain.pem https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
-```
-
-The request should be rejected by the server.
-
-```
-...
-routines:SSL3_READ_BYTES:sslv3 alert bad certificate
-...
-```
-
-We need to give the CA signed cert to the server.
-
-```sh
-curl --key ./fixtures/ca/server2.key.insecure --cert ./fixtures/ca/server2.crt --cacert ./fixtures/ca/server-chain.pem -L https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
-```
-
-You should able to see:
-
-```
-...
-SSLv3, TLS handshake, CERT verify (15):
-...
-TLS handshake, Finished (20)
-```
-
-And also the response from the server:
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 12,
-        "key": "/foo",
-        "modifiedIndex": 12,
-        "value": "bar"
-    }
-}
-```
-
-
-## Clustering
-
-### Example cluster of three machines
-
-Let's explore the use of etcd clustering.
-We use Raft as the underlying distributed protocol which provides consistency and persistence of the data across all of the etcd instances.
-
-Let start by creating 3 new etcd instances.
-
-We use `-peer-addr` to specify server port and `-addr` to specify client port and `-data-dir` to specify the directory to store the log and info of the machine in the cluster:
-
-```sh
-./etcd -peer-addr 127.0.0.1:7001 -addr 127.0.0.1:4001 -data-dir machines/machine1 -name machine1
-```
-
-**Note:** If you want to run etcd on an external IP address and still have access locally, you'll need to add `-bind-addr 0.0.0.0` so that it will listen on both external and localhost addresses.
-A similar argument `-peer-bind-addr` is used to setup the listening address for the server port.
-
-Let's join two more machines to this cluster using the `-peers` argument:
-
-```sh
-./etcd -peer-addr 127.0.0.1:7002 -addr 127.0.0.1:4002 -peers 127.0.0.1:7001 -data-dir machines/machine2 -name machine2
-./etcd -peer-addr 127.0.0.1:7003 -addr 127.0.0.1:4003 -peers 127.0.0.1:7001 -data-dir machines/machine3 -name machine3
-```
-
-We can retrieve a list of machines in the cluster using the HTTP API:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/machines
-```
-
-We should see there are three machines in the cluster
-
-```
-http://127.0.0.1:4001, http://127.0.0.1:4002, http://127.0.0.1:4003
-```
-
-The machine list is also available via the main key API:
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/_etcd/machines
-```
-
-```json
-{
-    "action": "get",
-    "node": {
-        "createdIndex": 1,
-        "dir": true,
-        "key": "/_etcd/machines",
-        "modifiedIndex": 1,
-        "nodes": [
-            {
-                "createdIndex": 1,
-                "key": "/_etcd/machines/machine1",
-                "modifiedIndex": 1,
-                "value": "raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001"
-            },
-            {
-                "createdIndex": 2,
-                "key": "/_etcd/machines/machine2",
-                "modifiedIndex": 2,
-                "value": "raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002"
-            },
-            {
-                "createdIndex": 3,
-                "key": "/_etcd/machines/machine3",
-                "modifiedIndex": 3,
-                "value": "raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003"
-            }
-        ]
-    }
-}
-```
-
-We can also get the current leader in the cluster:
-
-```
-curl -L http://127.0.0.1:4001/v2/leader
-```
-
-The first server we set up should still be the leader unless it has died during these commands.
-
-```
-http://127.0.0.1:7001
-```
-
-Now we can do normal SET and GET operations on keys as we explored earlier.
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-```
-
-```json
-{
-    "action": "set",
-    "node": {
-        "createdIndex": 4,
-        "key": "/foo",
-        "modifiedIndex": 4,
-        "value": "bar"
-    }
-}
-```
-
-
-### Killing Nodes in the Cluster
-
-Now if we kill the leader of the cluster, we can get the value from one of the other two machines:
-
-```sh
-curl -L http://127.0.0.1:4002/v2/keys/foo
-```
-
-We can also see that a new leader has been elected:
-
-```
-curl -L http://127.0.0.1:4002/v2/leader
-```
-
-```
-http://127.0.0.1:7002
-```
-
-or
-
-```
-http://127.0.0.1:7003
-```
-
-
-### Testing Persistence
-
-Next we'll kill all the machines to test persistence.
-Type `CTRL-C` on each terminal and then rerun the same command you used to start each machine.
-
-Your request for the `foo` key will return the correct value:
-
-```sh
-curl -L http://127.0.0.1:4002/v2/keys/foo
-```
-
-```json
-{
-    "action": "get",
-    "node": {
-        "createdIndex": 4,
-        "key": "/foo",
-        "modifiedIndex": 4,
-        "value": "bar"
-    }
-}
-```
-
-
-### Using HTTPS between servers
-
-In the previous example we showed how to use SSL client certs for client-to-server communication.
-Etcd can also do internal server-to-server communication using SSL client certs.
-To do this just change the `-*-file` flags to `-peer-*-file`.
-
-If you are using SSL for server-to-server communication, you must use it on all instances of etcd.
-
-## Modules
-
-etcd has a number of modules that are built on top of the core etcd API.
-These modules provide things like dashboards, locks and leader election.
-
-### Dashboard
-
-An HTML dashboard can be found at `http://127.0.0.1:4001/mod/dashboard/`
-
-### Lock
-
-The Lock module implements a fair lock that can be used when lots of clients want access to a single resource.
-A lock can be associated with a value.
-The value is unique so if a lock tries to request a value that is already queued for a lock then it will find it and watch until that value obtains the lock.
-If you lock the same value on a key from two separate curl sessions they'll both return at the same time.
-
-Here's the API:
-
-**Acquire a lock (with no value) for "customer1"**
-
-```sh
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-```
-
-**Acquire a lock for "customer1" that is associated with the value "bar"**
-
-```sh
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
-```
-
-**Renew the TTL on the "customer1" lock for index 2**
-
-```sh
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-```
-
-**Renew the TTL on the "customer1" lock for value "customer1"**
-
-```sh
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
-```
-
-**Retrieve the current value for the "customer1" lock.**
-
-```sh
-curl http://127.0.0.1:4001/mod/v2/lock/customer1
-```
-
-**Retrieve the current index for the "customer1" lock**
-
-```sh
-curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
-```
-
-**Delete the "customer1" lock with the index 2**
-
-```sh
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=2
-```
-
-**Delete the "customer1" lock with the value "bar"**
-
-```sh
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?value=bar
-```
-
-
-### Leader Election
-
-The Leader Election module wraps the Lock module to allow clients to come to consensus on a single value.
-This is useful when you want one server to process at a time but allow other servers to fail over.
-The API is similar to the Lock module but is limited to simple strings values.
-
-Here's the API:
-
-**Attempt to set a value for the "order_processing" leader key:**
-
-```sh
-curl -X PUT http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
-```
-
-**Retrieve the current value for the "order_processing" leader key:**
-
-```sh
-curl http://127.0.0.1:4001/mod/v2/leader/order_processing
-myserver1.foo.com
-```
-
-**Remove a value from the "order_processing" leader key:**
-
-```sh
-curl -X DELETE http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
-```
-
-If multiple clients attempt to set the value for a key then only one will succeed.
-The other clients will hang until the current value is removed because of TTL or because of a `DELETE` operation.
-Multiple clients can submit the same value and will all be notified when that value succeeds.
-
-To update the TTL of a value simply reissue the same `PUT` command that you used to set the value.
+- Explore the full [API][api.md].
+- Setup a [multi-machine cluster][clustering.md].
+- Find [language bindings and tools][libraries-and-tools.md].
+- Learn about the dashboard, lock and leader election [modules][modules.md].
+- Use TLS to [secure an etcd cluster][security.md].
+- [Tune etcd][tuning.md].
@@ -1090,0 +86,6 @@ To update the TTL of a value simply reissue the same `PUT` command that you used
+[api.md]: https://github.com/coreos/etcd/blob/master/Documentation/api.md
+[clustering.md]: https://github.com/coreos/etcd/blob/master/Documentation/clustering.md
+[libraries-and-tools.md]: https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md
+[modules.md]: https://github.com/coreos/etcd/blob/master/Documentation/modules.md
+[security.md]: https://github.com/coreos/etcd/blob/master/Documentation/security.md
+[tuning.md]: https://github.com/coreos/etcd/blob/master/Documentation/tuning.md
@@ -1096,157 +96,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-
-## Libraries and Tools
-
-**Tools**
-
-- [etcdctl](https://github.com/coreos/etcdctl) - A command line client for etcd
-
-**Go libraries**
-
-- [go-etcd](https://github.com/coreos/go-etcd) - Supports v2
-
-**Java libraries**
-
-- [justinsb/jetcd](https://github.com/justinsb/jetcd)
-- [diwakergupta/jetcd](https://github.com/diwakergupta/jetcd) - Supports v2
-
-**Python libraries**
-
-- [transitorykris/etcd-py](https://github.com/transitorykris/etcd-py)
-- [jplana/python-etcd](https://github.com/jplana/python-etcd) - Supports v2
-- [russellhaering/txetcd](https://github.com/russellhaering/txetcd) - a Twisted Python library
-
-**Node libraries**
-
-- [stianeikeland/node-etcd](https://github.com/stianeikeland/node-etcd) - Supports v2 (w Coffeescript)
-- [lavagetto/nodejs-etcd](https://github.com/lavagetto/nodejs-etcd) - Supports v2
-
-**Ruby libraries**
-
-- [iconara/etcd-rb](https://github.com/iconara/etcd-rb)
-- [jpfuentes2/etcd-ruby](https://github.com/jpfuentes2/etcd-ruby)
-- [ranjib/etcd-ruby](https://github.com/ranjib/etcd-ruby) - Supports v2
-
-**C libraries**
-
-- [jdarcy/etcd-api](https://github.com/jdarcy/etcd-api) - Supports v2
-
-**Clojure libraries**
-
-- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
-- [dwwoelfel/cetcd](https://github.com/dwwoelfel/cetcd) - Supports v2
-- [rthomas/clj-etcd](https://github.com/rthomas/clj-etcd) - Supports v2
-
-**Erlang libraries**
-
-- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
-
-**Chef Integration**
-
-- [coderanger/etcd-chef](https://github.com/coderanger/etcd-chef)
-
-**Chef Cookbook**
-
-- [spheromak/etcd-cookbook](https://github.com/spheromak/etcd-cookbook)
-
-**BOSH Releases**
-
-- [cloudfoundry-community/etcd-boshrelease](https://github.com/cloudfoundry-community/etcd-boshrelease)
-- [cloudfoundry/cf-release](https://github.com/cloudfoundry/cf-release/tree/master/jobs/etcd)
-
-**Projects using etcd**
-
-- [binocarlos/yoda](https://github.com/binocarlos/yoda) - etcd + ZeroMQ
-- [calavera/active-proxy](https://github.com/calavera/active-proxy) - HTTP Proxy configured with etcd
-- [derekchiang/etcdplus](https://github.com/derekchiang/etcdplus) - A set of distributed synchronization primitives built upon etcd
-- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
-- [gleicon/goreman](https://github.com/gleicon/goreman/tree/etcd) - Branch of the Go Foreman clone with etcd support
-- [garethr/hiera-etcd](https://github.com/garethr/hiera-etcd) - Puppet hiera backend using etcd
-- [mattn/etcd-vim](https://github.com/mattn/etcd-vim) - SET and GET keys from inside vim
-- [mattn/etcdenv](https://github.com/mattn/etcdenv) - "env" shebang with etcd integration
-- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
-- [configdb](https://git.autistici.org/ai/configdb/tree/master) - A REST relational abstraction on top of arbitrary database backends, aimed at storing configs and inventories.
-
-
-## FAQ
-
-### What size cluster should I use?
-
-Every command the client sends to the master is broadcast to all of the followers.
-The command is not committed until the majority of the cluster peers receive that command.
-
-Because of this majority voting property, the ideal cluster should be kept small to keep speed up and be made up of an odd number of peers.
-
-Odd numbers are good because if you have 8 peers the majority will be 5 and if you have 9 peers the majority will still be 5.
-The result is that an 8 peer cluster can tolerate 3 peer failures and a 9 peer cluster can tolerate 4 machine failures.
-And in the best case when all 9 peers are responding the cluster will perform at the speed of the fastest 5 machines.
-
-
-### Why SSLv3 alert handshake failure when using SSL client auth?
-
-The `crypto/tls` package of `golang` checks the key usage of the certificate public key before using it.
-To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
-
-Here is how to do it:
-
-Add the following section to your openssl.cnf:
-
-```
-[ ssl_client ]
-...
-  extendedKeyUsage = clientAuth
-...
-```
-
-When creating the cert be sure to reference it in the `-extensions` flag:
-
-```
-openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/machine.crt -infiles machine.csr
-```
-
-### Tuning
-
-The default settings in etcd should work well for installations on a local network where the average network latency is low.
-However, when using etcd across multiple data centers or over networks with high latency you may need to tweak the heartbeat and election timeout settings.
-
-The underlying distributed consensus protocol relies on two separate timeouts to ensure that nodes can handoff leadership if one stalls or goes offline.
-The first timeout is called the *Heartbeat Timeout*.
-This is the frequency with which the leader will notify followers that it is still the leader.
-etcd batches commands together for higher throughput so this heartbeat timeout is also a delay for how long it takes for commands to be committed.
-By default, etcd uses a `50ms` heartbeat timeout.
-
-The second timeout is the *Election Timeout*.
-This timeout is how long a follower node will go without hearing a heartbeat before attempting to become leader itself.
-By default, etcd uses a `200ms` election timeout.
-
-Adjusting these values is a trade off.
-Lowering the heartbeat timeout will cause individual commands to be committed faster but it will lower the overall throughput of etcd.
-If your etcd instances have low utilization then lowering the heartbeat timeout can improve your command response time.
-
-The election timeout should be set based on the heartbeat timeout and your network ping time between nodes.
-Election timeouts should be at least 10 times your ping time so it can account for variance in your network.
-For example, if the ping time between your nodes is 10ms then you should have at least a 100ms election timeout.
-
-You should also set your election timeout to at least 4 to 5 times your heartbeat timeout to account for variance in leader replication.
-For a heartbeat timeout of 50ms you should set your election timeout to at least 200ms - 250ms.
-
-You can override the default values on the command line:
-
-```sh
-# Command line arguments:
-$ etcd -peer-heartbeat-timeout=100 -peer-election-timeout=500
-
-# Environment variables:
-$ ETCD_PEER_HEARTBEAT_TIMEOUT=100 ETCD_PEER_ELECTION_TIMEOUT=500 etcd
-```
-
-Or you can set the values within the configuration file:
-
-```toml
-[peer]
-heartbeat_timeout = 100
-election_timeout = 100
-```
-
-The values are specified in milliseconds.
-
-
diff --git a/README.md b/README.md
index 22bde6678..d7767b2c0 100644
--- a/README.md
+++ b/README.md
@@ -1105 +1105 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [go-etcd](https://github.com/coreos/go-etcd)
+- [go-etcd](https://github.com/coreos/go-etcd) - Supports v2
@@ -1110 +1110 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [diwakergupta/jetcd](https://github.com/diwakergupta/jetcd)
+- [diwakergupta/jetcd](https://github.com/diwakergupta/jetcd) - Supports v2
@@ -1115 +1115 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [jplana/python-etcd](https://github.com/jplana/python-etcd)
+- [jplana/python-etcd](https://github.com/jplana/python-etcd) - Supports v2
@@ -1120 +1120,2 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [stianeikeland/node-etcd](https://github.com/stianeikeland/node-etcd)
+- [stianeikeland/node-etcd](https://github.com/stianeikeland/node-etcd) - Supports v2 (w Coffeescript)
+- [lavagetto/nodejs-etcd](https://github.com/lavagetto/nodejs-etcd) - Supports v2
@@ -1126 +1127 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [ranjib/etcd-ruby](https://github.com/ranjib/etcd-ruby)
+- [ranjib/etcd-ruby](https://github.com/ranjib/etcd-ruby) - Supports v2
@@ -1130 +1131 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [jdarcy/etcd-api](https://github.com/jdarcy/etcd-api)
+- [jdarcy/etcd-api](https://github.com/jdarcy/etcd-api) - Supports v2
@@ -1135,2 +1136,2 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [dwwoelfel/cetcd](https://github.com/dwwoelfel/cetcd)
-- [rthomas/clj-etcd](https://github.com/rthomas/clj-etcd)
+- [dwwoelfel/cetcd](https://github.com/dwwoelfel/cetcd) - Supports v2
+- [rthomas/clj-etcd](https://github.com/rthomas/clj-etcd) - Supports v2
@@ -1165,0 +1167 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [configdb](https://git.autistici.org/ai/configdb/tree/master) - A REST relational abstraction on top of arbitrary database backends, aimed at storing configs and inventories.
diff --git a/README.md b/README.md
index 2f525a27a..22bde6678 100644
--- a/README.md
+++ b/README.md
@@ -97,2 +97 @@ curl -L http://127.0.0.1:4001/v2/keys/message -X PUT -d value="Hello world"
-This response contains four fields.
-We will introduce three more fields as we try more commands.
+The response object contains several attributes:
@@ -100 +99,2 @@ We will introduce three more fields as we try more commands.
-1. The action of the request; we set the value via a `PUT` request, thus the action is `set`.
+1. `action`: the action of the request that was just made.
+The request attempted to modify `node.value` via a `PUT` HTTP request, thus the value of action is `set`.
@@ -102,2 +102,3 @@ We will introduce three more fields as we try more commands.
-2. The key of the request; we set `/message` to `Hello world`, so the key field is `/message`.
-We use a file system like structure to represent the key-value pairs so each key starts with `/`.
+2. `node.key`: the HTTP path the to which the request was made.
+We set `/message` to `Hello world`, so the key field is `/message`.
+Etcd uses a file-system-like structure to represent the key-value pairs, therefore all keys start with `/`.
@@ -105 +106,2 @@ We use a file system like structure to represent the key-value pairs so each key
-3. The current value of the key; we set the value to`Hello world`.
+3. `node.value`: the value of the key after resolving the request.
+In this case, a successful request was made that attempted to change the node's value to `Hello world`.
@@ -107,3 +109,2 @@ We use a file system like structure to represent the key-value pairs so each key
-4. Modified Index is a unique, monotonically incrementing index created for each change to etcd.
-Requests that change the index include `set`, `delete`, `update`, `create` and `compareAndSwap`.
-Since the `get` and `watch` commands do not change state in the store, they do not change the index.
+4. `node.createdIndex`: an index is a unique, monotonically-incrementing integer created for each change to etcd.
+This specific index reflects at which point in the etcd state machine a given key was created.
@@ -111 +112,6 @@ You may notice that in this example the index is `2` even though it is the first
-This is because there are internal commands that also change the state like adding and syncing servers.
+This is because there are internal commands that also change the state behind the scenes like adding and syncing servers.
+
+5. `node.modifiedIndex`: like `node.createdIndex`, this attribute is also an etcd index.
+Actions that cause the value to change include `set`, `delete`, `update`, `create` and `compareAndSwap`.
+Since the `get` and `watch` commands do not change state in the store, they do not change the value of `node.modifiedIndex`.
+
diff --git a/README.md b/README.md
index 704f7130d..2f525a27a 100644
--- a/README.md
+++ b/README.md
@@ -165 +164,0 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-        "prevValue": "Hello world",
@@ -171,4 +169,0 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-Notice that `node.prevValue` is set to the previous value of the key - `Hello world`.
-It is useful when you want to atomically set a value to a key and get its old value.
-
-
@@ -189,2 +184 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-        "modifiedIndex": 4,
-        "prevValue": "Hello etcd"
+        "modifiedIndex": 4
@@ -489 +482,0 @@ The response should be
-        "prevValue": "one",
@@ -769 +761,0 @@ And also the response from the etcd server:
-    "prevValue": "bar",
@@ -824 +815,0 @@ And also the response from the server:
-        "prevValue": "two",
diff --git a/README.md b/README.md
index bd3a7dcd6..704f7130d 100644
--- a/README.md
+++ b/README.md
@@ -164,0 +165 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
+        "prevValue": "Hello world",
@@ -169,0 +171,4 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
+Notice that `node.prevValue` is set to the previous value of the key - `Hello world`.
+It is useful when you want to atomically set a value to a key and get its old value.
+
+
@@ -184 +189,2 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-        "modifiedIndex": 4
+        "modifiedIndex": 4,
+        "prevValue": "Hello etcd"
@@ -412 +418 @@ curl -X GET http://127.0.0.1:4001/v2/keys/dir/asdf\?consistent\=true\&wait\=true
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service.
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation used to build a distributed lock service.
@@ -482,0 +489 @@ The response should be
+        "prevValue": "one",
@@ -761,0 +769 @@ And also the response from the etcd server:
+    "prevValue": "bar",
@@ -815,0 +824 @@ And also the response from the server:
+        "prevValue": "two",
diff --git a/README.md b/README.md
index 7dfc4444b..bd3a7dcd6 100644
--- a/README.md
+++ b/README.md
@@ -165 +164,0 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-        "prevValue": "Hello world",
@@ -171,4 +169,0 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-Notice that `node.prevValue` is set to the previous value of the key - `Hello world`.
-It is useful when you want to atomically set a value to a key and get its old value.
-
-
@@ -189,2 +184 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-        "modifiedIndex": 4,
-        "prevValue": "Hello etcd"
+        "modifiedIndex": 4
@@ -489 +482,0 @@ The response should be
-        "prevValue": "one",
@@ -769 +761,0 @@ And also the response from the etcd server:
-    "prevValue": "bar",
@@ -824 +815,0 @@ And also the response from the server:
-        "prevValue": "two",
diff --git a/README.md b/README.md
index fee4cdace..7dfc4444b 100644
--- a/README.md
+++ b/README.md
@@ -1051 +1051 @@ curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=2
diff --git a/README.md b/README.md
index de2942d12..fee4cdace 100644
--- a/README.md
+++ b/README.md
@@ -1257,0 +1258,2 @@ The values are specified in milliseconds.
+#### Service Versioning
+
@@ -1259 +1261 @@ etcd uses [semantic versioning][semver].
-New minor versions may add additional features to the API however.
+New minor versions may add additional features to the API.
@@ -1267,2 +1268,0 @@ curl -L http://127.0.0.1:4001/version
-During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
-
@@ -1270,0 +1271,7 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
+#### API Versioning
+
+Clients are encouraged to use the `v2` API. The `v1` API will not change.
+
+The `v2` API responses should not change after the 0.2.0 release but new features will be added over time.
+
+During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
diff --git a/README.md b/README.md
index 043d43edd..de2942d12 100644
--- a/README.md
+++ b/README.md
@@ -336 +336 @@ To enumerate the in-order keys as a sorted list, use the "sorted" parameter.
-curl -s -X GET 'http://127.0.0.1:4001/v2/keys/queue?recursive=true&sorted=true' | python -m json.tool
+curl -s -X GET 'http://127.0.0.1:4001/v2/keys/queue?recursive=true&sorted=true'
diff --git a/README.md b/README.md
index a13e4cae6..043d43edd 100644
--- a/README.md
+++ b/README.md
@@ -332,0 +333,32 @@ curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job2
+To enumerate the in-order keys as a sorted list, use the "sorted" parameter.
+
+```sh
+curl -s -X GET 'http://127.0.0.1:4001/v2/keys/queue?recursive=true&sorted=true' | python -m json.tool
+```
+
+```json
+{
+    "action": "get",
+    "node": {
+        "createdIndex": 2,
+        "dir": true,
+        "key": "/queue",
+        "modifiedIndex": 2,
+        "nodes": [
+            {
+                "createdIndex": 2,
+                "key": "/queue/2",
+                "modifiedIndex": 2,
+                "value": "Job1"
+            },
+            {
+                "createdIndex": 3,
+                "key": "/queue/3",
+                "modifiedIndex": 3,
+                "value": "Job2"
+            }
+        ]
+    }
+}
+```
+
@@ -1226,2 +1257,0 @@ The values are specified in milliseconds.
-#### Service Versioning
-
@@ -1229 +1259 @@ etcd uses [semantic versioning][semver].
-New minor versions may add additional features to the API.
+New minor versions may add additional features to the API however.
@@ -1237,5 +1267 @@ curl -L http://127.0.0.1:4001/version
-[semver]: http://semver.org/
-
-#### API Versioning
-
-Clients are encouraged to use the `v2` API. The `v1` API will not change.
+During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
@@ -1243 +1269 @@ Clients are encouraged to use the `v2` API. The `v1` API will not change.
-The `v2` API responses should not change after the 0.2.0 release but new features will be added over time.
+[semver]: http://semver.org/
@@ -1245 +1270,0 @@ The `v2` API responses should not change after the 0.2.0 release but new feature
-During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
diff --git a/README.md b/README.md
index c35aa3afc..a13e4cae6 100644
--- a/README.md
+++ b/README.md
@@ -1040 +1040 @@ Here's the API:
-curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
+curl -X PUT http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
@@ -1053 +1053 @@ myserver1.foo.com
-curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
+curl -X DELETE http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
@@ -1060 +1060 @@ Multiple clients can submit the same value and will all be notified when that va
-To update the TTL of a value simply reissue the same `POST` command that you used to set the value.
+To update the TTL of a value simply reissue the same `PUT` command that you used to set the value.
diff --git a/README.md b/README.md
index 4fed7fcf4..c35aa3afc 100644
--- a/README.md
+++ b/README.md
@@ -1040 +1040 @@ Here's the API:
-curl -X PUT http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
+curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
@@ -1053 +1053 @@ myserver1.foo.com
-curl -X DELETE http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
+curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
@@ -1060 +1060 @@ Multiple clients can submit the same value and will all be notified when that va
-To update the TTL of a value simply reissue the same `PUT` command that you used to set the value.
+To update the TTL of a value simply reissue the same `POST` command that you used to set the value.
@@ -1225,0 +1226,2 @@ The values are specified in milliseconds.
+#### Service Versioning
+
@@ -1227 +1229 @@ etcd uses [semantic versioning][semver].
-New minor versions may add additional features to the API however.
+New minor versions may add additional features to the API.
@@ -1235,2 +1236,0 @@ curl -L http://127.0.0.1:4001/version
-During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
-
@@ -1238,0 +1239,7 @@ During the pre-v1.0.0 series of releases we may break the API as we fix bugs and
+#### API Versioning
+
+Clients are encouraged to use the `v2` API. The `v1` API will not change.
+
+The `v2` API responses should not change after the 0.2.0 release but new features will be added over time.
+
+During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
diff --git a/README.md b/README.md
index 2f5571b0a..4fed7fcf4 100644
--- a/README.md
+++ b/README.md
@@ -1040 +1040 @@ Here's the API:
-curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
+curl -X PUT http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
@@ -1053 +1053 @@ myserver1.foo.com
-curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
+curl -X DELETE http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
@@ -1060 +1060 @@ Multiple clients can submit the same value and will all be notified when that va
-To update the TTL of a value simply reissue the same `POST` command that you used to set the value.
+To update the TTL of a value simply reissue the same `PUT` command that you used to set the value.
diff --git a/README.md b/README.md
index f89350600..2f5571b0a 100644
--- a/README.md
+++ b/README.md
@@ -974,3 +974,3 @@ The Lock module implements a fair lock that can be used when lots of clients wan
-A lock can be associated with a name.
-The name is unique so if a lock tries to request a name that is already queued for a lock then it will find it and watch until that name obtains the lock.
-If you lock the same name on a key from two separate curl sessions they'll both return at the same time.
+A lock can be associated with a value.
+The value is unique so if a lock tries to request a value that is already queued for a lock then it will find it and watch until that value obtains the lock.
+If you lock the same value on a key from two separate curl sessions they'll both return at the same time.
@@ -980 +980 @@ Here's the API:
-**Acquire a lock (with no name) for "customer1"**
+**Acquire a lock (with no value) for "customer1"**
@@ -986 +986 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-**Acquire a lock for "customer1" that is associated with the name "bar"**
+**Acquire a lock for "customer1" that is associated with the value "bar"**
@@ -989 +989 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
@@ -998 +998 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-**Renew the TTL on the "customer1" lock for name "customer1"**
+**Renew the TTL on the "customer1" lock for value "customer1"**
@@ -1001 +1001 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
@@ -1004 +1004 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
-**Retrieve the current name for the "customer1" lock.**
+**Retrieve the current value for the "customer1" lock.**
@@ -1022 +1022 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-**Delete the "customer1" lock with the name "bar"**
+**Delete the "customer1" lock with the value "bar"**
@@ -1025 +1025 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?value=bar
@@ -1120,0 +1121,5 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**BOSH Releases**
+
+- [cloudfoundry-community/etcd-boshrelease](https://github.com/cloudfoundry-community/etcd-boshrelease)
+- [cloudfoundry/cf-release](https://github.com/cloudfoundry/cf-release/tree/master/jobs/etcd)
+
diff --git a/README.md b/README.md
index 77f7ae0fd..f89350600 100644
--- a/README.md
+++ b/README.md
@@ -969 +969 @@ These modules provide things like dashboards, locks and leader election.
-An HTML dashboard can be found at `http://127.0.0.1:4001/mod/dashboard/```
+An HTML dashboard can be found at `http://127.0.0.1:4001/mod/dashboard/`
@@ -974,3 +974,3 @@ The Lock module implements a fair lock that can be used when lots of clients wan
-A lock can be associated with a value.
-The value is unique so if a lock tries to request a value that is already queued for a lock then it will find it and watch until that value obtains the lock.
-If you lock the same value on a key from two separate curl sessions they'll both return at the same time.
+A lock can be associated with a name.
+The name is unique so if a lock tries to request a name that is already queued for a lock then it will find it and watch until that name obtains the lock.
+If you lock the same name on a key from two separate curl sessions they'll both return at the same time.
@@ -980 +980 @@ Here's the API:
-**Acquire a lock (with no value) for "customer1"**
+**Acquire a lock (with no name) for "customer1"**
@@ -986 +986 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-**Acquire a lock for "customer1" that is associated with the value "bar"**
+**Acquire a lock for "customer1" that is associated with the name "bar"**
@@ -989 +989 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
@@ -998 +998 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-**Renew the TTL on the "customer1" lock for value "customer1"**
+**Renew the TTL on the "customer1" lock for name "customer1"**
@@ -1001 +1001 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
@@ -1004 +1004 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
-**Retrieve the current value for the "customer1" lock.**
+**Retrieve the current name for the "customer1" lock.**
@@ -1022 +1022 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-**Delete the "customer1" lock with the value "bar"**
+**Delete the "customer1" lock with the name "bar"**
@@ -1025 +1025 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?value=bar
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
@@ -1121,5 +1120,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**BOSH Releases**
-
-- [cloudfoundry-community/etcd-boshrelease](https://github.com/cloudfoundry-community/etcd-boshrelease)
-- [cloudfoundry/cf-release](https://github.com/cloudfoundry/cf-release/tree/master/jobs/etcd)
-
diff --git a/README.md b/README.md
index 2626920e5..77f7ae0fd 100644
--- a/README.md
+++ b/README.md
@@ -1120,0 +1121,5 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**BOSH Releases**
+
+- [cloudfoundry-community/etcd-boshrelease](https://github.com/cloudfoundry-community/etcd-boshrelease)
+- [cloudfoundry/cf-release](https://github.com/cloudfoundry/cf-release/tree/master/jobs/etcd)
+
diff --git a/README.md b/README.md
index 9eee869c8..2626920e5 100644
--- a/README.md
+++ b/README.md
@@ -974,3 +974,3 @@ The Lock module implements a fair lock that can be used when lots of clients wan
-A lock can be associated with a name.
-The name is unique so if a lock tries to request a name that is already queued for a lock then it will find it and watch until that name obtains the lock.
-If you lock the same name on a key from two separate curl sessions they'll both return at the same time.
+A lock can be associated with a value.
+The value is unique so if a lock tries to request a value that is already queued for a lock then it will find it and watch until that value obtains the lock.
+If you lock the same value on a key from two separate curl sessions they'll both return at the same time.
@@ -980 +980 @@ Here's the API:
-**Acquire a lock (with no name) for "customer1"**
+**Acquire a lock (with no value) for "customer1"**
@@ -986 +986 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-**Acquire a lock for "customer1" that is associated with the name "bar"**
+**Acquire a lock for "customer1" that is associated with the value "bar"**
@@ -989 +989 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
@@ -998 +998 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-**Renew the TTL on the "customer1" lock for name "customer1"**
+**Renew the TTL on the "customer1" lock for value "customer1"**
@@ -1001 +1001 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
@@ -1004 +1004 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
-**Retrieve the current name for the "customer1" lock.**
+**Retrieve the current value for the "customer1" lock.**
@@ -1022 +1022 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-**Delete the "customer1" lock with the name "bar"**
+**Delete the "customer1" lock with the value "bar"**
@@ -1025 +1025 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?value=bar
diff --git a/README.md b/README.md
index 78a32a60a..9eee869c8 100644
--- a/README.md
+++ b/README.md
@@ -35 +35 @@ Or feel free to just use curl, as in the examples below.
-The latest release is available as a binary at [Github][github-release].
+The latest release and setup instructions are available at [Github][github-release].
diff --git a/README.md b/README.md
index 7b375538c..78a32a60a 100644
--- a/README.md
+++ b/README.md
@@ -1172 +1172,44 @@ openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -o
-TODO
+The default settings in etcd should work well for installations on a local network where the average network latency is low.
+However, when using etcd across multiple data centers or over networks with high latency you may need to tweak the heartbeat and election timeout settings.
+
+The underlying distributed consensus protocol relies on two separate timeouts to ensure that nodes can handoff leadership if one stalls or goes offline.
+The first timeout is called the *Heartbeat Timeout*.
+This is the frequency with which the leader will notify followers that it is still the leader.
+etcd batches commands together for higher throughput so this heartbeat timeout is also a delay for how long it takes for commands to be committed.
+By default, etcd uses a `50ms` heartbeat timeout.
+
+The second timeout is the *Election Timeout*.
+This timeout is how long a follower node will go without hearing a heartbeat before attempting to become leader itself.
+By default, etcd uses a `200ms` election timeout.
+
+Adjusting these values is a trade off.
+Lowering the heartbeat timeout will cause individual commands to be committed faster but it will lower the overall throughput of etcd.
+If your etcd instances have low utilization then lowering the heartbeat timeout can improve your command response time.
+
+The election timeout should be set based on the heartbeat timeout and your network ping time between nodes.
+Election timeouts should be at least 10 times your ping time so it can account for variance in your network.
+For example, if the ping time between your nodes is 10ms then you should have at least a 100ms election timeout.
+
+You should also set your election timeout to at least 4 to 5 times your heartbeat timeout to account for variance in leader replication.
+For a heartbeat timeout of 50ms you should set your election timeout to at least 200ms - 250ms.
+
+You can override the default values on the command line:
+
+```sh
+# Command line arguments:
+$ etcd -peer-heartbeat-timeout=100 -peer-election-timeout=500
+
+# Environment variables:
+$ ETCD_PEER_HEARTBEAT_TIMEOUT=100 ETCD_PEER_ELECTION_TIMEOUT=500 etcd
+```
+
+Or you can set the values within the configuration file:
+
+```toml
+[peer]
+heartbeat_timeout = 100
+election_timeout = 100
+```
+
+The values are specified in milliseconds.
+
diff --git a/README.md b/README.md
index c8dd8fc62..7b375538c 100644
--- a/README.md
+++ b/README.md
@@ -1027,0 +1028,35 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
+
+### Leader Election
+
+The Leader Election module wraps the Lock module to allow clients to come to consensus on a single value.
+This is useful when you want one server to process at a time but allow other servers to fail over.
+The API is similar to the Lock module but is limited to simple strings values.
+
+Here's the API:
+
+**Attempt to set a value for the "order_processing" leader key:**
+
+```sh
+curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
+```
+
+**Retrieve the current value for the "order_processing" leader key:**
+
+```sh
+curl http://127.0.0.1:4001/mod/v2/leader/order_processing
+myserver1.foo.com
+```
+
+**Remove a value from the "order_processing" leader key:**
+
+```sh
+curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
+```
+
+If multiple clients attempt to set the value for a key then only one will succeed.
+The other clients will hang until the current value is removed because of TTL or because of a `DELETE` operation.
+Multiple clients can submit the same value and will all be notified when that value succeeds.
+
+To update the TTL of a value simply reissue the same `POST` command that you used to set the value.
+
+
diff --git a/README.md b/README.md
index 75eba6323..c8dd8fc62 100644
--- a/README.md
+++ b/README.md
@@ -112,0 +113,15 @@ This is because there are internal commands that also change the state like addi
+### Response Headers
+
+etcd includes a few HTTP headers that provide global information about the etcd cluster that serviced a request:
+
+```
+X-Etcd-Index: 35
+X-Raft-Index: 5398
+X-Raft-Term: 0
+```
+
+- `X-Etcd-Index` is the current etcd index as explained above.
+- `X-Raft-Index` is similar to the etcd index but is for the underlying raft protocol
+- `X-Raft-Term` this number will increase when an etcd master election happens. If this number is increasing rapdily you may need to tune the election timeout. See the [tuning][tuning] section for details.
+
+[tuning]: #tuning
@@ -1119,0 +1135,3 @@ openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -o
+### Tuning
+
+TODO
diff --git a/README.md b/README.md
index aabefcccf..75eba6323 100644
--- a/README.md
+++ b/README.md
@@ -1055,0 +1056 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [dwwoelfel/cetcd](https://github.com/dwwoelfel/cetcd)
diff --git a/README.md b/README.md
index b883f06b8..aabefcccf 100644
--- a/README.md
+++ b/README.md
@@ -274,0 +275,46 @@ The watch command returns immediately with the same response as previous.
+### Atomically Creating In-Order Keys
+
+Using the `POST` on a directory you can create keys with key names that are created in-order.
+This can be used in a variety of useful patterns like implementing queues of keys that need to be processed in strict order.
+An example use case is the [locking module][lockmod] which uses it to ensure clients get fair access to a mutex.
+
+Creating an in-order key is easy
+
+```sh
+curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job1
+```
+
+```json
+{
+    "action": "create",
+    "node": {
+        "createdIndex": 6,
+        "key": "/queue/6",
+        "modifiedIndex": 6,
+        "value": "Job1"
+    }
+}
+```
+
+If you create another entry some time later it is guaranteed to have a key name that is greater than the previous key.
+Also note the key names use the global etcd index so the next key can be more than `previous + 1`.
+
+```sh
+curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job2
+```
+
+```json
+{
+    "action": "create",
+    "node": {
+        "createdIndex": 29,
+        "key": "/queue/29",
+        "modifiedIndex": 29,
+        "value": "Job2"
+    }
+}
+```
+
+[lockmod]: #lock
+
+
@@ -403,0 +450,21 @@ We successfully changed the value from "one" to "two" since we gave the correct
+### Creating Directories
+
+In most cases directories for a key are automatically created.
+But, there are cases where you will want to create a directory or remove one.
+
+Creating a directory is just like a key only you cannot provide a value and must add the `dir=true` parameter.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d dir=true
+```
+```json
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 30,
+        "dir": true,
+        "key": "/dir",
+        "modifiedIndex": 30
+    }
+}
+```
@@ -491 +558 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-### Deleting a directory
+### Deleting a Directory
@@ -495 +562 @@ Now let's try to delete the directory `/foo_dir`.
-To delete a directory, we must add `recursive=true`.
+You can remove an empty directory using the `DELETE` verb and the `dir=true` parameter.
@@ -498 +565,18 @@ To delete a directory, we must add `recursive=true`.
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
+curl -L -X DELETE 'http://127.0.0.1:4001/v2/keys/dir?dir=true'
+```
+```json
+{
+    "action": "delete",
+    "node": {
+        "createdIndex": 30,
+        "dir": true,
+        "key": "/dir",
+        "modifiedIndex": 31
+    }
+}
+```
+
+To delete a directory that holds keys, you must add `recursive=true`.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/dir?recursive=true -XDELETE
@@ -507 +591 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-        "key": "/foo_dir",
+        "key": "/dir",
@@ -929,35 +1012,0 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
-
-### Leader Election
-
-The Leader Election module wraps the Lock module to allow clients to come to consensus on a single value.
-This is useful when you want one server to process at a time but allow other servers to fail over.
-The API is similar to the Lock module but is limited to simple strings values.
-
-Here's the API:
-
-**Attempt to set a value for the "order_processing" leader key:**
-
-```sh
-curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
-```
-
-**Retrieve the current value for the "order_processing" leader key:**
-
-```sh
-curl http://127.0.0.1:4001/mod/v2/leader/order_processing
-myserver1.foo.com
-```
-
-**Remove a value from the "order_processing" leader key:**
-
-```sh
-curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
-```
-
-If multiple clients attempt to set the value for a key then only one will succeed.
-The other clients will hang until the current value is removed because of TTL or because of a `DELETE` operation.
-Multiple clients can submit the same value and will all be notified when that value succeeds.
-
-To update the TTL of a value simply reissue the same `POST` command that you used to set the value.
-
-
diff --git a/README.md b/README.md
index 8424188b2..b883f06b8 100644
--- a/README.md
+++ b/README.md
@@ -113,15 +112,0 @@ This is because there are internal commands that also change the state like addi
-### Response Headers
-
-etcd includes a few HTTP headers that provide global information about the etcd cluster that serviced a request:
-
-```
-X-Etcd-Index: 35
-X-Raft-Index: 5398
-X-Raft-Term: 0
-```
-
-- `X-Etcd-Index` is the current etcd index as explained above.
-- `X-Raft-Index` is similar to the etcd index but is for the underlying raft protocol
-- `X-Raft-Term` this number will increase when an etcd master election happens. If this number is increasing rapdily you may need to tune the election timeout. See the [tuning][tuning] section for details.
-
-[tuning]: #tuning
@@ -943,0 +929,35 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
+
+### Leader Election
+
+The Leader Election module wraps the Lock module to allow clients to come to consensus on a single value.
+This is useful when you want one server to process at a time but allow other servers to fail over.
+The API is similar to the Lock module but is limited to simple strings values.
+
+Here's the API:
+
+**Attempt to set a value for the "order_processing" leader key:**
+
+```sh
+curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?ttl=60 -d name=myserver1.foo.com
+```
+
+**Retrieve the current value for the "order_processing" leader key:**
+
+```sh
+curl http://127.0.0.1:4001/mod/v2/leader/order_processing
+myserver1.foo.com
+```
+
+**Remove a value from the "order_processing" leader key:**
+
+```sh
+curl -X POST http://127.0.0.1:4001/mod/v2/leader/order_processing?name=myserver1.foo.com
+```
+
+If multiple clients attempt to set the value for a key then only one will succeed.
+The other clients will hang until the current value is removed because of TTL or because of a `DELETE` operation.
+Multiple clients can submit the same value and will all be notified when that value succeeds.
+
+To update the TTL of a value simply reissue the same `POST` command that you used to set the value.
+
+
@@ -1050,3 +1069,0 @@ openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -o
-### Tuning
-
-TODO
diff --git a/README.md b/README.md
index e21966686..8424188b2 100644
--- a/README.md
+++ b/README.md
@@ -112,0 +113,15 @@ This is because there are internal commands that also change the state like addi
+### Response Headers
+
+etcd includes a few HTTP headers that provide global information about the etcd cluster that serviced a request:
+
+```
+X-Etcd-Index: 35
+X-Raft-Index: 5398
+X-Raft-Term: 0
+```
+
+- `X-Etcd-Index` is the current etcd index as explained above.
+- `X-Raft-Index` is similar to the etcd index but is for the underlying raft protocol
+- `X-Raft-Term` this number will increase when an etcd master election happens. If this number is increasing rapdily you may need to tune the election timeout. See the [tuning][tuning] section for details.
+
+[tuning]: #tuning
@@ -275,45 +289,0 @@ The watch command returns immediately with the same response as previous.
-### Atomically Creating In-Order Keys
-
-Using the `POST` on a directory you can create keys with key names that are created in-order.
-This can be used in a variety of useful patterns like implementing queues of keys that need to be processed in strict order.
-An example use case is the [locking module][lockmod] which uses it to ensure clients get fair access to a mutex.
-
-Creating an in-order key is easy
-
-```sh
-curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job1
-```
-
-```json
-{
-    "action": "create",
-    "node": {
-        "createdIndex": 6,
-        "key": "/queue/6",
-        "modifiedIndex": 6,
-        "value": "Job1"
-    }
-}
-```
-
-If you create another entry some time later it is guaranteed to have a key name that is greater than the previous key.
-Also note the key names use the global etcd index so the next key can be more than `previous + 1`.
-
-```sh
-curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job2
-```
-
-```json
-{
-    "action": "create",
-    "node": {
-        "createdIndex": 29,
-        "key": "/queue/29",
-        "modifiedIndex": 29,
-        "value": "Job2"
-    }
-}
-```
-
-[lockmod]: #lock
-
@@ -1079,0 +1050,3 @@ openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -o
+### Tuning
+
+TODO
diff --git a/README.md b/README.md
index acbb7262d..e21966686 100644
--- a/README.md
+++ b/README.md
@@ -274,0 +275,45 @@ The watch command returns immediately with the same response as previous.
+### Atomically Creating In-Order Keys
+
+Using the `POST` on a directory you can create keys with key names that are created in-order.
+This can be used in a variety of useful patterns like implementing queues of keys that need to be processed in strict order.
+An example use case is the [locking module][lockmod] which uses it to ensure clients get fair access to a mutex.
+
+Creating an in-order key is easy
+
+```sh
+curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job1
+```
+
+```json
+{
+    "action": "create",
+    "node": {
+        "createdIndex": 6,
+        "key": "/queue/6",
+        "modifiedIndex": 6,
+        "value": "Job1"
+    }
+}
+```
+
+If you create another entry some time later it is guaranteed to have a key name that is greater than the previous key.
+Also note the key names use the global etcd index so the next key can be more than `previous + 1`.
+
+```sh
+curl -X POST http://127.0.0.1:4001/v2/keys/queue -d value=Job2
+```
+
+```json
+{
+    "action": "create",
+    "node": {
+        "createdIndex": 29,
+        "key": "/queue/29",
+        "modifiedIndex": 29,
+        "value": "Job2"
+    }
+}
+```
+
+[lockmod]: #lock
+
diff --git a/README.md b/README.md
index 0e1f7a8ae..acbb7262d 100644
--- a/README.md
+++ b/README.md
@@ -876 +876 @@ A lock can be associated with a name.
-The value is unique so if a lock tries to request a name that is already queued for a lock then it will find it and watch until that name obtains the lock.
+The name is unique so if a lock tries to request a name that is already queued for a lock then it will find it and watch until that name obtains the lock.
@@ -881 +881 @@ Here's the API:
-**Retrieve the current value for the "customer1" lock.**
+**Acquire a lock (with no name) for "customer1"**
@@ -884 +884 @@ Here's the API:
-curl http://127.0.0.1:4001/mod/v2/lock/customer1
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
@@ -887 +887 @@ curl http://127.0.0.1:4001/mod/v2/lock/customer1
-**Retrieve the current index for the "customer1" lock**
+**Acquire a lock for "customer1" that is associated with the name "bar"**
@@ -890 +890 @@ curl http://127.0.0.1:4001/mod/v2/lock/customer1
-curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
@@ -893 +893 @@ curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
-**Acquire a lock (with no value) for "customer1"**
+**Renew the TTL on the "customer1" lock for index 2**
@@ -896 +896 @@ curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
@@ -899 +899 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-**Acquire a lock for "customer1" that is associated with the value "bar"**
+**Renew the TTL on the "customer1" lock for name "customer1"**
@@ -902 +902 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
-curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d name=bar
@@ -905 +905 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
-**Renew the TTL on the "customer1" lock for index 2**
+**Retrieve the current name for the "customer1" lock.**
@@ -908 +908 @@ curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
+curl http://127.0.0.1:4001/mod/v2/lock/customer1
@@ -911 +911 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-**Renew the TTL on the "customer1" lock for value "customer1"**
+**Retrieve the current index for the "customer1" lock**
@@ -914 +914 @@ curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
-curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
+curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
@@ -923 +923 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-**Delete the "customer1" lock with the value "bar"**
+**Delete the "customer1" lock with the name "bar"**
@@ -926 +926 @@ curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
-curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?value=bar
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?name=bar
diff --git a/README.md b/README.md
index b2444255e..0e1f7a8ae 100644
--- a/README.md
+++ b/README.md
@@ -862,0 +863,65 @@ If you are using SSL for server-to-server communication, you must use it on all
+## Modules
+
+etcd has a number of modules that are built on top of the core etcd API.
+These modules provide things like dashboards, locks and leader election.
+
+### Dashboard
+
+An HTML dashboard can be found at `http://127.0.0.1:4001/mod/dashboard/```
+
+### Lock
+
+The Lock module implements a fair lock that can be used when lots of clients want access to a single resource.
+A lock can be associated with a name.
+The value is unique so if a lock tries to request a name that is already queued for a lock then it will find it and watch until that name obtains the lock.
+If you lock the same name on a key from two separate curl sessions they'll both return at the same time.
+
+Here's the API:
+
+**Retrieve the current value for the "customer1" lock.**
+
+```sh
+curl http://127.0.0.1:4001/mod/v2/lock/customer1
+```
+
+**Retrieve the current index for the "customer1" lock**
+
+```sh
+curl http://127.0.0.1:4001/mod/v2/lock/customer1?field=index
+```
+
+**Acquire a lock (with no value) for "customer1"**
+
+```sh
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60
+```
+
+**Acquire a lock for "customer1" that is associated with the value "bar"**
+
+```sh
+curl -X POST http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
+```
+
+**Renew the TTL on the "customer1" lock for index 2**
+
+```sh
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d index=2
+```
+
+**Renew the TTL on the "customer1" lock for value "customer1"**
+
+```sh
+curl -X PUT http://127.0.0.1:4001/mod/v2/lock/customer1?ttl=60 -d value=bar
+```
+
+**Delete the "customer1" lock with the index 2**
+
+```sh
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?index=customer1
+```
+
+**Delete the "customer1" lock with the value "bar"**
+
+```sh
+curl -X DELETE http://127.0.0.1:4001/mod/v2/lock/customer1?value=bar
+```
diff --git a/README.md b/README.md
index a95da5eec..b2444255e 100644
--- a/README.md
+++ b/README.md
@@ -229,2 +229 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-
-### Waiting for a change 
+### Waiting for a change
@@ -275,0 +275,48 @@ The watch command returns immediately with the same response as previous.
+### Using a directory TTL
+
+Like keys, directories in etcd can be set to expire after a specified number of seconds.
+You can do this by setting a TTL (time to live) on a directory when it is created with a `PUT`:
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d ttl=30 -d dir=true
+```
+
+```json
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 17,
+        "dir": true,
+        "expiration": "2013-12-11T10:37:33.689275857-08:00",
+        "key": "/newdir",
+        "modifiedIndex": 17,
+        "ttl": 30
+    }
+}
+```
+
+The directories TTL can be refreshed by making an update.
+You can do this by making a PUT with `prevExist=true` and a new TTL.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/dir -XPUT -d ttl=30 -d dir=true -d prevExist=true
+```
+
+Keys that are under this directory work as usual, but when the directory expires a watcher on a key under the directory will get an expire event:
+
+```sh
+curl -X GET http://127.0.0.1:4001/v2/keys/dir/asdf\?consistent\=true\&wait\=true
+```
+
+```json
+{
+    "action": "expire",
+    "node": {
+        "createdIndex": 8,
+        "key": "/dir",
+        "modifiedIndex": 15
+    }
+}
+```
+
+
diff --git a/README.md b/README.md
index 207a4e7f3..a95da5eec 100644
--- a/README.md
+++ b/README.md
@@ -86 +86,9 @@ curl -L http://127.0.0.1:4001/v2/keys/message -X PUT -d value="Hello world"
-{"action":"set","node":{"key":"/message","value":"Hello world","modifiedIndex":2,"createdIndex":2}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 2,
+        "key": "/message",
+        "modifiedIndex": 2,
+        "value": "Hello world"
+    }
+}
@@ -115 +123,9 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-{"action":"get","node":{"key":"/message","value":"Hello world","modifiedIndex":2,"createdIndex":2}}
+{
+    "action": "get",
+    "node": {
+        "createdIndex": 2,
+        "key": "/message",
+        "modifiedIndex": 2,
+        "value": "Hello world"
+    }
+}
@@ -128 +144,10 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-{"action":"set","node":{"key":"/message","prevValue":"Hello world","value":"Hello etcd","modifiedIndex":3,"createdIndex":3}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 3,
+        "key": "/message",
+        "modifiedIndex": 3,
+        "prevValue": "Hello world",
+        "value": "Hello etcd"
+    }
+}
@@ -144 +169,9 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-{"action":"delete","node":{"key":"/message","prevValue":"Hello etcd","modifiedIndex":4,"createdIndex":3}}
+{
+    "action": "delete",
+    "node": {
+        "createdIndex": 3,
+        "key": "/message",
+        "modifiedIndex": 4,
+        "prevValue": "Hello etcd"
+    }
+}
@@ -158 +191,11 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
-{"action":"set","node":{"key":"/foo","value":"bar","expiration":"2013-12-04T12:01:21.874888581-08:00","ttl":5,"modifiedIndex":5,"createdIndex":5}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 5,
+        "expiration": "2013-12-04T12:01:21.874888581-08:00",
+        "key": "/foo",
+        "modifiedIndex": 5,
+        "ttl": 5,
+        "value": "bar"
+    }
+}
@@ -178 +221,6 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6}
+{
+    "cause": "/foo",
+    "errorCode": 100,
+    "index": 6,
+    "message": "Key Not Found"
+}
@@ -204 +252,9 @@ The first terminal should get the notification and return with the same response
-{"action":"set","node":{"key":"/foo","value":"bar","modifiedIndex":7,"createdIndex":7}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 7,
+        "key": "/foo",
+        "modifiedIndex": 7,
+        "value": "bar"
+    }
+}
@@ -251 +307,6 @@ The error code explains the problem:
-{"errorCode":105,"message":"Already exists","cause":"/foo","index":39776}
+{
+    "cause": "/foo",
+    "errorCode": 105,
+    "index": 39776,
+    "message": "Already exists"
+}
@@ -263 +324,6 @@ This will try to compare the previous value of the key and the previous value we
-{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":8}
+{
+    "cause": "[two != one] [0 != 8]",
+    "errorCode": 101,
+    "index": 8,
+    "message": "Test Failed"
+}
@@ -277 +343,10 @@ The response should be
-{"action":"compareAndSwap","node":{"key":"/foo","prevValue":"one","value":"two","modifiedIndex":9,"createdIndex":8}}
+{
+    "action": "compareAndSwap",
+    "node": {
+        "createdIndex": 8,
+        "key": "/foo",
+        "modifiedIndex": 9,
+        "prevValue": "one",
+        "value": "two"
+    }
+}
@@ -298 +373,9 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
-{"action":"set","node":{"key":"/foo_dir/foo","value":"bar","modifiedIndex":2,"createdIndex":2}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 2,
+        "key": "/foo_dir/foo",
+        "modifiedIndex": 2,
+        "value": "bar"
+    }
+}
@@ -310 +393,15 @@ We should see the response as an array of items:
-{"action":"get","node":{"key":"/","dir":true,"nodes":[{"key":"/foo_dir","dir":true,"modifiedIndex":2,"createdIndex":2}]}}
+{
+    "action": "get",
+    "node": {
+        "dir": true,
+        "key": "/",
+        "nodes": [
+            {
+                "createdIndex": 2,
+                "dir": true,
+                "key": "/foo_dir",
+                "modifiedIndex": 2
+            }
+        ]
+    }
+}
@@ -321 +418,23 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-{"action":"get","node":{"key":"/","dir":true,"nodes":[{"key":"/foo_dir","dir":true,"nodes":[{"key":"/foo_dir/foo","value":"bar","modifiedIndex":2,"createdIndex":2}],"modifiedIndex":2,"createdIndex":2}]}}
+{
+    "action": "get",
+    "node": {
+        "dir": true,
+        "key": "/",
+        "nodes": [
+            {
+                "createdIndex": 2,
+                "dir": true,
+                "key": "/foo_dir",
+                "modifiedIndex": 2,
+                "nodes": [
+                    {
+                        "createdIndex": 2,
+                        "key": "/foo_dir/foo",
+                        "modifiedIndex": 2,
+                        "value": "bar"
+                    }
+                ]
+            }
+        ]
+    }
+}
@@ -336 +455,9 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-{"action":"delete","node":{"key":"/foo_dir","dir":true,"modifiedIndex":11,"createdIndex":10}}
+{
+    "action": "delete",
+    "node": {
+        "createdIndex": 10,
+        "dir": true,
+        "key": "/foo_dir",
+        "modifiedIndex": 11
+    }
+}
@@ -352 +479,9 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-{"action":"set","node":{"key":"/_message","value":"Hello hidden world","modifiedIndex":3,"createdIndex":3}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 3,
+        "key": "/_message",
+        "modifiedIndex": 3,
+        "value": "Hello hidden world"
+    }
+}
@@ -363 +498,9 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-{"action":"set","node":{"key":"/message","value":"Hello world","modifiedIndex":4,"createdIndex":4}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 4,
+        "key": "/message",
+        "modifiedIndex": 4,
+        "value": "Hello world"
+    }
+}
@@ -373 +516,21 @@ curl -L http://127.0.0.1:4001/v2/keys/
-{"action":"get","node":{"key":"/","dir":true,"nodes":[{"key":"/foo_dir","dir":true,"modifiedIndex":2,"createdIndex":2},{"key":"/message","value":"Hello world","modifiedIndex":4,"createdIndex":4}]}}
+{
+    "action": "get",
+    "node": {
+        "dir": true,
+        "key": "/",
+        "nodes": [
+            {
+                "createdIndex": 2,
+                "dir": true,
+                "key": "/foo_dir",
+                "modifiedIndex": 2
+            },
+            {
+                "createdIndex": 4,
+                "key": "/message",
+                "modifiedIndex": 4,
+                "value": "Hello world"
+            }
+        ]
+    }
+}
@@ -424 +587,7 @@ And also the response from the etcd server:
-{"action":"set","key":"/foo","prevValue":"bar","value":"bar","modifiedIndex":3}
+{
+    "action": "set",
+    "key": "/foo",
+    "modifiedIndex": 3,
+    "prevValue": "bar",
+    "value": "bar"
+}
@@ -471 +640,10 @@ And also the response from the server:
-{"action":"set","node":{"key":"/foo","prevValue":"two","value":"bar","modifiedIndex":12,"createdIndex":12}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 12,
+        "key": "/foo",
+        "modifiedIndex": 12,
+        "prevValue": "two",
+        "value": "bar"
+    }
+}
@@ -519 +697,29 @@ curl -L http://127.0.0.1:4001/v2/keys/_etcd/machines
-{"action":"get","node":{"key":"/_etcd/machines","dir":true,"nodes":[{"key":"/_etcd/machines/machine1","value":"raft=http://127.0.0.1:7001\u0026etcd=http://127.0.0.1:4001","modifiedIndex":1,"createdIndex":1},{"key":"/_etcd/machines/machine2","value":"raft=http://127.0.0.1:7002\u0026etcd=http://127.0.0.1:4002","modifiedIndex":2,"createdIndex":2},{"key":"/_etcd/machines/machine3","value":"raft=http://127.0.0.1:7003\u0026etcd=http://127.0.0.1:4003","modifiedIndex":3,"createdIndex":3}],"modifiedIndex":1,"createdIndex":1}}
+{
+    "action": "get",
+    "node": {
+        "createdIndex": 1,
+        "dir": true,
+        "key": "/_etcd/machines",
+        "modifiedIndex": 1,
+        "nodes": [
+            {
+                "createdIndex": 1,
+                "key": "/_etcd/machines/machine1",
+                "modifiedIndex": 1,
+                "value": "raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001"
+            },
+            {
+                "createdIndex": 2,
+                "key": "/_etcd/machines/machine2",
+                "modifiedIndex": 2,
+                "value": "raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002"
+            },
+            {
+                "createdIndex": 3,
+                "key": "/_etcd/machines/machine3",
+                "modifiedIndex": 3,
+                "value": "raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003"
+            }
+        ]
+    }
+}
@@ -541 +747,9 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-{"action":"set","node":{"key":"/foo","value":"bar","modifiedIndex":4,"createdIndex":4}}
+{
+    "action": "set",
+    "node": {
+        "createdIndex": 4,
+        "key": "/foo",
+        "modifiedIndex": 4,
+        "value": "bar"
+    }
+}
@@ -582 +796,9 @@ curl -L http://127.0.0.1:4002/v2/keys/foo
-{"action":"get","node":{"key":"/foo","value":"bar","modifiedIndex":4,"createdIndex":4}}
+{
+    "action": "get",
+    "node": {
+        "createdIndex": 4,
+        "key": "/foo",
+        "modifiedIndex": 4,
+        "value": "bar"
+    }
+}
diff --git a/README.md b/README.md
index a74363eb4..207a4e7f3 100644
--- a/README.md
+++ b/README.md
@@ -86 +86 @@ curl -L http://127.0.0.1:4001/v2/keys/message -X PUT -d value="Hello world"
-{"action":"set","key":"/message","value":"Hello world","modifiedIndex":2}
+{"action":"set","node":{"key":"/message","value":"Hello world","modifiedIndex":2,"createdIndex":2}}
@@ -115 +115 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-{"action":"get","key":"/message","value":"Hello world","modifiedIndex":2}
+{"action":"get","node":{"key":"/message","value":"Hello world","modifiedIndex":2,"createdIndex":2}}
@@ -128 +128 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":3}
+{"action":"set","node":{"key":"/message","prevValue":"Hello world","value":"Hello etcd","modifiedIndex":3,"createdIndex":3}}
@@ -131 +131 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
-Notice that the `prevValue` is set to the previous value of the key - `Hello world`.
+Notice that `node.prevValue` is set to the previous value of the key - `Hello world`.
@@ -144 +144 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-{"action":"delete","key":"/message","prevValue":"Hello etcd","modifiedIndex":4}
+{"action":"delete","node":{"key":"/message","prevValue":"Hello etcd","modifiedIndex":4,"createdIndex":3}}
@@ -158 +158 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
-{"action":"set","key":"/foo","value":"bar","expiration":"2013-11-12T20:21:22.629352334-05:00","ttl":5,"modifiedIndex":5}
+{"action":"set","node":{"key":"/foo","value":"bar","expiration":"2013-12-04T12:01:21.874888581-08:00","ttl":5,"modifiedIndex":5,"createdIndex":5}}
@@ -204 +204 @@ The first terminal should get the notification and return with the same response
-{"action":"set","key":"/foo","value":"bar","modifiedIndex":7}
+{"action":"set","node":{"key":"/foo","value":"bar","modifiedIndex":7,"createdIndex":7}}
@@ -277 +277 @@ The response should be
-{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","modifiedIndex":9}
+{"action":"compareAndSwap","node":{"key":"/foo","prevValue":"one","value":"two","modifiedIndex":9,"createdIndex":8}}
@@ -280 +280 @@ The response should be
-We successfully changed the value from “one” to “two” since we gave the correct previous value.
+We successfully changed the value from "one" to "two" since we gave the correct previous value.
@@ -298 +298 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
-{"action":"set","key":"/foo_dir/foo","value":"bar","modifiedIndex":10}
+{"action":"set","node":{"key":"/foo_dir/foo","value":"bar","modifiedIndex":2,"createdIndex":2}}
@@ -310 +310 @@ We should see the response as an array of items:
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two","modifiedIndex":9},{"key":"/foo_dir","dir":true,"modifiedIndex":10}],"modifiedIndex":0}
+{"action":"get","node":{"key":"/","dir":true,"nodes":[{"key":"/foo_dir","dir":true,"modifiedIndex":2,"createdIndex":2}]}}
@@ -321 +321 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two","modifiedIndex":9},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar","modifiedIndex":10}],"modifiedIndex":10}],"modifiedIndex":0}
+{"action":"get","node":{"key":"/","dir":true,"nodes":[{"key":"/foo_dir","dir":true,"nodes":[{"key":"/foo_dir/foo","value":"bar","modifiedIndex":2,"createdIndex":2}],"modifiedIndex":2,"createdIndex":2}]}}
@@ -336 +336 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-{"action":"delete","key":"/foo_dir","dir":true,"modifiedIndex":11}
+{"action":"delete","node":{"key":"/foo_dir","dir":true,"modifiedIndex":11,"createdIndex":10}}
@@ -352 +352 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-{"action":"set","key":"/_message","value":"Hello hidden world","modifiedIndex":12}
+{"action":"set","node":{"key":"/_message","value":"Hello hidden world","modifiedIndex":3,"createdIndex":3}}
@@ -363 +363 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-{"action":"set","key":"/message","value":"Hello world","modifiedIndex":13}
+{"action":"set","node":{"key":"/message","value":"Hello world","modifiedIndex":4,"createdIndex":4}}
@@ -373 +373 @@ curl -L http://127.0.0.1:4001/v2/keys/
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two","modifiedIndex":9},{"key":"/message","value":"Hello world","modifiedIndex":13}],"modifiedIndex":0}
+{"action":"get","node":{"key":"/","dir":true,"nodes":[{"key":"/foo_dir","dir":true,"modifiedIndex":2,"createdIndex":2},{"key":"/message","value":"Hello world","modifiedIndex":4,"createdIndex":4}]}}
@@ -471 +471 @@ And also the response from the server:
-{"action":"set","key":"/foo","prevValue":"bar","value":"bar","modifiedIndex":3}
+{"action":"set","node":{"key":"/foo","prevValue":"two","value":"bar","modifiedIndex":12,"createdIndex":12}}
@@ -519 +519 @@ curl -L http://127.0.0.1:4001/v2/keys/_etcd/machines
-[{"action":"get","key":"/_etcd/machines/machine1","value":"raft=http://127.0.0.1:7001\u0026etcd=http://127.0.0.1:4001","index":1},{"action":"get","key":"/_etcd/machines/machine2","value":"raft=http://127.0.0.1:7002\u0026etcd=http://127.0.0.1:4002","index":1},{"action":"get","key":"/_etcd/machines/machine3","value":"raft=http://127.0.0.1:7003\u0026etcd=http://127.0.0.1:4003","index":1}]
+{"action":"get","node":{"key":"/_etcd/machines","dir":true,"nodes":[{"key":"/_etcd/machines/machine1","value":"raft=http://127.0.0.1:7001\u0026etcd=http://127.0.0.1:4001","modifiedIndex":1,"createdIndex":1},{"key":"/_etcd/machines/machine2","value":"raft=http://127.0.0.1:7002\u0026etcd=http://127.0.0.1:4002","modifiedIndex":2,"createdIndex":2},{"key":"/_etcd/machines/machine3","value":"raft=http://127.0.0.1:7003\u0026etcd=http://127.0.0.1:4003","modifiedIndex":3,"createdIndex":3}],"modifiedIndex":1,"createdIndex":1}}
@@ -541 +541 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-{"action":"set","key":"/foo","value":"bar","modifiedIndex":4}
+{"action":"set","node":{"key":"/foo","value":"bar","modifiedIndex":4,"createdIndex":4}}
@@ -582 +582 @@ curl -L http://127.0.0.1:4002/v2/keys/foo
-{"action":"get","key":"/foo","value":"bar","index":4}
+{"action":"get","node":{"key":"/foo","value":"bar","modifiedIndex":4,"createdIndex":4}}
diff --git a/README.md b/README.md
index e8601e104..a74363eb4 100644
--- a/README.md
+++ b/README.md
@@ -222 +222 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service.
@@ -224 +224 @@ Etcd can be used as a centralized coordination service in a cluster and `Compare
-This command will set the value of a key only if the client-provided conditions are equal to the current conditions. 
+This command will set the value of a key only if the client-provided conditions are equal to the current conditions.
@@ -241,2 +241,14 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=one
-Let's try an invalid `CompareAndSwap` command first.
-We can provide the `prevValue` parameter to the set command to make it a `CompareAndSwap` command.
+Let's try some invalid `CompareAndSwap` commands first.
+
+Trying to set this existing key with `prevExist=false` fails as expected:
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevExist=false -XPUT -d value=three
+```
+
+The error code explains the problem:
+
+```json
+{"errorCode":105,"message":"Already exists","cause":"/foo","index":39776}
+```
+
+Now lets provide a `prevValue` parameter:
diff --git a/README.md b/README.md
index 3db3f8642..e8601e104 100644
--- a/README.md
+++ b/README.md
@@ -222 +222 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service.
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
@@ -224 +224 @@ Etcd can be used as a centralized coordination service in a cluster and `Compare
-This command will set the value of a key only if the client-provided conditions are equal to the current conditions.
+This command will set the value of a key only if the client-provided conditions are equal to the current conditions. 
@@ -241,14 +241,2 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=one
-Let's try some invalid `CompareAndSwap` commands first.
-
-Trying to set this existing key with `prevExist=false` fails as expected:
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevExist=false -XPUT -d value=three
-```
-
-The error code explains the problem:
-
-```json
-{"errorCode":105,"message":"Already exists","cause":"/foo","index":39776}
-```
-
-Now lets provide a `prevValue` parameter:
+Let's try an invalid `CompareAndSwap` command first.
+We can provide the `prevValue` parameter to the set command to make it a `CompareAndSwap` command.
@@ -408,0 +397,6 @@ You should be able to see the handshake succeed.
+**OSX 10.9+ Users**: curl 7.30.0 on OSX 10.9+ doesn't understand certificates passed in on the command line.
+Instead you must import the dummy ca.crt directly into the keychain or add the `-k` flag to curl to ignore errors.
+If you want to test without the `-k` flag run `open ./fixtures/ca/ca.crt` and follow the prompts.
+Please remove this certificate after you are done testing!
+If you know of a workaround let us know.
+
diff --git a/README.md b/README.md
index 0cc358d61..3db3f8642 100644
--- a/README.md
+++ b/README.md
@@ -241,2 +241,14 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=one
-Let's try an invalid `CompareAndSwap` command first.
-We can provide the `prevValue` parameter to the set command to make it a `CompareAndSwap` command.
+Let's try some invalid `CompareAndSwap` commands first.
+
+Trying to set this existing key with `prevExist=false` fails as expected:
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevExist=false -XPUT -d value=three
+```
+
+The error code explains the problem:
+
+```json
+{"errorCode":105,"message":"Already exists","cause":"/foo","index":39776}
+```
+
+Now lets provide a `prevValue` parameter:
diff --git a/README.md b/README.md
index 9d38186bd..0cc358d61 100644
--- a/README.md
+++ b/README.md
@@ -222 +222 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service.
@@ -224 +224 @@ Etcd can be used as a centralized coordination service in a cluster and `Compare
-This command will set the value of a key only if the client-provided conditions are equal to the current conditions. 
+This command will set the value of a key only if the client-provided conditions are equal to the current conditions.
diff --git a/README.md b/README.md
index b18e42b66..9d38186bd 100644
--- a/README.md
+++ b/README.md
@@ -124 +124 @@ You can change the value of `/message` from `Hello world` to `Hello etcd` with a
-curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello etcd"
@@ -238 +238 @@ Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=one
@@ -245 +245 @@ We can provide the `prevValue` parameter to the set command to make it a `Compar
-curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=two -XPUT -d value=three
@@ -438 +438 @@ We need to give the CA signed cert to the server.
-curl --key ./fixtures/ca/server2.key.insecure --cert ./fixtures/ca/server2.crt --cacert ./fixtures/ca/server-chain.pem -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v
+curl --key ./fixtures/ca/server2.key.insecure --cert ./fixtures/ca/server2.crt --cacert ./fixtures/ca/server-chain.pem -L https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -485 +485 @@ We can retrieve a list of machines in the cluster using the HTTP API:
-curl -L http://127.0.0.1:4001/v1/machines
+curl -L http://127.0.0.1:4001/v2/machines
@@ -497 +497 @@ The machine list is also available via the main key API:
-curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
+curl -L http://127.0.0.1:4001/v2/keys/_etcd/machines
@@ -532 +532 @@ Now if we kill the leader of the cluster, we can get the value from one of the o
-curl -L http://127.0.0.1:4002/v1/keys/foo
+curl -L http://127.0.0.1:4002/v2/keys/foo
@@ -538 +538 @@ We can also see that a new leader has been elected:
-curl -L http://127.0.0.1:4002/v1/leader
+curl -L http://127.0.0.1:4002/v2/leader
@@ -560 +560 @@ Your request for the `foo` key will return the correct value:
-curl -L http://127.0.0.1:4002/v1/keys/foo
+curl -L http://127.0.0.1:4002/v2/keys/foo
diff --git a/README.md b/README.md
index 3caf06fd0..b18e42b66 100644
--- a/README.md
+++ b/README.md
@@ -59 +59 @@ go version
-### Running a single node
+### Running a single machine
@@ -61 +61 @@ go version
-These examples will use a single node cluster to show you the basics of the etcd REST API.
+These examples will use a single machine cluster to show you the basics of the etcd REST API.
@@ -65 +65 @@ Let's start etcd:
-./etcd -data-dir node0 -name node0
+./etcd -data-dir machine0 -name machine0
@@ -68,3 +68,3 @@ Let's start etcd:
-This will bring up an etcd node listening on port 4001 for client communication and on port 7001 for server-to-server communication.
-The `-data-dir node0` argument tells etcd to write node configuration, logs and snapshots to the `./node0/` directory.
-The `-name node0` tells the rest of the cluster that this node is named node0.
+This will bring up etcd listening on port 4001 for client communication and on port 7001 for server-to-server communication.
+The `-data-dir machine0` argument tells etcd to write machine configuration, logs and snapshots to the `./machine0/` directory.
+The `-name machine` tells the rest of the cluster that this machine is named machine0.
@@ -78 +78 @@ The `-name node0` tells the rest of the cluster that this node is named node0.
-Let’s set the first key-value pair to the node.
+Let’s set the first key-value pair to the datastore.
@@ -167 +167 @@ Note the two new fields in response:
-_NOTE_: Keys can only be expired by a cluster leader so if a node gets disconnected from the cluster, its keys will not expire until it rejoins.
+_NOTE_: Keys can only be expired by a cluster leader so if a machine gets disconnected from the cluster, its keys will not expire until it rejoins.
@@ -381 +381 @@ Let's configure etcd to use this keypair:
-./etcd -f -name node0 -data-dir node0 -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
+./etcd -f -name machine0 -data-dir machine0 -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
@@ -386 +386 @@ There are a few new options we're using:
-* `-f` - forces a new node configuration, even if an existing configuration is found. (WARNING: data loss!)
+* `-f` - forces a new machine configuration, even if an existing configuration is found. (WARNING: data loss!)
@@ -416 +416 @@ The clients will provide their cert to the server and the server will check whet
-./etcd -f -name node0 -data-dir node0 -ca-file=./fixtures/ca/ca.crt -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
+./etcd -f -name machine0 -data-dir machine0 -ca-file=./fixtures/ca/ca.crt -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
@@ -466 +466 @@ Let start by creating 3 new etcd instances.
-We use `-peer-addr` to specify server port and `-addr` to specify client port and `-data-dir` to specify the directory to store the log and info of the node in the cluster:
+We use `-peer-addr` to specify server port and `-addr` to specify client port and `-data-dir` to specify the directory to store the log and info of the machine in the cluster:
@@ -469 +469 @@ We use `-peer-addr` to specify server port and `-addr` to specify client port an
-./etcd -peer-addr 127.0.0.1:7001 -addr 127.0.0.1:4001 -data-dir nodes/node1 -name node1
+./etcd -peer-addr 127.0.0.1:7001 -addr 127.0.0.1:4001 -data-dir machines/machine1 -name machine1
@@ -475 +475 @@ A similar argument `-peer-bind-addr` is used to setup the listening address for
-Let's join two more nodes to this cluster using the `-peers` argument:
+Let's join two more machines to this cluster using the `-peers` argument:
@@ -478,2 +478,2 @@ Let's join two more nodes to this cluster using the `-peers` argument:
-./etcd -peer-addr 127.0.0.1:7002 -addr 127.0.0.1:4002 -peers 127.0.0.1:7001 -data-dir nodes/node2 -name node2
-./etcd -peer-addr 127.0.0.1:7003 -addr 127.0.0.1:4003 -peers 127.0.0.1:7001 -data-dir nodes/node3 -name node3
+./etcd -peer-addr 127.0.0.1:7002 -addr 127.0.0.1:4002 -peers 127.0.0.1:7001 -data-dir machines/machine2 -name machine2
+./etcd -peer-addr 127.0.0.1:7003 -addr 127.0.0.1:4003 -peers 127.0.0.1:7001 -data-dir machines/machine3 -name machine3
@@ -488 +488 @@ curl -L http://127.0.0.1:4001/v1/machines
-We should see there are three nodes in the cluster
+We should see there are three machines in the cluster
@@ -501 +501 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001\u0026etcd=http://127.0.0.1:4001","index":1},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002\u0026etcd=http://127.0.0.1:4002","index":1},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003\u0026etcd=http://127.0.0.1:4003","index":1}]
+[{"action":"get","key":"/_etcd/machines/machine1","value":"raft=http://127.0.0.1:7001\u0026etcd=http://127.0.0.1:4001","index":1},{"action":"get","key":"/_etcd/machines/machine2","value":"raft=http://127.0.0.1:7002\u0026etcd=http://127.0.0.1:4002","index":1},{"action":"get","key":"/_etcd/machines/machine3","value":"raft=http://127.0.0.1:7003\u0026etcd=http://127.0.0.1:4003","index":1}]
@@ -554,2 +554,2 @@ http://127.0.0.1:7003
-Next we'll kill all the nodes to test persistence.
-Type `CTRL-C` on each terminal and then rerun the same command you used to start each node.
+Next we'll kill all the machines to test persistence.
+Type `CTRL-C` on each terminal and then rerun the same command you used to start each machine.
@@ -657,2 +657,2 @@ Odd numbers are good because if you have 8 peers the majority will be 5 and if y
-The result is that an 8 peer cluster can tolerate 3 peer failures and a 9 peer cluster can tolerate 4 nodes failures.
-And in the best case when all 9 peers are responding the cluster will perform at the speed of the fastest 5 nodes.
+The result is that an 8 peer cluster can tolerate 3 peer failures and a 9 peer cluster can tolerate 4 machine failures.
+And in the best case when all 9 peers are responding the cluster will perform at the speed of the fastest 5 machines.
@@ -680 +680 @@ When creating the cert be sure to reference it in the `-extensions` flag:
-openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
+openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/machine.crt -infiles machine.csr
diff --git a/README.md b/README.md
index c46d7682f..3caf06fd0 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ Or feel free to just use curl, as in the examples below.
-[etcdctl]: http://coreos.com/docs/etcdctl/
+[etcdctl]: http://github.com/coreos/etcdctl/
diff --git a/README.md b/README.md
index 13f111dbf..c46d7682f 100644
--- a/README.md
+++ b/README.md
@@ -619,0 +620 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [rthomas/clj-etcd](https://github.com/rthomas/clj-etcd)
diff --git a/README.md b/README.md
index 3b1f258e6..13f111dbf 100644
--- a/README.md
+++ b/README.md
@@ -381 +381 @@ Let's configure etcd to use this keypair:
-./etcd -name node0 -data-dir node0 -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure -force-config
+./etcd -f -name node0 -data-dir node0 -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
@@ -386 +386 @@ There are a few new options we're using:
-* `-force-config` - forces a new node configuration, even if an existing configuration is found. (WARNING: data loss!)
+* `-f` - forces a new node configuration, even if an existing configuration is found. (WARNING: data loss!)
@@ -416 +416 @@ The clients will provide their cert to the server and the server will check whet
-./etcd -name node0 -data-dir node0 -ca-file=./fixtures/ca/ca.crt -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure -force-config
+./etcd -f -name node0 -data-dir node0 -ca-file=./fixtures/ca/ca.crt -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure
diff --git a/README.md b/README.md
index e51674488..3b1f258e6 100644
--- a/README.md
+++ b/README.md
@@ -65 +65 @@ Let's start etcd:
-./etcd -d node0 -n node0
+./etcd -data-dir node0 -name node0
@@ -69,2 +69,2 @@ This will bring up an etcd node listening on port 4001 for client communication
-The `-d node0` argument tells etcd to write node configuration, logs and snapshots to the `./node0/` directory.
-The `-n node0` tells the rest of the cluster that this node is named node0.
+The `-data-dir node0` argument tells etcd to write node configuration, logs and snapshots to the `./node0/` directory.
+The `-name node0` tells the rest of the cluster that this node is named node0.
@@ -381 +381 @@ Let's configure etcd to use this keypair:
-./etcd -n node0 -d node0 -clientCert=./fixtures/ca/server.crt -clientKey=./fixtures/ca/server.key.insecure -f
+./etcd -name node0 -data-dir node0 -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure -force-config
@@ -386,2 +386,2 @@ There are a few new options we're using:
-* `-f` - forces a new node configuration, even if an existing configuration is found. (WARNING: data loss!)
-* `-clientCert` and `-clientKey` specify the location of the cert and key files to be used for for transport layer security between the client and server.
+* `-force-config` - forces a new node configuration, even if an existing configuration is found. (WARNING: data loss!)
+* `-cert-file` and `-key-file` specify the location of the cert and key files to be used for for transport layer security between the client and server.
@@ -416 +416 @@ The clients will provide their cert to the server and the server will check whet
-./etcd -n node0 -d node0 -clientCAFile=./fixtures/ca/ca.crt -clientCert=./fixtures/ca/server.crt -clientKey=./fixtures/ca/server.key.insecure -f
+./etcd -name node0 -data-dir node0 -ca-file=./fixtures/ca/ca.crt -cert-file=./fixtures/ca/server.crt -key-file=./fixtures/ca/server.key.insecure -force-config
@@ -419 +419 @@ The clients will provide their cert to the server and the server will check whet
-```-clientCAFile``` is the path to the CA cert.
+```-ca-file``` is the path to the CA cert.
@@ -466 +466 @@ Let start by creating 3 new etcd instances.
-We use -s to specify server port and -c to specify client port and -d to specify the directory to store the log and info of the node in the cluster
+We use `-peer-addr` to specify server port and `-addr` to specify client port and `-data-dir` to specify the directory to store the log and info of the node in the cluster:
@@ -469 +469 @@ We use -s to specify server port and -c to specify client port and -d to specify
-./etcd -s 127.0.0.1:7001 -c 127.0.0.1:4001 -d nodes/node1 -n node1
+./etcd -peer-addr 127.0.0.1:7001 -addr 127.0.0.1:4001 -data-dir nodes/node1 -name node1
@@ -472,2 +472,2 @@ We use -s to specify server port and -c to specify client port and -d to specify
-**Note:** If you want to run etcd on an external IP address and still have access locally, you'll need to add `-cl 0.0.0.0` so that it will listen on both external and localhost addresses.
-A similar argument `-sl` is used to setup the listening address for the server port.
+**Note:** If you want to run etcd on an external IP address and still have access locally, you'll need to add `-bind-addr 0.0.0.0` so that it will listen on both external and localhost addresses.
+A similar argument `-peer-bind-addr` is used to setup the listening address for the server port.
@@ -475 +475 @@ A similar argument `-sl` is used to setup the listening address for the server p
-Let's join two more nodes to this cluster using the `-C` argument:
+Let's join two more nodes to this cluster using the `-peers` argument:
@@ -478,2 +478,2 @@ Let's join two more nodes to this cluster using the `-C` argument:
-./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -peer-addr 127.0.0.1:7002 -addr 127.0.0.1:4002 -peers 127.0.0.1:7001 -data-dir nodes/node2 -name node2
+./etcd -peer-addr 127.0.0.1:7003 -addr 127.0.0.1:4003 -peers 127.0.0.1:7001 -data-dir nodes/node3 -name node3
@@ -572 +572 @@ Etcd can also do internal server-to-server communication using SSL client certs.
-To do this just change the `-client*` flags to `-server*`.
+To do this just change the `-*-file` flags to `-peer-*-file`.
@@ -651 +651 @@ Every command the client sends to the master is broadcast to all of the follower
-The command is not committed until the majority of the cluster machines receive that command.
+The command is not committed until the majority of the cluster peers receive that command.
@@ -653 +653 @@ The command is not committed until the majority of the cluster machines receive
-Because of this majority voting property, the ideal cluster should be kept small to keep speed up and be made up of an odd number of machines.
+Because of this majority voting property, the ideal cluster should be kept small to keep speed up and be made up of an odd number of peers.
@@ -655,3 +655,3 @@ Because of this majority voting property, the ideal cluster should be kept small
-Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority will still be 5.
-The result is that an 8 machine cluster can tolerate 3 machine failures and a 9 machine cluster can tolerate 4 nodes failures.
-And in the best case when all 9 machines are responding the cluster will perform at the speed of the fastest 5 nodes.
+Odd numbers are good because if you have 8 peers the majority will be 5 and if you have 9 peers the majority will still be 5.
+The result is that an 8 peer cluster can tolerate 3 peer failures and a 9 peer cluster can tolerate 4 nodes failures.
+And in the best case when all 9 peers are responding the cluster will perform at the speed of the fastest 5 nodes.
diff --git a/README.md b/README.md
index 372d3dbd9..e51674488 100644
--- a/README.md
+++ b/README.md
@@ -619,0 +620,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+
+**Erlang libraries**
+
+- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
diff --git a/README.md b/README.md
index cc676e0ee..372d3dbd9 100644
--- a/README.md
+++ b/README.md
@@ -364,3 +363,0 @@ curl -L http://127.0.0.1:4001/v2/keys/
-<<<<<<< HEAD
-which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
-=======
@@ -369,2 +365,0 @@ Here we see the `/message` key but our hidden `/_message` key is not returned.
->>>>>>> aa047b124d7beefcfa3dc79f1791bf60980cbe6b
-
diff --git a/README.md b/README.md
index bd5f99eb4..cc676e0ee 100644
--- a/README.md
+++ b/README.md
@@ -22,0 +23,6 @@ Or feel free to just use curl, as in the examples below.
+## Contact
+
+- Mailing list: http://coreos.com/lists/etcd-dev/
+- IRC: #coreos on irc.freenode.net
+- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
+- Bugs: https://github.com/coreos/etcd/issues
@@ -357,0 +364,3 @@ curl -L http://127.0.0.1:4001/v2/keys/
+<<<<<<< HEAD
+which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
+=======
@@ -359,0 +369 @@ Here we see the `/message` key but our hidden `/_message` key is not returned.
+>>>>>>> aa047b124d7beefcfa3dc79f1791bf60980cbe6b
diff --git a/README.md b/README.md
index 4ebeaac51..bd5f99eb4 100644
--- a/README.md
+++ b/README.md
@@ -387 +387 @@ You can now test the configuration using HTTPS:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert ./fixtures/ca/server-chain.pem https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -419 +419 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert ./fixtures/ca/server-chain.pem https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -433 +433 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl --key ./fixtures/ca/server2.key.insecure --cert ./fixtures/ca/server2.crt --cacert ./fixtures/ca/server-chain.pem -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v
diff --git a/README.md b/README.md
index 3c3bfb481..4ebeaac51 100644
--- a/README.md
+++ b/README.md
@@ -2 +2,2 @@
-README version 0.1.0
+
+README version 0.2.0
@@ -6 +7,2 @@ README version 0.1.0
-A highly-available key value store for shared configuration and service discovery. etcd is inspired by zookeeper and doozer, with a focus on:
+A highly-available key value store for shared configuration and service discovery.
+etcd is inspired by zookeeper and doozer, with a focus on:
@@ -13 +15 @@ A highly-available key value store for shared configuration and service discover
-Etcd is written in Go and uses the [raft][raft] consensus algorithm to manage a highly-available replicated log.
+Etcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.
@@ -15 +17,2 @@ Etcd is written in Go and uses the [raft][raft] consensus algorithm to manage a
-See [etcdctl][etcdctl] for a simple command line client. Or feel free to just use curl, as in the examples below.
+See [etcdctl][etcdctl] for a simple command line client.
+Or feel free to just use curl, as in the examples below.
@@ -20 +22,0 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
-## Contact
@@ -22,4 +23,0 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
-- Mailing list: http://coreos.com/lists/etcd-dev/
-- IRC: #coreos on irc.freenode.net
-- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
-- Bugs: https://github.com/coreos/etcd/issues
@@ -34,0 +33 @@ The latest release is available as a binary at [Github][github-release].
+
@@ -52,0 +52 @@ go version
+
@@ -55 +55,2 @@ go version
-These examples will use a single node cluster to show you the basics of the etcd REST API. Lets start etcd:
+These examples will use a single node cluster to show you the basics of the etcd REST API.
+Let's start etcd:
@@ -64,0 +66,2 @@ The `-n node0` tells the rest of the cluster that this node is named node0.
+
+
@@ -69 +72,2 @@ The `-n node0` tells the rest of the cluster that this node is named node0.
-Let’s set the first key-value pair to the node. In this case the key is `/message` and the value is `Hello world`.
+Let’s set the first key-value pair to the node.
+In this case the key is `/message` and the value is `Hello world`.
@@ -72 +76 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl -L http://127.0.0.1:4001/v2/keys/message -X PUT -d value="Hello world"
@@ -76 +80 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
-{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
+{"action":"set","key":"/message","value":"Hello world","modifiedIndex":2}
@@ -79 +83,2 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
-This response contains five fields. We will introduce three more fields as we try more commands.
+This response contains four fields.
+We will introduce three more fields as we try more commands.
@@ -81 +86 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a POST request, thus the action is `SET`.
+1. The action of the request; we set the value via a `PUT` request, thus the action is `set`.
@@ -83,2 +88,2 @@ This response contains five fields. We will introduce three more fields as we tr
-2. The key of the request; we set `/message` to `Hello world!`, so the key field is `/message`.
-Notice we use a file system like structure to represent the key-value pairs. So each key starts with `/`.
+2. The key of the request; we set `/message` to `Hello world`, so the key field is `/message`.
+We use a file system like structure to represent the key-value pairs so each key starts with `/`.
@@ -88 +93,5 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. If we set a new key; `/message` did not exist before, so this is a new key.
+4. Modified Index is a unique, monotonically incrementing index created for each change to etcd.
+Requests that change the index include `set`, `delete`, `update`, `create` and `compareAndSwap`.
+Since the `get` and `watch` commands do not change state in the store, they do not change the index.
+You may notice that in this example the index is `2` even though it is the first request you sent to the server.
+This is because there are internal commands that also change the state like adding and syncing servers.
@@ -90 +98,0 @@ Notice we use a file system like structure to represent the key-value pairs. So
-5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -94 +102 @@ Notice we use a file system like structure to represent the key-value pairs. So
-Get the value that we just set in `/message` by issuing a GET:
+We can get the value that we just set in `/message` by issuing a `GET` request:
@@ -97 +105 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v1/keys/message
+curl -L http://127.0.0.1:4001/v2/keys/message
@@ -101 +109 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-{"action":"GET","key":"/message","value":"Hello world","index":3}
+{"action":"get","key":"/message","value":"Hello world","modifiedIndex":2}
@@ -103 +110,0 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-### Change the value of a key
@@ -105 +112,4 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
+
+### Changing the value of a key
+
+You can change the value of `/message` from `Hello world` to `Hello etcd` with another `PUT` request to the key:
@@ -108 +118 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
@@ -112 +122 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
+{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":3}
@@ -115 +125,3 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-Notice that the `prevValue` is set to `Hello world`.
+Notice that the `prevValue` is set to the previous value of the key - `Hello world`.
+It is useful when you want to atomically set a value to a key and get its old value.
+
@@ -117 +129 @@ Notice that the `prevValue` is set to `Hello world`.
-### Delete a key
+### Deleting a key
@@ -119 +131 @@ Notice that the `prevValue` is set to `Hello world`.
-Remove the `/message` key with a DELETE:
+You can remove the `/message` key with a `DELETE` request:
@@ -122 +134 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
@@ -126 +138 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
+{"action":"delete","key":"/message","prevValue":"Hello etcd","modifiedIndex":4}
@@ -128,0 +141 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
+
@@ -131 +144,2 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-Keys in etcd can be set to expire after a specified number of seconds. That is done by setting a TTL (time to live) on the key when you POST:
+Keys in etcd can be set to expire after a specified number of seconds.
+You can do this by setting a TTL (time to live) on the key when send a `PUT` request:
@@ -134 +148 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
@@ -138 +152 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
+{"action":"set","key":"/foo","value":"bar","expiration":"2013-11-12T20:21:22.629352334-05:00","ttl":5,"modifiedIndex":5}
@@ -141 +155,3 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
-Note the last two new fields in response:
+Note the two new fields in response:
+
+1. The `expiration` is the time that this key will expire and be deleted.
@@ -143 +159 @@ Note the last two new fields in response:
-1. The expiration is the time that this key will expire and be deleted.
+2. The `ttl` is the time to live for the key, in seconds.
@@ -145 +161 @@ Note the last two new fields in response:
-2. The ttl is the time to live of the key.
+_NOTE_: Keys can only be expired by a cluster leader so if a node gets disconnected from the cluster, its keys will not expire until it rejoins.
@@ -147 +163 @@ Note the last two new fields in response:
-Now you can try to get the key by sending:
+Now you can try to get the key by sending a `GET` request:
@@ -150 +166 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v1/keys/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo
@@ -156 +172 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6}
@@ -159 +174,0 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Watching a prefix
@@ -161 +176 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch a path prefix and get notifications if any key change under that prefix.
+### Waiting for a change 
@@ -163 +178,4 @@ We can watch a path prefix and get notifications if any key change under that pr
-In one terminal, we send a watch request:
+We can watch for a change on a key and receive a notification by using long polling.
+This also works for child keys by passing `recursive=true` in curl.
+
+In one terminal, we send a get request with `wait=true` :
@@ -166 +184 @@ In one terminal, we send a watch request:
-curl -L http://127.0.0.1:4001/v1/watch/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
@@ -169 +187 @@ curl -L http://127.0.0.1:4001/v1/watch/foo
-Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
+Now we are waiting for any changes at path `/foo`.
@@ -171 +189 @@ Now, we are watching at the path prefix `/foo` and wait for any changes under th
-In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
+In another terminal, we set a key `/foo` with value `bar`:
@@ -174 +192 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -180 +198 @@ The first terminal should get the notification and return with the same response
-{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
+{"action":"set","key":"/foo","value":"bar","modifiedIndex":7}
@@ -183 +201,3 @@ The first terminal should get the notification and return with the same response
-However, the watch command can do more than this. Using the the index we can watch for commands that has happened in the past. This is useful for ensuring you don't miss events between watch commands.
+However, the watch command can do more than this.
+Using the the index we can watch for commands that has happened in the past.
+This is useful for ensuring you don't miss events between watch commands.
@@ -185 +205 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 6 again:
+Let's try to watch for the set command of index 7 again:
@@ -188 +208 @@ Let's try to watch for the set command of index 6 again:
-curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
@@ -193 +212,0 @@ The watch command returns immediately with the same response as previous.
-### Atomic Test and Set
@@ -195 +214,9 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
+### Atomic Compare-and-Swap (CAS)
+
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
+
+This command will set the value of a key only if the client-provided conditions are equal to the current conditions. 
+
+The current comparable conditions are:
+
+1. `prevValue` - checks the previous value of the key.
@@ -197 +224,6 @@ Etcd can be used as a centralized coordination service in a cluster and `TestAnd
-Here is a simple example. Let's create a key-value pair first: `foo=one`.
+2. `prevIndex` - checks the previous index of the key.
+
+3. `prevExist` - checks existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
+
+Here is a simple example.
+Let's create a key-value pair first: `foo=one`.
@@ -200 +232 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
@@ -203,2 +235,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
-Let's try an invalid `TestAndSet` command.
-We can give another parameter prevValue to set command to make it a TestAndSet command.
+Let's try an invalid `CompareAndSwap` command first.
+We can provide the `prevValue` parameter to the set command to make it a `CompareAndSwap` command.
@@ -207 +239 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
@@ -210 +242 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
-This will try to test if the previous of the key is two, it is change it to three.
+This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
@@ -213 +245 @@ This will try to test if the previous of the key is two, it is change it to thre
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
+{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":8}
@@ -216 +248 @@ This will try to test if the previous of the key is two, it is change it to thre
-which means `testAndSet` failed.
+which means `CompareAndSwap` failed.
@@ -218 +250 @@ which means `testAndSet` failed.
-Let us try a valid one.
+Let's try a valid condition:
@@ -221 +253 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
@@ -227 +259 @@ The response should be
-{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
+{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","modifiedIndex":9}
@@ -230 +262 @@ The response should be
-We successfully changed the value from “one” to “two”, since we give the correct previous value.
+We successfully changed the value from “one” to “two” since we gave the correct previous value.
@@ -232 +264,10 @@ We successfully changed the value from “one” to “two”, since we give the
-To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
+
+### Listing a directory
+
+In etcd we can store two types of things: keys and directories.
+Keys store a single string value.
+Directories store a set of keys and/or other directories.
+
+In this example, let's first create some keys:
+
+We already have `/foo=two` so now we'll create another one called `/foo_dir/foo` with the value of `bar`:
@@ -235 +276 @@ To set a key to a given value only if it does not exist, simply supply an empty
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
@@ -238,2 +278,0 @@ curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
-Since the key "bar" does not exist, the response should be
-
@@ -241 +280 @@ Since the key "bar" does not exist, the response should be
-{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
+{"action":"set","key":"/foo_dir/foo","value":"bar","modifiedIndex":10}
@@ -244 +283 @@ Since the key "bar" does not exist, the response should be
-However, using a empty prevValue with a key that does exist will fail.
+Now we can list the keys under root `/`:
@@ -247 +286 @@ However, using a empty prevValue with a key that does exist will fail.
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
+curl -L http://127.0.0.1:4001/v2/keys/
@@ -250 +289 @@ curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
-will result in
+We should see the response as an array of items:
@@ -253 +292 @@ will result in
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two","modifiedIndex":9},{"key":"/foo_dir","dir":true,"modifiedIndex":10}],"modifiedIndex":0}
@@ -256 +295,10 @@ will result in
-### Listing a directory
+Here we can see `/foo` is a key-value pair under `/` and `/foo_dir` is a directory.
+We can also recursively get all the contents under a directory by adding `recursive=true`.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+```
+
+```json
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two","modifiedIndex":9},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar","modifiedIndex":10}],"modifiedIndex":10}],"modifiedIndex":0}
+```
@@ -258 +305,0 @@ will result in
-Last we provide a simple List command to list all the keys under a prefix path.
@@ -260 +307 @@ Last we provide a simple List command to list all the keys under a prefix path.
-Let us create some keys first.
+### Deleting a directory
@@ -262 +309 @@ Let us create some keys first.
-We already have `/foo/foo=barbar`
+Now let's try to delete the directory `/foo_dir`.
@@ -264 +311 @@ We already have `/foo/foo=barbar`
-We create another one `/foo/foo_dir/foo=barbarbar`
+To delete a directory, we must add `recursive=true`.
@@ -267 +314,5 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
+```
+
+```json
+{"action":"delete","key":"/foo_dir","dir":true,"modifiedIndex":11}
@@ -270 +321,7 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
-Now list the keys under `/foo`
+
+### Creating a hidden node
+
+We can create a hidden key-value pair or directory by add a `_` prefix.
+The hidden item will not be listed when sending a `GET` request for a directory.
+
+First we'll add a hidden key named `/_message`:
@@ -273 +330 @@ Now list the keys under `/foo`
-curl -L http://127.0.0.1:4001/v1/keys/foo/
+curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
@@ -276 +333,20 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/
-We should see the response as an array of items
+```json
+{"action":"set","key":"/_message","value":"Hello hidden world","modifiedIndex":12}
+```
+
+
+Next we'll add a regular key named `/message`:
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+```
+
+```json
+{"action":"set","key":"/message","value":"Hello world","modifiedIndex":13}
+```
+
+Now let's try to get a listing of keys under the root directory, `/`:
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/
+```
@@ -279 +355 @@ We should see the response as an array of items
-[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two","modifiedIndex":9},{"key":"/message","value":"Hello world","modifiedIndex":13}],"modifiedIndex":0}
@@ -282 +358,2 @@ We should see the response as an array of items
-which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
+Here we see the `/message` key but our hidden `/_message` key is not returned.
+
@@ -288 +365 @@ which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dir
-Etcd supports SSL/TLS and client cert authentication for clients to server, as well as server to server communication
+Etcd supports SSL/TLS and client cert authentication for clients to server, as well as server to server communication.
@@ -290 +367,2 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
-First, you need to have a CA cert `clientCA.crt` and signed key pair `client.crt`, `client.key`. This site has a good reference for how to generate self-signed key pairs:
+First, you need to have a CA cert `clientCA.crt` and signed key pair `client.crt`, `client.key`.
+This site has a good reference for how to generate self-signed key pairs:
@@ -295 +373 @@ For testing you can use the certificates in the `fixtures/ca` directory.
-Next, lets configure etcd to use this keypair:
+Let's configure etcd to use this keypair:
@@ -301,2 +379 @@ Next, lets configure etcd to use this keypair:
-`-f` forces new node configuration if existing configuration is found (WARNING: data loss!)
-`-clientCert` and `-clientKey` are the key and cert for transport layer security between client and server
+There are a few new options we're using:
@@ -304 +381,4 @@ Next, lets configure etcd to use this keypair:
-You can now test the configuration using https:
+* `-f` - forces a new node configuration, even if an existing configuration is found. (WARNING: data loss!)
+* `-clientCert` and `-clientKey` specify the location of the cert and key files to be used for for transport layer security between the client and server.
+
+You can now test the configuration using HTTPS:
@@ -307 +387 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -318 +398 @@ SSLv3, TLS handshake, Finished (20):
-And also the response from the etcd server.
+And also the response from the etcd server:
@@ -321 +401 @@ And also the response from the etcd server.
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","prevValue":"bar","value":"bar","modifiedIndex":3}
@@ -323,0 +404 @@ And also the response from the etcd server.
+
@@ -326 +407,2 @@ And also the response from the etcd server.
-We can also do authentication using CA certs. The clients will provide their cert to the server and the server will check whether the cert is signed by the CA and decide whether to serve the request.
+We can also do authentication using CA certs.
+The clients will provide their cert to the server and the server will check whether the cert is signed by the CA and decide whether to serve the request.
@@ -337 +419 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -351 +433 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -354 +436,2 @@ curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --
-You should able to see
+You should able to see:
+
@@ -365 +448 @@ And also the response from the server:
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","prevValue":"bar","value":"bar","modifiedIndex":3}
@@ -367,0 +451 @@ And also the response from the server:
+
@@ -372 +456,2 @@ And also the response from the server:
-Let's explore the use of etcd clustering. We use go-raft as the underlying distributed protocol which provides consistency and persistence of the data across all of the etcd instances.
+Let's explore the use of etcd clustering.
+We use Raft as the underlying distributed protocol which provides consistency and persistence of the data across all of the etcd instances.
@@ -374 +459 @@ Let's explore the use of etcd clustering. We use go-raft as the underlying distr
-We'll start by creating 3 new etcd instances.
+Let start by creating 3 new etcd instances.
@@ -382 +467 @@ We use -s to specify server port and -c to specify client port and -d to specify
-**Note:** If you want to run etcd on external IP address and still have access locally you need to add `-cl 0.0.0.0` so that it will listen on both external and localhost addresses.
+**Note:** If you want to run etcd on an external IP address and still have access locally, you'll need to add `-cl 0.0.0.0` so that it will listen on both external and localhost addresses.
@@ -385 +470 @@ A similar argument `-sl` is used to setup the listening address for the server p
-Let's join two more nodes to this cluster using the -C argument:
+Let's join two more nodes to this cluster using the `-C` argument:
@@ -392 +477 @@ Let's join two more nodes to this cluster using the -C argument:
-Get the machines in the cluster:
+We can retrieve a list of machines in the cluster using the HTTP API:
@@ -404 +489 @@ http://127.0.0.1:4001, http://127.0.0.1:4002, http://127.0.0.1:4003
-The machine list is also available via this API:
+The machine list is also available via the main key API:
@@ -411 +496 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
+[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001\u0026etcd=http://127.0.0.1:4001","index":1},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002\u0026etcd=http://127.0.0.1:4002","index":1},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003\u0026etcd=http://127.0.0.1:4003","index":1}]
@@ -414,3 +499 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-The key of the machine is based on the ```commit index``` when it was added. The value of the machine is ```hostname```, ```raft port``` and ```client port```.
-
-Also try to get the current leader in the cluster
+We can also get the current leader in the cluster:
@@ -419 +502 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v1/leader
+curl -L http://127.0.0.1:4001/v2/leader
@@ -421 +504,2 @@ curl -L http://127.0.0.1:4001/v1/leader
-The first server we set up should be the leader, if it has not died during these commands.
+
+The first server we set up should still be the leader unless it has died during these commands.
@@ -430 +514 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -434 +518 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
+{"action":"set","key":"/foo","value":"bar","modifiedIndex":4}
@@ -436,0 +521 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
+
@@ -439 +524 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-Let's kill the leader of the cluster and get the value from the other machine:
+Now if we kill the leader of the cluster, we can get the value from one of the other two machines:
@@ -445 +530 @@ curl -L http://127.0.0.1:4002/v1/keys/foo
-A new leader should have been elected.
+We can also see that a new leader has been elected:
@@ -448 +533 @@ A new leader should have been elected.
-curl -L http://127.0.0.1:4001/v1/leader
+curl -L http://127.0.0.1:4002/v1/leader
@@ -461,7 +545,0 @@ http://127.0.0.1:7003
-You should be able to see this:
-
-```json
-{"action":"GET","key":"/foo","value":"bar","index":5}
-```
-
-It succeeded!
@@ -471 +549,2 @@ It succeeded!
-OK. Next let us kill all the nodes to test persistence. Restart all the nodes using the same command as before.
+Next we'll kill all the nodes to test persistence.
+Type `CTRL-C` on each terminal and then rerun the same command you used to start each node.
@@ -480 +559 @@ curl -L http://127.0.0.1:4002/v1/keys/foo
-{"action":"GET","key":"/foo","value":"bar","index":5}
+{"action":"get","key":"/foo","value":"bar","index":4}
@@ -482,0 +562 @@ curl -L http://127.0.0.1:4002/v1/keys/foo
+
@@ -485 +565,5 @@ curl -L http://127.0.0.1:4002/v1/keys/foo
-In the previous example we showed how to use SSL client certs for client to server communication. Etcd can also do internal server to server communication using SSL client certs. To do this just change the ```-client*``` flags to ```-server*```.
+In the previous example we showed how to use SSL client certs for client-to-server communication.
+Etcd can also do internal server-to-server communication using SSL client certs.
+To do this just change the `-client*` flags to `-server*`.
+
+If you are using SSL for server-to-server communication, you must use it on all instances of etcd.
@@ -487 +570,0 @@ In the previous example we showed how to use SSL client certs for client to serv
-If you are using SSL for server to server communication, you must use it on all instances of etcd.
@@ -492,0 +576 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+
@@ -508 +591,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-
@@ -533,4 +615,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**Erlang libraries**
-
-- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
-
@@ -556,0 +636 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+
@@ -562 +642 @@ Every command the client sends to the master is broadcast to all of the follower
-But, the command is not committed until the majority of the cluster machines receive that command.
+The command is not committed until the majority of the cluster machines receive that command.
@@ -564 +644 @@ But, the command is not committed until the majority of the cluster machines rec
-Because of this majority voting property the ideal cluster should be kept small to keep speed up and be made up of an odd number of machines.
+Because of this majority voting property, the ideal cluster should be kept small to keep speed up and be made up of an odd number of machines.
@@ -566 +646 @@ Because of this majority voting property the ideal cluster should be kept small
-Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority will be 5.
+Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority will still be 5.
@@ -569,0 +650 @@ And in the best case when all 9 machines are responding the cluster will perform
+
@@ -571 +652,3 @@ And in the best case when all 9 machines are responding the cluster will perform
-The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
+
+The `crypto/tls` package of `golang` checks the key usage of the certificate public key before using it.
+To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
@@ -578 +661 @@ Add the following section to your openssl.cnf:
-[ ssl_client ]                                                                                                                                            
+[ ssl_client ]
@@ -584 +667 @@ Add the following section to your openssl.cnf:
-When creating the cert be sure to reference it in the -extensions flag:
+When creating the cert be sure to reference it in the `-extensions` flag:
@@ -589,0 +673 @@ openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -o
+
@@ -595 +678,0 @@ etcd uses [semantic versioning][semver].
-When we release v1.0.0 of etcd we will promise not to break the "v1" REST API.
@@ -604 +687 @@ curl -L http://127.0.0.1:4001/version
-During the v0 series of releases we may break the API as we fix bugs and get feedback.
+During the pre-v1.0.0 series of releases we may break the API as we fix bugs and get feedback.
@@ -607,0 +691 @@ During the v0 series of releases we may break the API as we fix bugs and get fee
+
diff --git a/README.md b/README.md
index 4f8b52185..3c3bfb481 100644
--- a/README.md
+++ b/README.md
@@ -2 +2 @@
-README version 0.2.0
+README version 0.1.0
@@ -19,0 +20,7 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
+## Contact
+
+- Mailing list: http://coreos.com/lists/etcd-dev/
+- IRC: #coreos on irc.freenode.net
+- Planning/Roadmap: https://trello.com/b/OiEbU547/etcd
+- Bugs: https://github.com/coreos/etcd/issues
+
@@ -65 +72 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
@@ -69 +76 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-{"action":"set","key":"/message","value":"Hello world","index":3,"term":0}
+{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
@@ -74 +81 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a PUT request, thus the action is `set`.
+1. The action of the request; we set the value via a POST request, thus the action is `SET`.
@@ -81 +88,3 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. Index is the unique internal log index of the set request. Requests that change the log index include `set`, `delete`, `update`, `create` and `compareAndSwap`. The `get` and `watch` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
+4. If we set a new key; `/message` did not exist before, so this is a new key.
+
+5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -88 +97 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v2/keys/message
+curl -L http://127.0.0.1:4001/v1/keys/message
@@ -92 +101 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-{"action":"get","key":"/message","value":"Hello world","index":3,"term":0}
+{"action":"GET","key":"/message","value":"Hello world","index":3}
@@ -94 +103 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-### Changing the value of a key
+### Change the value of a key
@@ -96 +105 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another PUT request to the key:
+Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
@@ -99 +108 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
@@ -103 +112 @@ curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
-{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4,"term":0}
+{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
@@ -106,2 +115,3 @@ curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
-Notice that the `prevValue` is set to the previous value of the key - `Hello world`. It is useful when you want to atomically set a value to a key and get its old value.
-### Deleting a key
+Notice that the `prevValue` is set to `Hello world`.
+
+### Delete a key
@@ -112 +122 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
+curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
@@ -116 +126 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-{"action":"delete","key":"/message","prevValue":"Hello etcd","index":5,"term":0}
+{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
@@ -124 +134 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
@@ -128 +138 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
-{"action":"set","key":"/foo","value":"bar","expiration":"2013-10-19T18:44:04.528757176-07:00","ttl":5,"index":6,"term":0}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
@@ -140 +150 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v2/keys/foo
+curl -L http://127.0.0.1:4001/v1/keys/foo
@@ -146 +156 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6,"term":0}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
@@ -149 +159 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Waiting for a change 
+### Watching a prefix
@@ -151 +161 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch for a change and get a notification at a given path or any keys underneath it.
+We can watch a path prefix and get notifications if any key change under that prefix.
@@ -153 +163 @@ We can watch for a change and get a notification at a given path or any keys und
-In one terminal, we send a get request with `wait=true` :
+In one terminal, we send a watch request:
@@ -156 +166 @@ In one terminal, we send a get request with `wait=true` :
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
+curl -L http://127.0.0.1:4001/v1/watch/foo
@@ -159 +169 @@ curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
-Now, we are waiting for any changes at path `/foo`.
+Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
@@ -161 +171 @@ Now, we are waiting for any changes at path `/foo`.
-In another terminal, we set a key `/foo` with value `bar`:
+In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
@@ -164 +174 @@ In another terminal, we set a key `/foo` with value `bar`:
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
@@ -170 +180 @@ The first terminal should get the notification and return with the same response
-{"action":"set","key":"/foo","value":"bar","index":7,"term":0}
+{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
@@ -175 +185 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 7 again:
+Let's try to watch for the set command of index 6 again:
@@ -178 +188 @@ Let's try to watch for the set command of index 7 again:
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
+curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
@@ -183,5 +193 @@ The watch command returns immediately with the same response as previous.
-### Atomic Compare and Swap
-
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
-
-This command will set the value to the key only if the client provided conditions are equal to the current conditions. 
+### Atomic Test and Set
@@ -189,6 +195 @@ This command will set the value to the key only if the client provided condition
-The current comparable conditions are:
-1. `prevValue` previous value of the key: 
-
-2. `prevIndex` previous index of the key
-
-3. `prevExist` previous existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
+Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
@@ -199 +200 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
@@ -202,2 +203,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
-Let's try an invalid `CompareAndSwap` command.
-We can give another parameter prevValue to set command to make it a `CompareAndSwap` command.
+Let's try an invalid `TestAndSet` command.
+We can give another parameter prevValue to set command to make it a TestAndSet command.
@@ -206 +207 @@ We can give another parameter prevValue to set command to make it a `CompareAndS
-curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
@@ -209 +210 @@ curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
-This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
+This will try to test if the previous of the key is two, it is change it to three.
@@ -212 +213 @@ This will try to compare the previous value of the key and the previous value we
-{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":9,"term":0}
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
@@ -215 +216 @@ This will try to compare the previous value of the key and the previous value we
-which means `compareAndSwap` failed.
+which means `testAndSet` failed.
@@ -220 +221 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
@@ -226 +227 @@ The response should be
-{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","index":10,"term":0}
+{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
@@ -231,17 +232 @@ We successfully changed the value from “one” to “two”, since we give the
-### Listing a directory
-
-Let us create some keys first.
-
-We already have `/foo=two`
-
-We create another one `/foo_dir/foo=bar`
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
-```
-
-```json
-{"action":"set","key":"/foo_dir/foo","value":"bar","index":11,"term":0}
-```
-
-Now list the keys under root `/`
+To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
@@ -250 +235 @@ Now list the keys under root `/`
-curl -L http://127.0.0.1:4001/v2/keys/
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
@@ -253 +238 @@ curl -L http://127.0.0.1:4001/v2/keys/
-We should see the response as an array of items
+Since the key "bar" does not exist, the response should be
@@ -256 +241 @@ We should see the response as an array of items
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true}],"index":11,"term":0}
+{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
@@ -259,3 +244 @@ We should see the response as an array of items
-which meas `/foo=two` is a key-value pair under `/ and `/foo_dir` is a directory.
-
-Also we can recursively get all the content under a directory by add `recursive=true`.
+However, using a empty prevValue with a key that does exist will fail.
@@ -264 +247 @@ Also we can recursively get all the content under a directory by add `recursive=
-curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
@@ -266,0 +250,2 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+will result in
+
@@ -268 +253 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar"}]}],"index":11,"term":0}
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
@@ -271,2 +256 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-### Deleting a directory
-Let try to delete the directory `/foo_dir`.
+### Listing a directory
@@ -274 +258 @@ Let try to delete the directory `/foo_dir`.
-To delete a directory, we must add `recursive=true`.
+Last we provide a simple List command to list all the keys under a prefix path.
@@ -276,3 +260 @@ To delete a directory, we must add `recursive=true`.
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-```
+Let us create some keys first.
@@ -280,3 +262 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-```json
-{"action":"delete","key":"/foo_dir","dir":true,"index":12,"term":0}
-```
+We already have `/foo/foo=barbar`
@@ -284,2 +264 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-### Creating a hidden node
-We can create a hidden key-value pair or directory by add `_` prefix. The hidden item will not be list when using get for a directory.
+We create another one `/foo/foo_dir/foo=barbarbar`
@@ -288 +267 @@ We can create a hidden key-value pair or directory by add `_` prefix. The hidden
-curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -291,3 +270 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-```json
-{"action":"set","key":"/_message","value":"Hello hidden world","index":13,"term":0}
-```
+Now list the keys under `/foo`
@@ -296 +273 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/foo/
@@ -299,9 +276 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-```json
-{"action":"set","key":"/message","value":"Hello world","index":14,"term":0}
-```
-
-Let us try to get the root `/`
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/
-```
+We should see the response as an array of items
@@ -310 +279 @@ curl -L http://127.0.0.1:4001/v2/keys/
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/message","value":"Hello world"}],"index":15,"term":0}
+[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
@@ -313 +282 @@ curl -L http://127.0.0.1:4001/v2/keys/
-We can only get `/message`, but cannot get `/_message`.
+which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
@@ -338 +307 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -352 +321 @@ And also the response from the etcd server.
-{"action":"set","key":"/foo","value":"bar","index":3, "term: 0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
@@ -368 +337 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -382 +351 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -396 +365 @@ And also the response from the server:
-{"action":"set","key":"/foo","value":"bar","index":3,"term:0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
@@ -405 +374 @@ Let's explore the use of etcd clustering. We use go-raft as the underlying distr
-Let start by creating 3 new etcd instances.
+We'll start by creating 3 new etcd instances.
@@ -416 +385 @@ A similar argument `-sl` is used to setup the listening address for the server p
-Let the join two more nodes to this cluster using the -C argument:
+Let's join two more nodes to this cluster using the -C argument:
@@ -442 +411 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003&raftVersion=v0.1.1-311-g91cad59","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
@@ -450 +419 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v2/leader
+curl -L http://127.0.0.1:4001/v1/leader
@@ -461 +430 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
@@ -465 +434 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-{"action":"set","key":"/foo","value":"bar","index":5,"term:0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
@@ -495 +464 @@ You should be able to see this:
-{"action":"get","key":"/foo","value":"bar","index":5,"term:1"}
+{"action":"GET","key":"/foo","value":"bar","index":5}
@@ -502 +471 @@ It succeeded!
-OK. Next let us kill all the nodes to test persistence. And restart all the nodes use the same command as before.
+OK. Next let us kill all the nodes to test persistence. Restart all the nodes using the same command as before.
@@ -563,0 +533,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Erlang libraries**
+
+- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
+
@@ -593 +566 @@ Because of this majority voting property the ideal cluster should be kept small
-Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority with be 5.
+Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority will be 5.
diff --git a/README.md b/README.md
index 377bb403d..4f8b52185 100644
--- a/README.md
+++ b/README.md
@@ -419,2 +419,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
diff --git a/README.md b/README.md
index fe8560db3..377bb403d 100644
--- a/README.md
+++ b/README.md
@@ -576,0 +577 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
diff --git a/README.md b/README.md
index de8276dac..fe8560db3 100644
--- a/README.md
+++ b/README.md
@@ -597 +597 @@ And in the best case when all 9 machines are responding the cluster will perform
-The `TLS` pacakge of `golang` checkes the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creates the certificate public key.
+The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
diff --git a/README.md b/README.md
index 71a810344..de8276dac 100644
--- a/README.md
+++ b/README.md
@@ -601 +601 @@ Here is how to do it:
-Add the following section to my openssl.cnf:
+Add the following section to your openssl.cnf:
@@ -610 +610 @@ Add the following section to my openssl.cnf:
-When create the cert be sure to reference it in the -extensions flag:
+When creating the cert be sure to reference it in the -extensions flag:
diff --git a/README.md b/README.md
index 247537a29..71a810344 100644
--- a/README.md
+++ b/README.md
@@ -595,0 +596,20 @@ And in the best case when all 9 machines are responding the cluster will perform
+### Why SSLv3 alert handshake failure when using SSL client auth?
+The `TLS` pacakge of `golang` checkes the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creates the certificate public key.
+
+Here is how to do it:
+
+Add the following section to my openssl.cnf:
+
+```
+[ ssl_client ]                                                                                                                                            
+...
+  extendedKeyUsage = clientAuth
+...
+```
+
+When create the cert be sure to reference it in the -extensions flag:
+
+```
+openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
+```
+
diff --git a/README.md b/README.md
index e32b1e78b..247537a29 100644
--- a/README.md
+++ b/README.md
@@ -559,0 +560,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Clojure libraries**
+
+- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
+
diff --git a/README.md b/README.md
index faa870a35..e32b1e78b 100644
--- a/README.md
+++ b/README.md
@@ -2 +2 @@
-README version 0.1.0
+README version 0.2.0
@@ -20,5 +19,0 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
-## Contact
-
-- Mailing list: http://coreos.com/lists/etcd-dev/
-- IRC: #coreos on irc.freenode.net
-
@@ -70 +65 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
@@ -74 +69 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
-{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
+{"action":"set","key":"/message","value":"Hello world","index":3,"term":0}
@@ -79 +74 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a POST request, thus the action is `SET`.
+1. The action of the request; we set the value via a PUT request, thus the action is `set`.
@@ -86,3 +81 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. If we set a new key; `/message` did not exist before, so this is a new key.
-
-5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
+4. Index is the unique internal log index of the set request. Requests that change the log index include `set`, `delete`, `update`, `create` and `compareAndSwap`. The `get` and `watch` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -95 +88 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v1/keys/message
+curl -L http://127.0.0.1:4001/v2/keys/message
@@ -99 +92 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-{"action":"GET","key":"/message","value":"Hello world","index":3}
+{"action":"get","key":"/message","value":"Hello world","index":3,"term":0}
@@ -101 +94 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-### Change the value of a key
+### Changing the value of a key
@@ -103 +96 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
+Change the value of `/message` from `Hello world` to `Hello etcd` with another PUT request to the key:
@@ -106 +99 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
@@ -110 +103 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
+{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4,"term":0}
@@ -113,3 +106,2 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-Notice that the `prevValue` is set to `Hello world`.
-
-### Delete a key
+Notice that the `prevValue` is set to the previous value of the key - `Hello world`. It is useful when you want to atomically set a value to a key and get its old value.
+### Deleting a key
@@ -120 +112 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
@@ -124 +116 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
+{"action":"delete","key":"/message","prevValue":"Hello etcd","index":5,"term":0}
@@ -132 +124 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
@@ -136 +128 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
+{"action":"set","key":"/foo","value":"bar","expiration":"2013-10-19T18:44:04.528757176-07:00","ttl":5,"index":6,"term":0}
@@ -148 +140 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v1/keys/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo
@@ -154 +146 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6,"term":0}
@@ -157 +149 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Watching a prefix
+### Waiting for a change 
@@ -159 +151 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch a path prefix and get notifications if any key change under that prefix.
+We can watch for a change and get a notification at a given path or any keys underneath it.
@@ -161 +153 @@ We can watch a path prefix and get notifications if any key change under that pr
-In one terminal, we send a watch request:
+In one terminal, we send a get request with `wait=true` :
@@ -164 +156 @@ In one terminal, we send a watch request:
-curl -L http://127.0.0.1:4001/v1/watch/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
@@ -167 +159 @@ curl -L http://127.0.0.1:4001/v1/watch/foo
-Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
+Now, we are waiting for any changes at path `/foo`.
@@ -169 +161 @@ Now, we are watching at the path prefix `/foo` and wait for any changes under th
-In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
+In another terminal, we set a key `/foo` with value `bar`:
@@ -172 +164 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -178 +170 @@ The first terminal should get the notification and return with the same response
-{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
+{"action":"set","key":"/foo","value":"bar","index":7,"term":0}
@@ -183 +175 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 6 again:
+Let's try to watch for the set command of index 7 again:
@@ -186 +178 @@ Let's try to watch for the set command of index 6 again:
-curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
@@ -191 +183,8 @@ The watch command returns immediately with the same response as previous.
-### Atomic Test and Set
+### Atomic Compare and Swap
+
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
+
+This command will set the value to the key only if the client provided conditions are equal to the current conditions. 
+
+The current comparable conditions are:
+1. `prevValue` previous value of the key: 
@@ -193 +192,3 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
+2. `prevIndex` previous index of the key
+
+3. `prevExist` previous existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
@@ -198 +199 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
@@ -201,2 +202,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
-Let's try an invalid `TestAndSet` command.
-We can give another parameter prevValue to set command to make it a TestAndSet command.
+Let's try an invalid `CompareAndSwap` command.
+We can give another parameter prevValue to set command to make it a `CompareAndSwap` command.
@@ -205 +206 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
@@ -208 +209 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
-This will try to test if the previous of the key is two, it is change it to three.
+This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
@@ -211 +212 @@ This will try to test if the previous of the key is two, it is change it to thre
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
+{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":9,"term":0}
@@ -214 +215 @@ This will try to test if the previous of the key is two, it is change it to thre
-which means `testAndSet` failed.
+which means `compareAndSwap` failed.
@@ -219 +220 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
@@ -225 +226 @@ The response should be
-{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
+{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","index":10,"term":0}
@@ -230 +231,7 @@ We successfully changed the value from “one” to “two”, since we give the
-To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
+### Listing a directory
+
+Let us create some keys first.
+
+We already have `/foo=two`
+
+We create another one `/foo_dir/foo=bar`
@@ -233 +240 @@ To set a key to a given value only if it does not exist, simply supply an empty
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
@@ -236,2 +242,0 @@ curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
-Since the key "bar" does not exist, the response should be
-
@@ -239 +244 @@ Since the key "bar" does not exist, the response should be
-{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
+{"action":"set","key":"/foo_dir/foo","value":"bar","index":11,"term":0}
@@ -242 +247 @@ Since the key "bar" does not exist, the response should be
-However, using a empty prevValue with a key that does exist will fail.
+Now list the keys under root `/`
@@ -245 +250 @@ However, using a empty prevValue with a key that does exist will fail.
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
+curl -L http://127.0.0.1:4001/v2/keys/
@@ -248 +253 @@ curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
-will result in
+We should see the response as an array of items
@@ -251 +256 @@ will result in
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true}],"index":11,"term":0}
@@ -254 +259 @@ will result in
-### Listing a directory
+which meas `/foo=two` is a key-value pair under `/ and `/foo_dir` is a directory.
@@ -256 +261 @@ will result in
-Last we provide a simple List command to list all the keys under a prefix path.
+Also we can recursively get all the content under a directory by add `recursive=true`.
@@ -258 +263,7 @@ Last we provide a simple List command to list all the keys under a prefix path.
-Let us create some keys first.
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+```
+
+```json
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar"}]}],"index":11,"term":0}
+```
@@ -260 +271,2 @@ Let us create some keys first.
-We already have `/foo/foo=barbar`
+### Deleting a directory
+Let try to delete the directory `/foo_dir`.
@@ -262 +274 @@ We already have `/foo/foo=barbar`
-We create another one `/foo/foo_dir/foo=barbarbar`
+To delete a directory, we must add `recursive=true`.
@@ -265 +277,5 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
+```
+
+```json
+{"action":"delete","key":"/foo_dir","dir":true,"index":12,"term":0}
@@ -268 +284,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
-Now list the keys under `/foo`
+### Creating a hidden node
+We can create a hidden key-value pair or directory by add `_` prefix. The hidden item will not be list when using get for a directory.
@@ -271 +288 @@ Now list the keys under `/foo`
-curl -L http://127.0.0.1:4001/v1/keys/foo/
+curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
@@ -274 +291,17 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/
-We should see the response as an array of items
+```json
+{"action":"set","key":"/_message","value":"Hello hidden world","index":13,"term":0}
+```
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+```
+
+```json
+{"action":"set","key":"/message","value":"Hello world","index":14,"term":0}
+```
+
+Let us try to get the root `/`
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/
+```
@@ -277 +310 @@ We should see the response as an array of items
-[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/message","value":"Hello world"}],"index":15,"term":0}
@@ -280 +313 @@ We should see the response as an array of items
-which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
+We can only get `/message`, but cannot get `/_message`.
@@ -305 +338 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -319 +352 @@ And also the response from the etcd server.
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","value":"bar","index":3, "term: 0"}
@@ -335 +368 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -349 +382 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -363 +396 @@ And also the response from the server:
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","value":"bar","index":3,"term:0"}
@@ -372 +405 @@ Let's explore the use of etcd clustering. We use go-raft as the underlying distr
-We'll start by creating 3 new etcd instances.
+Let start by creating 3 new etcd instances.
@@ -383 +416 @@ A similar argument `-sl` is used to setup the listening address for the server p
-Let's join two more nodes to this cluster using the -C argument:
+Let the join two more nodes to this cluster using the -C argument:
@@ -386,2 +419,2 @@ Let's join two more nodes to this cluster using the -C argument:
-./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
@@ -409 +442 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
+[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003&raftVersion=v0.1.1-311-g91cad59","index":4}]
@@ -417 +450 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v1/leader
+curl -L http://127.0.0.1:4001/v2/leader
@@ -428 +461 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -432 +465 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
+{"action":"set","key":"/foo","value":"bar","index":5,"term:0"}
@@ -462 +495 @@ You should be able to see this:
-{"action":"GET","key":"/foo","value":"bar","index":5}
+{"action":"get","key":"/foo","value":"bar","index":5,"term:1"}
@@ -469 +502 @@ It succeeded!
-OK. Next let us kill all the nodes to test persistence. Restart all the nodes using the same command as before.
+OK. Next let us kill all the nodes to test persistence. And restart all the nodes use the same command as before.
@@ -527,8 +559,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**Clojure libraries**
-
-- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
-
-**Erlang libraries**
-
-- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
-
@@ -548 +572,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
@@ -564 +588 @@ Because of this majority voting property the ideal cluster should be kept small
-Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority will be 5.
+Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority with be 5.
@@ -568,20 +591,0 @@ And in the best case when all 9 machines are responding the cluster will perform
-### Why SSLv3 alert handshake failure when using SSL client auth?
-The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
-
-Here is how to do it:
-
-Add the following section to your openssl.cnf:
-
-```
-[ ssl_client ]                                                                                                                                            
-...
-  extendedKeyUsage = clientAuth
-...
-```
-
-When creating the cert be sure to reference it in the -extensions flag:
-
-```
-openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
-```
-
diff --git a/README.md b/README.md
index 183428ea9..faa870a35 100644
--- a/README.md
+++ b/README.md
@@ -280 +280 @@ We should see the response as an array of items
-which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
+which means `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
diff --git a/README.md b/README.md
index adc0db9b2..183428ea9 100644
--- a/README.md
+++ b/README.md
@@ -2 +2 @@
-README version 0.2.0
+README version 0.1.0
@@ -19,0 +20,5 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
+## Contact
+
+- Mailing list: http://coreos.com/lists/etcd-dev/
+- IRC: #coreos on irc.freenode.net
+
@@ -65 +70 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
@@ -69 +74 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-{"action":"set","key":"/message","value":"Hello world","index":3,"term":0}
+{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
@@ -74 +79 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a PUT request, thus the action is `set`.
+1. The action of the request; we set the value via a POST request, thus the action is `SET`.
@@ -81 +86,3 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. Index is the unique internal log index of the set request. Requests that change the log index include `set`, `delete`, `update`, `create` and `compareAndSwap`. The `get` and `watch` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
+4. If we set a new key; `/message` did not exist before, so this is a new key.
+
+5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -88 +95 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v2/keys/message
+curl -L http://127.0.0.1:4001/v1/keys/message
@@ -92 +99 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-{"action":"get","key":"/message","value":"Hello world","index":3,"term":0}
+{"action":"GET","key":"/message","value":"Hello world","index":3}
@@ -94 +101 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-### Changing the value of a key
+### Change the value of a key
@@ -96 +103 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another PUT request to the key:
+Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
@@ -99 +106 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
@@ -103 +110 @@ curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
-{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4,"term":0}
+{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
@@ -106,2 +113,3 @@ curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
-Notice that the `prevValue` is set to the previous value of the key - `Hello world`. It is useful when you want to atomically set a value to a key and get its old value.
-### Deleting a key
+Notice that the `prevValue` is set to `Hello world`.
+
+### Delete a key
@@ -112 +120 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
+curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
@@ -116 +124 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-{"action":"delete","key":"/message","prevValue":"Hello etcd","index":5,"term":0}
+{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
@@ -124 +132 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
@@ -128 +136 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
-{"action":"set","key":"/foo","value":"bar","expiration":"2013-10-19T18:44:04.528757176-07:00","ttl":5,"index":6,"term":0}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
@@ -140 +148 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v2/keys/foo
+curl -L http://127.0.0.1:4001/v1/keys/foo
@@ -146 +154 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6,"term":0}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
@@ -149 +157 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Waiting for a change 
+### Watching a prefix
@@ -151 +159 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch for a change and get a notification at a given path or any keys underneath it.
+We can watch a path prefix and get notifications if any key change under that prefix.
@@ -153 +161 @@ We can watch for a change and get a notification at a given path or any keys und
-In one terminal, we send a get request with `wait=true` :
+In one terminal, we send a watch request:
@@ -156 +164 @@ In one terminal, we send a get request with `wait=true` :
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
+curl -L http://127.0.0.1:4001/v1/watch/foo
@@ -159 +167 @@ curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
-Now, we are waiting for any changes at path `/foo`.
+Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
@@ -161 +169 @@ Now, we are waiting for any changes at path `/foo`.
-In another terminal, we set a key `/foo` with value `bar`:
+In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
@@ -164 +172 @@ In another terminal, we set a key `/foo` with value `bar`:
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
@@ -170 +178 @@ The first terminal should get the notification and return with the same response
-{"action":"set","key":"/foo","value":"bar","index":7,"term":0}
+{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
@@ -175 +183 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 7 again:
+Let's try to watch for the set command of index 6 again:
@@ -178 +186 @@ Let's try to watch for the set command of index 7 again:
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
+curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
@@ -183,8 +191 @@ The watch command returns immediately with the same response as previous.
-### Atomic Compare and Swap
-
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
-
-This command will set the value to the key only if the client provided conditions are equal to the current conditions. 
-
-The current comparable conditions are:
-1. `prevValue` previous value of the key: 
+### Atomic Test and Set
@@ -192,3 +193 @@ The current comparable conditions are:
-2. `prevIndex` previous index of the key
-
-3. `prevExist` previous existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
+Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
@@ -199 +198 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
@@ -202,2 +201,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
-Let's try an invalid `CompareAndSwap` command.
-We can give another parameter prevValue to set command to make it a `CompareAndSwap` command.
+Let's try an invalid `TestAndSet` command.
+We can give another parameter prevValue to set command to make it a TestAndSet command.
@@ -206 +205 @@ We can give another parameter prevValue to set command to make it a `CompareAndS
-curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
@@ -209 +208 @@ curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
-This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
+This will try to test if the previous of the key is two, it is change it to three.
@@ -212 +211 @@ This will try to compare the previous value of the key and the previous value we
-{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":9,"term":0}
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
@@ -215 +214 @@ This will try to compare the previous value of the key and the previous value we
-which means `compareAndSwap` failed.
+which means `testAndSet` failed.
@@ -220 +219 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
@@ -226 +225 @@ The response should be
-{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","index":10,"term":0}
+{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
@@ -231,17 +230 @@ We successfully changed the value from “one” to “two”, since we give the
-### Listing a directory
-
-Let us create some keys first.
-
-We already have `/foo=two`
-
-We create another one `/foo_dir/foo=bar`
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
-```
-
-```json
-{"action":"set","key":"/foo_dir/foo","value":"bar","index":11,"term":0}
-```
-
-Now list the keys under root `/`
+To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
@@ -250 +233 @@ Now list the keys under root `/`
-curl -L http://127.0.0.1:4001/v2/keys/
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
@@ -253 +236 @@ curl -L http://127.0.0.1:4001/v2/keys/
-We should see the response as an array of items
+Since the key "bar" does not exist, the response should be
@@ -256 +239 @@ We should see the response as an array of items
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true}],"index":11,"term":0}
+{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
@@ -259,3 +242 @@ We should see the response as an array of items
-which meas `/foo=two` is a key-value pair under `/ and `/foo_dir` is a directory.
-
-Also we can recursively get all the content under a directory by add `recursive=true`.
+However, using a empty prevValue with a key that does exist will fail.
@@ -264 +245 @@ Also we can recursively get all the content under a directory by add `recursive=
-curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
@@ -266,0 +248,2 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+will result in
+
@@ -268 +251 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar"}]}],"index":11,"term":0}
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
@@ -271,2 +254 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-### Deleting a directory
-Let try to delete the directory `/foo_dir`.
+### Listing a directory
@@ -274 +256 @@ Let try to delete the directory `/foo_dir`.
-To delete a directory, we must add `recursive=true`.
+Last we provide a simple List command to list all the keys under a prefix path.
@@ -276,3 +258 @@ To delete a directory, we must add `recursive=true`.
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-```
+Let us create some keys first.
@@ -280,3 +260 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-```json
-{"action":"delete","key":"/foo_dir","dir":true,"index":12,"term":0}
-```
+We already have `/foo/foo=barbar`
@@ -284,2 +262 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-### Creating a hidden node
-We can create a hidden key-value pair or directory by add `_` prefix. The hidden item will not be list when using get for a directory.
+We create another one `/foo/foo_dir/foo=barbarbar`
@@ -288 +265 @@ We can create a hidden key-value pair or directory by add `_` prefix. The hidden
-curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -291,3 +268 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-```json
-{"action":"set","key":"/_message","value":"Hello hidden world","index":13,"term":0}
-```
+Now list the keys under `/foo`
@@ -296 +271 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/foo/
@@ -299,9 +274 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-```json
-{"action":"set","key":"/message","value":"Hello world","index":14,"term":0}
-```
-
-Let us try to get the root `/`
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/
-```
+We should see the response as an array of items
@@ -310 +277 @@ curl -L http://127.0.0.1:4001/v2/keys/
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/message","value":"Hello world"}],"index":15,"term":0}
+[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
@@ -313 +280 @@ curl -L http://127.0.0.1:4001/v2/keys/
-We can only get `/message`, but cannot get `/_message`.
+which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
@@ -338 +305 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -352 +319 @@ And also the response from the etcd server.
-{"action":"set","key":"/foo","value":"bar","index":3, "term: 0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
@@ -368 +335 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -382 +349 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -396 +363 @@ And also the response from the server:
-{"action":"set","key":"/foo","value":"bar","index":3,"term:0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
@@ -405 +372 @@ Let's explore the use of etcd clustering. We use go-raft as the underlying distr
-Let start by creating 3 new etcd instances.
+We'll start by creating 3 new etcd instances.
@@ -416 +383 @@ A similar argument `-sl` is used to setup the listening address for the server p
-Let the join two more nodes to this cluster using the -C argument:
+Let's join two more nodes to this cluster using the -C argument:
@@ -419,2 +386,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
@@ -442 +409 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003&raftVersion=v0.1.1-311-g91cad59","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
@@ -450 +417 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v2/leader
+curl -L http://127.0.0.1:4001/v1/leader
@@ -461 +428 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
@@ -465 +432 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-{"action":"set","key":"/foo","value":"bar","index":5,"term:0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
@@ -495 +462 @@ You should be able to see this:
-{"action":"get","key":"/foo","value":"bar","index":5,"term:1"}
+{"action":"GET","key":"/foo","value":"bar","index":5}
@@ -502 +469 @@ It succeeded!
-OK. Next let us kill all the nodes to test persistence. And restart all the nodes use the same command as before.
+OK. Next let us kill all the nodes to test persistence. Restart all the nodes using the same command as before.
@@ -559,0 +527,8 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Clojure libraries**
+
+- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
+
+**Erlang libraries**
+
+- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
+
@@ -572,0 +548 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
@@ -576,0 +553 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
@@ -587 +564 @@ Because of this majority voting property the ideal cluster should be kept small
-Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority with be 5.
+Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority will be 5.
@@ -590,0 +568,20 @@ And in the best case when all 9 machines are responding the cluster will perform
+### Why SSLv3 alert handshake failure when using SSL client auth?
+The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
+
+Here is how to do it:
+
+Add the following section to your openssl.cnf:
+
+```
+[ ssl_client ]                                                                                                                                            
+...
+  extendedKeyUsage = clientAuth
+...
+```
+
+When creating the cert be sure to reference it in the -extensions flag:
+
+```
+openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
+```
+
diff --git a/README.md b/README.md
index e189de6a5..adc0db9b2 100644
--- a/README.md
+++ b/README.md
@@ -2 +2 @@
-README version 0.1.0
+README version 0.2.0
@@ -20,5 +19,0 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
-## Contact
-
-- Mailing list: http://coreos.com/lists/etcd-dev/
-- IRC: #coreos on irc.freenode.net
-
@@ -70 +65 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
@@ -74 +69 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
-{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
+{"action":"set","key":"/message","value":"Hello world","index":3,"term":0}
@@ -79 +74 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a POST request, thus the action is `SET`.
+1. The action of the request; we set the value via a PUT request, thus the action is `set`.
@@ -86,3 +81 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. If we set a new key; `/message` did not exist before, so this is a new key.
-
-5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
+4. Index is the unique internal log index of the set request. Requests that change the log index include `set`, `delete`, `update`, `create` and `compareAndSwap`. The `get` and `watch` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -95 +88 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v1/keys/message
+curl -L http://127.0.0.1:4001/v2/keys/message
@@ -99 +92 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-{"action":"GET","key":"/message","value":"Hello world","index":3}
+{"action":"get","key":"/message","value":"Hello world","index":3,"term":0}
@@ -101 +94 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-### Change the value of a key
+### Changing the value of a key
@@ -103 +96 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
+Change the value of `/message` from `Hello world` to `Hello etcd` with another PUT request to the key:
@@ -106 +99 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
@@ -110 +103 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
+{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4,"term":0}
@@ -113,3 +106,2 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-Notice that the `prevValue` is set to `Hello world`.
-
-### Delete a key
+Notice that the `prevValue` is set to the previous value of the key - `Hello world`. It is useful when you want to atomically set a value to a key and get its old value.
+### Deleting a key
@@ -120 +112 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
@@ -124 +116 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
+{"action":"delete","key":"/message","prevValue":"Hello etcd","index":5,"term":0}
@@ -132 +124 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
@@ -136 +128 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
+{"action":"set","key":"/foo","value":"bar","expiration":"2013-10-19T18:44:04.528757176-07:00","ttl":5,"index":6,"term":0}
@@ -148 +140 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v1/keys/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo
@@ -154 +146 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6,"term":0}
@@ -157 +149 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Watching a prefix
+### Waiting for a change 
@@ -159 +151 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch a path prefix and get notifications if any key change under that prefix.
+We can watch for a change and get a notification at a given path or any keys underneath it.
@@ -161 +153 @@ We can watch a path prefix and get notifications if any key change under that pr
-In one terminal, we send a watch request:
+In one terminal, we send a get request with `wait=true` :
@@ -164 +156 @@ In one terminal, we send a watch request:
-curl -L http://127.0.0.1:4001/v1/watch/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
@@ -167 +159 @@ curl -L http://127.0.0.1:4001/v1/watch/foo
-Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
+Now, we are waiting for any changes at path `/foo`.
@@ -169 +161 @@ Now, we are watching at the path prefix `/foo` and wait for any changes under th
-In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
+In another terminal, we set a key `/foo` with value `bar`:
@@ -172 +164 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -178 +170 @@ The first terminal should get the notification and return with the same response
-{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
+{"action":"set","key":"/foo","value":"bar","index":7,"term":0}
@@ -183 +175 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 6 again:
+Let's try to watch for the set command of index 7 again:
@@ -186 +178 @@ Let's try to watch for the set command of index 6 again:
-curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
@@ -191 +183,8 @@ The watch command returns immediately with the same response as previous.
-### Atomic Test and Set
+### Atomic Compare and Swap
+
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
+
+This command will set the value to the key only if the client provided conditions are equal to the current conditions. 
+
+The current comparable conditions are:
+1. `prevValue` previous value of the key: 
@@ -193 +192,3 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
+2. `prevIndex` previous index of the key
+
+3. `prevExist` previous existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
@@ -198 +199 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
@@ -201,2 +202,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
-Let's try an invalid `TestAndSet` command.
-We can give another parameter prevValue to set command to make it a TestAndSet command.
+Let's try an invalid `CompareAndSwap` command.
+We can give another parameter prevValue to set command to make it a `CompareAndSwap` command.
@@ -205 +206 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
@@ -208 +209 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
-This will try to test if the previous of the key is two, it is change it to three.
+This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
@@ -211 +212 @@ This will try to test if the previous of the key is two, it is change it to thre
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
+{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":9,"term":0}
@@ -214 +215 @@ This will try to test if the previous of the key is two, it is change it to thre
-which means `testAndSet` failed.
+which means `compareAndSwap` failed.
@@ -219 +220 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
@@ -225 +226 @@ The response should be
-{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
+{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","index":10,"term":0}
@@ -230 +231,7 @@ We successfully changed the value from “one” to “two”, since we give the
-To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
+### Listing a directory
+
+Let us create some keys first.
+
+We already have `/foo=two`
+
+We create another one `/foo_dir/foo=bar`
@@ -233 +240 @@ To set a key to a given value only if it does not exist, simply supply an empty
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
@@ -236,2 +242,0 @@ curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
-Since the key "bar" does not exist, the response should be
-
@@ -239 +244 @@ Since the key "bar" does not exist, the response should be
-{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
+{"action":"set","key":"/foo_dir/foo","value":"bar","index":11,"term":0}
@@ -242 +247 @@ Since the key "bar" does not exist, the response should be
-However, using a empty prevValue with a key that does exist will fail.
+Now list the keys under root `/`
@@ -245 +250 @@ However, using a empty prevValue with a key that does exist will fail.
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
+curl -L http://127.0.0.1:4001/v2/keys/
@@ -248 +253 @@ curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
-will result in
+We should see the response as an array of items
@@ -251 +256 @@ will result in
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true}],"index":11,"term":0}
@@ -254 +259 @@ will result in
-### Listing a directory
+which meas `/foo=two` is a key-value pair under `/ and `/foo_dir` is a directory.
@@ -256 +261 @@ will result in
-Last we provide a simple List command to list all the keys under a prefix path.
+Also we can recursively get all the content under a directory by add `recursive=true`.
@@ -258 +263,7 @@ Last we provide a simple List command to list all the keys under a prefix path.
-Let us create some keys first.
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+```
+
+```json
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar"}]}],"index":11,"term":0}
+```
@@ -260 +271,2 @@ Let us create some keys first.
-We already have `/foo/foo=barbar`
+### Deleting a directory
+Let try to delete the directory `/foo_dir`.
@@ -262 +274 @@ We already have `/foo/foo=barbar`
-We create another one `/foo/foo_dir/foo=barbarbar`
+To delete a directory, we must add `recursive=true`.
@@ -265 +277,5 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
+```
+
+```json
+{"action":"delete","key":"/foo_dir","dir":true,"index":12,"term":0}
@@ -268 +284,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
-Now list the keys under `/foo`
+### Creating a hidden node
+We can create a hidden key-value pair or directory by add `_` prefix. The hidden item will not be list when using get for a directory.
@@ -271 +288 @@ Now list the keys under `/foo`
-curl -L http://127.0.0.1:4001/v1/keys/foo/
+curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
@@ -274 +291,17 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/
-We should see the response as an array of items
+```json
+{"action":"set","key":"/_message","value":"Hello hidden world","index":13,"term":0}
+```
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+```
+
+```json
+{"action":"set","key":"/message","value":"Hello world","index":14,"term":0}
+```
+
+Let us try to get the root `/`
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/
+```
@@ -277 +310 @@ We should see the response as an array of items
-[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/message","value":"Hello world"}],"index":15,"term":0}
@@ -280 +313 @@ We should see the response as an array of items
-which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
+We can only get `/message`, but cannot get `/_message`.
@@ -305 +338 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -319 +352 @@ And also the response from the etcd server.
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","value":"bar","index":3, "term: 0"}
@@ -335 +368 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -349 +382 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -363 +396 @@ And also the response from the server:
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","value":"bar","index":3,"term:0"}
@@ -386,2 +419,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
@@ -409 +442 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
+[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003&raftVersion=v0.1.1-311-g91cad59","index":4}]
@@ -417 +450 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v1/leader
+curl -L http://127.0.0.1:4001/v2/leader
@@ -428 +461 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -432 +465 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
+{"action":"set","key":"/foo","value":"bar","index":5,"term:0"}
@@ -462 +495 @@ You should be able to see this:
-{"action":"GET","key":"/foo","value":"bar","index":5}
+{"action":"get","key":"/foo","value":"bar","index":5,"term:1"}
@@ -527,8 +559,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**Clojure libraries**
-
-- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
-
-**Erlang libraries**
-
-- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
-
@@ -548 +572,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
@@ -553 +576,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
@@ -568,20 +590,0 @@ And in the best case when all 9 machines are responding the cluster will perform
-### Why SSLv3 alert handshake failure when using SSL client auth?
-The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
-
-Here is how to do it:
-
-Add the following section to your openssl.cnf:
-
-```
-[ ssl_client ]                                                                                                                                            
-...
-  extendedKeyUsage = clientAuth
-...
-```
-
-When creating the cert be sure to reference it in the -extensions flag:
-
-```
-openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
-```
-
diff --git a/README.md b/README.md
index 52802e4e3..e189de6a5 100644
--- a/README.md
+++ b/README.md
@@ -22,2 +22,2 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
-Mailing list: http://coreos.com/lists/etcd-dev/
-IRC: #coreos on irc.freenode.net
+- Mailing list: http://coreos.com/lists/etcd-dev/
+- IRC: #coreos on irc.freenode.net
diff --git a/README.md b/README.md
index 467050ff1..52802e4e3 100644
--- a/README.md
+++ b/README.md
@@ -229,0 +230,24 @@ We successfully changed the value from “one” to “two”, since we give the
+To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
+
+```sh
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
+```
+
+Since the key "bar" does not exist, the response should be
+
+```json
+{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
+```
+
+However, using a empty prevValue with a key that does exist will fail.
+
+```sh
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
+```
+
+will result in
+
+```json
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
+```
+
@@ -506,0 +531,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Erlang libraries**
+
+- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
+
diff --git a/README.md b/README.md
index 7522d0f7c..467050ff1 100644
--- a/README.md
+++ b/README.md
@@ -19,0 +20,5 @@ See [etcdctl][etcdctl] for a simple command line client. Or feel free to just us
+## Contact
+
+Mailing list: http://coreos.com/lists/etcd-dev/
+IRC: #coreos on irc.freenode.net
+
@@ -225,24 +229,0 @@ We successfully changed the value from “one” to “two”, since we give the
-To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
-
-```sh
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
-```
-
-Since the key "bar" does not exist, the response should be
-
-```json
-{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
-```
-
-However, using a empty prevValue with a key that does exist will fail.
-
-```sh
-curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
-```
-
-will result in
-
-```json
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
-```
-
@@ -526,4 +506,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**Erlang libraries**
-
-- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
-
diff --git a/README.md b/README.md
index 0b6a707df..7522d0f7c 100644
--- a/README.md
+++ b/README.md
@@ -525,0 +526,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Erlang libraries**
+
+- [marshall-lee/etcd.erl](https://github.com/marshall-lee/etcd.erl)
+
diff --git a/README.md b/README.md
index 2034ab314..0b6a707df 100644
--- a/README.md
+++ b/README.md
@@ -2 +2 @@
-README version 0.2.0
+README version 0.1.0
@@ -65 +65 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
@@ -69 +69 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-{"action":"set","key":"/message","value":"Hello world","index":3,"term":0}
+{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
@@ -74 +74 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a PUT request, thus the action is `set`.
+1. The action of the request; we set the value via a POST request, thus the action is `SET`.
@@ -81 +81,3 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. Index is the unique internal log index of the set request. Requests that change the log index include `set`, `delete`, `update`, `create` and `compareAndSwap`. The `get` and `watch` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
+4. If we set a new key; `/message` did not exist before, so this is a new key.
+
+5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -88 +90 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v2/keys/message
+curl -L http://127.0.0.1:4001/v1/keys/message
@@ -92 +94 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-{"action":"get","key":"/message","value":"Hello world","index":3,"term":0}
+{"action":"GET","key":"/message","value":"Hello world","index":3}
@@ -94 +96 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-### Changing the value of a key
+### Change the value of a key
@@ -96 +98 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another PUT request to the key:
+Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
@@ -99 +101 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
@@ -103 +105 @@ curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
-{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4,"term":0}
+{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
@@ -106,2 +108,3 @@ curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
-Notice that the `prevValue` is set to the previous value of the key - `Hello world`. It is useful when you want to atomically set a value to a key and get its old value.
-### Deleting a key
+Notice that the `prevValue` is set to `Hello world`.
+
+### Delete a key
@@ -112 +115 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
+curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
@@ -116 +119 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-{"action":"delete","key":"/message","prevValue":"Hello etcd","index":5,"term":0}
+{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
@@ -124 +127 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
@@ -128 +131 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
-{"action":"set","key":"/foo","value":"bar","expiration":"2013-10-19T18:44:04.528757176-07:00","ttl":5,"index":6,"term":0}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
@@ -140 +143 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v2/keys/foo
+curl -L http://127.0.0.1:4001/v1/keys/foo
@@ -146 +149 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6,"term":0}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
@@ -149 +152 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Waiting for a change 
+### Watching a prefix
@@ -151 +154 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch for a change and get a notification at a given path or any keys underneath it.
+We can watch a path prefix and get notifications if any key change under that prefix.
@@ -153 +156 @@ We can watch for a change and get a notification at a given path or any keys und
-In one terminal, we send a get request with `wait=true` :
+In one terminal, we send a watch request:
@@ -156 +159 @@ In one terminal, we send a get request with `wait=true` :
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
+curl -L http://127.0.0.1:4001/v1/watch/foo
@@ -159 +162 @@ curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
-Now, we are waitting for any changes at path `/foo`.
+Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
@@ -161 +164 @@ Now, we are waitting for any changes at path `/foo`.
-In another terminal, we set a key `/foo` with value `bar`:
+In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
@@ -164 +167 @@ In another terminal, we set a key `/foo` with value `bar`:
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
@@ -170 +173 @@ The first terminal should get the notification and return with the same response
-{"action":"set","key":"/foo","value":"bar","index":7,"term":0}
+{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
@@ -175 +178 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 7 again:
+Let's try to watch for the set command of index 6 again:
@@ -178 +181 @@ Let's try to watch for the set command of index 7 again:
-curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
+curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
@@ -183,5 +186 @@ The watch command returns immediately with the same response as previous.
-### Atomic Compare and Swap
-
-Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
-
-This command will set the value to the key only if the client provided conditions are equal to the current conditions. 
+### Atomic Test and Set
@@ -189,6 +188 @@ This command will set the value to the key only if the client provided condition
-The current comparable conditions are:
-1. `prevValue` previous value of the key: 
-
-2. `prevIndex` previous index of the key
-
-3. `prevExist` previous existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
+Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
@@ -199 +193 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
@@ -202,2 +196,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
-Let's try an invalid `CompareAndSwap` command.
-We can give another parameter prevValue to set command to make it a `CompareAndSwap` command.
+Let's try an invalid `TestAndSet` command.
+We can give another parameter prevValue to set command to make it a TestAndSet command.
@@ -206 +200 @@ We can give another parameter prevValue to set command to make it a `CompareAndS
-curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
@@ -209 +203 @@ curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
-This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
+This will try to test if the previous of the key is two, it is change it to three.
@@ -212 +206 @@ This will try to compare the previous value of the key and the previous value we
-{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":9,"term":0}
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
@@ -215 +209 @@ This will try to compare the previous value of the key and the previous value we
-which means `compareAndSwap` failed.
+which means `testAndSet` failed.
@@ -220 +214 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
@@ -226 +220 @@ The response should be
-{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","index":10,"term":0}
+{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
@@ -231,17 +225 @@ We successfully changed the value from “one” to “two”, since we give the
-### Listing a directory
-
-Let us create some keys first.
-
-We already have `/foo=two`
-
-We create another one `/foo_dir/foo=bar`
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
-```
-
-```json
-{"action":"set","key":"/foo_dir/foo","value":"bar","index":11,"term":0}
-```
-
-Now list the keys under root `/`
+To set a key to a given value only if it does not exist, simply supply an empty prevValue parameter.
@@ -250 +228 @@ Now list the keys under root `/`
-curl -L http://127.0.0.1:4001/v2/keys/
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=four
@@ -253 +231 @@ curl -L http://127.0.0.1:4001/v2/keys/
-We should see the response as an array of items
+Since the key "bar" does not exist, the response should be
@@ -256 +234 @@ We should see the response as an array of items
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true}],"index":11,"term":0}
+{"action":"SET","key":"/bar","value":"four","newKey":true,"index":11}
@@ -259,3 +237 @@ We should see the response as an array of items
-which meas `/foo=two` is a key-value pair under `/ and `/foo_dir` is a directory.
-
-Also we can recursively get all the content under a directory by add `recursive=true`.
+However, using a empty prevValue with a key that does exist will fail.
@@ -264 +240 @@ Also we can recursively get all the content under a directory by add `recursive=
-curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+curl -L http://127.0.0.1:4001/v1/keys/bar -d prevValue= -d value=five
@@ -266,0 +243,2 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+will result in
+
@@ -268 +246 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar"}]}],"index":11,"term":0}
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: four!="}
@@ -271,2 +249 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-### Deleting a directory
-Let try to delete the directory `/foo_dir`.
+### Listing a directory
@@ -274 +251 @@ Let try to delete the directory `/foo_dir`.
-To delete a directory, we must add `recursive=true`.
+Last we provide a simple List command to list all the keys under a prefix path.
@@ -276,3 +253 @@ To delete a directory, we must add `recursive=true`.
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-```
+Let us create some keys first.
@@ -280,3 +255 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-```json
-{"action":"delete","key":"/foo_dir","dir":true,"index":12,"term":0}
-```
+We already have `/foo/foo=barbar`
@@ -284,2 +257 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-### Creating a hidden node
-We can create a hidden key-value pair or directory by add `_` prefix. The hidden item will not be list when using get for a directory.
+We create another one `/foo/foo_dir/foo=barbarbar`
@@ -288 +260 @@ We can create a hidden key-value pair or directory by add `_` prefix. The hidden
-curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -291,3 +263 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-```json
-{"action":"set","key":"/_message","value":"Hello hidden world","index":13,"term":0}
-```
+Now list the keys under `/foo`
@@ -296 +266 @@ curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden worl
-curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/foo/
@@ -299,9 +269 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
-```json
-{"action":"set","key":"/message","value":"Hello world","index":14,"term":0}
-```
-
-Let us try to get the root `/`
-
-```sh
-curl -L http://127.0.0.1:4001/v2/keys/
-```
+We should see the response as an array of items
@@ -310 +272 @@ curl -L http://127.0.0.1:4001/v2/keys/
-{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/message","value":"Hello world"}],"index":15,"term":0}
+[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
@@ -313 +275 @@ curl -L http://127.0.0.1:4001/v2/keys/
-We can only get `/message`, but cannot get `/_message`.
+which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
@@ -338 +300 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -352 +314 @@ And also the response from the etcd server.
-{"action":"set","key":"/foo","value":"bar","index":3, "term: 0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
@@ -368 +330 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -382 +344 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -396 +358 @@ And also the response from the server:
-{"action":"set","key":"/foo","value":"bar","index":3,"term:0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
@@ -419,2 +381,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
@@ -442 +404 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003&raftVersion=v0.1.1-311-g91cad59","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
@@ -450 +412 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v2/leader
+curl -L http://127.0.0.1:4001/v1/leader
@@ -461 +423 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
@@ -465 +427 @@ curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
-{"action":"set","key":"/foo","value":"bar","index":5,"term:0"}
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
@@ -495 +457 @@ You should be able to see this:
-{"action":"get","key":"/foo","value":"bar","index":5,"term:1"}
+{"action":"GET","key":"/foo","value":"bar","index":5}
@@ -559,0 +522,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Clojure libraries**
+
+- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
+
@@ -572,0 +539 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
@@ -576,0 +544 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
@@ -590,0 +559,20 @@ And in the best case when all 9 machines are responding the cluster will perform
+### Why SSLv3 alert handshake failure when using SSL client auth?
+The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
+
+Here is how to do it:
+
+Add the following section to your openssl.cnf:
+
+```
+[ ssl_client ]                                                                                                                                            
+...
+  extendedKeyUsage = clientAuth
+...
+```
+
+When creating the cert be sure to reference it in the -extensions flag:
+
+```
+openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
+```
+
diff --git a/README.md b/README.md
index a4d60b735..2034ab314 100644
--- a/README.md
+++ b/README.md
@@ -94 +94 @@ curl -L http://127.0.0.1:4001/v2/keys/message
-### Change the value of a key
+### Changing the value of a key
@@ -107 +107 @@ Notice that the `prevValue` is set to the previous value of the key - `Hello wor
-### Delete a key
+### Deleting a key
@@ -119 +119 @@ curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
-### Use key TTL
+### Using key TTL
@@ -149 +149 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Wait for a change 
+### Waiting for a change 
@@ -151 +151 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch for a change and get notification just at the given path or under the given path
+We can watch for a change and get a notification at a given path or any keys underneath it.
@@ -231 +231 @@ We successfully changed the value from “one” to “two”, since we give the
-### Get a directory
+### Listing a directory
@@ -271 +271 @@ curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
-### Delete a directory
+### Deleting a directory
@@ -284 +284 @@ curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
-### Create a hidden node
+### Creating a hidden node
diff --git a/README.md b/README.md
index 0261603e1..a4d60b735 100644
--- a/README.md
+++ b/README.md
@@ -2 +2 @@
-README version 0.1.0
+README version 0.2.0
@@ -65 +65 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
@@ -69 +69 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
-{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
+{"action":"set","key":"/message","value":"Hello world","index":3,"term":0}
@@ -74 +74 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a POST request, thus the action is `SET`.
+1. The action of the request; we set the value via a PUT request, thus the action is `set`.
@@ -81,3 +81 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. If we set a new key; `/message` did not exist before, so this is a new key.
-
-5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
+4. Index is the unique internal log index of the set request. Requests that change the log index include `set`, `delete`, `update`, `create` and `compareAndSwap`. The `get` and `watch` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
@@ -90 +88 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v1/keys/message
+curl -L http://127.0.0.1:4001/v2/keys/message
@@ -94 +92 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-{"action":"GET","key":"/message","value":"Hello world","index":3}
+{"action":"get","key":"/message","value":"Hello world","index":3,"term":0}
@@ -98 +96 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
+Change the value of `/message` from `Hello world` to `Hello etcd` with another PUT request to the key:
@@ -101 +99 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -XPUT -d value="Hello etcd"
@@ -105 +103 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
+{"action":"set","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4,"term":0}
@@ -108,2 +106 @@ curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-Notice that the `prevValue` is set to `Hello world`.
-
+Notice that the `prevValue` is set to the previous value of the key - `Hello world`. It is useful when you want to atomically set a value to a key and get its old value.
@@ -115 +112 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl -L http://127.0.0.1:4001/v2/keys/message -XDELETE
@@ -119 +116 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
+{"action":"delete","key":"/message","prevValue":"Hello etcd","index":5,"term":0}
@@ -122 +119 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-### Using key TTL
+### Use key TTL
@@ -127 +124 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -d ttl=5
@@ -131 +128 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
+{"action":"set","key":"/foo","value":"bar","expiration":"2013-10-19T18:44:04.528757176-07:00","ttl":5,"index":6,"term":0}
@@ -143 +140 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v1/keys/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo
@@ -149 +146 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
+{"errorCode":100,"message":"Key Not Found","cause":"/foo","index":6,"term":0}
@@ -152 +149 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-### Watching a prefix
+### Wait for a change 
@@ -154 +151 @@ If the TTL has expired, the key will be deleted, and you will be returned a 100.
-We can watch a path prefix and get notifications if any key change under that prefix.
+We can watch for a change and get notification just at the given path or under the given path
@@ -156 +153 @@ We can watch a path prefix and get notifications if any key change under that pr
-In one terminal, we send a watch request:
+In one terminal, we send a get request with `wait=true` :
@@ -159 +156 @@ In one terminal, we send a watch request:
-curl -L http://127.0.0.1:4001/v1/watch/foo
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true
@@ -162 +159 @@ curl -L http://127.0.0.1:4001/v1/watch/foo
-Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
+Now, we are waitting for any changes at path `/foo`.
@@ -164 +161 @@ Now, we are watching at the path prefix `/foo` and wait for any changes under th
-In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
+In another terminal, we set a key `/foo` with value `bar`:
@@ -167 +164 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -173 +170 @@ The first terminal should get the notification and return with the same response
-{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
+{"action":"set","key":"/foo","value":"bar","index":7,"term":0}
@@ -178 +175 @@ However, the watch command can do more than this. Using the the index we can wat
-Let's try to watch for the set command of index 6 again:
+Let's try to watch for the set command of index 7 again:
@@ -181 +178 @@ Let's try to watch for the set command of index 6 again:
-curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
+curl -L http://127.0.0.1:4001/v2/keys/foo?wait=true\&waitIndex=7
@@ -186 +183,5 @@ The watch command returns immediately with the same response as previous.
-### Atomic Test and Set
+### Atomic Compare and Swap
+
+Etcd can be used as a centralized coordination service in a cluster and `CompareAndSwap` is the most basic operation to build distributed lock service. 
+
+This command will set the value to the key only if the client provided conditions are equal to the current conditions. 
@@ -188 +189,6 @@ The watch command returns immediately with the same response as previous.
-Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
+The current comparable conditions are:
+1. `prevValue` previous value of the key: 
+
+2. `prevIndex` previous index of the key
+
+3. `prevExist` previous existence of the key: if `prevExist` is true, it is a  `update` request; if prevExist is `false`, it is a `create` request.
@@ -193 +199 @@ Here is a simple example. Let's create a key-value pair first: `foo=one`.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -XPUT -d value=one
@@ -196,2 +202,2 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
-Let's try an invalid `TestAndSet` command.
-We can give another parameter prevValue to set command to make it a TestAndSet command.
+Let's try an invalid `CompareAndSwap` command.
+We can give another parameter prevValue to set command to make it a `CompareAndSwap` command.
@@ -200 +206 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo?prevValue=two -XPUT -d value=three
@@ -203 +209 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
-This will try to test if the previous of the key is two, it is change it to three.
+This will try to compare the previous value of the key and the previous value we provided. If they are equal, the value of the key will change to three.
@@ -206 +212 @@ This will try to test if the previous of the key is two, it is change it to thre
-{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
+{"errorCode":101,"message":"Test Failed","cause":"[two != one] [0 != 8]","index":9,"term":0}
@@ -209 +215 @@ This will try to test if the previous of the key is two, it is change it to thre
-which means `testAndSet` failed.
+which means `compareAndSwap` failed.
@@ -214 +220 @@ Let us try a valid one.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v2/keys/foo?prevValue=one -XPUT -d value=two
@@ -220 +226 @@ The response should be
-{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
+{"action":"compareAndSwap","key":"/foo","prevValue":"one","value":"two","index":10,"term":0}
@@ -225,3 +231 @@ We successfully changed the value from “one” to “two”, since we give the
-### Listing a directory
-
-Last we provide a simple List command to list all the keys under a prefix path.
+### Get a directory
@@ -231 +235 @@ Let us create some keys first.
-We already have `/foo/foo=barbar`
+We already have `/foo=two`
@@ -233 +237 @@ We already have `/foo/foo=barbar`
-We create another one `/foo/foo_dir/foo=barbarbar`
+We create another one `/foo_dir/foo=bar`
@@ -236 +240,5 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir/foo -XPUT -d value=bar
+```
+
+```json
+{"action":"set","key":"/foo_dir/foo","value":"bar","index":11,"term":0}
@@ -239 +247 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
-Now list the keys under `/foo`
+Now list the keys under root `/`
@@ -242 +250 @@ Now list the keys under `/foo`
-curl -L http://127.0.0.1:4001/v1/keys/foo/
+curl -L http://127.0.0.1:4001/v2/keys/
@@ -248 +256,45 @@ We should see the response as an array of items
-[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true}],"index":11,"term":0}
+```
+
+which meas `/foo=two` is a key-value pair under `/ and `/foo_dir` is a directory.
+
+Also we can recursively get all the content under a directory by add `recursive=true`.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/?recursive=true
+```
+
+```json
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/foo_dir","dir":true,"kvs":[{"key":"/foo_dir/foo","value":"bar"}]}],"index":11,"term":0}
+```
+
+### Delete a directory
+Let try to delete the directory `/foo_dir`.
+
+To delete a directory, we must add `recursive=true`.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/foo_dir?recursive=true -XDELETE
+```
+
+```json
+{"action":"delete","key":"/foo_dir","dir":true,"index":12,"term":0}
+```
+
+### Create a hidden node
+We can create a hidden key-value pair or directory by add `_` prefix. The hidden item will not be list when using get for a directory.
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/_message -XPUT -d value="Hello hidden world"
+```
+
+```json
+{"action":"set","key":"/_message","value":"Hello hidden world","index":13,"term":0}
+```
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/message -XPUT -d value="Hello world"
+```
+
+```json
+{"action":"set","key":"/message","value":"Hello world","index":14,"term":0}
@@ -251 +303,11 @@ We should see the response as an array of items
-which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
+Let us try to get the root `/`
+
+```sh
+curl -L http://127.0.0.1:4001/v2/keys/
+```
+
+```json
+{"action":"get","key":"/","dir":true,"kvs":[{"key":"/foo","value":"two"},{"key":"/message","value":"Hello world"}],"index":15,"term":0}
+```
+
+We can only get `/message`, but cannot get `/_message`.
@@ -276 +338 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -290 +352 @@ And also the response from the etcd server.
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","value":"bar","index":3, "term: 0"}
@@ -306 +368 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar -v
@@ -320 +382 @@ We need to give the CA signed cert to the server.
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -XPUT -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -334 +396 @@ And also the response from the server:
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+{"action":"set","key":"/foo","value":"bar","index":3,"term:0"}
@@ -357,2 +419,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
@@ -380 +442 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
+[{"action":"get","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002&raftVersion=v0.1.1-311-g91cad59","index":4},{"action":"get","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003&raftVersion=v0.1.1-311-g91cad59","index":4}]
@@ -388 +450 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/v1/leader
+curl -L http://127.0.0.1:4001/v2/leader
@@ -399 +461 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl -L http://127.0.0.1:4001/v2/keys/foo -XPUT -d value=bar
@@ -403 +465 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
+{"action":"set","key":"/foo","value":"bar","index":5,"term:0"}
@@ -433 +495 @@ You should be able to see this:
-{"action":"GET","key":"/foo","value":"bar","index":5}
+{"action":"get","key":"/foo","value":"bar","index":5,"term:1"}
@@ -498,4 +559,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**Clojure libraries**
-
-- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
-
@@ -515 +572,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
@@ -520 +576,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
@@ -535,20 +590,0 @@ And in the best case when all 9 machines are responding the cluster will perform
-### Why SSLv3 alert handshake failure when using SSL client auth?
-The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
-
-Here is how to do it:
-
-Add the following section to your openssl.cnf:
-
-```
-[ ssl_client ]                                                                                                                                            
-...
-  extendedKeyUsage = clientAuth
-...
-```
-
-When creating the cert be sure to reference it in the -extensions flag:
-
-```
-openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
-```
-
diff --git a/README.md b/README.md
index 1fa557aae..0261603e1 100644
--- a/README.md
+++ b/README.md
@@ -357,2 +357,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -s 127.0.0.1:7002 -c 127.0.0.1:4002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -s 127.0.0.1:7003 -c 127.0.0.1:4003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
diff --git a/README.md b/README.md
index 132766b62..1fa557aae 100644
--- a/README.md
+++ b/README.md
@@ -181 +181 @@ Let's try to watch for the set command of index 6 again:
-curl -L http://127.0.0.1:4001/v1/watch/foo -d index=7
+curl -L http://127.0.0.1:4001/v1/watch/foo -d index=6
diff --git a/README.md b/README.md
index 3437fb006..132766b62 100644
--- a/README.md
+++ b/README.md
@@ -514,0 +515 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [go-discover](https://github.com/flynn/go-discover) - service discovery in Go
diff --git a/README.md b/README.md
index 289803791..3437fb006 100644
--- a/README.md
+++ b/README.md
@@ -390 +390 @@ curl -L http://127.0.0.1:4001/v1/leader
-The first server we set up should be the leader, if it has not dead during these commands.
+The first server we set up should be the leader, if it has not died during these commands.
@@ -457,0 +458,4 @@ If you are using SSL for server to server communication, you must use it on all
+## Contributing
+
+See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) for details on submitting patches and contacting developers via IRC and mailing lists.
+
@@ -477,0 +482 @@ If you are using SSL for server to server communication, you must use it on all
+- [russellhaering/txetcd](https://github.com/russellhaering/txetcd) - a Twisted Python library
@@ -492,0 +498,4 @@ If you are using SSL for server to server communication, you must use it on all
+**Clojure libraries**
+
+- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
+
@@ -509,0 +519 @@ If you are using SSL for server to server communication, you must use it on all
+- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
@@ -515,2 +525,2 @@ If you are using SSL for server to server communication, you must use it on all
-Every command the client sends to the master is broadcast it to all of the followers.
-But, the command is not be committed until the majority of the cluster machines receive that command.
+Every command the client sends to the master is broadcast to all of the followers.
+But, the command is not committed until the majority of the cluster machines receive that command.
@@ -552 +562 @@ New minor versions may add additional features to the API however.
-You can get the version of etcd by requesting the root path of etcd:
+You can get the version of etcd by issuing a request to /version:
@@ -555 +565 @@ You can get the version of etcd by requesting the root path of etcd:
-curl -L http://127.0.0.1:4001
+curl -L http://127.0.0.1:4001/version
diff --git a/README.md b/README.md
index d5a3a7385..289803791 100644
--- a/README.md
+++ b/README.md
@@ -525 +525 @@ And in the best case when all 9 machines are responding the cluster will perform
-The `TLS` pacakge of `golang` checkes the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creates the certificate public key.
+The `TLS` pacakge of `golang` checks the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creating the certificate public key.
diff --git a/README.md b/README.md
index 855c76ff3..d5a3a7385 100644
--- a/README.md
+++ b/README.md
@@ -529 +529 @@ Here is how to do it:
-Add the following section to my openssl.cnf:
+Add the following section to your openssl.cnf:
@@ -538 +538 @@ Add the following section to my openssl.cnf:
-When create the cert be sure to reference it in the -extensions flag:
+When creating the cert be sure to reference it in the -extensions flag:
diff --git a/README.md b/README.md
index c933bd4c7..855c76ff3 100644
--- a/README.md
+++ b/README.md
@@ -390 +390 @@ curl -L http://127.0.0.1:4001/v1/leader
-The first server we set up should be the leader, if it has not died during these commands.
+The first server we set up should be the leader, if it has not dead during these commands.
@@ -458,4 +457,0 @@ If you are using SSL for server to server communication, you must use it on all
-## Contributing
-
-See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) for details on submitting patches and contacting developers via IRC and mailing lists.
-
@@ -482 +477,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [russellhaering/txetcd](https://github.com/russellhaering/txetcd) - a Twisted Python library
@@ -498,4 +492,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-**Clojure libraries**
-
-- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
-
@@ -519 +509,0 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
@@ -525,2 +515,2 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
-Every command the client sends to the master is broadcast to all of the followers.
-But, the command is not committed until the majority of the cluster machines receive that command.
+Every command the client sends to the master is broadcast it to all of the followers.
+But, the command is not be committed until the majority of the cluster machines receive that command.
@@ -533,0 +524,20 @@ And in the best case when all 9 machines are responding the cluster will perform
+### Why SSLv3 alert handshake failure when using SSL client auth?
+The `TLS` pacakge of `golang` checkes the key usage of certificate public key before using it. To use the certificate public key to do client auth, we need to add `clientAuth` to `Extended Key Usage` when creates the certificate public key.
+
+Here is how to do it:
+
+Add the following section to my openssl.cnf:
+
+```
+[ ssl_client ]                                                                                                                                            
+...
+  extendedKeyUsage = clientAuth
+...
+```
+
+When create the cert be sure to reference it in the -extensions flag:
+
+```
+openssl ca -config openssl.cnf -policy policy_anything -extensions ssl_client -out certs/node.crt -infiles node.csr
+```
+
@@ -542 +552 @@ New minor versions may add additional features to the API however.
-You can get the version of etcd by issuing a request to /version:
+You can get the version of etcd by requesting the root path of etcd:
@@ -545 +555 @@ You can get the version of etcd by issuing a request to /version:
-curl -L http://127.0.0.1:4001/version
+curl -L http://127.0.0.1:4001
diff --git a/README.md b/README.md
index 057d42632..c933bd4c7 100644
--- a/README.md
+++ b/README.md
@@ -497,0 +498,4 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+**Clojure libraries**
+
+- [aterreno/etcd-clojure](https://github.com/aterreno/etcd-clojure)
+
diff --git a/README.md b/README.md
index 562407e14..057d42632 100644
--- a/README.md
+++ b/README.md
@@ -514,0 +515 @@ See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) f
+- [kelseyhightower/confd](https://github.com/kelseyhightower/confd) - Manage local app config files using templates and data from etcd
diff --git a/README.md b/README.md
index db06e4c4c..562407e14 100644
--- a/README.md
+++ b/README.md
@@ -390 +390 @@ curl -L http://127.0.0.1:4001/v1/leader
-The first server we set up should be the leader, if it has not dead during these commands.
+The first server we set up should be the leader, if it has not died during these commands.
diff --git a/README.md b/README.md
index 8cb657faf..db06e4c4c 100644
--- a/README.md
+++ b/README.md
@@ -537 +537 @@ New minor versions may add additional features to the API however.
-You can get the version of etcd by requesting the root path of etcd:
+You can get the version of etcd by issuing a request to /version:
@@ -540 +540 @@ You can get the version of etcd by requesting the root path of etcd:
-curl -L http://127.0.0.1:4001
+curl -L http://127.0.0.1:4001/version
diff --git a/README.md b/README.md
index 9b4d86c55..8cb657faf 100644
--- a/README.md
+++ b/README.md
@@ -457,0 +458,4 @@ If you are using SSL for server to server communication, you must use it on all
+## Contributing
+
+See [CONTRIBUTING](https://github.com/coreos/etcd/blob/master/CONTRIBUTING.md) for details on submitting patches and contacting developers via IRC and mailing lists.
+
diff --git a/README.md b/README.md
index c9770dbcc..9b4d86c55 100644
--- a/README.md
+++ b/README.md
@@ -477,0 +478 @@ If you are using SSL for server to server communication, you must use it on all
+- [russellhaering/txetcd](https://github.com/russellhaering/txetcd) - a Twisted Python library
diff --git a/README.md b/README.md
index 7ce98b95c..c9770dbcc 100644
--- a/README.md
+++ b/README.md
@@ -515,2 +515,2 @@ If you are using SSL for server to server communication, you must use it on all
-Every command the client sends to the master is broadcast it to all of the followers.
-But, the command is not be committed until the majority of the cluster machines receive that command.
+Every command the client sends to the master is broadcast to all of the followers.
+But, the command is not committed until the majority of the cluster machines receive that command.
diff --git a/README.md b/README.md
index 5768f77cd..7ce98b95c 100644
--- a/README.md
+++ b/README.md
@@ -488,0 +489,4 @@ If you are using SSL for server to server communication, you must use it on all
+**C libraries**
+
+- [jdarcy/etcd-api](https://github.com/jdarcy/etcd-api)
+
diff --git a/README.md b/README.md
index f8ab6ee70..5768f77cd 100644
--- a/README.md
+++ b/README.md
@@ -476,0 +477 @@ If you are using SSL for server to server communication, you must use it on all
+- [jplana/python-etcd](https://github.com/jplana/python-etcd)
diff --git a/README.md b/README.md
index b96ad67b5..f8ab6ee70 100644
--- a/README.md
+++ b/README.md
@@ -497,0 +498 @@ If you are using SSL for server to server communication, you must use it on all
+- [binocarlos/yoda](https://github.com/binocarlos/yoda) - etcd + ZeroMQ
diff --git a/README.md b/README.md
index 52c02d214..b96ad67b5 100644
--- a/README.md
+++ b/README.md
@@ -498,0 +499 @@ If you are using SSL for server to server communication, you must use it on all
+- [derekchiang/etcdplus](https://github.com/derekchiang/etcdplus) - A set of distributed synchronization primitives built upon etcd
diff --git a/README.md b/README.md
index 7dbd55ae7..52c02d214 100644
--- a/README.md
+++ b/README.md
@@ -487,0 +488,4 @@ If you are using SSL for server to server communication, you must use it on all
+**Chef Integration**
+
+- [coderanger/etcd-chef](https://github.com/coderanger/etcd-chef)
+
diff --git a/README.md b/README.md
index a495b97f6..7dbd55ae7 100644
--- a/README.md
+++ b/README.md
@@ -190 +190 @@ Etcd can be used as a centralized coordination service in a cluster and `TestAnd
-Here is a simple example. Let's create a key-value pair first: `testAndSet=one`.
+Here is a simple example. Let's create a key-value pair first: `foo=one`.
@@ -193 +193 @@ Here is a simple example. Let's create a key-value pair first: `testAndSet=one`.
-curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=one
@@ -196 +196 @@ curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
-Let's try an invaild `TestAndSet` command.
+Let's try an invalid `TestAndSet` command.
@@ -200 +200 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=two -d value=three
@@ -211 +211 @@ which means `testAndSet` failed.
-Let us try a vaild one.
+Let us try a valid one.
@@ -214 +214 @@ Let us try a vaild one.
-curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v1/keys/foo -d prevValue=one -d value=two
@@ -220 +220 @@ The response should be
-{"action":"SET","key":"/testAndSet","prevValue":"one","value":"two","index":10}
+{"action":"SET","key":"/foo","prevValue":"one","value":"two","index":10}
diff --git a/README.md b/README.md
index a9df80200..a495b97f6 100644
--- a/README.md
+++ b/README.md
@@ -470,0 +471,2 @@ If you are using SSL for server to server communication, you must use it on all
+- [diwakergupta/jetcd](https://github.com/diwakergupta/jetcd)
+
diff --git a/README.md b/README.md
index 4514c4edf..a9df80200 100644
--- a/README.md
+++ b/README.md
@@ -471,2 +470,0 @@ If you are using SSL for server to server communication, you must use it on all
-- [diwakergupta/jetcd](https://github.com/diwakergupta/jetcd)
-
@@ -499,0 +498,13 @@ If you are using SSL for server to server communication, you must use it on all
+## FAQ
+
+### What size cluster should I use?
+
+Every command the client sends to the master is broadcast it to all of the followers.
+But, the command is not be committed until the majority of the cluster machines receive that command.
+
+Because of this majority voting property the ideal cluster should be kept small to keep speed up and be made up of an odd number of machines.
+
+Odd numbers are good because if you have 8 machines the majority will be 5 and if you have 9 machines the majority with be 5.
+The result is that an 8 machine cluster can tolerate 3 machine failures and a 9 machine cluster can tolerate 4 nodes failures.
+And in the best case when all 9 machines are responding the cluster will perform at the speed of the fastest 5 nodes.
+
diff --git a/README.md b/README.md
index a4ad5f1d4..4514c4edf 100644
--- a/README.md
+++ b/README.md
@@ -470,0 +471,2 @@ If you are using SSL for server to server communication, you must use it on all
+- [diwakergupta/jetcd](https://github.com/diwakergupta/jetcd)
+
diff --git a/README.md b/README.md
index 4d4a0d765..a4ad5f1d4 100644
--- a/README.md
+++ b/README.md
@@ -471,0 +472,4 @@ If you are using SSL for server to server communication, you must use it on all
+**Python libraries**
+
+- [transitorykris/etcd-py](https://github.com/transitorykris/etcd-py)
+
diff --git a/README.md b/README.md
index cf883b0d1..4d4a0d765 100644
--- a/README.md
+++ b/README.md
@@ -467,0 +468,4 @@ If you are using SSL for server to server communication, you must use it on all
+**Java libraries**
+
+- [justinsb/jetcd](https://github.com/justinsb/jetcd)
+
diff --git a/README.md b/README.md
index 832815ee0..cf883b0d1 100644
--- a/README.md
+++ b/README.md
@@ -350,0 +351,3 @@ We use -s to specify server port and -c to specify client port and -d to specify
+**Note:** If you want to run etcd on external IP address and still have access locally you need to add `-cl 0.0.0.0` so that it will listen on both external and localhost addresses.
+A similar argument `-sl` is used to setup the listening address for the server port.
+
@@ -367 +370 @@ We should see there are three nodes in the cluster
-http://0.0.0.0:4001, http://0.0.0.0:4002, http://0.0.0.0:4003
+http://127.0.0.1:4001, http://127.0.0.1:4002, http://127.0.0.1:4003
@@ -377 +380 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://0.0.0.0:7001&etcd=http://0.0.0.0:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://0.0.0.0:7002&etcd=http://0.0.0.0:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://0.0.0.0:7003&etcd=http://0.0.0.0:4003","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
@@ -390 +393 @@ The first server we set up should be the leader, if it has not dead during these
-http://0.0.0.0:7001
+http://127.0.0.1:7001
@@ -418 +421 @@ curl -L http://127.0.0.1:4001/v1/leader
-http://0.0.0.0:7002
+http://127.0.0.1:7002
@@ -424 +427 @@ or
-http://0.0.0.0:7003
+http://127.0.0.1:7003
diff --git a/README.md b/README.md
index 05e789228..832815ee0 100644
--- a/README.md
+++ b/README.md
@@ -1,0 +2 @@
+README version 0.1.0
@@ -275 +276 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -305 +306 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -350,3 +350,0 @@ We use -s to specify server port and -c to specify client port and -d to specify
-**Note:** If you want to run etcd on external IP address and still have access locally you need to add `-cl 0.0.0.0` so that it will listen on both external and localhost addresses.
-A similar argument `-sl` is used to setup the listening address for the server port.
-
@@ -369 +367 @@ We should see there are three nodes in the cluster
-http://127.0.0.1:4001, http://127.0.0.1:4002, http://127.0.0.1:4003
+http://0.0.0.0:4001, http://0.0.0.0:4002, http://0.0.0.0:4003
@@ -379 +377 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://0.0.0.0:7001&etcd=http://0.0.0.0:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://0.0.0.0:7002&etcd=http://0.0.0.0:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://0.0.0.0:7003&etcd=http://0.0.0.0:4003","index":4}]
@@ -392 +390 @@ The first server we set up should be the leader, if it has not dead during these
-http://127.0.0.1:7001
+http://0.0.0.0:7001
@@ -420 +418 @@ curl -L http://127.0.0.1:4001/v1/leader
-http://127.0.0.1:7002
+http://0.0.0.0:7002
@@ -426 +424 @@ or
-http://127.0.0.1:7003
+http://0.0.0.0:7003
diff --git a/README.md b/README.md
index 32480ba6f..05e789228 100644
--- a/README.md
+++ b/README.md
@@ -349,0 +350,3 @@ We use -s to specify server port and -c to specify client port and -d to specify
+**Note:** If you want to run etcd on external IP address and still have access locally you need to add `-cl 0.0.0.0` so that it will listen on both external and localhost addresses.
+A similar argument `-sl` is used to setup the listening address for the server port.
+
diff --git a/README.md b/README.md
index 84cd8a4c1..32480ba6f 100644
--- a/README.md
+++ b/README.md
@@ -2 +1,0 @@
-README version 0.1
@@ -276 +275 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
@@ -306 +305 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
@@ -367 +366 @@ We should see there are three nodes in the cluster
-http://0.0.0.0:4001, http://0.0.0.0:4002, http://0.0.0.0:4003
+http://127.0.0.1:4001, http://127.0.0.1:4002, http://127.0.0.1:4003
@@ -377 +376 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://0.0.0.0:7001&etcd=http://0.0.0.0:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://0.0.0.0:7002&etcd=http://0.0.0.0:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://0.0.0.0:7003&etcd=http://0.0.0.0:4003","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://127.0.0.1:7001&etcd=http://127.0.0.1:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://127.0.0.1:7002&etcd=http://127.0.0.1:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://127.0.0.1:7003&etcd=http://127.0.0.1:4003","index":4}]
@@ -390 +389 @@ The first server we set up should be the leader, if it has not dead during these
-http://0.0.0.0:7001
+http://127.0.0.1:7001
@@ -418 +417 @@ curl -L http://127.0.0.1:4001/v1/leader
-http://0.0.0.0:7002
+http://127.0.0.1:7002
@@ -424 +423 @@ or
-http://0.0.0.0:7003
+http://127.0.0.1:7003
diff --git a/README.md b/README.md
index 687e48ced..84cd8a4c1 100644
--- a/README.md
+++ b/README.md
@@ -1,0 +2 @@
+README version 0.1
@@ -275 +276 @@ You can now test the configuration using https:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -305 +306 @@ Try the same request to this server:
-curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
diff --git a/README.md b/README.md
index f6a4aa86b..687e48ced 100644
--- a/README.md
+++ b/README.md
@@ -366 +366 @@ We should see there are three nodes in the cluster
-0.0.0.0:4001,0.0.0.0:4002,0.0.0.0:4003
+http://0.0.0.0:4001, http://0.0.0.0:4002, http://0.0.0.0:4003
@@ -376 +376 @@ curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-[{"action":"GET","key":"/machines/node1","value":"0.0.0.0,7001,4001","index":4},{"action":"GET","key":"/machines/node3","value":"0.0.0.0,7002,4002","index":4},{"action":"GET","key":"/machines/node4","value":"0.0.0.0,7003,4003","index":4}]
+[{"action":"GET","key":"/_etcd/machines/node1","value":"raft=http://0.0.0.0:7001&etcd=http://0.0.0.0:4001","index":4},{"action":"GET","key":"/_etcd/machines/node2","value":"raft=http://0.0.0.0:7002&etcd=http://0.0.0.0:4002","index":4},{"action":"GET","key":"/_etcd/machines/node3","value":"raft=http://0.0.0.0:7003&etcd=http://0.0.0.0:4003","index":4}]
@@ -389 +389 @@ The first server we set up should be the leader, if it has not dead during these
-0.0.0.0:7001
+http://0.0.0.0:7001
@@ -417 +417,7 @@ curl -L http://127.0.0.1:4001/v1/leader
-0.0.0.0:7002 or 0.0.0.0:7003
+http://0.0.0.0:7002
+```
+
+or
+
+```
+http://0.0.0.0:7003
diff --git a/README.md b/README.md
index 04ccae37f..f6a4aa86b 100644
--- a/README.md
+++ b/README.md
@@ -32,0 +33 @@ git clone https://github.com/coreos/etcd
+cd etcd
diff --git a/README.md b/README.md
index 259b0462a..04ccae37f 100644
--- a/README.md
+++ b/README.md
@@ -144 +144 @@ curl -L http://127.0.0.1:4001/v1/keys/foo
-If the TTL has expired, the key will be deleted, and you will be returned a 404.
+If the TTL has expired, the key will be deleted, and you will be returned a 100.
diff --git a/README.md b/README.md
index e7392495c..259b0462a 100644
--- a/README.md
+++ b/README.md
@@ -144 +144 @@ curl -L http://127.0.0.1:4001/v1/keys/foo
-If the TTL has expired, the key will be deleted, and you will be returned a 100.
+If the TTL has expired, the key will be deleted, and you will be returned a 404.
@@ -359 +359 @@ Get the machines in the cluster:
-curl -L http://127.0.0.1:4001/machines
+curl -L http://127.0.0.1:4001/v1/machines
@@ -383 +383 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/leader
+curl -L http://127.0.0.1:4001/v1/leader
@@ -412 +412 @@ A new leader should have been elected.
-curl -L http://127.0.0.1:4001/leader
+curl -L http://127.0.0.1:4001/v1/leader
diff --git a/README.md b/README.md
index 525b52d3a..e7392495c 100644
--- a/README.md
+++ b/README.md
@@ -144 +144 @@ curl -L http://127.0.0.1:4001/v1/keys/foo
-If the TTL has expired, the key will be deleted, and you will be returned a 404.
+If the TTL has expired, the key will be deleted, and you will be returned a 100.
diff --git a/README.md b/README.md
index cca0b315a..525b52d3a 100644
--- a/README.md
+++ b/README.md
@@ -476,0 +477 @@ If you are using SSL for server to server communication, you must use it on all
+- [mattn/etcdenv](https://github.com/mattn/etcdenv) - "env" shebang with etcd integration
diff --git a/README.md b/README.md
index cdb1a1fb4..cca0b315a 100644
--- a/README.md
+++ b/README.md
@@ -475,0 +476 @@ If you are using SSL for server to server communication, you must use it on all
+- [mattn/etcd-vim](https://github.com/mattn/etcd-vim) - SET and GET keys from inside vim
diff --git a/README.md b/README.md
index db06dea24..cdb1a1fb4 100644
--- a/README.md
+++ b/README.md
@@ -473 +473,3 @@ If you are using SSL for server to server communication, you must use it on all
-- [calavera/active-proxy](https://github.com/calavera/active-proxy)
+- [calavera/active-proxy](https://github.com/calavera/active-proxy) - HTTP Proxy configured with etcd
+- [gleicon/goreman](https://github.com/gleicon/goreman/tree/etcd) - Branch of the Go Foreman clone with etcd support
+- [garethr/hiera-etcd](https://github.com/garethr/hiera-etcd) - Puppet hiera backend using etcd
diff --git a/README.md b/README.md
index e5e7fd123..db06dea24 100644
--- a/README.md
+++ b/README.md
@@ -346 +346 @@ We use -s to specify server port and -c to specify client port and -d to specify
-./etcd -s 7001 -c 4001 -d nodes/node1 -n node1
+./etcd -s 127.0.0.1:7001 -c 127.0.0.1:4001 -d nodes/node1 -n node1
@@ -352,2 +352,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
-./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
+./etcd -c 127.0.0.1:4002 -s 127.0.0.1:7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -c 127.0.0.1:4003 -s 127.0.0.1:7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
diff --git a/README.md b/README.md
index 4970955c8..e5e7fd123 100644
--- a/README.md
+++ b/README.md
@@ -27 +27,3 @@ The latest release is available as a binary at [Github][github-release].
-You can also build etcd from source:
+### Building
+
+You can build etcd from source:
@@ -33,0 +36,8 @@ git clone https://github.com/coreos/etcd
+This will generate a binary in the base directory called `./etcd`.
+
+_NOTE_: you need go 1.1+. Please check your installation with
+
+```
+go version
+```
+
diff --git a/README.md b/README.md
index 4c6a61742..4970955c8 100644
--- a/README.md
+++ b/README.md
@@ -446,0 +447,4 @@ If you are using SSL for server to server communication, you must use it on all
+**Node libraries**
+
+- [stianeikeland/node-etcd](https://github.com/stianeikeland/node-etcd)
+
diff --git a/README.md b/README.md
index dd7536f7a..4c6a61742 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ The latest release is available as a binary at [Github][github-release].
-You can also buildi etcd from source:
+You can also build etcd from source:
diff --git a/README.md b/README.md
index 5f7ee210c..dd7536f7a 100644
--- a/README.md
+++ b/README.md
@@ -14 +14 @@ Etcd is written in Go and uses the [raft][raft] consensus algorithm to manage a
-See [go-etcd][go-etcd] for a native Go client. Or feel free to just use curl, as in the examples below.
+See [etcdctl][etcdctl] for a simple command line client. Or feel free to just use curl, as in the examples below.
@@ -17 +17 @@ See [go-etcd][go-etcd] for a native Go client. Or feel free to just use curl, as
-[go-etcd]: https://github.com/coreos/go-etcd
+[etcdctl]: http://coreos.com/docs/etcdctl/
diff --git a/README.md b/README.md
index a5f132692..5f7ee210c 100644
--- a/README.md
+++ b/README.md
@@ -12 +12 @@ A highly-available key value store for shared configuration and service discover
-Etcd is written in Go and uses the [raft][raft] consensus algorithm to manage a highly availably replicated log.
+Etcd is written in Go and uses the [raft][raft] consensus algorithm to manage a highly-available replicated log.
diff --git a/README.md b/README.md
index 907b3db85..a5f132692 100644
--- a/README.md
+++ b/README.md
@@ -39 +39 @@ These examples will use a single node cluster to show you the basics of the etcd
-./etcd -d node0
+./etcd -d node0 -n node0
@@ -42 +42,3 @@ These examples will use a single node cluster to show you the basics of the etcd
-This will bring up an etcd node listening on port 4001 for client communication and on port 7001 for server-to-server communication. The `-d node0` argument tells etcd to write node configuration, logs and snapshots to the `./node0/` directory.
+This will bring up an etcd node listening on port 4001 for client communication and on port 7001 for server-to-server communication.
+The `-d node0` argument tells etcd to write node configuration, logs and snapshots to the `./node0/` directory.
+The `-n node0` tells the rest of the cluster that this node is named node0.
@@ -334 +336 @@ We use -s to specify server port and -c to specify client port and -d to specify
-./etcd -s 7001 -c 4001 -d nodes/node1
+./etcd -s 7001 -c 4001 -d nodes/node1 -n node1
@@ -340,2 +342,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nodes/node2
-./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nodes/node3
+./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nodes/node2 -n node2
+./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nodes/node3 -n node3
diff --git a/README.md b/README.md
index 299084d89..907b3db85 100644
--- a/README.md
+++ b/README.md
@@ -454,0 +455,4 @@ If you are using SSL for server to server communication, you must use it on all
+**Projects using etcd**
+
+- [calavera/active-proxy](https://github.com/calavera/active-proxy)
+
diff --git a/README.md b/README.md
index 36414d60f..299084d89 100644
--- a/README.md
+++ b/README.md
@@ -246,2 +245,0 @@ First, you need to have a CA cert `clientCA.crt` and signed key pair `client.crt
-
-```url
@@ -249 +246,0 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-```
diff --git a/README.md b/README.md
index 8cb9b4e88..36414d60f 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ See [go-etcd][go-etcd] for a native Go client. Or feel free to just use curl, as
-### Building
+### Getting etcd
@@ -23 +23 @@ See [go-etcd][go-etcd] for a native Go client. Or feel free to just use curl, as
-To build etcd run the build script. This will generate a binary in the base directory called `./etcd`.
+The latest release is available as a binary at [Github][github-release].
@@ -25 +25,6 @@ To build etcd run the build script. This will generate a binary in the base dire
-```
+[github-release]: https://github.com/coreos/etcd/releases/
+
+You can also buildi etcd from source:
+
+```sh
+git clone https://github.com/coreos/etcd
diff --git a/README.md b/README.md
index eedda8d37..8cb9b4e88 100644
--- a/README.md
+++ b/README.md
@@ -469,0 +470,6 @@ During the v0 series of releases we may break the API as we fix bugs and get fee
+
+### License
+
+etcd is under the Apache 2.0 license. See the [LICENSE][license] file for details.
+
+[license]: https://github.com/coreos/etcd/blob/master/LICENSE
diff --git a/README.md b/README.md
index 4a2399523..eedda8d37 100644
--- a/README.md
+++ b/README.md
@@ -451,0 +452,18 @@ If you are using SSL for server to server communication, you must use it on all
+
+## Project Details
+
+### Versioning
+
+etcd uses [semantic versioning][semver].
+When we release v1.0.0 of etcd we will promise not to break the "v1" REST API.
+New minor versions may add additional features to the API however.
+
+You can get the version of etcd by requesting the root path of etcd:
+
+```sh
+curl -L http://127.0.0.1:4001
+```
+
+During the v0 series of releases we may break the API as we fix bugs and get feedback.
+
+[semver]: http://semver.org/
diff --git a/README.md b/README.md
index 138a6e0f0..4a2399523 100644
--- a/README.md
+++ b/README.md
@@ -245,0 +246,2 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
+For testing you can use the certificates in the `fixtures/ca` directory.
+
@@ -249 +251 @@ Next, lets configure etcd to use this keypair:
-./etcd -clientCert client.crt -clientKey client.key -f
+./etcd -n node0 -d node0 -clientCert=./fixtures/ca/server.crt -clientKey=./fixtures/ca/server.key.insecure -f
@@ -258 +260 @@ You can now test the configuration using https:
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
@@ -280 +282 @@ We can also do authentication using CA certs. The clients will provide their cer
-./etcd -clientCert client.crt -clientKey client.key -clientCAFile clientCA.crt -f
+./etcd -n node0 -d node0 -clientCAFile=./fixtures/ca/ca.crt -clientCert=./fixtures/ca/server.crt -clientKey=./fixtures/ca/server.key.insecure -f
@@ -288 +290 @@ Try the same request to this server:
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
+curl --cacert fixtures/ca/ca.crt https://127.0.0.1:4001/v1/keys/foo -F value=bar
diff --git a/README.md b/README.md
index 51c124c74..138a6e0f0 100644
--- a/README.md
+++ b/README.md
@@ -429,0 +430,20 @@ If you are using SSL for server to server communication, you must use it on all
+
+## Libraries and Tools
+
+**Tools**
+
+- [etcdctl](https://github.com/coreos/etcdctl) - A command line client for etcd
+
+**Go libraries**
+
+- [go-etcd](https://github.com/coreos/go-etcd)
+
+**Ruby libraries**
+
+- [iconara/etcd-rb](https://github.com/iconara/etcd-rb)
+- [jpfuentes2/etcd-ruby](https://github.com/jpfuentes2/etcd-ruby)
+- [ranjib/etcd-ruby](https://github.com/ranjib/etcd-ruby)
+
+**Chef Cookbook**
+
+- [spheromak/etcd-cookbook](https://github.com/spheromak/etcd-cookbook)
diff --git a/README.md b/README.md
index c4034acbe..51c124c74 100644
--- a/README.md
+++ b/README.md
@@ -129,2 +129,2 @@ If the TTL has expired, the key will be deleted, and you will be returned a 404.
-```html
-404 page not found
+```json
+{"errorCode":100,"message":"Key Not Found","cause":"/foo"}
@@ -169,3 +169 @@ The watch command returns immediately with the same response as previous.
-`TestAndSet` is the most basic operation to build distributed lock service.
-
-The basic logic is to test whether the given previous value is equal to the value of the key, if equal etcd will change the value of the key to the given value.
+Etcd can be used as a centralized coordination service in a cluster and `TestAndSet` is the most basic operation to build distributed lock service. This command will set the value only if the client provided `prevValue` is equal the current key value.
@@ -222 +220 @@ curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
-Let us list them next.
+Now list the keys under `/foo`
@@ -242 +240 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
-Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.crt`, `client.key` .
+First, you need to have a CA cert `clientCA.crt` and signed key pair `client.crt`, `client.key`. This site has a good reference for how to generate self-signed key pairs:
@@ -244 +241,0 @@ Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.
-This site has a good reference for how to generate self-signed key pairs
@@ -248,0 +246,2 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
+Next, lets configure etcd to use this keypair:
+
@@ -256,5 +255 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
-```
-
-or 
+You can now test the configuration using https:
@@ -266,0 +262 @@ You should be able to see the handshake succeed.
+
@@ -271,0 +268 @@ SSLv3, TLS handshake, Finished (20):
+
@@ -272,0 +270 @@ And also the response from the etcd server.
+
@@ -287,5 +285 @@ We can also do authentication using CA certs. The clients will provide their cer
-Try the same request to this server.
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
-```
-or 
+Try the same request to this server:
@@ -297,0 +292 @@ The request should be rejected by the server.
+
@@ -304,6 +299 @@ routines:SSL3_READ_BYTES:sslv3 alert bad certificate
-We need to give the CA signed cert to the server. 
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -k
-```
-
-or
+We need to give the CA signed cert to the server.
@@ -323 +313,2 @@ TLS handshake, Finished (20)
-And also the response from the server
+And also the response from the server:
+
@@ -349 +340 @@ Let the join two more nodes to this cluster using the -C argument:
-Get the machines in the cluster
+Get the machines in the cluster:
@@ -361 +352 @@ We should see there are three nodes in the cluster
-Machine list is also available via this API
+The machine list is also available via this API:
@@ -363 +354 @@ Machine list is also available via this API
-```sh 
+```sh
@@ -418 +409 @@ You should be able to see this:
-It succeed!
+It succeeded!
@@ -437 +427,0 @@ In the previous example we showed how to use SSL client certs for client to serv
-If you are using SSL for server to server communication, you must use it on all instances of etcd.
@@ -438,0 +429 @@ If you are using SSL for server to server communication, you must use it on all
+If you are using SSL for server to server communication, you must use it on all instances of etcd.
diff --git a/README.md b/README.md
index 018764f5e..c4034acbe 100644
--- a/README.md
+++ b/README.md
@@ -39 +39,3 @@ This will bring up an etcd node listening on port 4001 for client communication
-#### Setting the value to a key
+## Usage
+
+### Setting the value to a key
@@ -64 +66 @@ Notice we use a file system like structure to represent the key-value pairs. So
-#### Getting the value of a key
+### Get the value of a key
@@ -75 +77 @@ curl -L http://127.0.0.1:4001/v1/keys/message
-#### Changing the value of a key
+### Change the value of a key
@@ -89 +91 @@ Notice that the `prevValue` is set to `Hello world`.
-#### Deleting a key
+### Delete a key
@@ -101 +103 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-#### Using a TTL on a key
+### Using key TTL
@@ -131,2 +133 @@ If the TTL has expired, the key will be deleted, and you will be returned a 404.
-
-#### Watching a prefix
+### Watching a prefix
@@ -166,3 +167 @@ The watch command returns immediately with the same response as previous.
-#### Atomic Test and Set
-
-Etcd servers will process all the command in sequence atomically. Thus it can be used as a centralized coordination service in a cluster.
+### Atomic Test and Set
@@ -209,2 +208 @@ We successfully changed the value from “one” to “two”, since we give the
-
-#### Listing directory
+### Listing a directory
@@ -238 +236,4 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
-#### Using HTTPS between server and client
+## Advanced Usage
+
+### Transport security with HTTPS
+
@@ -276 +277,3 @@ And also the response from the etcd server.
-We also can do authentication using CA cert. The clients will also need to provide their cert to the server. The server will check whether the cert is signed by the CA and decide whether to serve the request.
+### Authentication with HTTPS client certificates
+
+We can also do authentication using CA certs. The clients will provide their cert to the server and the server will check whether the cert is signed by the CA and decide whether to serve the request.
@@ -325 +328,3 @@ And also the response from the server
-### Setting up a cluster of three machines
+## Clustering
+
+### Example cluster of three machines
@@ -327 +332 @@ And also the response from the server
-Next let's explore the use of etcd clustering. We use go-raft as the underlying distributed protocol which provides consistency and persistence of the data across all of the etcd instances.
+Let's explore the use of etcd clustering. We use go-raft as the underlying distributed protocol which provides consistency and persistence of the data across all of the etcd instances.
@@ -385,5 +389,0 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-When the client sends a sensitive command (`set`, `delete`, `testAndset` ) to the server, the command needs to be redirect to the leader of the cluster.
-
-So we add the ` -L ` flag to make curl follow location hints in http location header when there is a redirection http response.
-
-The response should be 
@@ -394 +394 @@ The response should be
-#### Killing Nodes in the Cluster
+### Killing Nodes in the Cluster
@@ -420 +420 @@ It succeed!
-#### Testing Persistence
+### Testing Persistence
@@ -434 +434,2 @@ curl -L http://127.0.0.1:4002/v1/keys/foo
-#### Using HTTPS between servers
+### Using HTTPS between servers
+
diff --git a/README.md b/README.md
index 97dae3769..018764f5e 100644
--- a/README.md
+++ b/README.md
@@ -62 +62 @@ Notice we use a file system like structure to represent the key-value pairs. So
-5. Index field is the unique request index of the set request. Each sensitive request we send to the server will have a unique request index. The current sensitive request are `SET`, `DELETE` and `TESTANDSET`. All of these request will change the state of the key-value store system, thus they are sensitive. `GET`, `LIST` and `WATCH` are non-sensitive commands. Those commands will not change the state of the key-value store system. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are some internal commands that also change the state of the server, we also need to assign them command indexes(Command used to add a server and sync the servers).
+5. Index is the unique internal log index of the set request. Requests that change the log index include `SET`, `DELETE` and `TESTANDSET`. The `GET`, `LIST` and `WATCH` commands do not change state in the store and so they do not change the index. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are internal commands that also change the state like adding and syncing servers.
diff --git a/README.md b/README.md
index e0e60f49d..97dae3769 100644
--- a/README.md
+++ b/README.md
@@ -34 +34 @@ These examples will use a single node cluster to show you the basics of the etcd
-./etcd
+./etcd -d node0
@@ -37 +37 @@ These examples will use a single node cluster to show you the basics of the etcd
-This will bring up a node, which will be listening on internal port 7001 (for server communication) and external port 4001 (for client communication)
+This will bring up an etcd node listening on port 4001 for client communication and on port 7001 for server-to-server communication. The `-d node0` argument tells etcd to write node configuration, logs and snapshots to the `./node0/` directory.
@@ -54 +54 @@ This response contains five fields. We will introduce three more fields as we tr
- 
+
diff --git a/README.md b/README.md
index d8a3f0618..e0e60f49d 100644
--- a/README.md
+++ b/README.md
@@ -12 +12 @@ A highly-available key value store for shared configuration and service discover
-Etcd is written in go and uses the [raft][raft] consensus algorithm to manage a highly availably replicated log. 
+Etcd is written in Go and uses the [raft][raft] consensus algorithm to manage a highly availably replicated log.
@@ -14 +14 @@ Etcd is written in go and uses the [raft][raft] consensus algorithm to manage a
-See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as in the examples below. 
+See [go-etcd][go-etcd] for a native Go client. Or feel free to just use curl, as in the examples below.
diff --git a/README.md b/README.md
index a0f70ffbb..d8a3f0618 100644
--- a/README.md
+++ b/README.md
@@ -249 +249 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-./etcd -clientCert client.crt -clientKey client.key -i
+./etcd -clientCert client.crt -clientKey client.key -f
@@ -252 +252 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-`-i` is to ignore the previously created default configuration file.
+`-f` forces new node configuration if existing configuration is found (WARNING: data loss!)
@@ -279 +279 @@ We also can do authentication using CA cert. The clients will also need to provi
-./etcd -clientCert client.crt -clientKey client.key -clientCAFile clientCA.crt -i
+./etcd -clientCert client.crt -clientKey client.key -clientCAFile clientCA.crt -f
diff --git a/README.md b/README.md
index 85b113cbc..a0f70ffbb 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,2 @@
+[![Build Status](https://travis-ci.org/coreos/etcd.png)](https://travis-ci.org/coreos/etcd)
+
diff --git a/README.md b/README.md
index 2bc267ad8..85b113cbc 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as
-etcd is installed like any other Go (golang >= 1.1) binary. The steps below will put everything into a directory called etcd.
+To build etcd run the build script. This will generate a binary in the base directory called `./etcd`.
@@ -24,5 +24 @@ etcd is installed like any other Go (golang >= 1.1) binary. The steps below will
-mkdir etcd
-cd etcd
-export GOPATH=`pwd`
-go get github.com/coreos/etcd
-go install github.com/coreos/etcd
+./build
@@ -36 +32 @@ These examples will use a single node cluster to show you the basics of the etcd
-./bin/etcd
+./etcd
diff --git a/README.md b/README.md
index c19fac8d5..2bc267ad8 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,14 @@
+A highly-available key value store for shared configuration and service discovery. etcd is inspired by zookeeper and doozer, with a focus on:
+
+* Simple: curl'able user facing API (HTTP+JSON)
+* Secure: optional SSL client cert authentication
+* Fast: benchmarked 1000s of writes/s per instance
+* Reliable: Properly distributed using Raft
+
+Etcd is written in go and uses the [raft][raft] consensus algorithm to manage a highly availably replicated log. 
+
+See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as in the examples below. 
+
+[raft]: https://github.com/coreos/go-raft
+[go-etcd]: https://github.com/coreos/go-etcd
+
@@ -32 +46 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
@@ -57 +71 @@ Get the value that we just set in `/message` by issuing a GET:
-curl http://127.0.0.1:4001/v1/keys/message
+curl -L http://127.0.0.1:4001/v1/keys/message
@@ -68 +82 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
@@ -82 +96 @@ Remove the `/message` key with a DELETE:
-curl http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
@@ -89 +103 @@ curl http://127.0.0.1:4001/v1/keys/message -X DELETE
-#### Using time to live key
+#### Using a TTL on a key
@@ -94 +108 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
@@ -110 +124 @@ Now you can try to get the key by sending:
-curl http://127.0.0.1:4001/v1/keys/foo
+curl -L http://127.0.0.1:4001/v1/keys/foo
@@ -113 +127 @@ curl http://127.0.0.1:4001/v1/keys/foo
-If the TTL has passed then you will 
+If the TTL has expired, the key will be deleted, and you will be returned a 404.
@@ -127 +141 @@ In one terminal, we send a watch request:
-curl http://127.0.0.1:4001/v1/watch/foo
+curl -L http://127.0.0.1:4001/v1/watch/foo
@@ -135 +149 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
@@ -149 +163 @@ Let's try to watch for the set command of index 6 again:
-curl http://127.0.0.1:4001/v1/watch/foo -d index=7
+curl -L http://127.0.0.1:4001/v1/watch/foo -d index=7
@@ -165 +179 @@ Here is a simple example. Let's create a key-value pair first: `testAndSet=one`.
-curl http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
@@ -172 +186 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
@@ -186 +200 @@ Let us try a vaild one.
-curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
@@ -209 +223 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -215 +229 @@ Let us list them next.
-curl http://127.0.0.1:4001/v1/get/foo/
+curl -L http://127.0.0.1:4001/v1/keys/foo/
@@ -225,0 +240,87 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
+#### Using HTTPS between server and client
+Etcd supports SSL/TLS and client cert authentication for clients to server, as well as server to server communication
+
+Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.crt`, `client.key` .
+
+This site has a good reference for how to generate self-signed key pairs
+```url
+http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
+```
+
+```sh
+./etcd -clientCert client.crt -clientKey client.key -i
+```
+
+`-i` is to ignore the previously created default configuration file.
+`-clientCert` and `-clientKey` are the key and cert for transport layer security between client and server
+
+```sh
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
+```
+
+or 
+
+```sh
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
+```
+
+You should be able to see the handshake succeed.
+```
+...
+SSLv3, TLS handshake, Finished (20):
+...
+```
+And also the response from the etcd server.
+```json
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+```
+
+We also can do authentication using CA cert. The clients will also need to provide their cert to the server. The server will check whether the cert is signed by the CA and decide whether to serve the request.
+
+```sh
+./etcd -clientCert client.crt -clientKey client.key -clientCAFile clientCA.crt -i
+```
+
+```-clientCAFile``` is the path to the CA cert.
+
+Try the same request to this server.
+```sh
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
+```
+or 
+
+```sh
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
+```
+
+The request should be rejected by the server.
+```
+...
+routines:SSL3_READ_BYTES:sslv3 alert bad certificate
+...
+```
+
+We need to give the CA signed cert to the server. 
+```sh
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -k
+```
+
+or
+
+```sh
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+```
+
+You should able to see
+```
+...
+SSLv3, TLS handshake, CERT verify (15):
+...
+TLS handshake, Finished (20)
+```
+
+And also the response from the server
+```json
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+```
+
@@ -241,2 +342,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nod/node2
-./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nod/node3
+./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nodes/node2
+./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nodes/node3
@@ -248 +349 @@ Get the machines in the cluster
-curl http://127.0.0.1:4001/machines
+curl -L http://127.0.0.1:4001/machines
@@ -256,0 +358,12 @@ We should see there are three nodes in the cluster
+Machine list is also available via this API
+
+```sh 
+curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
+```
+
+```json
+[{"action":"GET","key":"/machines/node1","value":"0.0.0.0,7001,4001","index":4},{"action":"GET","key":"/machines/node3","value":"0.0.0.0,7002,4002","index":4},{"action":"GET","key":"/machines/node4","value":"0.0.0.0,7003,4003","index":4}]
+```
+
+The key of the machine is based on the ```commit index``` when it was added. The value of the machine is ```hostname```, ```raft port``` and ```client port```.
+
@@ -260 +373 @@ Also try to get the current leader in the cluster
-curl http://127.0.0.1:4001/leader
+curl -L http://127.0.0.1:4001/leader
@@ -271 +384 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
@@ -273,0 +387,5 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
+When the client sends a sensitive command (`set`, `delete`, `testAndset` ) to the server, the command needs to be redirect to the leader of the cluster.
+
+So we add the ` -L ` flag to make curl follow location hints in http location header when there is a redirection http response.
+
+The response should be 
@@ -283 +401 @@ Let's kill the leader of the cluster and get the value from the other machine:
-curl http://127.0.0.1:4002/v1/keys/foo
+curl -L http://127.0.0.1:4002/v1/keys/foo
@@ -289 +407 @@ A new leader should have been elected.
-curl http://127.0.0.1:4001/leader
+curl -L http://127.0.0.1:4001/leader
@@ -311 +429 @@ Your request for the `foo` key will return the correct value:
-curl http://127.0.0.1:4002/v1/keys/foo
+curl -L http://127.0.0.1:4002/v1/keys/foo
@@ -316,0 +435,5 @@ curl http://127.0.0.1:4002/v1/keys/foo
+
+#### Using HTTPS between servers
+In the previous example we showed how to use SSL client certs for client to server communication. Etcd can also do internal server to server communication using SSL client certs. To do this just change the ```-client*``` flags to ```-server*```.
+If you are using SSL for server to server communication, you must use it on all instances of etcd.
+
diff --git a/README.md b/README.md
index 47cc3c6b8..c19fac8d5 100644
--- a/README.md
+++ b/README.md
@@ -3,14 +2,0 @@
-A highly-available key value store for shared configuration and service discovery. etcd is inspired by zookeeper and doozer, with a focus on:
-
-* Simple: curl'able user facing API (HTTP+JSON)
-* Secure: optional SSL client cert authentication
-* Fast: benchmarked 1000s of writes/s per instance
-* Reliable: Properly distributed using Raft
-
-Etcd is written in go and uses the [raft][raft] consensus algorithm to manage a highly availably replicated log. 
-
-See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as in the examples below. 
-
-[raft]: https://github.com/coreos/go-raft
-[go-etcd]: https://github.com/coreos/go-etcd
-
@@ -21 +7 @@ See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as
-etcd is installed like any other Go binary. The steps below will put everything into a directory called etcd.
+etcd is installed like any other Go (golang >= 1.1) binary. The steps below will put everything into a directory called etcd.
@@ -46 +32 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
@@ -71 +57 @@ Get the value that we just set in `/message` by issuing a GET:
-curl -L http://127.0.0.1:4001/v1/keys/message
+curl http://127.0.0.1:4001/v1/keys/message
@@ -82 +68 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
@@ -96 +82 @@ Remove the `/message` key with a DELETE:
-curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl http://127.0.0.1:4001/v1/keys/message -X DELETE
@@ -103 +89 @@ curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
-#### Using a TTL on a key
+#### Using time to live key
@@ -108 +94 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
@@ -124 +110 @@ Now you can try to get the key by sending:
-curl -L http://127.0.0.1:4001/v1/keys/foo
+curl http://127.0.0.1:4001/v1/keys/foo
@@ -127 +113 @@ curl -L http://127.0.0.1:4001/v1/keys/foo
-If the TTL has expired, the key will be deleted, and you will be returned a 404.
+If the TTL has passed then you will 
@@ -141 +127 @@ In one terminal, we send a watch request:
-curl -L http://127.0.0.1:4001/v1/watch/foo
+curl http://127.0.0.1:4001/v1/watch/foo
@@ -149 +135 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
@@ -163 +149 @@ Let's try to watch for the set command of index 6 again:
-curl -L http://127.0.0.1:4001/v1/watch/foo -d index=7
+curl http://127.0.0.1:4001/v1/watch/foo -d index=7
@@ -179 +165 @@ Here is a simple example. Let's create a key-value pair first: `testAndSet=one`.
-curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
+curl http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
@@ -186 +172 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
+curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
@@ -200 +186 @@ Let us try a vaild one.
-curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
+curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
@@ -223 +209 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -229 +215 @@ Let us list them next.
-curl -L http://127.0.0.1:4001/v1/keys/foo/
+curl http://127.0.0.1:4001/v1/get/foo/
@@ -240,87 +225,0 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
-#### Using HTTPS between server and client
-Etcd supports SSL/TLS and client cert authentication for clients to server, as well as server to server communication
-
-Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.crt`, `client.key` .
-
-This site has a good reference for how to generate self-signed key pairs
-```url
-http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-```
-
-```sh
-./etcd -clientCert client.crt -clientKey client.key -i
-```
-
-`-i` is to ignore the previously created default configuration file.
-`-clientCert` and `-clientKey` are the key and cert for transport layer security between client and server
-
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
-```
-
-or 
-
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
-```
-
-You should be able to see the handshake succeed.
-```
-...
-SSLv3, TLS handshake, Finished (20):
-...
-```
-And also the response from the etcd server.
-```json
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
-```
-
-We also can do authentication using CA cert. The clients will also need to provide their cert to the server. The server will check whether the cert is signed by the CA and decide whether to serve the request.
-
-```sh
-./etcd -clientCert client.crt -clientKey client.key -clientCAFile clientCA.crt -i
-```
-
-```-clientCAFile``` is the path to the CA cert.
-
-Try the same request to this server.
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
-```
-or 
-
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
-```
-
-The request should be rejected by the server.
-```
-...
-routines:SSL3_READ_BYTES:sslv3 alert bad certificate
-...
-```
-
-We need to give the CA signed cert to the server. 
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -k
-```
-
-or
-
-```sh
-curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
-```
-
-You should able to see
-```
-...
-SSLv3, TLS handshake, CERT verify (15):
-...
-TLS handshake, Finished (20)
-```
-
-And also the response from the server
-```json
-{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
-```
-
@@ -342,2 +241,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nodes/node2
-./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nodes/node3
+./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nod/node2
+./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nod/node3
@@ -349 +248 @@ Get the machines in the cluster
-curl -L http://127.0.0.1:4001/machines
+curl http://127.0.0.1:4001/machines
@@ -358,12 +256,0 @@ We should see there are three nodes in the cluster
-Machine list is also available via this API
-
-```sh 
-curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
-```
-
-```json
-[{"action":"GET","key":"/machines/node1","value":"0.0.0.0,7001,4001","index":4},{"action":"GET","key":"/machines/node3","value":"0.0.0.0,7002,4002","index":4},{"action":"GET","key":"/machines/node4","value":"0.0.0.0,7003,4003","index":4}]
-```
-
-The key of the machine is based on the ```commit index``` when it was added. The value of the machine is ```hostname```, ```raft port``` and ```client port```.
-
@@ -373 +260 @@ Also try to get the current leader in the cluster
-curl -L http://127.0.0.1:4001/leader
+curl http://127.0.0.1:4001/leader
@@ -384 +271 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
@@ -387,5 +273,0 @@ curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
-When the client sends a sensitive command (`set`, `delete`, `testAndset` ) to the server, the command needs to be redirect to the leader of the cluster.
-
-So we add the ` -L ` flag to make curl follow location hints in http location header when there is a redirection http response.
-
-The response should be 
@@ -401 +283 @@ Let's kill the leader of the cluster and get the value from the other machine:
-curl -L http://127.0.0.1:4002/v1/keys/foo
+curl http://127.0.0.1:4002/v1/keys/foo
@@ -407 +289 @@ A new leader should have been elected.
-curl -L http://127.0.0.1:4001/leader
+curl http://127.0.0.1:4001/leader
@@ -429 +311 @@ Your request for the `foo` key will return the correct value:
-curl -L http://127.0.0.1:4002/v1/keys/foo
+curl http://127.0.0.1:4002/v1/keys/foo
@@ -435,5 +316,0 @@ curl -L http://127.0.0.1:4002/v1/keys/foo
-
-#### Using HTTPS between servers
-In the previous example we showed how to use SSL client certs for client to server communication. Etcd can also do internal server to server communication using SSL client certs. To do this just change the ```-client*``` flags to ```-server*```.
-If you are using SSL for server to server communication, you must use it on all instances of etcd.
-
diff --git a/README.md b/README.md
index 4da55fcbc..47cc3c6b8 100644
--- a/README.md
+++ b/README.md
@@ -361 +361 @@ Machine list is also available via this API
-curl -L http://127.0.0.1:4001/v1/keys/machines
+curl -L http://127.0.0.1:4001/v1/keys/_etcd/machines
diff --git a/README.md b/README.md
index 0998c0e31..4da55fcbc 100644
--- a/README.md
+++ b/README.md
@@ -358 +358 @@ We should see there are three nodes in the cluster
-You can get the machinse in another way
+Machine list is also available via this API
diff --git a/README.md b/README.md
index b2eefcf4e..0998c0e31 100644
--- a/README.md
+++ b/README.md
@@ -229 +229 @@ Let us list them next.
-curl -L http://127.0.0.1:4001/v1/get/foo/
+curl -L http://127.0.0.1:4001/v1/keys/foo/
diff --git a/README.md b/README.md
index bfa089908..b2eefcf4e 100644
--- a/README.md
+++ b/README.md
@@ -229 +229 @@ Let us list them next.
-curl -L http://127.0.0.1:4001/v1/keys/foo/
+curl -L http://127.0.0.1:4001/v1/get/foo/
@@ -342,2 +342,2 @@ Let the join two more nodes to this cluster using the -C argument:
-./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nod/node2
-./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nod/node3
+./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nodes/node2
+./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nodes/node3
@@ -357,0 +358,12 @@ We should see there are three nodes in the cluster
+You can get the machinse in another way
+
+```sh 
+curl -L http://127.0.0.1:4001/v1/keys/machines
+```
+
+```json
+[{"action":"GET","key":"/machines/node1","value":"0.0.0.0,7001,4001","index":4},{"action":"GET","key":"/machines/node3","value":"0.0.0.0,7002,4002","index":4},{"action":"GET","key":"/machines/node4","value":"0.0.0.0,7003,4003","index":4}]
+```
+
+The key of the machine is based on the ```commit index``` when it was added. The value of the machine is ```hostname```, ```raft port``` and ```client port```.
+
diff --git a/README.md b/README.md
index e6c72c541..bfa089908 100644
--- a/README.md
+++ b/README.md
@@ -229 +229 @@ Let us list them next.
-curl -L http://127.0.0.1:4001/v1/get/foo/
+curl -L http://127.0.0.1:4001/v1/keys/foo/
diff --git a/README.md b/README.md
index 390cf79e9..e6c72c541 100644
--- a/README.md
+++ b/README.md
@@ -46 +46 @@ Let’s set the first key-value pair to the node. In this case the key is `/mess
-curl http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
@@ -71 +71 @@ Get the value that we just set in `/message` by issuing a GET:
-curl http://127.0.0.1:4001/v1/keys/message
+curl -L http://127.0.0.1:4001/v1/keys/message
@@ -82 +82 @@ Change the value of `/message` from `Hello world` to `Hello etcd` with another P
-curl http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+curl -L http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
@@ -96 +96 @@ Remove the `/message` key with a DELETE:
-curl http://127.0.0.1:4001/v1/keys/message -X DELETE
+curl -L http://127.0.0.1:4001/v1/keys/message -X DELETE
@@ -108 +108 @@ Keys in etcd can be set to expire after a specified number of seconds. That is d
-curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
@@ -124 +124 @@ Now you can try to get the key by sending:
-curl http://127.0.0.1:4001/v1/keys/foo
+curl -L http://127.0.0.1:4001/v1/keys/foo
@@ -141 +141 @@ In one terminal, we send a watch request:
-curl http://127.0.0.1:4001/v1/watch/foo
+curl -L http://127.0.0.1:4001/v1/watch/foo
@@ -149 +149 @@ In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen
-curl http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
@@ -163 +163 @@ Let's try to watch for the set command of index 6 again:
-curl http://127.0.0.1:4001/v1/watch/foo -d index=7
+curl -L http://127.0.0.1:4001/v1/watch/foo -d index=7
@@ -179 +179 @@ Here is a simple example. Let's create a key-value pair first: `testAndSet=one`.
-curl http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
+curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
@@ -186 +186 @@ We can give another parameter prevValue to set command to make it a TestAndSet c
-curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
+curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
@@ -200 +200 @@ Let us try a vaild one.
-curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
+curl -L http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
@@ -223 +223 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-curl http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl -L http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -229 +229 @@ Let us list them next.
-curl http://127.0.0.1:4001/v1/get/foo/
+curl -L http://127.0.0.1:4001/v1/get/foo/
@@ -258 +258 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
@@ -264 +264 @@ or
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
@@ -288 +288 @@ Try the same request to this server.
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
@@ -293 +293 @@ or
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
@@ -305 +305 @@ We need to give the CA signed cert to the server.
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -k
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -k
@@ -311 +311 @@ or
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
+curl -L https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -349 +349 @@ Get the machines in the cluster
-curl http://127.0.0.1:4001/machines
+curl -L http://127.0.0.1:4001/machines
@@ -361 +361 @@ Also try to get the current leader in the cluster
-curl http://127.0.0.1:4001/leader
+curl -L http://127.0.0.1:4001/leader
@@ -372 +372 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -L
+curl -L http://127.0.0.1:4001/v1/keys/foo -d value=bar
@@ -373,0 +374 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -L
+
@@ -388 +389 @@ Let's kill the leader of the cluster and get the value from the other machine:
-curl http://127.0.0.1:4002/v1/keys/foo
+curl -L http://127.0.0.1:4002/v1/keys/foo
@@ -394 +395 @@ A new leader should have been elected.
-curl http://127.0.0.1:4001/leader
+curl -L http://127.0.0.1:4001/leader
@@ -416 +417 @@ Your request for the `foo` key will return the correct value:
-curl http://127.0.0.1:4002/v1/keys/foo
+curl -L http://127.0.0.1:4002/v1/keys/foo
diff --git a/README.md b/README.md
index 4063b061a..390cf79e9 100644
--- a/README.md
+++ b/README.md
@@ -243 +243 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
-Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.crt, client.key` .
+Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.crt`, `client.key` .
@@ -376 +376 @@ When the client sends a sensitive command (`set`, `delete`, `testAndset` ) to th
-So we add the ``` -L ``` flag to make curl follow location hints in http location header when there is a redirection http response.
+So we add the ` -L ` flag to make curl follow location hints in http location header when there is a redirection http response.
diff --git a/README.md b/README.md
index 147ad5579..4063b061a 100644
--- a/README.md
+++ b/README.md
@@ -243 +243 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
-Before that we need to have a CA cert```clientCA.crt``` and signed key pair ```client.crt, client.key``` .
+Before that we need to have a CA cert`clientCA.crt` and signed key pair `client.crt, client.key` .
@@ -254,2 +254,2 @@ http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-```-i``` is to ignore the previously created default configuration file.
-```-clientCert``` and ```-clientKey``` are the key and cert for transport layer security between client and server
+`-i` is to ignore the previously created default configuration file.
+`-clientCert` and `-clientKey` are the key and cert for transport layer security between client and server
@@ -374 +374 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -L
-When the client sends a sensitive command (```set```, ```delete```, ```testAndset``` ) to the server, the command needs to be redirect to the leader of the cluster.
+When the client sends a sensitive command (`set`, `delete`, `testAndset` ) to the server, the command needs to be redirect to the leader of the cluster.
diff --git a/README.md b/README.md
index 9692c76e7..147ad5579 100644
--- a/README.md
+++ b/README.md
@@ -372 +372 @@ Now we can do normal SET and GET operations on keys as we explored earlier.
-curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
+curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -L
@@ -373,0 +374 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
+When the client sends a sensitive command (```set```, ```delete```, ```testAndset``` ) to the server, the command needs to be redirect to the leader of the cluster.
@@ -374,0 +376,3 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
+So we add the ``` -L ``` flag to make curl follow location hints in http location header when there is a redirection http response.
+
+The response should be 
diff --git a/README.md b/README.md
index f7827ee46..9692c76e7 100644
--- a/README.md
+++ b/README.md
@@ -10,2 +10 @@ A highly-available key value store for shared configuration and service discover
-Etcd is written in go and uses the [raft][raft] consensus algorithm to a manage replicated
-log for high availability. 
+Etcd is written in go and uses the [raft][raft] consensus algorithm to manage a highly availably replicated log. 
diff --git a/README.md b/README.md
index 6aa584856..f7827ee46 100644
--- a/README.md
+++ b/README.md
@@ -420 +420 @@ curl http://127.0.0.1:4002/v1/keys/foo
-#### Using Https between server and client
+#### Using HTTPS between servers
diff --git a/README.md b/README.md
index 7266f0023..6aa584856 100644
--- a/README.md
+++ b/README.md
@@ -10 +10 @@ A highly-available key value store for shared configuration and service discover
-Etcd is written in go and uses the [raft][raft] consensus algorithm to manage replicated
+Etcd is written in go and uses the [raft][raft] consensus algorithm to a manage replicated
@@ -241 +241 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
-#### Using Https between server and client
+#### Using HTTPS between server and client
diff --git a/README.md b/README.md
index 0bfd01528..7266f0023 100644
--- a/README.md
+++ b/README.md
@@ -243,0 +244,7 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
+Before that we need to have a CA cert```clientCA.crt``` and signed key pair ```client.crt, client.key``` .
+
+This site has a good reference for how to generate self-signed key pairs
+```url
+http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
+```
+
@@ -246,0 +254 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
+
@@ -251 +259,7 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
+```
+
+or 
+
+```sh
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
@@ -275 +289,6 @@ Try the same request to this server.
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -k
+```
+or 
+
+```sh
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v -cacert clientCA.crt
@@ -287 +306,7 @@ We need to give the CA signed cert to the server.
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -k
+```
+
+or
+
+```sh
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt -cacert clientCA.crt
@@ -303,5 +327,0 @@ And also the response from the server
-This site has a good reference for how to generate self-signed key pairs
-```url
-http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
-```
-
@@ -402 +422 @@ In the previous example we showed how to use SSL client certs for client to serv
-We require all the server using http or https. There should not be a mix.
+If you are using SSL for server to server communication, you must use it on all instances of etcd.
diff --git a/README.md b/README.md
index 77932865c..0bfd01528 100644
--- a/README.md
+++ b/README.md
@@ -251 +251 @@ Etcd supports SSL/TLS and client cert authentication for clients to server, as w
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -k -v
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -275 +275 @@ Try the same request to this server.
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -k -v
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v
@@ -287 +287 @@ We need to give the CA signed cert to the server.
-curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -k -v --key myclient.key --cert myclient.crt
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -v --key myclient.key --cert myclient.crt
diff --git a/README.md b/README.md
index f1c55d556..77932865c 100644
--- a/README.md
+++ b/README.md
@@ -242 +242 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
-Kill the previous etcd server.
+Etcd supports SSL/TLS and client cert authentication for clients to server, as well as server to server communication
@@ -303 +303 @@ And also the response from the server
-Here is a good page to show you how to create a self-signed CA and generate cert and key.
+This site has a good reference for how to generate self-signed key pairs
@@ -401,2 +401 @@ curl http://127.0.0.1:4002/v1/keys/foo
-We have gave an example to show how to use tls between client and server.
-The way same here, except that you need to change ```-client*``` to ```-server*```.
+In the previous example we showed how to use SSL client certs for client to server communication. Etcd can also do internal server to server communication using SSL client certs. To do this just change the ```-client*``` flags to ```-server*```.
diff --git a/README.md b/README.md
index 2d2c0d90f..f1c55d556 100644
--- a/README.md
+++ b/README.md
@@ -10 +10,2 @@ A highly-available key value store for shared configuration and service discover
-Etcd is written in go and uses the [raft][raft] paxos implementation for high availability. 
+Etcd is written in go and uses the [raft][raft] consensus algorithm to manage replicated
+log for high availability. 
diff --git a/README.md b/README.md
index 49cec9525..2d2c0d90f 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,14 @@
+A highly-available key value store for shared configuration and service discovery. etcd is inspired by zookeeper and doozer, with a focus on:
+
+* Simple: curl'able user facing API (HTTP+JSON)
+* Secure: optional SSL client cert authentication
+* Fast: benchmarked 1000s of writes/s per instance
+* Reliable: Properly distributed using Raft
+
+Etcd is written in go and uses the [raft][raft] paxos implementation for high availability. 
+
+See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as in the examples below. 
+
+[raft]: https://github.com/coreos/go-raft
+[go-etcd]: https://github.com/coreos/go-etcd
+
@@ -89 +103 @@ curl http://127.0.0.1:4001/v1/keys/message -X DELETE
-#### Using time to live key
+#### Using a TTL on a key
@@ -113 +127 @@ curl http://127.0.0.1:4001/v1/keys/foo
-If the TTL has passed then you will 
+If the TTL has expired, the key will be deleted, and you will be returned a 404.
diff --git a/README.md b/README.md
index 26ffee418..49cec9525 100644
--- a/README.md
+++ b/README.md
@@ -3,14 +2,0 @@
-A highly-available key value store for shared configuration and service discovery. etcd is inspired by zookeeper and doozer, with a focus on:
-
-* Simple: curl'able user facing API (HTTP+JSON)
-* Secure: optional SSL client cert authentication
-* Fast: benchmarked 1000s of writes/s per instance
-* Reliable: Properly distributed using Raft
-
-Etcd is written in go and uses the [raft][raft] paxos implementation for high availability. 
-
-See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as in the examples below. 
-
-[raft]: https://github.com/coreos/go-raft
-[go-etcd]: https://github.com/coreos/go-etcd
-
@@ -103 +89 @@ curl http://127.0.0.1:4001/v1/keys/message -X DELETE
-#### Using a TTL on a key
+#### Using time to live key
@@ -127 +113 @@ curl http://127.0.0.1:4001/v1/keys/foo
-If the TTL has expired, the key will be deleted, and you will be returned a 404.
+If the TTL has passed then you will 
@@ -239,0 +226,67 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
+#### Using Https between server and client
+Kill the previous etcd server.
+
+```sh
+./etcd -clientCert client.crt -clientKey client.key -i
+```
+```-i``` is to ignore the previously created default configuration file.
+```-clientCert``` and ```-clientKey``` are the key and cert for transport layer security between client and server
+
+```sh
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -k -v
+```
+
+You should be able to see the handshake succeed.
+```
+...
+SSLv3, TLS handshake, Finished (20):
+...
+```
+And also the response from the etcd server.
+```json
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+```
+
+We also can do authentication using CA cert. The clients will also need to provide their cert to the server. The server will check whether the cert is signed by the CA and decide whether to serve the request.
+
+```sh
+./etcd -clientCert client.crt -clientKey client.key -clientCAFile clientCA.crt -i
+```
+
+```-clientCAFile``` is the path to the CA cert.
+
+Try the same request to this server.
+```sh
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -k -v
+```
+
+The request should be rejected by the server.
+```
+...
+routines:SSL3_READ_BYTES:sslv3 alert bad certificate
+...
+```
+
+We need to give the CA signed cert to the server. 
+```sh
+curl https://127.0.0.1:4001/v1/keys/foo -d value=bar -k -v --key myclient.key --cert myclient.crt
+```
+
+You should able to see
+```
+...
+SSLv3, TLS handshake, CERT verify (15):
+...
+TLS handshake, Finished (20)
+```
+
+And also the response from the server
+```json
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":3}
+```
+
+Here is a good page to show you how to create a self-signed CA and generate cert and key.
+```url
+http://www.g-loaded.eu/2005/11/10/be-your-own-ca/
+```
+
@@ -330,0 +384,6 @@ curl http://127.0.0.1:4002/v1/keys/foo
+
+#### Using Https between server and client
+We have gave an example to show how to use tls between client and server.
+The way same here, except that you need to change ```-client*``` to ```-server*```.
+We require all the server using http or https. There should not be a mix.
+
diff --git a/README.md b/README.md
index 14dd7ad58..26ffee418 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ A highly-available key value store for shared configuration and service discover
-* Reliable: Properly distributed using paxos
+* Reliable: Properly distributed using Raft
diff --git a/README.md b/README.md
index b1deb60fc..14dd7ad58 100644
--- a/README.md
+++ b/README.md
@@ -103 +103 @@ curl http://127.0.0.1:4001/v1/keys/message -X DELETE
-#### Using time to live key
+#### Using a TTL on a key
@@ -127 +127 @@ curl http://127.0.0.1:4001/v1/keys/foo
-If the TTL has passed then you will 
+If the TTL has expired, the key will be deleted, and you will be returned a 404.
diff --git a/README.md b/README.md
index e45bf45ef..b1deb60fc 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,14 @@
+A highly-available key value store for shared configuration and service discovery. etcd is inspired by zookeeper and doozer, with a focus on:
+
+* Simple: curl'able user facing API (HTTP+JSON)
+* Secure: optional SSL client cert authentication
+* Fast: benchmarked 1000s of writes/s per instance
+* Reliable: Properly distributed using paxos
+
+Etcd is written in go and uses the [raft][raft] paxos implementation for high availability. 
+
+See [go-etcd][go-etcd] for a native go client. Or feel free to just use curl, as in the examples below. 
+
+[raft]: https://github.com/coreos/go-raft
+[go-etcd]: https://github.com/coreos/go-etcd
+
diff --git a/README.md b/README.md
index d888ffecd..e45bf45ef 100644
--- a/README.md
+++ b/README.md
@@ -168,0 +169 @@ Let's try an invaild `TestAndSet` command.
+We can give another parameter prevValue to set command to make it a TestAndSet command.
@@ -171 +172 @@ Let's try an invaild `TestAndSet` command.
-curl http://127.0.0.1:4001/v1/testAndSet/testAndSet -d prevValue=two -d value=three
+curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=two -d value=three
@@ -176,2 +177,2 @@ This will try to test if the previous of the key is two, it is change it to thre
-```html
-Test one==two fails
+```json
+{"errorCode":101,"message":"The given PrevValue is not equal to the value of the key","cause":"TestAndSet: one!=two"}
@@ -185 +186 @@ Let us try a vaild one.
-curl http://127.0.0.1:4001/v1/testAndSet/testAndSet -d prevValue=one -d value=two
+curl http://127.0.0.1:4001/v1/keys/testAndSet -d prevValue=one -d value=two
diff --git a/README.md b/README.md
index b94e13190..d888ffecd 100644
--- a/README.md
+++ b/README.md
@@ -253 +253 @@ We should see there are three nodes in the cluster
-0.0.0.0:7001,0.0.0.0:7002,0.0.0.0:7003
+0.0.0.0:4001,0.0.0.0:4002,0.0.0.0:4003
diff --git a/README.md b/README.md
index 1e1282441..b94e13190 100644
--- a/README.md
+++ b/README.md
@@ -208 +208 @@ We create another one `/foo/foo_dir/foo=barbarbar`
-http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+curl http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
@@ -214 +214 @@ Let us list them next.
-curl http://127.0.0.1:4001/v1/list/foo/
+curl http://127.0.0.1:4001/v1/get/foo/
@@ -217 +217 @@ curl http://127.0.0.1:4001/v1/list/foo/
-We should see the response as
+We should see the response as an array of items
@@ -220 +220 @@ We should see the response as
-{"Key":"foo","Value":"barbar","Type":"f"} {"Key":"foo_dir","Value":".","Type":"d"}
+[{"action":"GET","key":"/foo/foo","value":"barbar","index":10},{"action":"GET","key":"/foo/foo_dir","dir":true,"index":10}]
diff --git a/README.md b/README.md
index 7fead80bd..1e1282441 100644
--- a/README.md
+++ b/README.md
@@ -243,0 +244,23 @@ Let the join two more nodes to this cluster using the -C argument:
+Get the machines in the cluster
+
+```sh
+curl http://127.0.0.1:4001/machines
+```
+
+We should see there are three nodes in the cluster
+
+```
+0.0.0.0:7001,0.0.0.0:7002,0.0.0.0:7003
+```
+
+Also try to get the current leader in the cluster
+
+```
+curl http://127.0.0.1:4001/leader
+```
+The first server we set up should be the leader, if it has not dead during these commands.
+
+```
+0.0.0.0:7001
+```
+
@@ -261,0 +285,10 @@ curl http://127.0.0.1:4002/v1/keys/foo
+A new leader should have been elected.
+
+```
+curl http://127.0.0.1:4001/leader
+```
+
+```
+0.0.0.0:7002 or 0.0.0.0:7003
+```
+
diff --git a/README.md b/README.md
index 6deceb539..7fead80bd 100644
--- a/README.md
+++ b/README.md
@@ -5 +5,15 @@
-### Setting up a node
+### Building
+
+etcd is installed like any other Go binary. The steps below will put everything into a directory called etcd.
+
+```
+mkdir etcd
+cd etcd
+export GOPATH=`pwd`
+go get github.com/coreos/etcd
+go install github.com/coreos/etcd
+```
+
+### Running a single node
+
+These examples will use a single node cluster to show you the basics of the etcd REST API. Lets start etcd:
@@ -8 +22 @@
-./etcd
+./bin/etcd
@@ -39,0 +54,2 @@ Notice we use a file system like structure to represent the key-value pairs. So
+Get the value that we just set in `/message` by issuing a GET:
+
@@ -44,2 +59,0 @@ curl http://127.0.0.1:4001/v1/keys/message
-You should receive the response as
-
@@ -51 +65 @@ You should receive the response as
-We change the value of `/message` from `Hello world` to `Hello etcd`
+Change the value of `/message` from `Hello world` to `Hello etcd` with another POST to the key:
@@ -61 +75 @@ curl http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-There is a new field in the response: prevValue. It is the value of the key before the change happened.
+Notice that the `prevValue` is set to `Hello world`.
@@ -64,0 +79,2 @@ There is a new field in the response: prevValue. It is the value of the key befo
+Remove the `/message` key with a DELETE:
+
@@ -69,2 +84,0 @@ curl http://127.0.0.1:4001/v1/keys/message -X DELETE
-You should see the response as
-
@@ -76,0 +91,2 @@ You should see the response as
+Keys in etcd can be set to expire after a specified number of seconds. That is done by setting a TTL (time to live) on the key when you POST:
+
@@ -81,2 +96,0 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
-You should see the similar response as (not exact same, they should have different expiration time)
-
@@ -87 +101 @@ You should see the similar response as (not exact same, they should have differe
-There are the last two new fields in response.
+Note the last two new fields in response:
@@ -89 +103 @@ There are the last two new fields in response.
-Expiration field is the time that this key will expire and be deleted.
+1. The expiration is the time that this key will expire and be deleted.
@@ -91 +105 @@ Expiration field is the time that this key will expire and be deleted.
-Ttl field is the time to live of the key, it can be derived from current time and expiration time.
+2. The ttl is the time to live of the key.
@@ -93 +107 @@ Ttl field is the time to live of the key, it can be derived from current time an
-Now you can try to get the key by sending
+Now you can try to get the key by sending:
@@ -98 +112,2 @@ curl http://127.0.0.1:4001/v1/keys/foo
-You can expect the ttl is counting down and after 5 seconds you should see this,
+
+If the TTL has passed then you will 
@@ -104 +118,0 @@ You can expect the ttl is counting down and after 5 seconds you should see this,
-which indicates the key has expired and was deleted.
@@ -108 +122 @@ which indicates the key has expired and was deleted.
-Watch command can watch as a prefix path and get notification if any key changes after the prefix.
+We can watch a path prefix and get notifications if any key change under that prefix.
@@ -130 +144 @@ The first terminal should get the notification and return with the same response
-OK. Watch command can do more than this. We have index and in etcd we store the most recent 1000 responses by default, which allow us to watch for previous commands.
+However, the watch command can do more than this. Using the the index we can watch for commands that has happened in the past. This is useful for ensuring you don't miss events between watch commands.
@@ -132 +146 @@ OK. Watch command can do more than this. We have index and in etcd we store the
-Let us try to watch for the set command of index 6 again.
+Let's try to watch for the set command of index 6 again:
@@ -138 +152 @@ curl http://127.0.0.1:4001/v1/watch/foo -d index=7
-You should see the watch command return immediately with the same response as previous.
+The watch command returns immediately with the same response as previous.
@@ -140 +154 @@ You should see the watch command return immediately with the same response as pr
-#### Trying TestAndSet
+#### Atomic Test and Set
@@ -142 +156 @@ You should see the watch command return immediately with the same response as pr
-Etcd servers will process all the command in sequence atomically, thus it can be used as a centralized decision making cluster.
+Etcd servers will process all the command in sequence atomically. Thus it can be used as a centralized coordination service in a cluster.
@@ -144 +158 @@ Etcd servers will process all the command in sequence atomically, thus it can be
-TestAndSet is the most basic operation to build distributed lock service and more interesting stuff.
+`TestAndSet` is the most basic operation to build distributed lock service.
@@ -146 +160 @@ TestAndSet is the most basic operation to build distributed lock service and mor
-What it does is to test whether the given previous value is equal to the value of the key, if equal etcd will change the value of the key to the given value.
+The basic logic is to test whether the given previous value is equal to the value of the key, if equal etcd will change the value of the key to the given value.
@@ -148,2 +162 @@ What it does is to test whether the given previous value is equal to the value o
-Here is a simple example.
-Let us create a key-value pair first: `testAndSet=one`.
+Here is a simple example. Let's create a key-value pair first: `testAndSet=one`.
@@ -155 +168 @@ curl http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
-Let us try a invaild `TestAndSet` command.
+Let's try an invaild `TestAndSet` command.
@@ -163,2 +175,0 @@ This will try to test if the previous of the key is two, it is change it to thre
-The response should be
-
@@ -183 +194 @@ The response should be
-We successfully change the value from “one” to “two”, since we give the correct previous value.
+We successfully changed the value from “one” to “two”, since we give the correct previous value.
@@ -216 +227 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
-Next we can explore the power of etcd cluster. We use go-raft as the underlay distributed protocol which provide consistency and persistence of all the machines in the cluster. The will allow if the minor machine dies, the cluster will still be able to performance correctly. Also if most of the machines dead and restart,  we will recover from the previous state of the cluster.
+Next let's explore the use of etcd clustering. We use go-raft as the underlying distributed protocol which provides consistency and persistence of the data across all of the etcd instances.
@@ -218,3 +229 @@ Next we can explore the power of etcd cluster. We use go-raft as the underlay di
-Let us create 3 new machines.
-
-The first one will be
+Let start by creating 3 new etcd instances.
@@ -228,3 +237 @@ We use -s to specify server port and -c to specify client port and -d to specify
-We use -C to specify the Cluster
-
-Let the second one join it.
+Let the join two more nodes to this cluster using the -C argument:
@@ -234,5 +240,0 @@ Let the second one join it.
-```
-
-And the third one:
-
-```sh
@@ -242 +244 @@ And the third one:
-Let us add a key to the cluster of 3 nodes.
+Now we can do normal SET and GET operations on keys as we explored earlier.
@@ -252 +254 @@ curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
-Let us kill the leader of the cluster to see what will happen.
+#### Killing Nodes in the Cluster
@@ -254,3 +256 @@ Let us kill the leader of the cluster to see what will happen.
-Kill the first node which is the current leader
-
-Try to get the value from the other machine
+Let's kill the leader of the cluster and get the value from the other machine:
@@ -262 +262 @@ curl http://127.0.0.1:4002/v1/keys/foo
-You should be able to see this
+You should be able to see this:
@@ -270 +270,3 @@ It succeed!
-OK. Next let us kill all the nodes to test persistence. And restart all the nodes use the same command before.
+#### Testing Persistence
+
+OK. Next let us kill all the nodes to test persistence. And restart all the nodes use the same command as before.
@@ -272 +274 @@ OK. Next let us kill all the nodes to test persistence. And restart all the node
-Try
+Your request for the `foo` key will return the correct value:
@@ -277 +278,0 @@ curl http://127.0.0.1:4002/v1/keys/foo
-You should able to see
diff --git a/README.md b/README.md
index 696574783..6deceb539 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1 @@
-etcd
-====
-## Overview
+# etcd
@@ -5 +3 @@ etcd
-## Start with examples
+## Getting Started
@@ -10 +8 @@ etcd
-./etcd 
+./etcd
@@ -27,0 +26 @@ This response contains five fields. We will introduce three more fields as we tr
+
@@ -29,2 +28,2 @@ This response contains five fields. We will introduce three more fields as we tr
-  
-2. The key of the request; we set `/message` to `Hello world!`, so the key field is `/message`. 
+ 
+2. The key of the request; we set `/message` to `Hello world!`, so the key field is `/message`.
@@ -37,2 +36 @@ Notice we use a file system like structure to represent the key-value pairs. So
-5. Index field is the unique request index of the set request. Each sensitive request we send to the server will have a unique request index. The current sensitive request are `SET`, `DELETE` and `TESTANDSET`. All of these request will change the state of the key-value store system, thus they are sensitive. `GET`, `LIST` and `WATCH` are non-sensitive commands. Those commands will not change the state of the key-value store system. 
-You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are some internal commands that also change the state of the server, we also need to assign them command indexes(Command used to add a server and sync the servers).
+5. Index field is the unique request index of the set request. Each sensitive request we send to the server will have a unique request index. The current sensitive request are `SET`, `DELETE` and `TESTANDSET`. All of these request will change the state of the key-value store system, thus they are sensitive. `GET`, `LIST` and `WATCH` are non-sensitive commands. Those commands will not change the state of the key-value store system. You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are some internal commands that also change the state of the server, we also need to assign them command indexes(Command used to add a server and sync the servers).
@@ -43 +41 @@ You may notice that in this example the index is 3, although it is the first req
-curl http://127.0.0.1:4001/v1/keys/message 
+curl http://127.0.0.1:4001/v1/keys/message
@@ -46 +44,2 @@ curl http://127.0.0.1:4001/v1/keys/message
-You should receive the response as 
+You should receive the response as
+
@@ -62 +61 @@ curl http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
-There is a new field in the response: prevValue. It is the value of the key before the change happened. 
+There is a new field in the response: prevValue. It is the value of the key before the change happened.
@@ -70 +69 @@ curl http://127.0.0.1:4001/v1/keys/message -X DELETE
-You should see the response as 
+You should see the response as
@@ -75 +74 @@ You should see the response as
- 
+
@@ -90 +89 @@ There are the last two new fields in response.
-Expiration field is the time that this key will expire and be deleted. 
+Expiration field is the time that this key will expire and be deleted.
@@ -97 +96 @@ Now you can try to get the key by sending
-curl http://127.0.0.1:4001/v1/keys/foo 
+curl http://127.0.0.1:4001/v1/keys/foo
@@ -105 +104 @@ You can expect the ttl is counting down and after 5 seconds you should see this,
-which indicates the key has expired and was deleted. 
+which indicates the key has expired and was deleted.
@@ -111,0 +111 @@ In one terminal, we send a watch request:
+
@@ -124 +124 @@ curl http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
-The first terminal should get the notification and return with the same response as the set request. 
+The first terminal should get the notification and return with the same response as the set request.
@@ -148 +148 @@ What it does is to test whether the given previous value is equal to the value o
-Here is a simple example. 
+Here is a simple example.
@@ -149,0 +150 @@ Let us create a key-value pair first: `testAndSet=one`.
+
@@ -154,0 +156 @@ Let us try a invaild `TestAndSet` command.
+
@@ -161 +163,2 @@ This will try to test if the previous of the key is two, it is change it to thre
-The response should be 
+The response should be
+
@@ -166 +169 @@ Test one==two fails
-which means `testAndSet` failed. 
+which means `testAndSet` failed.
@@ -174 +177 @@ curl http://127.0.0.1:4001/v1/testAndSet/testAndSet -d prevValue=one -d value=tw
-The response should be 
+The response should be
@@ -183,0 +187 @@ We successfully change the value from “one” to “two”, since we give the
+
@@ -202 +206 @@ curl http://127.0.0.1:4001/v1/list/foo/
-We should see the response as 
+We should see the response as
@@ -210,0 +215 @@ which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a dire
+
@@ -215 +220 @@ Let us create 3 new machines.
-The first one will be 
+The first one will be
@@ -225,0 +231 @@ Let the second one join it.
+
@@ -230,0 +237 @@ And the third one:
+
@@ -265 +272,2 @@ OK. Next let us kill all the nodes to test persistence. And restart all the node
-Try 
+Try
+
@@ -269 +277,2 @@ curl http://127.0.0.1:4002/v1/keys/foo
-You should able to see 
+You should able to see
+
diff --git a/README.md b/README.md
index 4f512a84b..696574783 100644
--- a/README.md
+++ b/README.md
@@ -17 +17 @@ This will bring up a node, which will be listening on internal port 7001 (for se
-Let’s set the first key-value pair to the node. In this case our key is “/message” and our value is “Hello world”.
+Let’s set the first key-value pair to the node. In this case the key is `/message` and the value is `Hello world`.
@@ -28 +28 @@ This response contains five fields. We will introduce three more fields as we tr
-1. The action of the request; we set the value via a post request, thus the action is “SET”
+1. The action of the request; we set the value via a POST request, thus the action is `SET`.
@@ -30,2 +30,2 @@ This response contains five fields. We will introduce three more fields as we tr
-2. The key of the request; we set “/message” to “Hello world!”, so the key field is “/message”. 
-Notice we use a file system like structure to represent the key-value pairs. So each key starts with “/”.
+2. The key of the request; we set `/message` to `Hello world!`, so the key field is `/message`. 
+Notice we use a file system like structure to represent the key-value pairs. So each key starts with `/`.
@@ -33 +33 @@ Notice we use a file system like structure to represent the key-value pairs. So
-3. The current value of the key; we set the value to “Hello world!”.
+3. The current value of the key; we set the value to`Hello world`.
@@ -35 +35 @@ Notice we use a file system like structure to represent the key-value pairs. So
-4. If we set a new key; “/message” did not exist before, so this is a new key.
+4. If we set a new key; `/message` did not exist before, so this is a new key.
@@ -37 +37 @@ Notice we use a file system like structure to represent the key-value pairs. So
-5. Index field is the unique request index of the set request. Each sensitive request we send to the server will have a unique request index. The current sensitive request are “SET”, “DELETE” and “TESTANDSET”. All of these request will change the state of the key-value store system, thus they are sensitive. “GET”, “LIST” and “WATCH” are non-sensitive commands. Those commands will not change the state of the key-value store system. 
+5. Index field is the unique request index of the set request. Each sensitive request we send to the server will have a unique request index. The current sensitive request are `SET`, `DELETE` and `TESTANDSET`. All of these request will change the state of the key-value store system, thus they are sensitive. `GET`, `LIST` and `WATCH` are non-sensitive commands. Those commands will not change the state of the key-value store system. 
@@ -46,0 +47 @@ You should receive the response as
+```json
@@ -48 +49 @@ You should receive the response as
-
+```
@@ -51 +52 @@ You should receive the response as
-We change the value of “/message” from “Hello world” to “Hello etcd”
+We change the value of `/message` from `Hello world` to `Hello etcd`
@@ -115 +116 @@ curl http://127.0.0.1:4001/v1/watch/foo
-Now, we are watching at the path prefix “/foo” and wait for any changes under this path.
+Now, we are watching at the path prefix `/foo` and wait for any changes under this path.
@@ -117 +118 @@ Now, we are watching at the path prefix “/foo” and wait for any changes unde
-In another terminal, we set a key “/foo/foo” to “barbar” to see what will happen:
+In another terminal, we set a key `/foo/foo` to `barbar` to see what will happen:
@@ -141 +142 @@ You should see the watch command return immediately with the same response as pr
-Etcd servers will process all the command in sequence atomically, thus it can be used as  a centralized  decision making cluster.
+Etcd servers will process all the command in sequence atomically, thus it can be used as a centralized decision making cluster.
@@ -148 +149 @@ Here is a simple example.
-Let us create a key first. testAndSet=one
+Let us create a key-value pair first: `testAndSet=one`.
@@ -153 +154 @@ curl http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
-Let us try this 
+Let us try a invaild `TestAndSet` command.
@@ -165 +166 @@ Test one==two fails
-which means testAndSet fails. 
+which means `testAndSet` failed. 
@@ -167 +168 @@ which means testAndSet fails.
-Let try again 
+Let us try a vaild one.
@@ -187 +188 @@ Let us create some keys first.
-We already have /foo/foo=barbar
+We already have `/foo/foo=barbar`
@@ -189 +190 @@ We already have /foo/foo=barbar
-We create another one /foo/foo_dir/foo=barbarbar
+We create another one `/foo/foo_dir/foo=barbarbar`
@@ -204 +205 @@ We should see the response as
-{"Key":"foo","Value":"barbar","Type":"f"},{"Key":"foo_dir","Value":".","Type":"d"},
+{"Key":"foo","Value":"barbar","Type":"f"} {"Key":"foo_dir","Value":".","Type":"d"}
@@ -207 +208 @@ We should see the response as
-which meas foo is a key under /foo and the value is “barbar” and a key foo_dir is a directory.
+which meas `foo=barbar` is a key-value pair under `/foo` and `foo_dir` is a directory.
@@ -212,0 +214 @@ Let us create 3 new machines.
+
@@ -213,0 +216 @@ The first one will be
+
@@ -264 +267 @@ Try
-curl http://127.0.0.1:4002/v1/keys/foo again.
+curl http://127.0.0.1:4002/v1/keys/foo
diff --git a/README.md b/README.md
index 352149d4e..4f512a84b 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ This will bring up a node, which will be listening on internal port 7001 (for se
-Setting and Retrieving Values
+#### Setting the value to a key
@@ -19,2 +18,0 @@ Let’s set the first key-value pair to the node. In this case our key is “/me
-#### Setting the value to a key
-
diff --git a/README.md b/README.md
index 43df187ee..352149d4e 100644
--- a/README.md
+++ b/README.md
@@ -8,0 +9 @@ etcd
+```sh
@@ -9,0 +11,2 @@ etcd
+```
+
@@ -98,0 +102 @@ You can expect the ttl is counting down and after 5 seconds you should see this,
+```html
@@ -99,0 +104 @@ You can expect the ttl is counting down and after 5 seconds you should see this,
+```
@@ -158 +163 @@ The response should be
-status code 400
+```html
@@ -159,0 +165 @@ Test one==two fails
+```
diff --git a/README.md b/README.md
index 21d2034fd..43df187ee 100644
--- a/README.md
+++ b/README.md
@@ -7 +7,259 @@ etcd
-### Set a node up and say hello world
+### Setting up a node
+
+./etcd 
+This will bring up a node, which will be listening on internal port 7001 (for server communication) and external port 4001 (for client communication)
+
+Setting and Retrieving Values
+
+Let’s set the first key-value pair to the node. In this case our key is “/message” and our value is “Hello world”.
+
+#### Setting the value to a key
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/message -d value="Hello world"
+```
+
+```json
+{"action":"SET","key":"/message","value":"Hello world","newKey":true,"index":3}
+```
+
+This response contains five fields. We will introduce three more fields as we try more commands.
+1. The action of the request; we set the value via a post request, thus the action is “SET”
+  
+2. The key of the request; we set “/message” to “Hello world!”, so the key field is “/message”. 
+Notice we use a file system like structure to represent the key-value pairs. So each key starts with “/”.
+
+3. The current value of the key; we set the value to “Hello world!”.
+
+4. If we set a new key; “/message” did not exist before, so this is a new key.
+
+5. Index field is the unique request index of the set request. Each sensitive request we send to the server will have a unique request index. The current sensitive request are “SET”, “DELETE” and “TESTANDSET”. All of these request will change the state of the key-value store system, thus they are sensitive. “GET”, “LIST” and “WATCH” are non-sensitive commands. Those commands will not change the state of the key-value store system. 
+You may notice that in this example the index is 3, although it is the first request you sent to the server. This is because there are some internal commands that also change the state of the server, we also need to assign them command indexes(Command used to add a server and sync the servers).
+
+#### Getting the value of a key
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/message 
+```
+
+You should receive the response as 
+{"action":"GET","key":"/message","value":"Hello world","index":3}
+
+#### Changing the value of a key
+
+We change the value of “/message” from “Hello world” to “Hello etcd”
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/message -d value="Hello etcd"
+```
+
+```json
+{"action":"SET","key":"/message","prevValue":"Hello world","value":"Hello etcd","index":4}
+```
+
+There is a new field in the response: prevValue. It is the value of the key before the change happened. 
+
+#### Deleting a key
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/message -X DELETE
+```
+
+You should see the response as 
+
+```json
+{"action":"DELETE","key":"/message","prevValue":"Hello etcd","index":5}
+```
+ 
+#### Using time to live key
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/foo -d value=bar -d ttl=5
+```
+
+You should see the similar response as (not exact same, they should have different expiration time)
+
+```json
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"expiration":"2013-07-11T20:31:12.156146039-07:00","ttl":4,"index":6}
+```
+
+There are the last two new fields in response.
+
+Expiration field is the time that this key will expire and be deleted. 
+
+Ttl field is the time to live of the key, it can be derived from current time and expiration time.
+
+Now you can try to get the key by sending
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/foo 
+```
+You can expect the ttl is counting down and after 5 seconds you should see this,
+
+404 page not found
+
+which indicates the key has expired and was deleted. 
+
+#### Watching a prefix
+
+Watch command can watch as a prefix path and get notification if any key changes after the prefix.
+
+In one terminal, we send a watch request:
+```sh
+curl http://127.0.0.1:4001/v1/watch/foo
+```
+
+Now, we are watching at the path prefix “/foo” and wait for any changes under this path.
+
+In another terminal, we set a key “/foo/foo” to “barbar” to see what will happen:
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/foo/foo -d value=barbar
+```
+
+The first terminal should get the notification and return with the same response as the set request. 
+
+```json
+{"action":"SET","key":"/foo/foo","value":"barbar","newKey":true,"index":7}
+```
+
+OK. Watch command can do more than this. We have index and in etcd we store the most recent 1000 responses by default, which allow us to watch for previous commands.
+
+Let us try to watch for the set command of index 6 again.
+
+```sh
+curl http://127.0.0.1:4001/v1/watch/foo -d index=7
+```
+
+You should see the watch command return immediately with the same response as previous.
+
+#### Trying TestAndSet
+
+Etcd servers will process all the command in sequence atomically, thus it can be used as  a centralized  decision making cluster.
+
+TestAndSet is the most basic operation to build distributed lock service and more interesting stuff.
+
+What it does is to test whether the given previous value is equal to the value of the key, if equal etcd will change the value of the key to the given value.
+
+Here is a simple example. 
+Let us create a key first. testAndSet=one
+```sh
+curl http://127.0.0.1:4001/v1/keys/testAndSet -d value=one
+```
+
+Let us try this 
+```sh
+curl http://127.0.0.1:4001/v1/testAndSet/testAndSet -d prevValue=two -d value=three
+```
+
+This will try to test if the previous of the key is two, it is change it to three.
+
+The response should be 
+status code 400
+Test one==two fails
+
+which means testAndSet fails. 
+
+Let try again 
+
+```sh
+curl http://127.0.0.1:4001/v1/testAndSet/testAndSet -d prevValue=one -d value=two
+```
+
+The response should be 
+
+```json
+{"action":"SET","key":"/testAndSet","prevValue":"one","value":"two","index":10}
+```
+
+We successfully change the value from “one” to “two”, since we give the correct previous value.
+
+
+#### Listing directory
+Last we provide a simple List command to list all the keys under a prefix path.
+
+Let us create some keys first.
+
+We already have /foo/foo=barbar
+
+We create another one /foo/foo_dir/foo=barbarbar
+
+```sh
+http://127.0.0.1:4001/v1/keys/foo/foo_dir/bar -d value=barbarbar
+```
+
+Let us list them next.
+
+```sh
+curl http://127.0.0.1:4001/v1/list/foo/
+```
+
+We should see the response as 
+
+```json
+{"Key":"foo","Value":"barbar","Type":"f"},{"Key":"foo_dir","Value":".","Type":"d"},
+```
+
+which meas foo is a key under /foo and the value is “barbar” and a key foo_dir is a directory.
+
+### Setting up a cluster of three machines
+Next we can explore the power of etcd cluster. We use go-raft as the underlay distributed protocol which provide consistency and persistence of all the machines in the cluster. The will allow if the minor machine dies, the cluster will still be able to performance correctly. Also if most of the machines dead and restart,  we will recover from the previous state of the cluster.
+
+Let us create 3 new machines.
+The first one will be 
+We use -s to specify server port and -c to specify client port and -d to specify the directory to store the log and info of the node in the cluster
+
+```sh
+./etcd -s 7001 -c 4001 -d nodes/node1
+```
+
+We use -C to specify the Cluster
+
+Let the second one join it.
+```sh
+./etcd -c 4002 -s 7002 -C 127.0.0.1:7001 -d nod/node2
+```
+
+And the third one:
+```sh
+./etcd -c 4003 -s 7003 -C 127.0.0.1:7001 -d nod/node3
+```
+
+Let us add a key to the cluster of 3 nodes.
+
+```sh
+curl http://127.0.0.1:4001/v1/keys/foo -d value=bar
+```
+
+```json
+{"action":"SET","key":"/foo","value":"bar","newKey":true,"index":5}
+```
+
+Let us kill the leader of the cluster to see what will happen.
+
+Kill the first node which is the current leader
+
+Try to get the value from the other machine
+
+```sh
+curl http://127.0.0.1:4002/v1/keys/foo
+```
+
+You should be able to see this
+
+```json
+{"action":"GET","key":"/foo","value":"bar","index":5}
+```
+
+It succeed!
+
+OK. Next let us kill all the nodes to test persistence. And restart all the nodes use the same command before.
+
+Try 
+```sh
+curl http://127.0.0.1:4002/v1/keys/foo again.
+```
+You should able to see 
+```json
+{"action":"GET","key":"/foo","value":"bar","index":5}
+```
