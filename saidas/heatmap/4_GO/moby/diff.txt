diff --git a/README.md b/README.md
index 17ee8e2261..534fd97db3 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Moby is an open-source project created by Docker to enable and accelerate softwa
-It provides a comprehensive toolkit of components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas.
+It provides a "Lego set" of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas.
diff --git a/README.md b/README.md
index 533d7717df..17ee8e2261 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +0,0 @@
-### Docker users, see [Moby and Docker](https://mobyproject.org/#moby-and-docker) to clarify the relationship between the projects
-
-### Docker maintainers and contributors, see [Transitioning to Moby](#transitioning-to-moby) for more details
-
@@ -10,6 +6 @@ The Moby Project
-Moby is an open-source project created by Docker to advance the software containerization movement.
-It provides a “Lego set” of dozens of components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts to experiment and exchange ideas.
-
-# Moby
-
-## Overview
+Moby is an open-source project created by Docker to enable and accelerate software containerization.
@@ -17,8 +8,2 @@ It provides a “Lego set” of dozens of components, the framework for assembli
-At the core of Moby is a framework to assemble specialized container systems.
-It provides:
-
-- A library of containerized components for all vital aspects of a container system: OS, container runtime, orchestration, infrastructure management, networking, storage, security, build, image distribution, etc.
-- Tools to assemble the components into runnable artifacts for a variety of platforms and architectures: bare metal (both x86 and Arm); executables for Linux, Mac and Windows; VM images for popular cloud and virtualization providers.
-- A set of reference assemblies which can be used as-is, modified, or used as inspiration to create your own.
-
-All Moby components are containers, so creating new components is as easy as building a new OCI-compatible container.
+It provides a comprehensive toolkit of components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas.
+Components include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.
@@ -28,2 +13,2 @@ All Moby components are containers, so creating new components is as easy as bui
-Moby is an open project guided by strong principles, but modular, flexible and without too strong an opinion on user experience, so it is open to the community to help set its direction.
-The guiding principles are:
+Moby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience.
+It is open to the community to help set its direction.
@@ -30,0 +16 @@ The guiding principles are:
+- Modular: the project includes lots of components that have well-defined functions and APIs that work together.
@@ -32,6 +18,4 @@ The guiding principles are:
-- Usable security: Moby will provide secure defaults without compromising usability.
-- Container centric: Moby is built with containers, for running containers.
-
-With Moby, you should be able to describe all the components of your distributed application, from the high-level configuration files down to the kernel you would like to use and build and deploy it easily.
-
-Moby uses [containerd](https://github.com/containerd/containerd) as the default container runtime.
+- Usable security: Moby provides secure defaults without compromising usability.
+- Developer focused: The APIs are intended to be functional and useful to build powerful tools.
+They are not necessarily intended as end user tools but as components aimed at developers.
+Documentation and UX is aimed at developers not end users.
@@ -41,10 +25,2 @@ Moby uses [containerd](https://github.com/containerd/containerd) as the default
-Moby is recommended for anyone who wants to assemble a container-based system. This includes:
-
-- Hackers who want to customize or patch their Docker build
-- System engineers or integrators building a container system
-- Infrastructure providers looking to adapt existing container systems to their environment
-- Container enthusiasts who want to experiment with the latest container tech
-- Open-source developers looking to test their project in a variety of different systems
-- Anyone curious about Docker internals and how it’s built
-
-Moby is NOT recommended for:
+The Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers.
+It is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.
@@ -52,3 +28 @@ Moby is NOT recommended for:
-- Application developers looking for an easy way to run their applications in containers. We recommend Docker CE instead.
-- Enterprise IT and development teams looking for a ready-to-use, commercially supported container platform. We recommend Docker EE instead.
-- Anyone curious about containers and looking for an easy way to learn. We recommend the [docker.com](https://www.docker.com/) website instead.
+## Relationship with Docker
@@ -56 +30,3 @@ Moby is NOT recommended for:
-# Transitioning to Moby
+The components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project.
+New projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product.
+However, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.
@@ -58,10 +34,2 @@ Moby is NOT recommended for:
-Docker is transitioning all of its open source collaborations to the Moby project going forward.
-During the transition, all open source activity should continue as usual.
-
-We are proposing the following list of changes:
-
-- splitting up the engine into more open components
-- removing the docker UI, SDK etc to keep them in the Docker org
-- clarifying that the project is not limited to the engine, but to the assembly of all the individual components of the Docker platform
-- open-source new tools & components which we currently use to assemble the Docker product, but could benefit the community
-- defining an open, community-centric governance inspired by the Fedora project (a very successful example of balancing the needs of the community with the constraints of the primary corporate sponsor)
+The Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful.
+The releases are supported by the maintainers, community and users, on a best efforts basis only, and are not intended for customers who want enterprise or commercial support; Docker EE is the appropriate product for these use cases.
@@ -85 +52,0 @@ For more information, please see https://www.bis.doc.gov
-
diff --git a/README.md b/README.md
index f768ff8449..533d7717df 100644
--- a/README.md
+++ b/README.md
@@ -54 +54 @@ Moby is NOT recommended for:
-- Anyone curious about containers and looking for an easy way to learn. We recommend the docker.com website instead.
+- Anyone curious about containers and looking for an easy way to learn. We recommend the [docker.com](https://www.docker.com/) website instead.
diff --git a/README.md b/README.md
index 5317b88090..f768ff8449 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,2 @@
+### Docker users, see [Moby and Docker](https://mobyproject.org/#moby-and-docker) to clarify the relationship between the projects
+
diff --git a/README.md b/README.md
index c4b9e74014..5317b88090 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1 @@
-**Docker is transitioning to the Moby Project. [Click here for more information](https://github.com/moby/moby/pull/32691)**
----------------
+### Docker maintainers and contributors, see [Transitioning to Moby](#transitioning-to-moby) for more details
@@ -4,2 +3,2 @@
-Docker: the container engine [![Release](https://img.shields.io/github/release/docker/docker.svg)](https://github.com/docker/docker/releases/latest)
-============================
+The Moby Project
+================
@@ -7,2 +6 @@ Docker: the container engine [![Release](https://img.shields.io/github/release/d
-Docker is an open source project to pack, ship and run any application
-as a lightweight container.
+![Moby Project logo](docs/static_files/moby-project-logo.png "The Moby Project")
@@ -10,7 +8,2 @@ as a lightweight container.
-Docker containers are both *hardware-agnostic* and *platform-agnostic*.
-This means they can run anywhere, from your laptop to the largest
-cloud compute instance and everything in between - and they don't require
-you to use a particular language, framework or packaging system. That
-makes them great building blocks for deploying and scaling web apps,
-databases, and backend services without depending on a particular stack
-or provider.
+Moby is an open-source project created by Docker to advance the software containerization movement.
+It provides a “Lego set” of dozens of components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts to experiment and exchange ideas.
@@ -18,5 +11 @@ or provider.
-Docker began as an open-source implementation of the deployment engine which
-powered [dotCloud](http://web.archive.org/web/20130530031104/https://www.dotcloud.com/),
-a popular Platform-as-a-Service. It benefits directly from the experience
-accumulated over several years of large-scale operation and support of hundreds
-of thousands of applications and databases.
+# Moby
@@ -24 +13 @@ of thousands of applications and databases.
-![Docker logo](docs/static_files/docker-logo-compressed.png "Docker")
+## Overview
@@ -26 +15,2 @@ of thousands of applications and databases.
-## Security Disclosure
+At the core of Moby is a framework to assemble specialized container systems.
+It provides:
@@ -28,3 +18,3 @@ of thousands of applications and databases.
-Security is very important to us. If you have any issue regarding security,
-please disclose the information responsibly by sending an email to
-security@docker.com and not by creating a GitHub issue.
+- A library of containerized components for all vital aspects of a container system: OS, container runtime, orchestration, infrastructure management, networking, storage, security, build, image distribution, etc.
+- Tools to assemble the components into runnable artifacts for a variety of platforms and architectures: bare metal (both x86 and Arm); executables for Linux, Mac and Windows; VM images for popular cloud and virtualization providers.
+- A set of reference assemblies which can be used as-is, modified, or used as inspiration to create your own.
@@ -32 +22 @@ security@docker.com and not by creating a GitHub issue.
-## Better than VMs
+All Moby components are containers, so creating new components is as easy as building a new OCI-compatible container.
@@ -34,6 +24 @@ security@docker.com and not by creating a GitHub issue.
-A common method for distributing applications and sandboxing their
-execution is to use virtual machines, or VMs. Typical VM formats are
-VMware's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
-these formats should allow every developer to automatically package
-their application into a "machine" for easy distribution and deployment.
-In practice, that almost never happens, for a few reasons:
+## Principles
@@ -41,16 +26,2 @@ In practice, that almost never happens, for a few reasons:
-  * *Size*: VMs are very large which makes them impractical to store
-     and transfer.
-  * *Performance*: running VMs consumes significant CPU and memory,
-    which makes them impractical in many scenarios, for example local
-    development of multi-tier applications, and large-scale deployment
-    of cpu and memory-intensive applications on large numbers of
-    machines.
-  * *Portability*: competing VM environments don't play well with each
-     other. Although conversion tools do exist, they are limited and
-     add even more overhead.
-  * *Hardware-centric*: VMs were designed with machine operators in
-    mind, not software developers. As a result, they offer very
-    limited tooling for what developers need most: building, testing
-    and running their software. For example, VMs offer no facilities
-    for application versioning, monitoring, configuration, logging or
-    service discovery.
+Moby is an open project guided by strong principles, but modular, flexible and without too strong an opinion on user experience, so it is open to the community to help set its direction.
+The guiding principles are:
@@ -58,10 +29,3 @@ In practice, that almost never happens, for a few reasons:
-By contrast, Docker relies on a different sandboxing method known as
-*containerization*. Unlike traditional virtualization, containerization
-takes place at the kernel level. Most modern operating system kernels
-now support the primitives necessary for containerization, including
-Linux with [openvz](https://openvz.org),
-[vserver](http://linux-vserver.org) and more recently
-[lxc](https://linuxcontainers.org/), Solaris with
-[zones](https://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc),
-and FreeBSD with
-[Jails](https://www.freebsd.org/doc/handbook/jails.html).
+- Batteries included but swappable: Moby includes enough components to build fully featured container system, but its modular architecture ensures that most of the components can be swapped by different implementations.
+- Usable security: Moby will provide secure defaults without compromising usability.
+- Container centric: Moby is built with containers, for running containers.
@@ -69,6 +33 @@ and FreeBSD with
-Docker builds on top of these low-level primitives to offer developers a
-portable format and runtime environment that solves all four problems.
-Docker containers are small (and their transfer can be optimized with
-layers), they have basically zero memory and cpu overhead, they are
-completely portable, and are designed from the ground up with an
-application-centric design.
+With Moby, you should be able to describe all the components of your distributed application, from the high-level configuration files down to the kernel you would like to use and build and deploy it easily.
@@ -76,2 +35 @@ application-centric design.
-Perhaps best of all, because Docker operates at the OS level, it can still be
-run inside a VM!
+Moby uses [containerd](https://github.com/containerd/containerd) as the default container runtime.
@@ -79 +37 @@ run inside a VM!
-## Plays well with others
+## Audience
@@ -81,2 +39 @@ run inside a VM!
-Docker does not require you to buy into a particular programming
-language, framework, packaging system, or configuration language.
+Moby is recommended for anyone who wants to assemble a container-based system. This includes:
@@ -84,3 +41,6 @@ language, framework, packaging system, or configuration language.
-Is your application a Unix process? Does it use files, tcp connections,
-environment variables, standard Unix streams and command-line arguments
-as inputs and outputs? Then Docker can run it.
+- Hackers who want to customize or patch their Docker build
+- System engineers or integrators building a container system
+- Infrastructure providers looking to adapt existing container systems to their environment
+- Container enthusiasts who want to experiment with the latest container tech
+- Open-source developers looking to test their project in a variety of different systems
+- Anyone curious about Docker internals and how it’s built
@@ -88,2 +48 @@ as inputs and outputs? Then Docker can run it.
-Can your application's build be expressed as a sequence of such
-commands? Then Docker can build it.
+Moby is NOT recommended for:
@@ -91 +50,3 @@ commands? Then Docker can build it.
-## Escape dependency hell
+- Application developers looking for an easy way to run their applications in containers. We recommend Docker CE instead.
+- Enterprise IT and development teams looking for a ready-to-use, commercially supported container platform. We recommend Docker EE instead.
+- Anyone curious about containers and looking for an easy way to learn. We recommend the docker.com website instead.
@@ -93,2 +54 @@ commands? Then Docker can build it.
-A common problem for developers is the difficulty of managing all
-their application's dependencies in a simple and automated way.
+# Transitioning to Moby
@@ -96 +56,2 @@ their application's dependencies in a simple and automated way.
-This is usually difficult for several reasons:
+Docker is transitioning all of its open source collaborations to the Moby project going forward.
+During the transition, all open source activity should continue as usual.
@@ -98,7 +59 @@ This is usually difficult for several reasons:
-  * *Cross-platform dependencies*. Modern applications often depend on
-    a combination of system libraries and binaries, language-specific
-    packages, framework-specific modules, internal components
-    developed for another project, etc. These dependencies live in
-    different "worlds" and require different tools - these tools
-    typically don't work well with each other, requiring awkward
-    custom integrations.
+We are proposing the following list of changes:
@@ -106,5 +61,5 @@ This is usually difficult for several reasons:
-  * *Conflicting dependencies*. Different applications may depend on
-    different versions of the same dependency. Packaging tools handle
-    these situations with various degrees of ease - but they all
-    handle them in different and incompatible ways, which again forces
-    the developer to do extra work.
+- splitting up the engine into more open components
+- removing the docker UI, SDK etc to keep them in the Docker org
+- clarifying that the project is not limited to the engine, but to the assembly of all the individual components of the Docker platform
+- open-source new tools & components which we currently use to assemble the Docker product, but could benefit the community
+- defining an open, community-centric governance inspired by the Fedora project (a very successful example of balancing the needs of the community with the constraints of the primary corporate sponsor)
@@ -112,4 +67 @@ This is usually difficult for several reasons:
-  * *Custom dependencies*. A developer may need to prepare a custom
-    version of their application's dependency. Some packaging systems
-    can handle custom versions of a dependency, others can't - and all
-    of them handle it differently.
+-----
@@ -117,149 +69,2 @@ This is usually difficult for several reasons:
-
-Docker solves the problem of dependency hell by giving developers a simple
-way to express *all* their application's dependencies in one place, while
-streamlining the process of assembling them. If this makes you think of
-[XKCD 927](https://xkcd.com/927/), don't worry. Docker doesn't
-*replace* your favorite packaging systems. It simply orchestrates
-their use in a simple and repeatable way. How does it do that? With
-layers.
-
-Docker defines a build as running a sequence of Unix commands, one
-after the other, in the same container. Build commands modify the
-contents of the container (usually by installing new files on the
-filesystem), the next command modifies it some more, etc. Since each
-build command inherits the result of the previous commands, the
-*order* in which the commands are executed expresses *dependencies*.
-
-Here's a typical Docker build process:
-
-```bash
-FROM ubuntu:12.04
-RUN apt-get update && apt-get install -y python python-pip curl
-RUN curl -sSL https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv
-RUN cd helloflask-master && pip install -r requirements.txt
-```
-
-Note that Docker doesn't care *how* dependencies are built - as long
-as they can be built by running a Unix command in a container.
-
-
-Getting started
-===============
-
-Docker can be installed either on your computer for building applications or
-on servers for running them. To get started, [check out the installation
-instructions in the
-documentation](https://docs.docker.com/engine/installation/).
-
-Usage examples
-==============
-
-Docker can be used to run short-lived commands, long-running daemons
-(app servers, databases, etc.), interactive shell sessions, etc.
-
-You can find a [list of real-world
-examples](https://docs.docker.com/engine/examples/) in the
-documentation.
-
-Under the hood
---------------
-
-Under the hood, Docker is built on the following components:
-
-* The
-  [cgroups](https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt)
-  and
-  [namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html)
-  capabilities of the Linux kernel
-* The [Go](https://golang.org) programming language
-* The [Docker Image Specification](https://github.com/docker/docker/blob/master/image/spec/v1.md)
-* The [Libcontainer Specification](https://github.com/opencontainers/runc/blob/master/libcontainer/SPEC.md)
-
-Contributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
-======================
-
-| **Master** (Linux) | **Experimental** (Linux) | **Windows** | **FreeBSD** |
-|------------------|----------------------|---------|---------|
-| [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/) | [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/) |
-
-Want to hack on Docker? Awesome! We have [instructions to help you get
-started contributing code or documentation](https://docs.docker.com/opensource/project/who-written-for/).
-
-These instructions are probably not perfect, please let us know if anything
-feels wrong or incomplete. Better yet, submit a PR and improve them yourself.
-
-Getting the development builds
-==============================
-
-Want to run Docker from a master build? You can download
-master builds at [master.dockerproject.org](https://master.dockerproject.org).
-They are updated with each commit merged into the master branch.
-
-Don't know how to use that super cool new feature in the master build? Check
-out the master docs at
-[docs.master.dockerproject.org](http://docs.master.dockerproject.org).
-
-How the project is run
-======================
-
-Docker is a very, very active project. If you want to learn more about how it is run,
-or want to get more involved, the best place to start is [the project directory](https://github.com/docker/docker/tree/master/project).
-
-We are always open to suggestions on process improvements, and are always looking for more maintainers.
-
-### Talking to other Docker users and contributors
-
-<table class="tg">
-  <col width="45%">
-  <col width="65%">
-  <tr>
-    <td>Internet&nbsp;Relay&nbsp;Chat&nbsp;(IRC)</td>
-    <td>
-      <p>
-        IRC is a direct line to our most knowledgeable Docker users; we have
-        both the  <code>#docker</code> and <code>#docker-dev</code> group on
-        <strong>irc.freenode.net</strong>.
-        IRC is a rich chat protocol but it can overwhelm new users. You can search
-        <a href="https://botbot.me/freenode/docker/#" target="_blank">our chat archives</a>.
-      </p>
-      Read our <a href="https://docs.docker.com/opensource/get-help/#/irc-quickstart" target="_blank">IRC quickstart guide</a> for an easy way to get started.
-    </td>
-  </tr>
-  <tr>
-    <td>Docker Community Forums</td>
-    <td>
-      The <a href="https://forums.docker.com/c/open-source-projects/de" target="_blank">Docker Engine</a>
-      group is for users of the Docker Engine project.
-    </td>
-  </tr>
-  <tr>
-    <td>Google Groups</td>
-    <td>
-      The <a href="https://groups.google.com/forum/#!forum/docker-dev"
-      target="_blank">docker-dev</a> group is for contributors and other people
-      contributing to the Docker project.  You can join this group without a
-      Google account by sending an email to <a
-      href="mailto:docker-dev+subscribe@googlegroups.com">docker-dev+subscribe@googlegroups.com</a>.
-      You'll receive a join-request message; simply reply to the message to
-      confirm your subscription.
-    </td>
-  </tr>
-  <tr>
-    <td>Twitter</td>
-    <td>
-      You can follow <a href="https://twitter.com/docker/" target="_blank">Docker's Twitter feed</a>
-      to get updates on our products. You can also tweet us questions or just
-      share blogs or stories.
-    </td>
-  </tr>
-  <tr>
-    <td>Stack Overflow</td>
-    <td>
-      Stack Overflow has thousands of Docker questions listed. We regularly
-      monitor <a href="https://stackoverflow.com/search?tab=newest&q=docker" target="_blank">Docker questions</a>
-      and so do many other knowledgeable Docker users.
-    </td>
-  </tr>
-</table>
-
-### Legal
+Legal
+=====
@@ -268 +73 @@ We are always open to suggestions on process improvements, and are always lookin
-please see the [NOTICE](https://github.com/docker/docker/blob/master/NOTICE) document in this repo.*
+please see the [NOTICE](https://github.com/moby/moby/blob/master/NOTICE) document in this repo.*
@@ -270 +75 @@ please see the [NOTICE](https://github.com/docker/docker/blob/master/NOTICE) doc
-Use and transfer of Docker may be subject to certain restrictions by the
+Use and transfer of Moby may be subject to certain restrictions by the
@@ -281,2 +86,2 @@ Licensing
-Docker is licensed under the Apache License, Version 2.0. See
-[LICENSE](https://github.com/docker/docker/blob/master/LICENSE) for the full
+Moby is licensed under the Apache License, Version 2.0. See
+[LICENSE](https://github.com/moby/moby/blob/master/LICENSE) for the full
@@ -284,24 +88,0 @@ license text.
-
-Other Docker Related Projects
-=============================
-There are a number of projects under development that are based on Docker's
-core technology. These projects expand the tooling built around the
-Docker platform to broaden its application and utility.
-
-* [Docker Registry](https://github.com/docker/distribution): Registry
-server for Docker (hosting/delivery of repositories and images)
-* [Docker Machine](https://github.com/docker/machine): Machine management
-for a container-centric world
-* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering
-system
-* [Docker Compose](https://github.com/docker/compose) (formerly Fig):
-Define and run multi-container apps
-* [Kitematic](https://github.com/docker/kitematic): The easiest way to use
-Docker on Mac and Windows
-
-If you know of another project underway that should be listed here, please help
-us keep this list up-to-date by submitting a PR.
-
-Awesome-Docker
-==============
-You can find more projects, tools and articles related to Docker on the [awesome-docker list](https://github.com/veggiemonk/awesome-docker). Add your project there.
diff --git a/README.md b/README.md
index 2e91559c59..c4b9e74014 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,3 @@
+**Docker is transitioning to the Moby Project. [Click here for more information](https://github.com/moby/moby/pull/32691)**
+---------------
+
diff --git a/README.md b/README.md
index d4af6e0cc1..2e91559c59 100644
--- a/README.md
+++ b/README.md
@@ -115 +115 @@ This is usually difficult for several reasons:
-Docker solves the problem of dependency hell by giving the developer a simple
+Docker solves the problem of dependency hell by giving developers a simple
diff --git a/README.md b/README.md
index 16b4f7eb64..d4af6e0cc1 100644
--- a/README.md
+++ b/README.md
@@ -115 +115 @@ This is usually difficult for several reasons:
-Docker solves the problem of dependency hell by giving developers a simple
+Docker solves the problem of dependency hell by giving the developer a simple
@@ -255 +255 @@ We are always open to suggestions on process improvements, and are always lookin
-      Stack Overflow has over 7000 Docker questions listed. We regularly
+      Stack Overflow has thousands of Docker questions listed. We regularly
diff --git a/README.md b/README.md
index 0b33bdca0d..16b4f7eb64 100644
--- a/README.md
+++ b/README.md
@@ -115 +115 @@ This is usually difficult for several reasons:
-Docker solves the problem of dependency hell by giving the developer a simple
+Docker solves the problem of dependency hell by giving developers a simple
diff --git a/README.md b/README.md
index 660fc8e332..0b33bdca0d 100644
--- a/README.md
+++ b/README.md
@@ -222 +222 @@ We are always open to suggestions on process improvements, and are always lookin
-      Read our <a href="https://docs.docker.com/project/get-help/#irc-quickstart" target="_blank">IRC quickstart guide</a> for an easy way to get started.
+      Read our <a href="https://docs.docker.com/opensource/get-help/#/irc-quickstart" target="_blank">IRC quickstart guide</a> for an easy way to get started.
diff --git a/README.md b/README.md
index c4530448cb..660fc8e332 100644
--- a/README.md
+++ b/README.md
@@ -27 +27 @@ please disclose the information responsibly by sending an email to
-security@docker.com and not by creating a github issue.
+security@docker.com and not by creating a GitHub issue.
@@ -178 +178 @@ Contributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?stat
-| **Master** (Linux) | **Experimental** (linux) | **Windows** | **FreeBSD** |
+| **Master** (Linux) | **Experimental** (Linux) | **Windows** | **FreeBSD** |
@@ -241 +241 @@ We are always open to suggestions on process improvements, and are always lookin
-      confirm your subscribtion.
+      confirm your subscription.
diff --git a/README.md b/README.md
index 26151c892f..c4530448cb 100644
--- a/README.md
+++ b/README.md
@@ -16,4 +16,4 @@ Docker began as an open-source implementation of the deployment engine which
-powers [dotCloud](https://www.dotcloud.com), a popular Platform-as-a-Service.
-It benefits directly from the experience accumulated over several years
-of large-scale operation and support of hundreds of thousands of
-applications and databases.
+powered [dotCloud](http://web.archive.org/web/20130530031104/https://www.dotcloud.com/),
+a popular Platform-as-a-Service. It benefits directly from the experience
+accumulated over several years of large-scale operation and support of hundreds
+of thousands of applications and databases.
@@ -21 +21 @@ applications and databases.
-![](docs/static_files/docker-logo-compressed.png "Docker")
+![Docker logo](docs/static_files/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index 87508ade71..26151c892f 100644
--- a/README.md
+++ b/README.md
@@ -25,2 +25,2 @@ applications and databases.
-Security is very important to us. If you have any issue regarding security, 
-please disclose the information responsibly by sending an email to 
+Security is very important to us. If you have any issue regarding security,
+please disclose the information responsibly by sending an email to
@@ -191,2 +191,2 @@ Getting the development builds
-Want to run Docker from a master build? You can download 
-master builds at [master.dockerproject.org](https://master.dockerproject.org). 
+Want to run Docker from a master build? You can download
+master builds at [master.dockerproject.org](https://master.dockerproject.org).
@@ -224,0 +225,7 @@ We are always open to suggestions on process improvements, and are always lookin
+  <tr>
+    <td>Docker Community Forums</td>
+    <td>
+      The <a href="https://forums.docker.com/c/open-source-projects/de" target="_blank">Docker Engine</a>
+      group is for users of the Docker Engine project.
+    </td>
+  </tr>
@@ -228,8 +235,7 @@ We are always open to suggestions on process improvements, and are always lookin
-      There are two groups.
-      <a href="https://groups.google.com/forum/#!forum/docker-user" target="_blank">Docker-user</a>
-      is for people using Docker containers.
-      The <a href="https://groups.google.com/forum/#!forum/docker-dev" target="_blank">docker-dev</a>
-      group is for contributors and other people contributing to the Docker
-      project.
-      You can join them without an google account by sending an email to e.g. "docker-user+subscribe@googlegroups.com".
-      After receiving the join-request message, you can simply reply to that to confirm the subscribtion.
+      The <a href="https://groups.google.com/forum/#!forum/docker-dev"
+      target="_blank">docker-dev</a> group is for contributors and other people
+      contributing to the Docker project.  You can join this group without a
+      Google account by sending an email to <a
+      href="mailto:docker-dev+subscribe@googlegroups.com">docker-dev+subscribe@googlegroups.com</a>.
+      You'll receive a join-request message; simply reply to the message to
+      confirm your subscribtion.
@@ -282 +288 @@ Docker platform to broaden its application and utility.
-* [Docker Registry](https://github.com/docker/distribution): Registry 
+* [Docker Registry](https://github.com/docker/distribution): Registry
@@ -284 +290 @@ server for Docker (hosting/delivery of repositories and images)
-* [Docker Machine](https://github.com/docker/machine): Machine management 
+* [Docker Machine](https://github.com/docker/machine): Machine management
@@ -286 +292 @@ for a container-centric world
-* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering 
+* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering
@@ -288 +294 @@ system
-* [Docker Compose](https://github.com/docker/compose) (formerly Fig): 
+* [Docker Compose](https://github.com/docker/compose) (formerly Fig):
@@ -290 +296 @@ Define and run multi-container apps
-* [Kitematic](https://github.com/docker/kitematic): The easiest way to use 
+* [Kitematic](https://github.com/docker/kitematic): The easiest way to use
@@ -293 +299 @@ Docker on Mac and Windows
-If you know of another project underway that should be listed here, please help 
+If you know of another project underway that should be listed here, please help
diff --git a/README.md b/README.md
index aa9cc0ea81..87508ade71 100644
--- a/README.md
+++ b/README.md
@@ -151,3 +150,0 @@ documentation](https://docs.docker.com/engine/installation/).
-We also offer an [interactive tutorial](https://www.docker.com/tryit/)
-for quickly learning the basics of using Docker.
-
diff --git a/README.md b/README.md
index 4778e748ad..aa9cc0ea81 100644
--- a/README.md
+++ b/README.md
@@ -236,0 +237,2 @@ We are always open to suggestions on process improvements, and are always lookin
+      You can join them without an google account by sending an email to e.g. "docker-user+subscribe@googlegroups.com".
+      After receiving the join-request message, you can simply reply to that to confirm the subscribtion.
diff --git a/README.md b/README.md
index e10fbce9df..4778e748ad 100644
--- a/README.md
+++ b/README.md
@@ -219 +219 @@ We are always open to suggestions on process improvements, and are always lookin
-        IRC a direct line to our most knowledgeable Docker users; we have
+        IRC is a direct line to our most knowledgeable Docker users; we have
diff --git a/README.md b/README.md
index ae82959b8a..e10fbce9df 100644
--- a/README.md
+++ b/README.md
@@ -170 +170 @@ Under the hood, Docker is built on the following components:
-  [cgroups](https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt)
+  [cgroups](https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt)
diff --git a/README.md b/README.md
index 4764303e2a..ae82959b8a 100644
--- a/README.md
+++ b/README.md
@@ -161 +161 @@ You can find a [list of real-world
-examples](https://docs.docker.com/examples/) in the
+examples](https://docs.docker.com/engine/examples/) in the
@@ -186 +186 @@ Want to hack on Docker? Awesome! We have [instructions to help you get
-started contributing code or documentation](https://docs.docker.com/project/who-written-for/).
+started contributing code or documentation](https://docs.docker.com/opensource/project/who-written-for/).
@@ -291 +291 @@ Define and run multi-container apps
-* [Kitematic](https://github.com/kitematic/kitematic): The easiest way to use 
+* [Kitematic](https://github.com/docker/kitematic): The easiest way to use 
diff --git a/README.md b/README.md
index abf079672e..4764303e2a 100644
--- a/README.md
+++ b/README.md
@@ -146,3 +146,4 @@ Getting started
-Docker can be installed on your local machine as well as servers - both
-bare metal and virtualized.  It is available as a binary on most modern
-Linux systems, or as a VM on Windows, Mac and other systems.
+Docker can be installed either on your computer for building applications or
+on servers for running them. To get started, [check out the installation
+instructions in the
+documentation](https://docs.docker.com/engine/installation/).
@@ -153,2 +153,0 @@ for quickly learning the basics of using Docker.
-For up-to-date install instructions, see the [Docs](https://docs.docker.com).
-
diff --git a/README.md b/README.md
index a4d65c320a..abf079672e 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/static_files/docker-logo-compressed.png "Docker")
+![](docs/static_files/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index 36b9c912b0..a4d65c320a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-Docker: the container engine
+Docker: the container engine [![Release](https://img.shields.io/github/release/docker/docker.svg)](https://github.com/docker/docker/releases/latest)
@@ -179 +179 @@ Under the hood, Docker is built on the following components:
-Contributing to Docker
+Contributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
@@ -182,2 +182,3 @@ Contributing to Docker
-[![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
-[![Jenkins Build Status](https://jenkins.dockerproject.org/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/job/Docker%20Master/)
+| **Master** (Linux) | **Experimental** (linux) | **Windows** | **FreeBSD** |
+|------------------|----------------------|---------|---------|
+| [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/) | [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/) |
diff --git a/README.md b/README.md
index df0f22d2f6..36b9c912b0 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-Docker: the container engine [![Release](https://img.shields.io/github/release/docker/docker.svg)](https://github.com/docker/docker/releases/latest)
+Docker: the container engine
@@ -179 +179 @@ Under the hood, Docker is built on the following components:
-Contributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
+Contributing to Docker
@@ -182,3 +182,2 @@ Contributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?stat
-| **Master** (Linux) | **Experimental** (linux) | **Windows** | **FreeBSD** |
-|------------------|----------------------|---------|---------|
-| [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/) | [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/) |
+[![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
+[![Jenkins Build Status](https://jenkins.dockerproject.org/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/job/Docker%20Master/)
@@ -251 +250 @@ We are always open to suggestions on process improvements, and are always lookin
-      Stack Overflow has over 7000K Docker questions listed. We regularly
+      Stack Overflow has over 7000 Docker questions listed. We regularly
diff --git a/README.md b/README.md
index 965222b49f..df0f22d2f6 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-Docker: the container engine
+Docker: the container engine [![Release](https://img.shields.io/github/release/docker/docker.svg)](https://github.com/docker/docker/releases/latest)
@@ -179 +179 @@ Under the hood, Docker is built on the following components:
-Contributing to Docker
+Contributing to Docker [![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
@@ -182,2 +182,3 @@ Contributing to Docker
-[![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
-[![Jenkins Build Status](https://jenkins.dockerproject.org/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/job/Docker%20Master/)
+| **Master** (Linux) | **Experimental** (linux) | **Windows** | **FreeBSD** |
+|------------------|----------------------|---------|---------|
+| [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master/) | [![Jenkins Build Status](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/badge/icon)](https://jenkins.dockerproject.org/view/Docker/job/Docker%20Master%20%28experimental%29/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(windows)/) | [![Build Status](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/badge/icon)](http://jenkins.dockerproject.org/job/Docker%20Master%20(freebsd)/) |
diff --git a/README.md b/README.md
index 0ad5140ebe..965222b49f 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-Docker: the Linux container engine
-==================================
+Docker: the container engine
+============================
@@ -9 +9 @@ This means they can run anywhere, from your laptop to the largest
-EC2 compute instance and everything in between - and they don't require
+cloud compute instance and everything in between - and they don't require
diff --git a/README.md b/README.md
index e127a9befc..0ad5140ebe 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-Docker: the container engine
-============================
+Docker: the Linux container engine
+==================================
@@ -9 +9 @@ This means they can run anywhere, from your laptop to the largest
-cloud compute instance and everything in between - and they don't require
+EC2 compute instance and everything in between - and they don't require
@@ -177 +177 @@ Under the hood, Docker is built on the following components:
-* The [Libcontainer Specification](https://github.com/docker/libcontainer/blob/master/SPEC.md)
+* The [Libcontainer Specification](https://github.com/opencontainers/runc/blob/master/libcontainer/SPEC.md)
diff --git a/README.md b/README.md
index 04342fec51..e127a9befc 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-Docker: the Linux container engine
-==================================
+Docker: the container engine
+============================
@@ -9 +9 @@ This means they can run anywhere, from your laptop to the largest
-EC2 compute instance and everything in between - and they don't require
+cloud compute instance and everything in between - and they don't require
diff --git a/README.md b/README.md
index 86f45a3d86..04342fec51 100644
--- a/README.md
+++ b/README.md
@@ -295,0 +296,4 @@ us keep this list up-to-date by submitting a PR.
+
+Awesome-Docker
+==============
+You can find more projects, tools and articles related to Docker on the [awesome-docker list](https://github.com/veggiemonk/awesome-docker). Add your project there.
diff --git a/README.md b/README.md
index 18a396c557..86f45a3d86 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Docker began as an open-source implementation of the deployment engine which
-powers [dotCloud](https://dotcloud.com), a popular Platform-as-a-Service.
+powers [dotCloud](https://www.dotcloud.com), a popular Platform-as-a-Service.
diff --git a/README.md b/README.md
index 76ad4c4b2c..18a396c557 100644
--- a/README.md
+++ b/README.md
@@ -186 +186 @@ Want to hack on Docker? Awesome! We have [instructions to help you get
-started contributing code or documentation.](https://docs.docker.com/project/who-written-for/).
+started contributing code or documentation](https://docs.docker.com/project/who-written-for/).
diff --git a/README.md b/README.md
index 32ab77c3b5..76ad4c4b2c 100644
--- a/README.md
+++ b/README.md
@@ -171 +171 @@ Under the hood, Docker is built on the following components:
-  [cgroup](https://en.wikipedia.org/wiki/Cgroups)
+  [cgroups](https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt)
@@ -173 +173 @@ Under the hood, Docker is built on the following components:
-  [namespacing](http://man7.org/linux/man-pages/man7/namespaces.7.html)
+  [namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html)
diff --git a/README.md b/README.md
index 08917b4d3d..32ab77c3b5 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMWare's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
+VMware's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
@@ -171 +171 @@ Under the hood, Docker is built on the following components:
-  [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c)
+  [cgroup](https://en.wikipedia.org/wiki/Cgroups)
@@ -173 +173 @@ Under the hood, Docker is built on the following components:
-  [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part)
+  [namespacing](http://man7.org/linux/man-pages/man7/namespaces.7.html)
diff --git a/README.md b/README.md
index 01e8a5c018..08917b4d3d 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMware's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
+VMWare's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
@@ -171 +171 @@ Under the hood, Docker is built on the following components:
-  [cgroup](https://en.wikipedia.org/wiki/Cgroups)
+  [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c)
@@ -173 +173 @@ Under the hood, Docker is built on the following components:
-  [namespacing](http://man7.org/linux/man-pages/man7/namespaces.7.html)
+  [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part)
@@ -292 +292 @@ Define and run multi-container apps
-Docker on a Mac
+Docker on Mac and Windows
diff --git a/README.md b/README.md
index 381fe1f483..01e8a5c018 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMWare's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
+VMware's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
diff --git a/README.md b/README.md
index beaf866000..381fe1f483 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMware's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
+VMWare's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
@@ -171 +171 @@ Under the hood, Docker is built on the following components:
-  [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c)
+  [cgroup](https://en.wikipedia.org/wiki/Cgroups)
@@ -173 +173 @@ Under the hood, Docker is built on the following components:
-  [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part)
+  [namespacing](http://man7.org/linux/man-pages/man7/namespaces.7.html)
diff --git a/README.md b/README.md
index 891240421d..beaf866000 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMWare's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
+VMware's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
diff --git a/README.md b/README.md
index 4c6e38831b..891240421d 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/sources/static_files/docker-logo-compressed.png "Docker")
+![Docker L](docs/static_files/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index 87149c9e66..4c6e38831b 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMware's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In theory
+VMWare's vmdk, Oracle VirtualBox's vdi, and Amazon EC2's ami. In theory
diff --git a/README.md b/README.md
index 37eb7d1043..87149c9e66 100644
--- a/README.md
+++ b/README.md
@@ -183 +183 @@ Contributing to Docker
-[![Jenkins Build Status](https://jenkins.dockerproject.com/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.com/job/Docker%20Master/)
+[![Jenkins Build Status](https://jenkins.dockerproject.org/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.org/job/Docker%20Master/)
@@ -195 +195 @@ Want to run Docker from a master build? You can download
-master builds at [master.dockerproject.com](https://master.dockerproject.com). 
+master builds at [master.dockerproject.org](https://master.dockerproject.org). 
@@ -200 +200 @@ out the master docs at
-[docs.master.dockerproject.com](http://docs.master.dockerproject.com).
+[docs.master.dockerproject.org](http://docs.master.dockerproject.org).
diff --git a/README.md b/README.md
index aad3b68645..37eb7d1043 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMWare's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In theory
+VMware's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In theory
diff --git a/README.md b/README.md
index ad15e56bc5..aad3b68645 100644
--- a/README.md
+++ b/README.md
@@ -61 +61 @@ Linux with [openvz](https://openvz.org),
-[lxc](http://lxc.sourceforge.net), Solaris with
+[lxc](https://linuxcontainers.org/), Solaris with
diff --git a/README.md b/README.md
index 4bb249eea0..ad15e56bc5 100644
--- a/README.md
+++ b/README.md
@@ -209,0 +210,47 @@ We are always open to suggestions on process improvements, and are always lookin
+### Talking to other Docker users and contributors
+
+<table class="tg">
+  <col width="45%">
+  <col width="65%">
+  <tr>
+    <td>Internet&nbsp;Relay&nbsp;Chat&nbsp;(IRC)</td>
+    <td>
+      <p>
+        IRC a direct line to our most knowledgeable Docker users; we have
+        both the  <code>#docker</code> and <code>#docker-dev</code> group on
+        <strong>irc.freenode.net</strong>.
+        IRC is a rich chat protocol but it can overwhelm new users. You can search
+        <a href="https://botbot.me/freenode/docker/#" target="_blank">our chat archives</a>.
+      </p>
+      Read our <a href="https://docs.docker.com/project/get-help/#irc-quickstart" target="_blank">IRC quickstart guide</a> for an easy way to get started.
+    </td>
+  </tr>
+  <tr>
+    <td>Google Groups</td>
+    <td>
+      There are two groups.
+      <a href="https://groups.google.com/forum/#!forum/docker-user" target="_blank">Docker-user</a>
+      is for people using Docker containers.
+      The <a href="https://groups.google.com/forum/#!forum/docker-dev" target="_blank">docker-dev</a>
+      group is for contributors and other people contributing to the Docker
+      project.
+    </td>
+  </tr>
+  <tr>
+    <td>Twitter</td>
+    <td>
+      You can follow <a href="https://twitter.com/docker/" target="_blank">Docker's Twitter feed</a>
+      to get updates on our products. You can also tweet us questions or just
+      share blogs or stories.
+    </td>
+  </tr>
+  <tr>
+    <td>Stack Overflow</td>
+    <td>
+      Stack Overflow has over 7000K Docker questions listed. We regularly
+      monitor <a href="https://stackoverflow.com/search?tab=newest&q=docker" target="_blank">Docker questions</a>
+      and so do many other knowledgeable Docker users.
+    </td>
+  </tr>
+</table>
+
@@ -249,6 +295,0 @@ us keep this list up-to-date by submitting a PR.
-
-Mailing Lists
-=============
-
-* [Google group for Docker Users](https://groups.google.com/forum/#!forum/docker-user)
-* [Google group for Docker development discussions](https://groups.google.com/forum/#!forum/docker-dev)
diff --git a/README.md b/README.md
index 5603a55a7f..4bb249eea0 100644
--- a/README.md
+++ b/README.md
@@ -248,0 +249,6 @@ us keep this list up-to-date by submitting a PR.
+
+Mailing Lists
+=============
+
+* [Google group for Docker Users](https://groups.google.com/forum/#!forum/docker-user)
+* [Google group for Docker development discussions](https://groups.google.com/forum/#!forum/docker-dev)
diff --git a/README.md b/README.md
index 03aa0139c5..5603a55a7f 100644
--- a/README.md
+++ b/README.md
@@ -182 +182 @@ Contributing to Docker
-[![GoDoc](https://godoc.org/github.com/docker/docker?status.png)](https://godoc.org/github.com/docker/docker)
+[![GoDoc](https://godoc.org/github.com/docker/docker?status.svg)](https://godoc.org/github.com/docker/docker)
diff --git a/README.md b/README.md
index 6d259c5edb..03aa0139c5 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Docker began as an open-source implementation of the deployment engine which
-powers [dotCloud](http://dotcloud.com), a popular Platform-as-a-Service.
+powers [dotCloud](https://dotcloud.com), a popular Platform-as-a-Service.
@@ -59 +59 @@ now support the primitives necessary for containerization, including
-Linux with [openvz](http://openvz.org),
+Linux with [openvz](https://openvz.org),
@@ -62 +62 @@ Linux with [openvz](http://openvz.org),
-[zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc),
+[zones](https://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc),
@@ -64 +64 @@ and FreeBSD with
-[Jails](http://www.freebsd.org/doc/handbook/jails.html).
+[Jails](https://www.freebsd.org/doc/handbook/jails.html).
@@ -118 +118 @@ streamlining the process of assembling them. If this makes you think of
-[XKCD 927](http://xkcd.com/927/), don't worry. Docker doesn't
+[XKCD 927](https://xkcd.com/927/), don't worry. Docker doesn't
@@ -150 +150 @@ Linux systems, or as a VM on Windows, Mac and other systems.
-We also offer an [interactive tutorial](http://www.docker.com/tryit/)
+We also offer an [interactive tutorial](https://www.docker.com/tryit/)
@@ -153 +153 @@ for quickly learning the basics of using Docker.
-For up-to-date install instructions, see the [Docs](http://docs.docker.com).
+For up-to-date install instructions, see the [Docs](https://docs.docker.com).
@@ -162 +162 @@ You can find a [list of real-world
-examples](http://docs.docker.com/examples/) in the
+examples](https://docs.docker.com/examples/) in the
@@ -175 +175 @@ Under the hood, Docker is built on the following components:
-* The [Go](http://golang.org) programming language
+* The [Go](https://golang.org) programming language
@@ -221 +221 @@ violate applicable laws.
-For more information, please see http://www.bis.doc.gov
+For more information, please see https://www.bis.doc.gov
diff --git a/README.md b/README.md
index 86f8bcb0dd..6d259c5edb 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@ Docker is an open source project to pack, ship and run any application
-as a lightweight container
+as a lightweight container.
@@ -108 +108 @@ This is usually difficult for several reasons:
-  
+
@@ -159 +159 @@ Docker can be used to run short-lived commands, long-running daemons
-(app servers, databases etc.), interactive shell sessions, etc.
+(app servers, databases, etc.), interactive shell sessions, etc.
@@ -216 +216,2 @@ Use and transfer of Docker may be subject to certain restrictions by the
-United States and other governments.  
+United States and other governments.
+
@@ -218 +219 @@ It is your responsibility to ensure that your use and/or transfer does not
-violate applicable laws. 
+violate applicable laws.
@@ -233 +234 @@ core technology. These projects expand the tooling built around the
-Docker platform to broaden its application and utility. 
+Docker platform to broaden its application and utility.
@@ -238 +239 @@ server for Docker (hosting/delivery of repositories and images)
-for a container-centric world 
+for a container-centric world
@@ -240 +241 @@ for a container-centric world
-system 
+system
diff --git a/README.md b/README.md
index 3ab200d46e..86f8bcb0dd 100644
--- a/README.md
+++ b/README.md
@@ -213 +213 @@ We are always open to suggestions on process improvements, and are always lookin
-please see the "NOTICE" document in this repo.*
+please see the [NOTICE](https://github.com/docker/docker/blob/master/NOTICE) document in this repo.*
diff --git a/README.md b/README.md
index c70398a3a8..3ab200d46e 100644
--- a/README.md
+++ b/README.md
@@ -174,4 +174,4 @@ Under the hood, Docker is built on the following components:
-  capabilities of the Linux kernel;
-* The [Go](http://golang.org) programming language.
-* The [Docker Image Specification] (https://github.com/docker/docker/blob/master/image/spec/v1.md)
-* The [Libcontainer Specification] (https://github.com/docker/libcontainer/blob/master/SPEC.md)
+  capabilities of the Linux kernel
+* The [Go](http://golang.org) programming language
+* The [Docker Image Specification](https://github.com/docker/docker/blob/master/image/spec/v1.md)
+* The [Libcontainer Specification](https://github.com/docker/libcontainer/blob/master/SPEC.md)
diff --git a/README.md b/README.md
index 079713ced9..c70398a3a8 100644
--- a/README.md
+++ b/README.md
@@ -235,3 +234,0 @@ Docker platform to broaden its application and utility.
-If you know of another project underway that should be listed here, please help
-us keep this list up-to-date by submitting a PR.
-
@@ -245,0 +243,2 @@ Define and run multi-container apps
+* [Kitematic](https://github.com/kitematic/kitematic): The easiest way to use 
+Docker on a Mac
@@ -246,0 +246,2 @@ Define and run multi-container apps
+If you know of another project underway that should be listed here, please help 
+us keep this list up-to-date by submitting a PR.
diff --git a/README.md b/README.md
index d15e125e88..079713ced9 100644
--- a/README.md
+++ b/README.md
@@ -238,2 +238,2 @@ us keep this list up-to-date by submitting a PR.
-* [Docker Registry](https://github.com/docker/docker-registry): Registry 
-server for Docker (hosting/delivering of repositories and images) 
+* [Docker Registry](https://github.com/docker/distribution): Registry 
+server for Docker (hosting/delivery of repositories and images)
diff --git a/README.md b/README.md
index 2404704ce9..d15e125e88 100644
--- a/README.md
+++ b/README.md
@@ -186,2 +186 @@ Want to hack on Docker? Awesome! We have [instructions to help you get
-started](CONTRIBUTING.md). If you'd like to contribute to the
-documentation, please take a look at this [README.md](https://github.com/docker/docker/blob/master/docs/README.md).
+started contributing code or documentation.](https://docs.docker.com/project/who-written-for/).
@@ -191,0 +191,3 @@ feels wrong or incomplete. Better yet, submit a PR and improve them yourself.
+Getting the development builds
+==============================
+
diff --git a/README.md b/README.md
index ee882a2169..2404704ce9 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/theme/mkdocs/images/docker-logo-compressed.png "Docker")
+![Docker L](docs/sources/static_files/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index 3003c76a9c..ee882a2169 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/sources/static_files/docker-logo-compressed.png "Docker")
+![Docker L](docs/theme/mkdocs/images/docker-logo-compressed.png "Docker")
@@ -242,2 +242,2 @@ system
-* [Docker Compose, aka Fig](https://github.com/docker/fig): 
-Multi-container application management
+* [Docker Compose](https://github.com/docker/compose) (formerly Fig): 
+Define and run multi-container apps
diff --git a/README.md b/README.md
index 8eb10bc4db..3003c76a9c 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/sources/static_files/dockerlogo-v.png "Docker")
+![Docker L](docs/sources/static_files/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index 2be8405942..8eb10bc4db 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/theme/mkdocs/images/docker-logo-compressed.png "Docker")
+![Docker L](docs/sources/static_files/dockerlogo-v.png "Docker")
diff --git a/README.md b/README.md
index 2ef78b78ce..2be8405942 100644
--- a/README.md
+++ b/README.md
@@ -175,0 +176,2 @@ Under the hood, Docker is built on the following components:
+* The [Docker Image Specification] (https://github.com/docker/docker/blob/master/image/spec/v1.md)
+* The [Libcontainer Specification] (https://github.com/docker/libcontainer/blob/master/SPEC.md)
diff --git a/README.md b/README.md
index b4c0276f5a..2ef78b78ce 100644
--- a/README.md
+++ b/README.md
@@ -202 +202 @@ Docker is a very, very active project. If you want to learn more about how it is
-or want to get more involved, the best place to start is [the project directory](https://github.com/docker/docker/tree/project).
+or want to get more involved, the best place to start is [the project directory](https://github.com/docker/docker/tree/master/project).
diff --git a/README.md b/README.md
index b372c25d47..b4c0276f5a 100644
--- a/README.md
+++ b/README.md
@@ -197,0 +198,8 @@ out the master docs at
+How the project is run
+======================
+
+Docker is a very, very active project. If you want to learn more about how it is run,
+or want to get more involved, the best place to start is [the project directory](https://github.com/docker/docker/tree/project).
+
+We are always open to suggestions on process improvements, and are always looking for more maintainers.
+
diff --git a/README.md b/README.md
index c64d6dfde8..b372c25d47 100644
--- a/README.md
+++ b/README.md
@@ -103 +103 @@ This is usually difficult for several reasons:
-  * Conflicting dependencies. Different applications may depend on
+  * *Conflicting dependencies*. Different applications may depend on
@@ -109 +109 @@ This is usually difficult for several reasons:
-  * Custom dependencies. A developer may need to prepare a custom
+  * *Custom dependencies*. A developer may need to prepare a custom
diff --git a/README.md b/README.md
index eec5c3b0eb..c64d6dfde8 100644
--- a/README.md
+++ b/README.md
@@ -103 +103 @@ This is usually difficult for several reasons:
-  * *Conflicting dependencies*. Different applications may depend on
+  * Conflicting dependencies. Different applications may depend on
@@ -109 +109 @@ This is usually difficult for several reasons:
-  * *Custom dependencies*. A developer may need to prepare a custom
+  * Custom dependencies. A developer may need to prepare a custom
@@ -193,0 +194,4 @@ They are updated with each commit merged into the master branch.
+Don't know how to use that super cool new feature in the master build? Check
+out the master docs at
+[docs.master.dockerproject.com](http://docs.master.dockerproject.com).
+
diff --git a/README.md b/README.md
index 58f121a11a..eec5c3b0eb 100644
--- a/README.md
+++ b/README.md
@@ -103 +103 @@ This is usually difficult for several reasons:
-  * Conflicting dependencies. Different applications may depend on
+  * *Conflicting dependencies*. Different applications may depend on
@@ -109 +109 @@ This is usually difficult for several reasons:
-  * Custom dependencies. A developer may need to prepare a custom
+  * *Custom dependencies*. A developer may need to prepare a custom
diff --git a/README.md b/README.md
index ef93a08320..58f121a11a 100644
--- a/README.md
+++ b/README.md
@@ -216 +216 @@ There are a number of projects under development that are based on Docker's
-core technology. These projects seek to expand the tooling built around the
+core technology. These projects expand the tooling built around the
diff --git a/README.md b/README.md
index 9f932e1042..ef93a08320 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Docker containers are both *hardware-agnostic* and *platform-agnostic*.
-This means that they can run anywhere, from your laptop to the largest
+This means they can run anywhere, from your laptop to the largest
@@ -10 +10 @@ EC2 compute instance and everything in between - and they don't require
-that you use a particular language, framework or packaging system. That
+you to use a particular language, framework or packaging system. That
@@ -12 +12 @@ makes them great building blocks for deploying and scaling web apps,
-databases and backend services without depending on a particular stack
+databases, and backend services without depending on a particular stack
@@ -15 +15 @@ or provider.
-Docker is an open-source implementation of the deployment engine which
+Docker began as an open-source implementation of the deployment engine which
@@ -25 +25 @@ applications and databases.
-Security is very important to us.  If you have any issue regarding security, 
+Security is very important to us. If you have any issue regarding security, 
@@ -62 +62 @@ Linux with [openvz](http://openvz.org),
-[zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc)
+[zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc),
@@ -67 +67 @@ Docker builds on top of these low-level primitives to offer developers a
-portable format and runtime environment that solves all 4 problems.
+portable format and runtime environment that solves all four problems.
@@ -70 +70 @@ layers), they have basically zero memory and cpu overhead, they are
-completely portable and are designed from the ground up with an
+completely portable, and are designed from the ground up with an
@@ -73 +73 @@ application-centric design.
-The best part: because Docker operates at the OS level, it can still be
+Perhaps best of all, because Docker operates at the OS level, it can still be
@@ -78,2 +78,2 @@ run inside a VM!
-Docker does not require that you buy into a particular programming
-language, framework, packaging system or configuration language.
+Docker does not require you to buy into a particular programming
+language, framework, packaging system, or configuration language.
@@ -115,3 +115,3 @@ This is usually difficult for several reasons:
-Docker solves dependency hell by giving the developer a simple way to
-express *all* their application's dependencies in one place, and
-streamline the process of assembling them. If this makes you think of
+Docker solves the problem of dependency hell by giving the developer a simple
+way to express *all* their application's dependencies in one place, while
+streamlining the process of assembling them. If this makes you think of
@@ -183,2 +183,2 @@ Contributing to Docker
-Want to hack on Docker? Awesome! There are instructions to get you
-started [here](CONTRIBUTING.md). If you'd like to contribute to the
+Want to hack on Docker? Awesome! We have [instructions to help you get
+started](CONTRIBUTING.md). If you'd like to contribute to the
@@ -188 +188 @@ These instructions are probably not perfect, please let us know if anything
-feels wrong or incomplete.
+feels wrong or incomplete. Better yet, submit a PR and improve them yourself.
@@ -197 +197 @@ They are updated with each commit merged into the master branch.
-please see the Notice document.*
+please see the "NOTICE" document in this repo.*
@@ -215 +214,0 @@ Other Docker Related Projects
-
@@ -217,2 +216,5 @@ There are a number of projects under development that are based on Docker's
-core technology. These projects expand the tooling built around the
-Docker platform to broaden its application and utility.
+core technology. These projects seek to expand the tooling built around the
+Docker platform to broaden its application and utility. 
+
+If you know of another project underway that should be listed here, please help
+us keep this list up-to-date by submitting a PR.
diff --git a/README.md b/README.md
index 710e967d0e..9f932e1042 100644
--- a/README.md
+++ b/README.md
@@ -216,3 +216,3 @@ Other Docker Related Projects
-Leveraging Docker as the core technology for managing Linux containers on a 
-single host, the following projects are also under development to provide a 
-more comprehensive set of tooling to help round out the Docker platform:
+There are a number of projects under development that are based on Docker's
+core technology. These projects expand the tooling built around the
+Docker platform to broaden its application and utility.
@@ -226 +226 @@ system
-* [Docker Compose](https://github.com/docker/docker/issues/9694): 
+* [Docker Compose, aka Fig](https://github.com/docker/fig): 
diff --git a/README.md b/README.md
index ed47e2e73d..710e967d0e 100644
--- a/README.md
+++ b/README.md
@@ -212,0 +213,16 @@ license text.
+Other Docker Related Projects
+=============================
+
+Leveraging Docker as the core technology for managing Linux containers on a 
+single host, the following projects are also under development to provide a 
+more comprehensive set of tooling to help round out the Docker platform:
+
+* [Docker Registry](https://github.com/docker/docker-registry): Registry 
+server for Docker (hosting/delivering of repositories and images) 
+* [Docker Machine](https://github.com/docker/machine): Machine management 
+for a container-centric world 
+* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering 
+system 
+* [Docker Compose](https://github.com/docker/docker/issues/9694): 
+Multi-container application management
+
diff --git a/README.md b/README.md
index 153bbbf4be..ed47e2e73d 100644
--- a/README.md
+++ b/README.md
@@ -181 +181 @@ Contributing to Docker
-[![Build Status](https://ci.dockerproject.com/github.com/docker/docker/status.svg?branch=master)](https://ci.dockerproject.com/github.com/docker/docker)
+[![Jenkins Build Status](https://jenkins.dockerproject.com/job/Docker%20Master/badge/icon)](https://jenkins.dockerproject.com/job/Docker%20Master/)
@@ -213,16 +212,0 @@ license text.
-Other Docker Related Projects
-=============================
-
-Leveraging Docker as the core technology for managing Linux containers on a 
-single host, the following projects are also under development to provide a 
-more comprehensive set of tooling to help round out the Docker platform:
-
-* [Docker Registry](https://github.com/docker/docker-registry): Registry 
-server for Docker (hosting/delivering of repositories and images) 
-* [Docker Machine](https://github.com/docker/machine): Machine management 
-for a container-centric world 
-* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering 
-system 
-* [Docker Compose](https://github.com/docker/docker/issues/9694): 
-Multi-container application management
-
diff --git a/README.md b/README.md
index d2991dbe9b..153bbbf4be 100644
--- a/README.md
+++ b/README.md
@@ -189,0 +190,4 @@ feels wrong or incomplete.
+Want to run Docker from a master build? You can download 
+master builds at [master.dockerproject.com](https://master.dockerproject.com). 
+They are updated with each commit merged into the master branch.
+
diff --git a/README.md b/README.md
index 4cda720700..d2991dbe9b 100644
--- a/README.md
+++ b/README.md
@@ -190,4 +189,0 @@ feels wrong or incomplete.
-Want to run Docker from a master build? You can download 
-master builds at [master.dockerproject.com](https://master.dockerproject.com). 
-They are updated with each commit merged into the master branch.
-
@@ -212,0 +209,16 @@ license text.
+Other Docker Related Projects
+=============================
+
+Leveraging Docker as the core technology for managing Linux containers on a 
+single host, the following projects are also under development to provide a 
+more comprehensive set of tooling to help round out the Docker platform:
+
+* [Docker Registry](https://github.com/docker/docker-registry): Registry 
+server for Docker (hosting/delivering of repositories and images) 
+* [Docker Machine](https://github.com/docker/machine): Machine management 
+for a container-centric world 
+* [Docker Swarm](https://github.com/docker/swarm): A Docker-native clustering 
+system 
+* [Docker Compose](https://github.com/docker/docker/issues/9694): 
+Multi-container application management
+
diff --git a/README.md b/README.md
index 9b198f41c6..4cda720700 100644
--- a/README.md
+++ b/README.md
@@ -190 +190 @@ feels wrong or incomplete.
-Want to run Docker from a master build? You can can download 
+Want to run Docker from a master build? You can download 
diff --git a/README.md b/README.md
index c2273eb656..9b198f41c6 100644
--- a/README.md
+++ b/README.md
@@ -189,0 +190,4 @@ feels wrong or incomplete.
+Want to run Docker from a master build? You can can download 
+master builds at [master.dockerproject.com](https://master.dockerproject.com). 
+They are updated with each commit merged into the master branch.
+
diff --git a/README.md b/README.md
index fc41e409df..c2273eb656 100644
--- a/README.md
+++ b/README.md
@@ -205 +205,3 @@ Licensing
-Docker is licensed under the Apache License, Version 2.0. See LICENSE for full license text.
+Docker is licensed under the Apache License, Version 2.0. See
+[LICENSE](https://github.com/docker/docker/blob/master/LICENSE) for the full
+license text.
diff --git a/README.md b/README.md
index 7aa7795464..fc41e409df 100644
--- a/README.md
+++ b/README.md
@@ -187 +187,2 @@ documentation, please take a look at this [README.md](https://github.com/docker/
-These instructions are probably not perfect, please let us know if anything feels wrong or incomplete.
+These instructions are probably not perfect, please let us know if anything
+feels wrong or incomplete.
diff --git a/README.md b/README.md
index 2d143a6d6e..7aa7795464 100644
--- a/README.md
+++ b/README.md
@@ -184 +184,2 @@ Want to hack on Docker? Awesome! There are instructions to get you
-started [here](CONTRIBUTING.md).
+started [here](CONTRIBUTING.md). If you'd like to contribute to the
+documentation, please take a look at this [README.md](https://github.com/docker/docker/blob/master/docs/README.md).
@@ -186,2 +187 @@ started [here](CONTRIBUTING.md).
-They are probably not perfect, please let us know if anything feels
-wrong or incomplete.
+These instructions are probably not perfect, please let us know if anything feels wrong or incomplete.
diff --git a/README.md b/README.md
index 857cd3c70a..2d143a6d6e 100644
--- a/README.md
+++ b/README.md
@@ -181 +181 @@ Contributing to Docker
-[![Travis](https://travis-ci.org/docker/docker.svg?branch=master)](https://travis-ci.org/docker/docker)
+[![Build Status](https://ci.dockerproject.com/github.com/docker/docker/status.svg?branch=master)](https://ci.dockerproject.com/github.com/docker/docker)
diff --git a/README.md b/README.md
index 46acc5ab10..857cd3c70a 100644
--- a/README.md
+++ b/README.md
@@ -179,0 +180,3 @@ Contributing to Docker
+[![GoDoc](https://godoc.org/github.com/docker/docker?status.png)](https://godoc.org/github.com/docker/docker)
+[![Travis](https://travis-ci.org/docker/docker.svg?branch=master)](https://travis-ci.org/docker/docker)
+
diff --git a/README.md b/README.md
index 08d839c3cc..46acc5ab10 100644
--- a/README.md
+++ b/README.md
@@ -134,2 +134 @@ FROM ubuntu:12.04
-RUN apt-get update
-RUN apt-get install -q -y python python-pip curl
+RUN apt-get update && apt-get install -y python python-pip curl
diff --git a/README.md b/README.md
index 3c378de6f4..08d839c3cc 100644
--- a/README.md
+++ b/README.md
@@ -136 +136 @@ RUN apt-get install -q -y python python-pip curl
-RUN curl -L https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv
+RUN curl -sSL https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv
diff --git a/README.md b/README.md
index 608e638eab..3c378de6f4 100644
--- a/README.md
+++ b/README.md
@@ -163 +163 @@ You can find a [list of real-world
-examples](http://docs.docker.io/en/latest/examples/) in the
+examples](http://docs.docker.com/examples/) in the
diff --git a/README.md b/README.md
index 6fc0f1a4b6..608e638eab 100644
--- a/README.md
+++ b/README.md
@@ -25 +25,3 @@ applications and databases.
-Security is very important to us.  If you have any issue regarding security, please disclose the information responsibly by sending an email to security@docker.com and not by creating a github issue.
+Security is very important to us.  If you have any issue regarding security, 
+please disclose the information responsibly by sending an email to 
+security@docker.com and not by creating a github issue.
diff --git a/README.md b/README.md
index 34c56e60ac..6fc0f1a4b6 100644
--- a/README.md
+++ b/README.md
@@ -22,0 +23,4 @@ applications and databases.
+## Security Disclosure
+
+Security is very important to us.  If you have any issue regarding security, please disclose the information responsibly by sending an email to security@docker.com and not by creating a github issue.
+
diff --git a/README.md b/README.md
index 9344dc1d2e..34c56e60ac 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/theme/mkdocs/img/logo_compressed.png "Docker")
+![Docker L](docs/theme/mkdocs/images/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index b9ad766525..9344dc1d2e 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/theme/mkdocs/images/docker-logo-compressed.png "Docker")
+![Docker L](docs/theme/mkdocs/img/logo_compressed.png "Docker")
@@ -145,2 +145,2 @@ Linux systems, or as a VM on Windows, Mac and other systems.
-We also offer an interactive tutorial for quickly learning the basics of
-using Docker.
+We also offer an [interactive tutorial](http://www.docker.com/tryit/)
+for quickly learning the basics of using Docker.
@@ -148,2 +148 @@ using Docker.
-For up-to-date install instructions and online tutorials, see the
-[Getting Started page](http://www.docker.io/gettingstarted/).
+For up-to-date install instructions, see the [Docs](http://docs.docker.com).
diff --git a/README.md b/README.md
index c965efafe8..b9ad766525 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/theme/mkdocs/img/logo_compressed.png "Docker")
+![Docker L](docs/theme/mkdocs/images/docker-logo-compressed.png "Docker")
diff --git a/README.md b/README.md
index fae1bb916b..c965efafe8 100644
--- a/README.md
+++ b/README.md
@@ -192,0 +193,6 @@ For more information, please see http://www.bis.doc.gov
+
+
+Licensing
+=========
+Docker is licensed under the Apache License, Version 2.0. See LICENSE for full license text.
+
diff --git a/README.md b/README.md
index 1922be5d8a..fae1bb916b 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ applications and databases.
-![Docker L](docs/theme/docker/static/img/dockerlogo-h.png "Docker")
+![Docker L](docs/theme/mkdocs/img/logo_compressed.png "Docker")
diff --git a/README.md b/README.md
index b6b77d6e61..1922be5d8a 100644
--- a/README.md
+++ b/README.md
@@ -7,7 +7,7 @@ as a lightweight container
-Docker containers are both *hardware-agnostic* and
-*platform-agnostic*. This means that they can run anywhere, from your
-laptop to the largest EC2 compute instance and everything in between -
-and they don't require that you use a particular language, framework
-or packaging system. That makes them great building blocks for
-deploying and scaling web apps, databases and backend services without
-depending on a particular stack or provider.
+Docker containers are both *hardware-agnostic* and *platform-agnostic*.
+This means that they can run anywhere, from your laptop to the largest
+EC2 compute instance and everything in between - and they don't require
+that you use a particular language, framework or packaging system. That
+makes them great building blocks for deploying and scaling web apps,
+databases and backend services without depending on a particular stack
+or provider.
@@ -16,4 +16,4 @@ Docker is an open-source implementation of the deployment engine which
-powers [dotCloud](http://dotcloud.com), a popular
-Platform-as-a-Service.  It benefits directly from the experience
-accumulated over several years of large-scale operation and support of
-hundreds of thousands of applications and databases.
+powers [dotCloud](http://dotcloud.com), a popular Platform-as-a-Service.
+It benefits directly from the experience accumulated over several years
+of large-scale operation and support of hundreds of thousands of
+applications and databases.
@@ -27,4 +27,4 @@ execution is to use virtual machines, or VMs. Typical VM formats are
-VMWare's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In
-theory these formats should allow every developer to automatically
-package their application into a "machine" for easy distribution and
-deployment. In practice, that almost never happens, for a few reasons:
+VMWare's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In theory
+these formats should allow every developer to automatically package
+their application into a "machine" for easy distribution and deployment.
+In practice, that almost never happens, for a few reasons:
@@ -50,4 +50,4 @@ By contrast, Docker relies on a different sandboxing method known as
-*containerization*. Unlike traditional virtualization,
-containerization takes place at the kernel level. Most modern
-operating system kernels now support the primitives necessary for
-containerization, including Linux with [openvz](http://openvz.org),
+*containerization*. Unlike traditional virtualization, containerization
+takes place at the kernel level. Most modern operating system kernels
+now support the primitives necessary for containerization, including
+Linux with [openvz](http://openvz.org),
@@ -60,6 +60,6 @@ and FreeBSD with
-Docker builds on top of these low-level primitives to offer developers
-a portable format and runtime environment that solves all 4
-problems. Docker containers are small (and their transfer can be
-optimized with layers), they have basically zero memory and cpu
-overhead, they are completely portable and are designed from the
-ground up with an application-centric design.
+Docker builds on top of these low-level primitives to offer developers a
+portable format and runtime environment that solves all 4 problems.
+Docker containers are small (and their transfer can be optimized with
+layers), they have basically zero memory and cpu overhead, they are
+completely portable and are designed from the ground up with an
+application-centric design.
@@ -67,2 +67,2 @@ ground up with an application-centric design.
-The best part: because ``docker`` operates at the OS level, it can
-still be run inside a VM!
+The best part: because Docker operates at the OS level, it can still be
+run inside a VM!
@@ -75,4 +75,3 @@ language, framework, packaging system or configuration language.
-Is your application a Unix process? Does it use files, tcp
-connections, environment variables, standard Unix streams and
-command-line arguments as inputs and outputs? Then ``docker`` can run
-it.
+Is your application a Unix process? Does it use files, tcp connections,
+environment variables, standard Unix streams and command-line arguments
+as inputs and outputs? Then Docker can run it.
@@ -81,2 +80 @@ Can your application's build be expressed as a sequence of such
-commands? Then ``docker`` can build it.
-
+commands? Then Docker can build it.
@@ -129,8 +127,5 @@ Here's a typical Docker build process:
-from ubuntu:12.10
-run apt-get update
-run DEBIAN_FRONTEND=noninteractive apt-get install -q -y python
-run DEBIAN_FRONTEND=noninteractive apt-get install -q -y python-pip
-run pip install django
-run DEBIAN_FRONTEND=noninteractive apt-get install -q -y curl
-run curl -L https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv
-run cd helloflask-master && pip install -r requirements.txt
+FROM ubuntu:12.04
+RUN apt-get update
+RUN apt-get install -q -y python python-pip curl
+RUN curl -L https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv
+RUN cd helloflask-master && pip install -r requirements.txt
@@ -146,5 +141,3 @@ Getting started
-Docker can be installed on your local machine as well as servers - both bare metal and virtualized.
-It is available as a binary on most modern Linux systems, or as a VM on Windows, Mac and other systems.
-
-We also offer an interactive tutorial for quickly learning the basics of using Docker.
-
+Docker can be installed on your local machine as well as servers - both
+bare metal and virtualized.  It is available as a binary on most modern
+Linux systems, or as a VM on Windows, Mac and other systems.
@@ -152 +145,2 @@ We also offer an interactive tutorial for quickly learning the basics of using D
-For up-to-date install instructions and online tutorials, see the [Getting Started page](http://www.docker.io/gettingstarted/).
+We also offer an interactive tutorial for quickly learning the basics of
+using Docker.
@@ -153,0 +148,2 @@ For up-to-date install instructions and online tutorials, see the [Getting Start
+For up-to-date install instructions and online tutorials, see the
+[Getting Started page](http://www.docker.io/gettingstarted/).
@@ -158,2 +154,2 @@ Usage examples
-Docker can be used to run short-lived commands, long-running daemons (app servers, databases etc.),
-interactive shell sessions, etc.
+Docker can be used to run short-lived commands, long-running daemons
+(app servers, databases etc.), interactive shell sessions, etc.
@@ -161 +157,3 @@ interactive shell sessions, etc.
-You can find a [list of real-world examples](http://docs.docker.io/en/latest/examples/) in the documentation.
+You can find a [list of real-world
+examples](http://docs.docker.io/en/latest/examples/) in the
+documentation.
@@ -173,7 +171 @@ Under the hood, Docker is built on the following components:
-* [AUFS](http://aufs.sourceforge.net/aufs.html), a powerful union
-  filesystem with copy-on-write capabilities;
-* The [Go](http://golang.org) programming language;
-* [lxc](http://lxc.sourceforge.net/), a set of convenience scripts to
-  simplify the creation of Linux containers.
-
-
+* The [Go](http://golang.org) programming language.
@@ -190 +181,0 @@ wrong or incomplete.
-
diff --git a/README.md b/README.md
index 12ffc2e8ec..b6b77d6e61 100644
--- a/README.md
+++ b/README.md
@@ -25 +25 @@ hundreds of thousands of applications and databases.
-A common method for distributing applications and sandbox their
+A common method for distributing applications and sandboxing their
diff --git a/README.md b/README.md
index 0d0b1cd888..12ffc2e8ec 100644
--- a/README.md
+++ b/README.md
@@ -196,5 +196,4 @@ please see the Notice document.*
-Transfers of Docker shall be in accordance with applicable export controls 
-of any country and all other applicable legal requirements. Without limiting the 
-foregoing, Docker shall not be distributed or downloaded to any individual or 
-location if such distribution or download would violate the applicable US 
-government export regulations. 
+Use and transfer of Docker may be subject to certain restrictions by the
+United States and other governments.  
+It is your responsibility to ensure that your use and/or transfer does not
+violate applicable laws. 
diff --git a/README.md b/README.md
index 10291c2cd4..0d0b1cd888 100644
--- a/README.md
+++ b/README.md
@@ -196,6 +196,5 @@ please see the Notice document.*
-Transfers of Docker shall be in accordance with applicable export
-controls of any country and all other applicable legal requirements.
-Docker shall not be distributed or downloaded to or in Cuba, Iran,
-North Korea, Sudan or Syria and shall not be distributed or downloaded
-to any person on the Denied Persons List administered by the U.S.
-Department of Commerce.
+Transfers of Docker shall be in accordance with applicable export controls 
+of any country and all other applicable legal requirements. Without limiting the 
+foregoing, Docker shall not be distributed or downloaded to any individual or 
+location if such distribution or download would violate the applicable US 
+government export regulations. 
@@ -202,0 +202 @@ Department of Commerce.
+For more information, please see http://www.bis.doc.gov
diff --git a/README.md b/README.md
index a8b20b5417..10291c2cd4 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ hundreds of thousands of applications and databases.
-![Docker L](docs/sources/static_files/dockerlogo-h.png "Docker")
+![Docker L](docs/theme/docker/static/img/dockerlogo-h.png "Docker")
diff --git a/README.md b/README.md
index a36bfba73f..a8b20b5417 100644
--- a/README.md
+++ b/README.md
@@ -192,0 +193,3 @@ wrong or incomplete.
+*Brought to you courtesy of our legal counsel. For more context,
+please see the Notice document.*
+
diff --git a/README.md b/README.md
index 19e7013441..a36bfba73f 100644
--- a/README.md
+++ b/README.md
@@ -191,136 +190,0 @@ wrong or incomplete.
-Note
-----
-
-We also keep the documentation in this repository. The website
-documentation is generated using Sphinx using these sources.  Please
-find it under docs/sources/ and read more about it
-https://github.com/dotcloud/docker/tree/master/docs/README.md
-
-Please feel free to fix / update the documentation and send us pull
-requests. More tutorials are also welcome.
-
-
-Setting up a dev environment
-----------------------------
-
-Instructions that have been verified to work on Ubuntu 12.10,
-
-```bash
-sudo apt-get -y install lxc curl xz-utils golang git mercurial
-
-export GOPATH=~/go/
-export PATH=$GOPATH/bin:$PATH
-
-mkdir -p $GOPATH/src/github.com/dotcloud
-cd $GOPATH/src/github.com/dotcloud
-git clone https://github.com/dotcloud/docker.git
-cd docker
-
-go get -v github.com/dotcloud/docker/...
-go install -v github.com/dotcloud/docker/...
-```
-
-Then run the docker daemon,
-
-```bash
-sudo $GOPATH/bin/docker -d
-```
-
-Run the `go install` command (above) to recompile docker.
-
-
-What is a Standard Container?
-=============================
-
-Docker defines a unit of software delivery called a Standard
-Container. The goal of a Standard Container is to encapsulate a
-software component and all its dependencies in a format that is
-self-describing and portable, so that any compliant runtime can run it
-without extra dependencies, regardless of the underlying machine and
-the contents of the container.
-
-The spec for Standard Containers is currently a work in progress, but
-it is very straightforward. It mostly defines 1) an image format, 2) a
-set of standard operations, and 3) an execution environment.
-
-A great analogy for this is the shipping container. Just like how
-Standard Containers are a fundamental unit of software delivery,
-shipping containers are a fundamental unit of physical delivery.
-
-### 1. STANDARD OPERATIONS
-
-Just like shipping containers, Standard Containers define a set of
-STANDARD OPERATIONS. Shipping containers can be lifted, stacked,
-locked, loaded, unloaded and labelled. Similarly, Standard Containers
-can be started, stopped, copied, snapshotted, downloaded, uploaded and
-tagged.
-
-
-### 2. CONTENT-AGNOSTIC
-
-Just like shipping containers, Standard Containers are
-CONTENT-AGNOSTIC: all standard operations have the same effect
-regardless of the contents. A shipping container will be stacked in
-exactly the same way whether it contains Vietnamese powder coffee or
-spare Maserati parts. Similarly, Standard Containers are started or
-uploaded in the same way whether they contain a postgres database, a
-php application with its dependencies and application server, or Java
-build artifacts.
-
-
-### 3. INFRASTRUCTURE-AGNOSTIC
-
-Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be
-transported to thousands of facilities around the world, and
-manipulated by a wide variety of equipment. A shipping container can
-be packed in a factory in Ukraine, transported by truck to the nearest
-routing center, stacked onto a train, loaded into a German boat by an
-Australian-built crane, stored in a warehouse at a US facility,
-etc. Similarly, a standard container can be bundled on my laptop,
-uploaded to S3, downloaded, run and snapshotted by a build server at
-Equinix in Virginia, uploaded to 10 staging servers in a home-made
-Openstack cluster, then sent to 30 production instances across 3 EC2
-regions.
-
-
-### 4. DESIGNED FOR AUTOMATION
-
-Because they offer the same standard operations regardless of content
-and infrastructure, Standard Containers, just like their physical
-counterparts, are extremely well-suited for automation. In fact, you
-could say automation is their secret weapon.
-
-Many things that once required time-consuming and error-prone human
-effort can now be programmed. Before shipping containers, a bag of
-powder coffee was hauled, dragged, dropped, rolled and stacked by 10
-different people in 10 different locations by the time it reached its
-destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The
-process was slow, inefficient and cost a fortune - and was entirely
-different depending on the facility and the type of goods.
-
-Similarly, before Standard Containers, by the time a software
-component ran in production, it had been individually built,
-configured, bundled, documented, patched, vendored, templated, tweaked
-and instrumented by 10 different people on 10 different
-computers. Builds failed, libraries conflicted, mirrors crashed,
-post-it notes were lost, logs were misplaced, cluster updates were
-half-broken. The process was slow, inefficient and cost a fortune -
-and was entirely different depending on the language and
-infrastructure provider.
-
-
-### 5. INDUSTRIAL-GRADE DELIVERY
-
-There are 17 million shipping containers in existence, packed with
-every physical good imaginable. Every single one of them can be loaded
-onto the same boats, by the same cranes, in the same facilities, and
-sent anywhere in the World with incredible efficiency. It is
-embarrassing to think that a 30 ton shipment of coffee can safely
-travel half-way across the World in *less time* than it takes a
-software team to deliver its code from one datacenter to another
-sitting 10 miles away.
-
-With Standard Containers we can put an end to that embarrassment, by
-making INDUSTRIAL-GRADE DELIVERY of software a reality.
-
-
diff --git a/README.md b/README.md
index 7b19f95ee9..19e7013441 100644
--- a/README.md
+++ b/README.md
@@ -143,2 +143,2 @@ as they can be built by running a Unix command in a container.
-Install instructions
-==================
+Getting started
+===============
@@ -149 +149 @@ It is available as a binary on most modern Linux systems, or as a VM on Windows,
-For the most up-to-date install instructions, see the [install page on the documentation](http://docs.docker.io/en/latest/installation/).
+We also offer an interactive tutorial for quickly learning the basics of using Docker.
@@ -152,22 +152 @@ For the most up-to-date install instructions, see the [install page on the docum
-Usage examples
-==============
-
-First run the ``docker`` daemon
--------------------------------
-
-All the examples assume your machine is running the ``docker``
-daemon. To run the ``docker`` daemon in the background, simply type:
-
-```bash
-# On a production system you want this running in an init script
-sudo docker -d &
-```
-
-Now you can run ``docker`` in client mode: all commands will be
-forwarded to the ``docker`` daemon, so the client can run from any
-account.
-
-```bash
-# Now you can run docker commands from any account.
-docker help
-```
+For up-to-date install instructions and online tutorials, see the [Getting Started page](http://www.docker.io/gettingstarted/).
@@ -176,62 +155,2 @@ docker help
-Throwaway shell in a base Ubuntu image
---------------------------------------
-
-```bash
-docker pull ubuntu:12.10
-
-# Run an interactive shell, allocate a tty, attach stdin and stdout
-# To detach the tty without exiting the shell, use the escape sequence Ctrl-p + Ctrl-q
-docker run -i -t ubuntu:12.10 /bin/bash
-```
-
-Starting a long-running worker process
---------------------------------------
-
-```bash
-# Start a very useful long-running process
-JOB=$(docker run -d ubuntu /bin/sh -c "while true; do echo Hello world; sleep 1; done")
-
-# Collect the output of the job so far
-docker logs $JOB
-
-# Kill the job
-docker kill $JOB
-```
-
-Running an irc bouncer
-----------------------
-
-```bash
-BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc zncrun $USER $PASSWORD)
-echo "Configure your irc client to connect to port $(docker port $BOUNCER_ID 6667) of this machine"
-```
-
-Running Redis
--------------
-
-```bash
-REDIS_ID=$(docker run -d -p 6379 shykes/redis redis-server)
-echo "Configure your redis client to connect to port $(docker port $REDIS_ID 6379) of this machine"
-```
-
-Share your own image!
----------------------
-
-```bash
-CONTAINER=$(docker run -d ubuntu:12.10 apt-get install -y curl)
-docker commit -m "Installed curl" $CONTAINER $USER/betterbase
-docker push $USER/betterbase
-```
-
-A list of publicly available images is [available
-here](https://github.com/dotcloud/docker/wiki/Public-docker-images).
-
-Expose a service on a TCP port
-------------------------------
-
-```bash
-# Expose port 4444 of this container, and tell netcat to listen on it
-JOB=$(docker run -d -p 4444 base /bin/nc -l -p 4444)
-
-# Which public port is NATed to my container?
-PORT=$(docker port $JOB 4444)
+Usage examples
+==============
@@ -239,5 +158,2 @@ PORT=$(docker port $JOB 4444)
-# Connect to the public port via the host's public address
-# Please note that because of how routing works connecting to localhost or 127.0.0.1 $PORT will not work.
-# Replace *eth0* according to your local interface name.
-IP=$(ip -o -4 addr list eth0 | perl -n -e 'if (m{inet\s([\d\.]+)\/\d+\s}xms) { print $1 }')
-echo hello world | nc $IP $PORT
+Docker can be used to run short-lived commands, long-running daemons (app servers, databases etc.),
+interactive shell sessions, etc.
@@ -245,3 +161 @@ echo hello world | nc $IP $PORT
-# Verify that the network connection worked
-echo "Daemon received: $(docker logs $JOB)"
-```
+You can find a [list of real-world examples](http://docs.docker.io/en/latest/examples/) in the documentation.
diff --git a/README.md b/README.md
index cbe5dfee2a..7b19f95ee9 100644
--- a/README.md
+++ b/README.md
@@ -4,2 +4,2 @@ Docker: the Linux container engine
-Docker is an open-source engine which automates the deployment of
-applications as highly portable, self-sufficient containers.
+Docker is an open source project to pack, ship and run any application
+as a lightweight container
diff --git a/README.md b/README.md
index 336dd94302..cbe5dfee2a 100644
--- a/README.md
+++ b/README.md
@@ -146,2 +146,2 @@ Install instructions
-Quick install on Ubuntu 12.04 and 12.10
----------------------------------------
+Docker can be installed on your local machine as well as servers - both bare metal and virtualized.
+It is available as a binary on most modern Linux systems, or as a VM on Windows, Mac and other systems.
@@ -149,10 +149 @@ Quick install on Ubuntu 12.04 and 12.10
-```bash
-curl https://get.docker.io | sudo sh -x
-```
-
-Binary installs
-----------------
-
-Docker supports the following binary installation methods.  Note that
-some methods are community contributions and not yet officially
-supported.
+For the most up-to-date install instructions, see the [install page on the documentation](http://docs.docker.io/en/latest/installation/).
@@ -160,5 +150,0 @@ supported.
-* [Ubuntu 12.04 and 12.10 (officially supported)](http://docs.docker.io/en/latest/installation/ubuntulinux/)
-* [Arch Linux](http://docs.docker.io/en/latest/installation/archlinux/)
-* [Mac OS X (with Vagrant)](http://docs.docker.io/en/latest/installation/vagrant/)
-* [Windows (with Vagrant)](http://docs.docker.io/en/latest/installation/windows/)
-* [Amazon EC2 (with Vagrant)](http://docs.docker.io/en/latest/installation/amazon/)
diff --git a/README.md b/README.md
index accb7d2e9b..336dd94302 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ hundreds of thousands of applications and databases.
-![Docker L](docs/sources/concepts/images/dockerlogo-h.png "Docker")
+![Docker L](docs/sources/static_files/dockerlogo-h.png "Docker")
diff --git a/README.md b/README.md
index ddf3f4d805..accb7d2e9b 100644
--- a/README.md
+++ b/README.md
@@ -309 +309 @@ Instructions that have been verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc curl xz-utils golang git
+sudo apt-get -y install lxc curl xz-utils golang git mercurial
diff --git a/README.md b/README.md
index 671c24109b..ddf3f4d805 100644
--- a/README.md
+++ b/README.md
@@ -166,23 +165,0 @@ supported.
-Installing from source
-----------------------
-
-1. Install Dependencies
-    * [Go language 1.1.x](http://golang.org/doc/install)
-    * [git](http://git-scm.com)
-    * [lxc](http://lxc.sourceforge.net)
-    * [aufs-tools](http://aufs.sourceforge.net)
-
-2. Checkout the source code
-
-   ```bash
-   git clone http://github.com/dotcloud/docker
-   ```
-
-3. Build the ``docker`` binary
-
-   ```bash
-   cd docker
-   make VERBOSE=1
-   sudo cp ./bin/docker /usr/local/bin/docker
-   ```
-
@@ -332 +309 @@ Instructions that have been verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc curl xz-utils golang git mercurial
+sudo apt-get -y install lxc curl xz-utils golang git
diff --git a/README.md b/README.md
index 2b3628375a..671c24109b 100644
--- a/README.md
+++ b/README.md
@@ -332 +332 @@ Instructions that have been verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc curl xz-utils golang git
+sudo apt-get -y install lxc curl xz-utils golang git mercurial
diff --git a/README.md b/README.md
index ffe5f0dca7..2b3628375a 100644
--- a/README.md
+++ b/README.md
@@ -169,2 +169,6 @@ Installing from source
-1. Make sure you have a [Go language](http://golang.org/doc/install)
-compiler >= 1.1 and [git](http://git-scm.com) installed.
+1. Install Dependencies
+    * [Go language 1.1.x](http://golang.org/doc/install)
+    * [git](http://git-scm.com)
+    * [lxc](http://lxc.sourceforge.net)
+    * [aufs-tools](http://aufs.sourceforge.net)
+
diff --git a/README.md b/README.md
index 89767a9cce..ffe5f0dca7 100644
--- a/README.md
+++ b/README.md
@@ -169,6 +169,2 @@ Installing from source
-1. Install Dependencies
-    * [Go language 1.1.x](http://golang.org/doc/install)
-    * [git](http://git-scm.com)
-    * [lxc](http://lxc.sourceforge.net)
-    * [aufs-tools](http://aufs.sourceforge.net)
-
+1. Make sure you have a [Go language](http://golang.org/doc/install)
+compiler >= 1.1 and [git](http://git-scm.com) installed.
@@ -308,2 +304 @@ Want to hack on Docker? Awesome! There are instructions to get you
-started on the website:
-http://docs.docker.io/en/latest/contributing/contributing/
+started [here](CONTRIBUTING.md).
diff --git a/README.md b/README.md
index ed2709158f..89767a9cce 100644
--- a/README.md
+++ b/README.md
@@ -169,2 +169,6 @@ Installing from source
-1. Make sure you have a [Go language](http://golang.org/doc/install)
-compiler >= 1.1 and [git](http://git-scm.com) installed.
+1. Install Dependencies
+    * [Go language 1.1.x](http://golang.org/doc/install)
+    * [git](http://git-scm.com)
+    * [lxc](http://lxc.sourceforge.net)
+    * [aufs-tools](http://aufs.sourceforge.net)
+
diff --git a/README.md b/README.md
index 5eee1a3db6..ed2709158f 100644
--- a/README.md
+++ b/README.md
@@ -150 +150 @@ Quick install on Ubuntu 12.04 and 12.10
-curl get.docker.io | sudo sh -x
+curl https://get.docker.io | sudo sh -x
diff --git a/README.md b/README.md
index 5e03b2993c..5eee1a3db6 100644
--- a/README.md
+++ b/README.md
@@ -447,45 +446,0 @@ making INDUSTRIAL-GRADE DELIVERY of software a reality.
-
-
-Standard Container Specification
---------------------------------
-
-(TODO)
-
-### Image format
-
-
-### Standard operations
-
-* Copy
-* Run
-* Stop
-* Wait
-* Commit
-* Attach standard streams
-* List filesystem changes
-* ...
-
-### Execution environment
-
-#### Root filesystem
-
-#### Environment variables
-
-#### Process arguments
-
-#### Networking
-
-#### Process namespacing
-
-#### Resource limits
-
-#### Process monitoring
-
-#### Logging
-
-#### Signals
-
-#### Pseudo-terminal allocation
-
-#### Security
-
diff --git a/README.md b/README.md
index 96da13feaf..5e03b2993c 100644
--- a/README.md
+++ b/README.md
@@ -170 +170 @@ Installing from source
-compiler and [git](http://git-scm.com) installed.
+compiler >= 1.1 and [git](http://git-scm.com) installed.
diff --git a/README.md b/README.md
index 823e48496a..96da13feaf 100644
--- a/README.md
+++ b/README.md
@@ -4 +4,2 @@ Docker: the Linux container engine
-Docker is an open-source engine which automates the deployment of applications as highly portable, self-sufficient containers.
+Docker is an open-source engine which automates the deployment of
+applications as highly portable, self-sufficient containers.
@@ -6,4 +7,7 @@ Docker is an open-source engine which automates the deployment of applications a
-Docker containers are both *hardware-agnostic* and *platform-agnostic*. This means that they can run anywhere, from your
-laptop to the largest EC2 compute instance and everything in between - and they don't require that you use a particular
-language, framework or packaging system. That makes them great building blocks for deploying and scaling web apps, databases
-and backend services without depending on a particular stack or provider.
+Docker containers are both *hardware-agnostic* and
+*platform-agnostic*. This means that they can run anywhere, from your
+laptop to the largest EC2 compute instance and everything in between -
+and they don't require that you use a particular language, framework
+or packaging system. That makes them great building blocks for
+deploying and scaling web apps, databases and backend services without
+depending on a particular stack or provider.
@@ -11,3 +15,5 @@ and backend services without depending on a particular stack or provider.
-Docker is an open-source implementation of the deployment engine which powers [dotCloud](http://dotcloud.com), a popular Platform-as-a-Service.
-It benefits directly from the experience accumulated over several years of large-scale operation and support of hundreds of thousands
-of applications and databases.
+Docker is an open-source implementation of the deployment engine which
+powers [dotCloud](http://dotcloud.com), a popular
+Platform-as-a-Service.  It benefits directly from the experience
+accumulated over several years of large-scale operation and support of
+hundreds of thousands of applications and databases.
@@ -15 +21 @@ of applications and databases.
-![Docker L](docs/sources/concepts/images/lego_docker.jpg "Docker")
+![Docker L](docs/sources/concepts/images/dockerlogo-h.png "Docker")
@@ -19,22 +25,44 @@ of applications and databases.
-A common method for distributing applications and sandbox their execution is to use virtual machines, or VMs. Typical VM formats
-are VMWare's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In theory these formats should allow every developer to
-automatically package their application into a "machine" for easy distribution and deployment. In practice, that almost never
-happens, for a few reasons:
-
-  * *Size*: VMs are very large which makes them impractical to store and transfer.
-  * *Performance*: running VMs consumes significant CPU and memory, which makes them impractical in many scenarios, for example local development of multi-tier applications, and
-    large-scale deployment of cpu and memory-intensive applications on large numbers of machines.
-  * *Portability*: competing VM environments don't play well with each other. Although conversion tools do exist, they are limited and add even more overhead.
-  * *Hardware-centric*: VMs were designed with machine operators in mind, not software developers. As a result, they offer very limited tooling for what developers need most:
-    building, testing and running their software. For example, VMs offer no facilities for application versioning, monitoring, configuration, logging or service discovery.
-
-By contrast, Docker relies on a different sandboxing method known as *containerization*. Unlike traditional virtualization,
-containerization takes place at the kernel level. Most modern operating system kernels now support the primitives necessary
-for containerization, including Linux with [openvz](http://openvz.org), [vserver](http://linux-vserver.org) and more recently [lxc](http://lxc.sourceforge.net),
-    Solaris with [zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc) and FreeBSD with [Jails](http://www.freebsd.org/doc/handbook/jails.html).
-
-Docker builds on top of these low-level primitives to offer developers a portable format and runtime environment that solves
-all 4 problems. Docker containers are small (and their transfer can be optimized with layers), they have basically zero memory and cpu overhead,
-they are completely portable and are designed from the ground up with an application-centric design.
-
-The best part: because docker operates at the OS level, it can still be run inside a VM!
+A common method for distributing applications and sandbox their
+execution is to use virtual machines, or VMs. Typical VM formats are
+VMWare's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In
+theory these formats should allow every developer to automatically
+package their application into a "machine" for easy distribution and
+deployment. In practice, that almost never happens, for a few reasons:
+
+  * *Size*: VMs are very large which makes them impractical to store
+     and transfer.
+  * *Performance*: running VMs consumes significant CPU and memory,
+    which makes them impractical in many scenarios, for example local
+    development of multi-tier applications, and large-scale deployment
+    of cpu and memory-intensive applications on large numbers of
+    machines.
+  * *Portability*: competing VM environments don't play well with each
+     other. Although conversion tools do exist, they are limited and
+     add even more overhead.
+  * *Hardware-centric*: VMs were designed with machine operators in
+    mind, not software developers. As a result, they offer very
+    limited tooling for what developers need most: building, testing
+    and running their software. For example, VMs offer no facilities
+    for application versioning, monitoring, configuration, logging or
+    service discovery.
+
+By contrast, Docker relies on a different sandboxing method known as
+*containerization*. Unlike traditional virtualization,
+containerization takes place at the kernel level. Most modern
+operating system kernels now support the primitives necessary for
+containerization, including Linux with [openvz](http://openvz.org),
+[vserver](http://linux-vserver.org) and more recently
+[lxc](http://lxc.sourceforge.net), Solaris with
+[zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc)
+and FreeBSD with
+[Jails](http://www.freebsd.org/doc/handbook/jails.html).
+
+Docker builds on top of these low-level primitives to offer developers
+a portable format and runtime environment that solves all 4
+problems. Docker containers are small (and their transfer can be
+optimized with layers), they have basically zero memory and cpu
+overhead, they are completely portable and are designed from the
+ground up with an application-centric design.
+
+The best part: because ``docker`` operates at the OS level, it can
+still be run inside a VM!
@@ -44 +72,2 @@ The best part: because docker operates at the OS level, it can still be run insi
-Docker does not require that you buy into a particular programming language, framework, packaging system or configuration language.
+Docker does not require that you buy into a particular programming
+language, framework, packaging system or configuration language.
@@ -46,2 +75,4 @@ Docker does not require that you buy into a particular programming language, fra
-Is your application a unix process? Does it use files, tcp connections, environment variables, standard unix streams and command-line
-arguments as inputs and outputs? Then docker can run it.
+Is your application a Unix process? Does it use files, tcp
+connections, environment variables, standard Unix streams and
+command-line arguments as inputs and outputs? Then ``docker`` can run
+it.
@@ -49 +80,2 @@ arguments as inputs and outputs? Then docker can run it.
-Can your application's build be expressed as a sequence of such commands? Then docker can build it.
+Can your application's build be expressed as a sequence of such
+commands? Then ``docker`` can build it.
@@ -54 +86,2 @@ Can your application's build be expressed as a sequence of such commands? Then d
-A common problem for developers is the difficulty of managing all their application's dependencies in a simple and automated way.
+A common problem for developers is the difficulty of managing all
+their application's dependencies in a simple and automated way.
@@ -58,6 +91,13 @@ This is usually difficult for several reasons:
-  * *Cross-platform dependencies*. Modern applications often depend on a combination of system libraries and binaries, language-specific packages, framework-specific modules,
-    internal components developed for another project, etc. These dependencies live in different "worlds" and require different tools - these tools typically don't work
-    well with each other, requiring awkward custom integrations.
-
-  * Conflicting dependencies. Different applications may depend on different versions of the same dependency. Packaging tools handle these situations with various degrees of ease -
-    but they all handle them in different and incompatible ways, which again forces the developer to do extra work.
+  * *Cross-platform dependencies*. Modern applications often depend on
+    a combination of system libraries and binaries, language-specific
+    packages, framework-specific modules, internal components
+    developed for another project, etc. These dependencies live in
+    different "worlds" and require different tools - these tools
+    typically don't work well with each other, requiring awkward
+    custom integrations.
+
+  * Conflicting dependencies. Different applications may depend on
+    different versions of the same dependency. Packaging tools handle
+    these situations with various degrees of ease - but they all
+    handle them in different and incompatible ways, which again forces
+    the developer to do extra work.
@@ -65,2 +105,4 @@ This is usually difficult for several reasons:
-  * Custom dependencies. A developer may need to prepare a custom version of their application's dependency. Some packaging systems can handle custom versions of a dependency,
-    others can't - and all of them handle it differently.
+  * Custom dependencies. A developer may need to prepare a custom
+    version of their application's dependency. Some packaging systems
+    can handle custom versions of a dependency, others can't - and all
+    of them handle it differently.
@@ -69,3 +111,7 @@ This is usually difficult for several reasons:
-Docker solves dependency hell by giving the developer a simple way to express *all* their application's dependencies in one place,
-and streamline the process of assembling them. If this makes you think of [XKCD 927](http://xkcd.com/927/), don't worry. Docker doesn't
-*replace* your favorite packaging systems. It simply orchestrates their use in a simple and repeatable way. How does it do that? With layers.
+Docker solves dependency hell by giving the developer a simple way to
+express *all* their application's dependencies in one place, and
+streamline the process of assembling them. If this makes you think of
+[XKCD 927](http://xkcd.com/927/), don't worry. Docker doesn't
+*replace* your favorite packaging systems. It simply orchestrates
+their use in a simple and repeatable way. How does it do that? With
+layers.
@@ -73,3 +119,6 @@ and streamline the process of assembling them. If this makes you think of [XKCD
-Docker defines a build as running a sequence of unix commands, one after the other, in the same container. Build commands modify the contents of the container
-(usually by installing new files on the filesystem), the next command modifies it some more, etc. Since each build command inherits the result of the previous
-commands, the *order* in which the commands are executed expresses *dependencies*.
+Docker defines a build as running a sequence of Unix commands, one
+after the other, in the same container. Build commands modify the
+contents of the container (usually by installing new files on the
+filesystem), the next command modifies it some more, etc. Since each
+build command inherits the result of the previous commands, the
+*order* in which the commands are executed expresses *dependencies*.
@@ -77 +126 @@ commands, the *order* in which the commands are executed expresses *dependencies
-Here's a typical docker build process:
+Here's a typical Docker build process:
@@ -90 +139,2 @@ run cd helloflask-master && pip install -r requirements.txt
-Note that Docker doesn't care *how* dependencies are built - as long as they can be built by running a unix command in a container.
+Note that Docker doesn't care *how* dependencies are built - as long
+as they can be built by running a Unix command in a container.
@@ -106,2 +156,3 @@ Binary installs
-Docker supports the following binary installation methods.
-Note that some methods are community contributions and not yet officially supported.
+Docker supports the following binary installation methods.  Note that
+some methods are community contributions and not yet officially
+supported.
@@ -118,2 +169,2 @@ Installing from source
-1. Make sure you have a [Go language](http://golang.org/doc/install) compiler and [git](http://git-scm.com) installed.
-
+1. Make sure you have a [Go language](http://golang.org/doc/install)
+compiler and [git](http://git-scm.com) installed.
@@ -126 +177 @@ Installing from source
-3. Build the docker binary
+3. Build the ``docker`` binary
@@ -137,2 +188,2 @@ Usage examples
-First run the docker daemon
----------------------------
+First run the ``docker`` daemon
+-------------------------------
@@ -140 +191,2 @@ First run the docker daemon
-All the examples assume your machine is running the docker daemon. To run the docker daemon in the background, simply type:
+All the examples assume your machine is running the ``docker``
+daemon. To run the ``docker`` daemon in the background, simply type:
@@ -147 +199,3 @@ sudo docker -d &
-Now you can run docker in client mode: all commands will be forwarded to the docker daemon, so the client can run from any account.
+Now you can run ``docker`` in client mode: all commands will be
+forwarded to the ``docker`` daemon, so the client can run from any
+account.
@@ -155 +209 @@ docker help
-Throwaway shell in a base ubuntu image
+Throwaway shell in a base Ubuntu image
@@ -205 +259,2 @@ docker push $USER/betterbase
-A list of publicly available images is [available here](https://github.com/dotcloud/docker/wiki/Public-docker-images).
+A list of publicly available images is [available
+here](https://github.com/dotcloud/docker/wiki/Public-docker-images).
@@ -232,5 +287,7 @@ Under the hood, Docker is built on the following components:
-
-* The [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c) and [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part) capabilities of the Linux kernel;
-
-* [AUFS](http://aufs.sourceforge.net/aufs.html), a powerful union filesystem with copy-on-write capabilities;
-
+* The
+  [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c)
+  and
+  [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part)
+  capabilities of the Linux kernel;
+* [AUFS](http://aufs.sourceforge.net/aufs.html), a powerful union
+  filesystem with copy-on-write capabilities;
@@ -238,2 +295,2 @@ Under the hood, Docker is built on the following components:
-
-* [lxc](http://lxc.sourceforge.net/), a set of convenience scripts to simplify the creation of linux containers.
+* [lxc](http://lxc.sourceforge.net/), a set of convenience scripts to
+  simplify the creation of Linux containers.
@@ -246 +303,3 @@ Contributing to Docker
-Want to hack on Docker? Awesome! There are instructions to get you started on the website: http://docs.docker.io/en/latest/contributing/contributing/
+Want to hack on Docker? Awesome! There are instructions to get you
+started on the website:
+http://docs.docker.io/en/latest/contributing/contributing/
@@ -248 +307,2 @@ Want to hack on Docker? Awesome! There are instructions to get you started on th
-They are probably not perfect, please let us know if anything feels wrong or incomplete.
+They are probably not perfect, please let us know if anything feels
+wrong or incomplete.
@@ -254,2 +314,4 @@ Note
-We also keep the documentation in this repository. The website documentation is generated using sphinx using these sources.
-Please find it under docs/sources/ and read more about it https://github.com/dotcloud/docker/tree/master/docs/README.md
+We also keep the documentation in this repository. The website
+documentation is generated using Sphinx using these sources.  Please
+find it under docs/sources/ and read more about it
+https://github.com/dotcloud/docker/tree/master/docs/README.md
@@ -257 +319,2 @@ Please find it under docs/sources/ and read more about it https://github.com/dot
-Please feel free to fix / update the documentation and send us pull requests. More tutorials are also welcome.
+Please feel free to fix / update the documentation and send us pull
+requests. More tutorials are also welcome.
@@ -292,2 +355,6 @@ What is a Standard Container?
-Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
+Docker defines a unit of software delivery called a Standard
+Container. The goal of a Standard Container is to encapsulate a
+software component and all its dependencies in a format that is
+self-describing and portable, so that any compliant runtime can run it
+without extra dependencies, regardless of the underlying machine and
+the contents of the container.
@@ -295 +362,3 @@ a format that is self-describing and portable, so that any compliant runtime can
-The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+The spec for Standard Containers is currently a work in progress, but
+it is very straightforward. It mostly defines 1) an image format, 2) a
+set of standard operations, and 3) an execution environment.
@@ -297 +366,3 @@ The spec for Standard Containers is currently a work in progress, but it is very
-A great analogy for this is the shipping container. Just like how Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+A great analogy for this is the shipping container. Just like how
+Standard Containers are a fundamental unit of software delivery,
+shipping containers are a fundamental unit of physical delivery.
@@ -301 +372,5 @@ A great analogy for this is the shipping container. Just like how Standard Conta
-Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
+Just like shipping containers, Standard Containers define a set of
+STANDARD OPERATIONS. Shipping containers can be lifted, stacked,
+locked, loaded, unloaded and labelled. Similarly, Standard Containers
+can be started, stopped, copied, snapshotted, downloaded, uploaded and
+tagged.
@@ -306 +381,8 @@ Just like shipping containers, Standard Containers define a set of STANDARD OPER
-Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffee or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
+Just like shipping containers, Standard Containers are
+CONTENT-AGNOSTIC: all standard operations have the same effect
+regardless of the contents. A shipping container will be stacked in
+exactly the same way whether it contains Vietnamese powder coffee or
+spare Maserati parts. Similarly, Standard Containers are started or
+uploaded in the same way whether they contain a postgres database, a
+php application with its dependencies and application server, or Java
+build artifacts.
@@ -311 +393,11 @@ Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all sta
-Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
+Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be
+transported to thousands of facilities around the world, and
+manipulated by a wide variety of equipment. A shipping container can
+be packed in a factory in Ukraine, transported by truck to the nearest
+routing center, stacked onto a train, loaded into a German boat by an
+Australian-built crane, stored in a warehouse at a US facility,
+etc. Similarly, a standard container can be bundled on my laptop,
+uploaded to S3, downloaded, run and snapshotted by a build server at
+Equinix in Virginia, uploaded to 10 staging servers in a home-made
+Openstack cluster, then sent to 30 production instances across 3 EC2
+regions.
@@ -316,5 +408,22 @@ Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to
-Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
-
-Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
-
-Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
+Because they offer the same standard operations regardless of content
+and infrastructure, Standard Containers, just like their physical
+counterparts, are extremely well-suited for automation. In fact, you
+could say automation is their secret weapon.
+
+Many things that once required time-consuming and error-prone human
+effort can now be programmed. Before shipping containers, a bag of
+powder coffee was hauled, dragged, dropped, rolled and stacked by 10
+different people in 10 different locations by the time it reached its
+destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The
+process was slow, inefficient and cost a fortune - and was entirely
+different depending on the facility and the type of goods.
+
+Similarly, before Standard Containers, by the time a software
+component ran in production, it had been individually built,
+configured, bundled, documented, patched, vendored, templated, tweaked
+and instrumented by 10 different people on 10 different
+computers. Builds failed, libraries conflicted, mirrors crashed,
+post-it notes were lost, logs were misplaced, cluster updates were
+half-broken. The process was slow, inefficient and cost a fortune -
+and was entirely different depending on the language and
+infrastructure provider.
@@ -325 +434,8 @@ Similarly, before Standard Containers, by the time a software component ran in p
-There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded onto the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
+There are 17 million shipping containers in existence, packed with
+every physical good imaginable. Every single one of them can be loaded
+onto the same boats, by the same cranes, in the same facilities, and
+sent anywhere in the World with incredible efficiency. It is
+embarrassing to think that a 30 ton shipment of coffee can safely
+travel half-way across the World in *less time* than it takes a
+software team to deliver its code from one datacenter to another
+sitting 10 miles away.
@@ -327 +443,2 @@ There are 17 million shipping containers in existence, packed with every physica
-With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
+With Standard Containers we can put an end to that embarrassment, by
+making INDUSTRIAL-GRADE DELIVERY of software a reality.
@@ -377,3 +494,5 @@ Standard Container Specification
-Transfers of Docker shall be in accordance with applicable export controls of any country and all other applicable
-legal requirements.  Docker shall not be distributed or downloaded to or in Cuba, Iran, North Korea, Sudan or Syria
-and shall not be distributed or downloaded to any person on the Denied Persons List administered by the U.S.
+Transfers of Docker shall be in accordance with applicable export
+controls of any country and all other applicable legal requirements.
+Docker shall not be distributed or downloaded to or in Cuba, Iran,
+North Korea, Sudan or Syria and shall not be distributed or downloaded
+to any person on the Denied Persons List administered by the U.S.
diff --git a/README.md b/README.md
index 376ecea703..823e48496a 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ happens, for a few reasons:
-  	large-scale deployment of cpu and memory-intensive applications on large numbers of machines.
+    large-scale deployment of cpu and memory-intensive applications on large numbers of machines.
@@ -29 +29 @@ happens, for a few reasons:
-  	building, testing and running their software. For example, VMs offer no facilities for application versioning, monitoring, configuration, logging or service discovery.
+    building, testing and running their software. For example, VMs offer no facilities for application versioning, monitoring, configuration, logging or service discovery.
@@ -34 +34 @@ for containerization, including Linux with [openvz](http://openvz.org), [vserver
-	Solaris with [zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc) and FreeBSD with [Jails](http://www.freebsd.org/doc/handbook/jails.html).
+    Solaris with [zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc) and FreeBSD with [Jails](http://www.freebsd.org/doc/handbook/jails.html).
@@ -59,2 +59,2 @@ This is usually difficult for several reasons:
-  	internal components developed for another project, etc. These dependencies live in different "worlds" and require different tools - these tools typically don't work
-	well with each other, requiring awkward custom integrations.
+    internal components developed for another project, etc. These dependencies live in different "worlds" and require different tools - these tools typically don't work
+    well with each other, requiring awkward custom integrations.
@@ -63 +63 @@ This is usually difficult for several reasons:
-  	but they all handle them in different and incompatible ways, which again forces the developer to do extra work.
+    but they all handle them in different and incompatible ways, which again forces the developer to do extra work.
@@ -65,2 +65,2 @@ This is usually difficult for several reasons:
-  * Custom dependencies. A developer may need to prepare a custom version of his application's dependency. Some packaging systems can handle custom versions of a dependency,
-  	others can't - and all of them handle it differently.
+  * Custom dependencies. A developer may need to prepare a custom version of their application's dependency. Some packaging systems can handle custom versions of a dependency,
+    others can't - and all of them handle it differently.
@@ -69 +69 @@ This is usually difficult for several reasons:
-Docker solves dependency hell by giving the developer a simple way to express *all* his application's dependencies in one place,
+Docker solves dependency hell by giving the developer a simple way to express *all* their application's dependencies in one place,
diff --git a/README.md b/README.md
index dd722c4504..376ecea703 100644
--- a/README.md
+++ b/README.md
@@ -100 +100 @@ Quick install on Ubuntu 12.04 and 12.10
-curl get.docker.io | sh -x
+curl get.docker.io | sudo sh -x
diff --git a/README.md b/README.md
index 8def9bc196..dd722c4504 100644
--- a/README.md
+++ b/README.md
@@ -219 +219,2 @@ PORT=$(docker port $JOB 4444)
-IP=$(ifconfig eth0 | perl -n -e 'if (m/inet addr:([\d\.]+)/g) { print $1 }')
+# Replace *eth0* according to your local interface name.
+IP=$(ip -o -4 addr list eth0 | perl -n -e 'if (m{inet\s([\d\.]+)\/\d+\s}xms) { print $1 }')
diff --git a/README.md b/README.md
index 44ff977298..8def9bc196 100644
--- a/README.md
+++ b/README.md
@@ -272 +272 @@ cd $GOPATH/src/github.com/dotcloud
-git clone git@github.com:dotcloud/docker.git
+git clone https://github.com/dotcloud/docker.git
diff --git a/README.md b/README.md
index 323a147c40..44ff977298 100644
--- a/README.md
+++ b/README.md
@@ -111 +111 @@ Note that some methods are community contributions and not yet officially suppor
-* [MacOS X (with Vagrant)](http://docs.docker.io/en/latest/installation/macos/)
+* [Mac OS X (with Vagrant)](http://docs.docker.io/en/latest/installation/vagrant/)
diff --git a/README.md b/README.md
index 05312a3b45..323a147c40 100644
--- a/README.md
+++ b/README.md
@@ -184 +184 @@ Running an irc bouncer
-BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc $USER $PASSWORD)
+BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc zncrun $USER $PASSWORD)
@@ -219,2 +219 @@ PORT=$(docker port $JOB 4444)
-# Replace *eth0* according to your local interface name.
-IP=$(ip -o -4 addr list eth0 | perl -n -e 'if (m{inet\s([\d\.]+)\/\d+\s}xms) { print $1 }')
+IP=$(ifconfig eth0 | perl -n -e 'if (m/inet addr:([\d\.]+)/g) { print $1 }')
@@ -266 +265 @@ Instructions that have been verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc wget bsdtar curl golang git
+sudo apt-get -y install lxc curl xz-utils golang git
diff --git a/README.md b/README.md
index f778ff521d..05312a3b45 100644
--- a/README.md
+++ b/README.md
@@ -184 +184 @@ Running an irc bouncer
-BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc zncrun $USER $PASSWORD)
+BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc $USER $PASSWORD)
@@ -219 +219,2 @@ PORT=$(docker port $JOB 4444)
-IP=$(ifconfig eth0 | perl -n -e 'if (m/inet addr:([\d\.]+)/g) { print $1 }')
+# Replace *eth0* according to your local interface name.
+IP=$(ip -o -4 addr list eth0 | perl -n -e 'if (m{inet\s([\d\.]+)\/\d+\s}xms) { print $1 }')
diff --git a/README.md b/README.md
index d15ee3cc41..f778ff521d 100644
--- a/README.md
+++ b/README.md
@@ -184 +184 @@ Running an irc bouncer
-BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc $USER $PASSWORD)
+BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc zncrun $USER $PASSWORD)
@@ -265 +265 @@ Instructions that have been verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc curl xz-utils golang git
+sudo apt-get -y install lxc wget bsdtar curl golang git
diff --git a/README.md b/README.md
index 1c909e5431..d15ee3cc41 100644
--- a/README.md
+++ b/README.md
@@ -265 +265 @@ Instructions that have been verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc wget bsdtar curl golang git
+sudo apt-get -y install lxc curl xz-utils golang git
diff --git a/README.md b/README.md
index bcad502abc..1c909e5431 100644
--- a/README.md
+++ b/README.md
@@ -376 +376,4 @@ Standard Container Specification
-Transfers Docker shall be in accordance with any applicable export control or other legal requirements.
+Transfers of Docker shall be in accordance with applicable export controls of any country and all other applicable
+legal requirements.  Docker shall not be distributed or downloaded to or in Cuba, Iran, North Korea, Sudan or Syria
+and shall not be distributed or downloaded to any person on the Denied Persons List administered by the U.S.
+Department of Commerce.
diff --git a/README.md b/README.md
index b65f5eeb2e..bcad502abc 100644
--- a/README.md
+++ b/README.md
@@ -254 +254 @@ We also keep the documentation in this repository. The website documentation is
-Please find it under docs/sources/ and read more about it https://github.com/dotcloud/docker/master/docs/README.md
+Please find it under docs/sources/ and read more about it https://github.com/dotcloud/docker/tree/master/docs/README.md
diff --git a/README.md b/README.md
index 918fdaade2..b65f5eeb2e 100644
--- a/README.md
+++ b/README.md
@@ -373,0 +374,3 @@ Standard Container Specification
+### Legal
+
+Transfers Docker shall be in accordance with any applicable export control or other legal requirements.
diff --git a/README.md b/README.md
index c83feeae58..918fdaade2 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ of applications and databases.
-![Docker L](docs/sources/static_files/lego_docker.jpg "Docker")
+![Docker L](docs/sources/concepts/images/lego_docker.jpg "Docker")
diff --git a/README.md b/README.md
index 1f69e4d833..c83feeae58 100644
--- a/README.md
+++ b/README.md
@@ -38 +38 @@ all 4 problems. Docker containers are small (and their transfer can be optimized
-the are completely portable and are designed from the ground up with an application-centric design.
+they are completely portable and are designed from the ground up with an application-centric design.
@@ -49 +49 @@ arguments as inputs and outputs? Then docker can run it.
-Can your application's build be expressed a sequence of such commands? Then docker can build it.
+Can your application's build be expressed as a sequence of such commands? Then docker can build it.
@@ -73 +73 @@ and streamline the process of assembling them. If this makes you think of [XKCD
-Docker defines a build as running a sequence unix commands, one after the other, in the same container. Build commands modify the contents of the container
+Docker defines a build as running a sequence of unix commands, one after the other, in the same container. Build commands modify the contents of the container
@@ -296 +296 @@ The spec for Standard Containers is currently a work in progress, but it is very
-A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+A great analogy for this is the shipping container. Just like how Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
@@ -324 +324 @@ Similarly, before Standard Containers, by the time a software component ran in p
-There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
+There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded onto the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
diff --git a/README.md b/README.md
index b22c731691..1f69e4d833 100644
--- a/README.md
+++ b/README.md
@@ -80,8 +80,8 @@ Here's a typical docker build process:
-from	ubuntu:12.10
-run	apt-get update
-run	apt-get install python
-run	apt-get install python-pip
-run	pip install django
-run	apt-get install curl
-run	curl http://github.com/shykes/helloflask/helloflask/master.tar.gz | tar -zxv
-run	cd master && pip install -r requirements.txt
+from ubuntu:12.10
+run apt-get update
+run DEBIAN_FRONTEND=noninteractive apt-get install -q -y python
+run DEBIAN_FRONTEND=noninteractive apt-get install -q -y python-pip
+run pip install django
+run DEBIAN_FRONTEND=noninteractive apt-get install -q -y curl
+run curl -L https://github.com/shykes/helloflask/archive/master.tar.gz | tar -xzv
+run cd helloflask-master && pip install -r requirements.txt
diff --git a/README.md b/README.md
index 5b80fe253d..b22c731691 100644
--- a/README.md
+++ b/README.md
@@ -24,6 +24,6 @@ happens, for a few reasons:
-	* *Size*: VMs are very large which makes them impractical to store and transfer.
-	* *Performance*: running VMs consumes significant CPU and memory, which makes them impractical in many scenarios, for example local development of multi-tier applications, and
-		large-scale deployment of cpu and memory-intensive applications on large numbers of machines.
-	* *Portability*: competing VM environments don't play well with each other. Although conversion tools do exist, they are limited and add even more overhead.
-	* *Hardware-centric*: VMs were designed with machine operators in mind, not software developers. As a result, they offer very limited tooling for what developers need most:
-		building, testing and running their software. For example, VMs offer no facilities for application versioning, monitoring, configuration, logging or service discovery.
+  * *Size*: VMs are very large which makes them impractical to store and transfer.
+  * *Performance*: running VMs consumes significant CPU and memory, which makes them impractical in many scenarios, for example local development of multi-tier applications, and
+  	large-scale deployment of cpu and memory-intensive applications on large numbers of machines.
+  * *Portability*: competing VM environments don't play well with each other. Although conversion tools do exist, they are limited and add even more overhead.
+  * *Hardware-centric*: VMs were designed with machine operators in mind, not software developers. As a result, they offer very limited tooling for what developers need most:
+  	building, testing and running their software. For example, VMs offer no facilities for application versioning, monitoring, configuration, logging or service discovery.
diff --git a/README.md b/README.md
index 7b1e18f390..5b80fe253d 100644
--- a/README.md
+++ b/README.md
@@ -14,0 +15,2 @@ of applications and databases.
+![Docker L](docs/sources/static_files/lego_docker.jpg "Docker")
+
diff --git a/README.md b/README.md
index 13ec817e2b..7b1e18f390 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-Docker: the Linux container runtime
-===================================
+Docker: the Linux container engine
+==================================
@@ -4 +4 @@ Docker: the Linux container runtime
-Docker complements LXC with a high-level API which operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
+Docker is an open-source engine which automates the deployment of applications as highly portable, self-sufficient containers.
@@ -6 +6,4 @@ Docker complements LXC with a high-level API which operates at the process level
-Docker is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
+Docker containers are both *hardware-agnostic* and *platform-agnostic*. This means that they can run anywhere, from your
+laptop to the largest EC2 compute instance and everything in between - and they don't require that you use a particular
+language, framework or packaging system. That makes them great building blocks for deploying and scaling web apps, databases
+and backend services without depending on a particular stack or provider.
@@ -8 +11,3 @@ Docker is a great building block for automating distributed systems: large-scale
-![Docker L](docs/sources/static_files/lego_docker.jpg "Docker")
+Docker is an open-source implementation of the deployment engine which powers [dotCloud](http://dotcloud.com), a popular Platform-as-a-Service.
+It benefits directly from the experience accumulated over several years of large-scale operation and support of hundreds of thousands
+of applications and databases.
@@ -10 +15 @@ Docker is a great building block for automating distributed systems: large-scale
-* *Heterogeneous payloads*: any combination of binaries, libraries, configuration files, scripts, virtualenvs, jars, gems, tarballs, you name it. No more juggling between domain-specific tools. Docker can deploy and run them all.
+## Better than VMs
@@ -12 +17,4 @@ Docker is a great building block for automating distributed systems: large-scale
-* *Any server*: docker can run on any x64 machine with a modern linux kernel - whether it's a laptop, a bare metal server or a VM. This makes it perfect for multi-cloud deployments.
+A common method for distributing applications and sandbox their execution is to use virtual machines, or VMs. Typical VM formats
+are VMWare's vmdk, Oracle Virtualbox's vdi, and Amazon EC2's ami. In theory these formats should allow every developer to
+automatically package their application into a "machine" for easy distribution and deployment. In practice, that almost never
+happens, for a few reasons:
@@ -14 +22,6 @@ Docker is a great building block for automating distributed systems: large-scale
-* *Isolation*: docker isolates processes from each other and from the underlying host, using lightweight containers.
+	* *Size*: VMs are very large which makes them impractical to store and transfer.
+	* *Performance*: running VMs consumes significant CPU and memory, which makes them impractical in many scenarios, for example local development of multi-tier applications, and
+		large-scale deployment of cpu and memory-intensive applications on large numbers of machines.
+	* *Portability*: competing VM environments don't play well with each other. Although conversion tools do exist, they are limited and add even more overhead.
+	* *Hardware-centric*: VMs were designed with machine operators in mind, not software developers. As a result, they offer very limited tooling for what developers need most:
+		building, testing and running their software. For example, VMs offer no facilities for application versioning, monitoring, configuration, logging or service discovery.
@@ -16 +29,4 @@ Docker is a great building block for automating distributed systems: large-scale
-* *Repeatability*: because containers are isolated in their own filesystem, they behave the same regardless of where, when, and alongside what they run.
+By contrast, Docker relies on a different sandboxing method known as *containerization*. Unlike traditional virtualization,
+containerization takes place at the kernel level. Most modern operating system kernels now support the primitives necessary
+for containerization, including Linux with [openvz](http://openvz.org), [vserver](http://linux-vserver.org) and more recently [lxc](http://lxc.sourceforge.net),
+	Solaris with [zones](http://docs.oracle.com/cd/E26502_01/html/E29024/preface-1.html#scrolltoc) and FreeBSD with [Jails](http://www.freebsd.org/doc/handbook/jails.html).
@@ -17,0 +34,3 @@ Docker is a great building block for automating distributed systems: large-scale
+Docker builds on top of these low-level primitives to offer developers a portable format and runtime environment that solves
+all 4 problems. Docker containers are small (and their transfer can be optimized with layers), they have basically zero memory and cpu overhead,
+the are completely portable and are designed from the ground up with an application-centric design.
@@ -19,2 +38 @@ Docker is a great building block for automating distributed systems: large-scale
-Notable features
------------------
+The best part: because docker operates at the OS level, it can still be run inside a VM!
@@ -22 +40 @@ Notable features
-* Filesystem isolation: each process container runs in a completely separate root filesystem.
+## Plays well with others
@@ -24 +42 @@ Notable features
-* Resource isolation: system resources like cpu and memory can be allocated differently to each process container, using cgroups.
+Docker does not require that you buy into a particular programming language, framework, packaging system or configuration language.
@@ -26 +44,2 @@ Notable features
-* Network isolation: each process container runs in its own network namespace, with a virtual interface and IP address of its own.
+Is your application a unix process? Does it use files, tcp connections, environment variables, standard unix streams and command-line
+arguments as inputs and outputs? Then docker can run it.
@@ -28 +47 @@ Notable features
-* Copy-on-write: root filesystems are created using copy-on-write, which makes deployment extremely fast, memory-cheap and disk-cheap.
+Can your application's build be expressed a sequence of such commands? Then docker can build it.
@@ -30 +48,0 @@ Notable features
-* Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.
@@ -32 +50,39 @@ Notable features
-* Change management: changes to a container's filesystem can be committed into a new image and re-used to create more containers. No templating or manual configuration required.
+## Escape dependency hell
+
+A common problem for developers is the difficulty of managing all their application's dependencies in a simple and automated way.
+
+This is usually difficult for several reasons:
+
+  * *Cross-platform dependencies*. Modern applications often depend on a combination of system libraries and binaries, language-specific packages, framework-specific modules,
+  	internal components developed for another project, etc. These dependencies live in different "worlds" and require different tools - these tools typically don't work
+	well with each other, requiring awkward custom integrations.
+
+  * Conflicting dependencies. Different applications may depend on different versions of the same dependency. Packaging tools handle these situations with various degrees of ease -
+  	but they all handle them in different and incompatible ways, which again forces the developer to do extra work.
+  
+  * Custom dependencies. A developer may need to prepare a custom version of his application's dependency. Some packaging systems can handle custom versions of a dependency,
+  	others can't - and all of them handle it differently.
+
+
+Docker solves dependency hell by giving the developer a simple way to express *all* his application's dependencies in one place,
+and streamline the process of assembling them. If this makes you think of [XKCD 927](http://xkcd.com/927/), don't worry. Docker doesn't
+*replace* your favorite packaging systems. It simply orchestrates their use in a simple and repeatable way. How does it do that? With layers.
+
+Docker defines a build as running a sequence unix commands, one after the other, in the same container. Build commands modify the contents of the container
+(usually by installing new files on the filesystem), the next command modifies it some more, etc. Since each build command inherits the result of the previous
+commands, the *order* in which the commands are executed expresses *dependencies*.
+
+Here's a typical docker build process:
+
+```bash
+from	ubuntu:12.10
+run	apt-get update
+run	apt-get install python
+run	apt-get install python-pip
+run	pip install django
+run	apt-get install curl
+run	curl http://github.com/shykes/helloflask/helloflask/master.tar.gz | tar -zxv
+run	cd master && pip install -r requirements.txt
+```
+
+Note that Docker doesn't care *how* dependencies are built - as long as they can be built by running a unix command in a container.
@@ -34 +89,0 @@ Notable features
-* Interactive shell: docker can allocate a pseudo-tty and attach to the standard input of any container, for example to run a throwaway interactive shell.
diff --git a/README.md b/README.md
index 058004c078..13ec817e2b 100644
--- a/README.md
+++ b/README.md
@@ -128 +128 @@ BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc $USER $PASSWORD)
-echo "Configure your irc client to connect to port $(port $BOUNCER_ID 6667) of this machine"
+echo "Configure your irc client to connect to port $(docker port $BOUNCER_ID 6667) of this machine"
@@ -136 +136 @@ REDIS_ID=$(docker run -d -p 6379 shykes/redis redis-server)
-echo "Configure your redis client to connect to port $(port $REDIS_ID 6379) of this machine"
+echo "Configure your redis client to connect to port $(docker port $REDIS_ID 6379) of this machine"
diff --git a/README.md b/README.md
index 22359c9269..058004c078 100644
--- a/README.md
+++ b/README.md
@@ -36,17 +35,0 @@ Notable features
-
-
-Under the hood
---------------
-
-Under the hood, Docker is built on the following components:
-
-
-* The [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c) and [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part) capabilities of the Linux kernel;
-
-* [AUFS](http://aufs.sourceforge.net/aufs.html), a powerful union filesystem with copy-on-write capabilities;
-
-* The [Go](http://golang.org) programming language;
-
-* [lxc](http://lxc.sourceforge.net/), a set of convenience scripts to simplify the creation of linux containers.
-
-
@@ -185,0 +169,16 @@ echo "Daemon received: $(docker logs $JOB)"
+Under the hood
+--------------
+
+Under the hood, Docker is built on the following components:
+
+
+* The [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c) and [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part) capabilities of the Linux kernel;
+
+* [AUFS](http://aufs.sourceforge.net/aufs.html), a powerful union filesystem with copy-on-write capabilities;
+
+* The [Go](http://golang.org) programming language;
+
+* [lxc](http://lxc.sourceforge.net/), a set of convenience scripts to simplify the creation of linux containers.
+
+
+
diff --git a/README.md b/README.md
index d112575632..22359c9269 100644
--- a/README.md
+++ b/README.md
@@ -164,0 +165 @@ docker push $USER/betterbase
+A list of publicly available images is [available here](https://github.com/dotcloud/docker/wiki/Public-docker-images).
diff --git a/README.md b/README.md
index 774e107a5b..d112575632 100644
--- a/README.md
+++ b/README.md
@@ -90,0 +91 @@ Installing from source
+   sudo cp ./bin/docker /usr/local/bin/docker
@@ -93,48 +93,0 @@ Installing from source
-4. Execute the docker daemon
-
-   ```bash
-   sudo ./bin/docker -d
-   ```
-
-Installing on Ubuntu 12.04 and 12.10
-------------------------------------
-
-1. Install dependencies:
-
-    ```bash
-    sudo apt-get install lxc bsdtar
-    sudo apt-get install linux-image-extra-`uname -r`
-    ```
-
-    The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
-
-2. Install the latest docker binary:
-
-    ```bash
-    wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
-    tar -xf docker-master.tgz
-    ```
-
-3. Run your first container!
-
-    ```bash
-    cd docker-master
-    sudo ./docker pull base
-    sudo ./docker run -i -t base /bin/bash
-    ```
-
-    Consider adding docker to your `PATH` for simplicity.
-
-Installing on other Linux distributions
----------------------------------------
-
-Right now, the officially supported distributions are:
-
-* Ubuntu 12.04 (precise LTS)
-* Ubuntu 12.10 (quantal)
-
-Docker probably works on other distributions featuring a recent kernel, the AUFS patch, and up-to-date lxc. However this has not been tested.
-
-Some streamlined (but possibly outdated) installation paths' are available from the website: http://docker.io/documentation/ 
-
-
diff --git a/README.md b/README.md
index 54fe0a22b2..774e107a5b 100644
--- a/README.md
+++ b/README.md
@@ -56,2 +56,2 @@ Install instructions
-Building from source
---------------------
+Quick install on Ubuntu 12.04 and 12.10
+---------------------------------------
@@ -59 +59,3 @@ Building from source
-1. Make sure you have a [Go language](http://golang.org) compiler.
+```bash
+curl get.docker.io | sh -x
+```
@@ -61 +63,2 @@ Building from source
-    On a Debian/wheezy or Ubuntu 12.10 install the package:
+Binary installs
+----------------
@@ -63 +66,2 @@ Building from source
-    ```bash
+Docker supports the following binary installation methods.
+Note that some methods are community contributions and not yet officially supported.
@@ -65,2 +69,5 @@ Building from source
-    $ sudo apt-get install golang-go
-    ```
+* [Ubuntu 12.04 and 12.10 (officially supported)](http://docs.docker.io/en/latest/installation/ubuntulinux/)
+* [Arch Linux](http://docs.docker.io/en/latest/installation/archlinux/)
+* [MacOS X (with Vagrant)](http://docs.docker.io/en/latest/installation/macos/)
+* [Windows (with Vagrant)](http://docs.docker.io/en/latest/installation/windows/)
+* [Amazon EC2 (with Vagrant)](http://docs.docker.io/en/latest/installation/amazon/)
@@ -68 +75,2 @@ Building from source
-2. Execute ``make``
+Installing from source
+----------------------
@@ -70,2 +78 @@ Building from source
-   This command will install all necessary dependencies and build the
-   executable that you can find in ``bin/docker``
+1. Make sure you have a [Go language](http://golang.org/doc/install) compiler and [git](http://git-scm.com) installed.
@@ -73 +80 @@ Building from source
-3. Should you like to see what's happening, run ``make`` with ``VERBOSE=1`` parameter:
+2. Checkout the source code
@@ -75 +82,3 @@ Building from source
-    ```bash
+   ```bash
+   git clone http://github.com/dotcloud/docker
+   ```
@@ -77,2 +86,12 @@ Building from source
-    $ make VERBOSE=1
-    ```
+3. Build the docker binary
+
+   ```bash
+   cd docker
+   make VERBOSE=1
+   ```
+
+4. Execute the docker daemon
+
+   ```bash
+   sudo ./bin/docker -d
+   ```
diff --git a/README.md b/README.md
index 420c79500f..54fe0a22b2 100644
--- a/README.md
+++ b/README.md
@@ -130,6 +130,4 @@ All the examples assume your machine is running the docker daemon. To run the do
-   .. code-block:: bash
-
-      sudo docker -d &
-
-Now you can run docker in client mode: all commands will be forwarded to the docker daemon, so the client
-can run from any account.
+```bash
+# On a production system you want this running in an init script
+sudo docker -d &
+```
@@ -137 +135 @@ can run from any account.
-   .. code-block:: bash
+Now you can run docker in client mode: all commands will be forwarded to the docker daemon, so the client can run from any account.
@@ -139,2 +137,4 @@ can run from any account.
-      # now you can run docker commands from any account.
-      docker help
+```bash
+# Now you can run docker commands from any account.
+docker help
+```
@@ -149,2 +149,2 @@ docker pull ubuntu:12.10
-# Run an interactive shell
-# allocate a tty, attach stdin and stdout
+# Run an interactive shell, allocate a tty, attach stdin and stdout
+# To detach the tty without exiting the shell, use the escape sequence Ctrl-p + Ctrl-q
@@ -154,7 +153,0 @@ docker run -i -t ubuntu:12.10 /bin/bash
-Detaching from the interactive shell
-------------------------------------
-```
-# To detach without killing the shell, you can use the escape sequence Ctrl-p + Ctrl-q
-# Note: this works only in tty mode (run with -t option).
-```
-
@@ -175,2 +168,2 @@ docker kill $JOB
-Run an irc bouncer
-------------------
+Running an irc bouncer
+----------------------
@@ -183,2 +176,2 @@ echo "Configure your irc client to connect to port $(port $BOUNCER_ID 6667) of t
-Run Redis
----------
+Running Redis
+-------------
diff --git a/README.md b/README.md
index a3fe1313ad..420c79500f 100644
--- a/README.md
+++ b/README.md
@@ -157 +157 @@ Detaching from the interactive shell
-# In order to detach without killing the shell, you can use the escape sequence Ctrl-p + Ctrl-q
+# To detach without killing the shell, you can use the escape sequence Ctrl-p + Ctrl-q
diff --git a/README.md b/README.md
index 2c40658429..a3fe1313ad 100644
--- a/README.md
+++ b/README.md
@@ -147,2 +147 @@ Throwaway shell in a base ubuntu image
-# Download a base image
-docker pull base
+docker pull ubuntu:12.10
@@ -150 +149 @@ docker pull base
-# Run an interactive shell in the base image,
+# Run an interactive shell
@@ -152 +151 @@ docker pull base
-docker run -i -t base /bin/bash
+docker run -i -t ubuntu:12.10 /bin/bash
@@ -167 +166 @@ Starting a long-running worker process
-JOB=$(docker run -d base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
+JOB=$(docker run -d ubuntu /bin/sh -c "while true; do echo Hello world; sleep 1; done")
@@ -176,3 +175,2 @@ docker kill $JOB
-
-Listing all running containers
-------------------------------
+Run an irc bouncer
+------------------
@@ -181 +179,2 @@ Listing all running containers
-docker ps
+BOUNCER_ID=$(docker run -d -p 6667 -u irc shykes/znc $USER $PASSWORD)
+echo "Configure your irc client to connect to port $(port $BOUNCER_ID 6667) of this machine"
@@ -183,0 +183,7 @@ docker ps
+Run Redis
+---------
+
+```bash
+REDIS_ID=$(docker run -d -p 6379 shykes/redis redis-server)
+echo "Configure your redis client to connect to port $(port $REDIS_ID 6379) of this machine"
+```
@@ -189,2 +195 @@ Share your own image!
-docker pull base
-CONTAINER=$(docker run -d base apt-get install -y curl)
+CONTAINER=$(docker run -d ubuntu:12.10 apt-get install -y curl)
diff --git a/README.md b/README.md
index 4ba9222f85..2c40658429 100644
--- a/README.md
+++ b/README.md
@@ -125,2 +125,20 @@ Usage examples
-Running an interactive shell
-----------------------------
+First run the docker daemon
+---------------------------
+
+All the examples assume your machine is running the docker daemon. To run the docker daemon in the background, simply type:
+
+   .. code-block:: bash
+
+      sudo docker -d &
+
+Now you can run docker in client mode: all commands will be forwarded to the docker daemon, so the client
+can run from any account.
+
+   .. code-block:: bash
+
+      # now you can run docker commands from any account.
+      docker help
+
+
+Throwaway shell in a base ubuntu image
+--------------------------------------
@@ -148,3 +165,0 @@ Starting a long-running worker process
-# Run docker in daemon mode
-(docker -d || echo "Docker daemon already running") &
-
diff --git a/README.md b/README.md
index c186d9a063..4ba9222f85 100644
--- a/README.md
+++ b/README.md
@@ -86 +86 @@ Installing on Ubuntu 12.04 and 12.10
-    sudo apt-get install lxc wget bsdtar curl
+    sudo apt-get install lxc bsdtar
diff --git a/README.md b/README.md
index ff86de8820..c186d9a063 100644
--- a/README.md
+++ b/README.md
@@ -136,0 +137,6 @@ docker run -i -t base /bin/bash
+Detaching from the interactive shell
+------------------------------------
+```
+# In order to detach without killing the shell, you can use the escape sequence Ctrl-p + Ctrl-q
+# Note: this works only in tty mode (run with -t option).
+```
diff --git a/README.md b/README.md
index 66ca656f68..ff86de8820 100644
--- a/README.md
+++ b/README.md
@@ -186 +186,3 @@ PORT=$(docker port $JOB 4444)
-echo hello world | nc $(hostname) $PORT
+# Please note that because of how routing works connecting to localhost or 127.0.0.1 $PORT will not work.
+IP=$(ifconfig eth0 | perl -n -e 'if (m/inet addr:([\d\.]+)/g) { print $1 }')
+echo hello world | nc $IP $PORT
diff --git a/README.md b/README.md
index 495bbe83a3..66ca656f68 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Docker is a great building block for automating distributed systems: large-scale
-<img src="http://bricks.argz.com/bricksfiles/lego/07000/7823/012.jpg"/>
+![Docker L](docs/sources/static_files/lego_docker.jpg "Docker")
diff --git a/README.md b/README.md
index bb69f47979..495bbe83a3 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Docker is a great building block for automating distributed systems: large-scale
-![Docker L](docs/sources/static_files/lego_docker.jpg "Docker")
+<img src="http://bricks.argz.com/bricksfiles/lego/07000/7823/012.jpg"/>
@@ -195 +195 @@ Contributing to Docker
-Want to hack on Docker? Awesome! There are instructions to get you started on the website: http://docker.io/documentation/contributing/contributing.html 
+Want to hack on Docker? Awesome! There are instructions to get you started on the website: http://docs.docker.io/en/latest/contributing/contributing/
@@ -199 +198,0 @@ They are probably not perfect, please let us know if anything feels wrong or inc
-### Pull requests are always welcome
@@ -209,20 +207,0 @@ Please feel free to fix / update the documentation and send us pull requests. Mo
-### Discuss your design on the mailing list
-
-We recommend discussing your plans [on the mailing list](https://groups.google.com/forum/?fromgroups#!forum/docker-club) before starting to code - especially for more ambitious contributions. This gives other contributors a chance to point
-you in the right direction, give feedback on your design, and maybe point out if someone else is working on the same thing.
-
-### Create issues...
-
-Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
-
-### ...but check for existing issues first!
-
-Please take a moment to check that an issue doesn't already exist documenting your bug report or improvement proposal.
-If it does, it never hurts to add a quick "+1" or "I have this problem too". This will help prioritize the most common problems and requests.
-
-
-### Write tests
-
-Golang has a great testing suite built in: use it! Take a look at existing tests for inspiration.
-
-
diff --git a/README.md b/README.md
index 273291250f..bb69f47979 100644
--- a/README.md
+++ b/README.md
@@ -9 +8,0 @@ Docker is a great building block for automating distributed systems: large-scale
-=======
diff --git a/README.md b/README.md
index bb69f47979..273291250f 100644
--- a/README.md
+++ b/README.md
@@ -8,0 +9 @@ Docker is a great building block for automating distributed systems: large-scale
+=======
diff --git a/README.md b/README.md
index 8b63c89961..bb69f47979 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Docker is a great building block for automating distributed systems: large-scale
-<img src="http://www.docker.io/_static/lego_docker.jpg"/>
+![Docker L](docs/sources/static_files/lego_docker.jpg "Docker")
diff --git a/README.md b/README.md
index 7fcfa4c360..8b63c89961 100644
--- a/README.md
+++ b/README.md
@@ -8 +8 @@ Docker is a great building block for automating distributed systems: large-scale
-<img src="http://bricks.argz.com/bricksfiles/lego/07000/7823/012.jpg"/>
+<img src="http://www.docker.io/_static/lego_docker.jpg"/>
diff --git a/README.md b/README.md
index 9cf3daf6a2..7fcfa4c360 100644
--- a/README.md
+++ b/README.md
@@ -28 +28 @@ Notable features
-* Copy-on-write: root filesystems are created using copy-on-write, which makes deployment extremeley fast, memory-cheap and disk-cheap.
+* Copy-on-write: root filesystems are created using copy-on-write, which makes deployment extremely fast, memory-cheap and disk-cheap.
diff --git a/README.md b/README.md
index 4fc7778456..9cf3daf6a2 100644
--- a/README.md
+++ b/README.md
@@ -55,0 +56,24 @@ Install instructions
+Building from source
+--------------------
+
+1. Make sure you have a [Go language](http://golang.org) compiler.
+
+    On a Debian/wheezy or Ubuntu 12.10 install the package:
+
+    ```bash
+
+    $ sudo apt-get install golang-go
+    ```
+
+2. Execute ``make``
+
+   This command will install all necessary dependencies and build the
+   executable that you can find in ``bin/docker``
+
+3. Should you like to see what's happening, run ``make`` with ``VERBOSE=1`` parameter:
+
+    ```bash
+
+    $ make VERBOSE=1
+    ```
+
diff --git a/README.md b/README.md
index dcd545b27a..4fc7778456 100644
--- a/README.md
+++ b/README.md
@@ -10,0 +11 @@ Docker is a great building block for automating distributed systems: large-scale
+
@@ -11,0 +13 @@ Docker is a great building block for automating distributed systems: large-scale
+
@@ -12,0 +15 @@ Docker is a great building block for automating distributed systems: large-scale
+
@@ -19,0 +23 @@ Notable features
+
@@ -20,0 +25 @@ Notable features
+
@@ -21,0 +27 @@ Notable features
+
@@ -22,0 +29 @@ Notable features
+
@@ -23,0 +31 @@ Notable features
+
@@ -24,0 +33 @@ Notable features
+
@@ -27,0 +37 @@ Notable features
+
@@ -34,0 +45 @@ Under the hood, Docker is built on the following components:
+
@@ -35,0 +47 @@ Under the hood, Docker is built on the following components:
+
@@ -36,0 +49 @@ Under the hood, Docker is built on the following components:
+
@@ -161,0 +175 @@ They are probably not perfect, please let us know if anything feels wrong or inc
+### Pull requests are always welcome
@@ -170,0 +185,135 @@ Please feel free to fix / update the documentation and send us pull requests. Mo
+### Discuss your design on the mailing list
+
+We recommend discussing your plans [on the mailing list](https://groups.google.com/forum/?fromgroups#!forum/docker-club) before starting to code - especially for more ambitious contributions. This gives other contributors a chance to point
+you in the right direction, give feedback on your design, and maybe point out if someone else is working on the same thing.
+
+### Create issues...
+
+Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
+
+### ...but check for existing issues first!
+
+Please take a moment to check that an issue doesn't already exist documenting your bug report or improvement proposal.
+If it does, it never hurts to add a quick "+1" or "I have this problem too". This will help prioritize the most common problems and requests.
+
+
+### Write tests
+
+Golang has a great testing suite built in: use it! Take a look at existing tests for inspiration.
+
+
+
+Setting up a dev environment
+----------------------------
+
+Instructions that have been verified to work on Ubuntu 12.10,
+
+```bash
+sudo apt-get -y install lxc wget bsdtar curl golang git
+
+export GOPATH=~/go/
+export PATH=$GOPATH/bin:$PATH
+
+mkdir -p $GOPATH/src/github.com/dotcloud
+cd $GOPATH/src/github.com/dotcloud
+git clone git@github.com:dotcloud/docker.git
+cd docker
+
+go get -v github.com/dotcloud/docker/...
+go install -v github.com/dotcloud/docker/...
+```
+
+Then run the docker daemon,
+
+```bash
+sudo $GOPATH/bin/docker -d
+```
+
+Run the `go install` command (above) to recompile docker.
+
+
+What is a Standard Container?
+=============================
+
+Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
+
+The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+
+A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+
+### 1. STANDARD OPERATIONS
+
+Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
+
+
+### 2. CONTENT-AGNOSTIC
+
+Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffee or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
+
+
+### 3. INFRASTRUCTURE-AGNOSTIC
+
+Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
+
+
+### 4. DESIGNED FOR AUTOMATION
+
+Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
+
+Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
+
+Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
+
+
+### 5. INDUSTRIAL-GRADE DELIVERY
+
+There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
+
+With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
+
+
+
+
+Standard Container Specification
+--------------------------------
+
+(TODO)
+
+### Image format
+
+
+### Standard operations
+
+* Copy
+* Run
+* Stop
+* Wait
+* Commit
+* Attach standard streams
+* List filesystem changes
+* ...
+
+### Execution environment
+
+#### Root filesystem
+
+#### Environment variables
+
+#### Process arguments
+
+#### Networking
+
+#### Process namespacing
+
+#### Resource limits
+
+#### Process monitoring
+
+#### Logging
+
+#### Signals
+
+#### Pseudo-terminal allocation
+
+#### Security
diff --git a/README.md b/README.md
index c19d1e0a4a..dcd545b27a 100644
--- a/README.md
+++ b/README.md
@@ -126,0 +127,11 @@ docker ps
+Share your own image!
+---------------------
+
+```bash
+docker pull base
+CONTAINER=$(docker run -d base apt-get install -y curl)
+docker commit -m "Installed curl" $CONTAINER $USER/betterbase
+docker push $USER/betterbase
+```
+
+
diff --git a/README.md b/README.md
index 3c3765fdc2..c19d1e0a4a 100644
--- a/README.md
+++ b/README.md
@@ -11 +10,0 @@ Docker is a great building block for automating distributed systems: large-scale
-
@@ -13 +11,0 @@ Docker is a great building block for automating distributed systems: large-scale
-
@@ -15 +12,0 @@ Docker is a great building block for automating distributed systems: large-scale
-
@@ -23 +19,0 @@ Notable features
-
@@ -25 +20,0 @@ Notable features
-
@@ -27 +21,0 @@ Notable features
-
@@ -29 +22,0 @@ Notable features
-
@@ -31 +23,0 @@ Notable features
-
@@ -33 +24,0 @@ Notable features
-
@@ -37 +27,0 @@ Notable features
-
@@ -45 +34,0 @@ Under the hood, Docker is built on the following components:
-
@@ -47 +35,0 @@ Under the hood, Docker is built on the following components:
-
@@ -49 +36,0 @@ Under the hood, Docker is built on the following components:
-
@@ -56,24 +42,0 @@ Install instructions
-Building from source
---------------------
-
-1. Make sure you have a [Go language](http://golang.org) compiler.
-
-    On a Debian/wheezy or Ubuntu 12.10 install the package:
-
-    ```bash
-
-    $ sudo apt-get install golang-go
-    ```
-
-2. Execute ``make``
-
-   This command will install all necessary dependencies and build the
-   executable that you can find in ``bin/docker``
-
-3. Should you like to see what's happening, run ``make`` with ``VERBOSE=1`` parameter:
-
-    ```bash
-
-    $ make VERBOSE=1
-    ```
-
@@ -102,0 +66 @@ Installing on Ubuntu 12.04 and 12.10
+    sudo ./docker pull base
@@ -118,31 +82 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
-Installing with Vagrant
------------------------
-
-Currently, Docker can be installed with Vagrant both on your localhost
-with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
-EC2, but deploying is as simple as:
-
-```bash
-$ export AWS_ACCESS_KEY_ID=xxx \
-	AWS_SECRET_ACCESS_KEY=xxx \
-	AWS_KEYPAIR_NAME=xxx \
-	AWS_SSH_PRIVKEY=xxx
-$ vagrant plugin install vagrant-aws
-$ vagrant up --provider=aws
-```
-
-The environment variables are:
-
-* `AWS_ACCESS_KEY_ID` - The API key used to make requests to AWS
-* `AWS_SECRET_ACCESS_KEY` - The secret key to make AWS API requests
-* `AWS_KEYPAIR_NAME` - The name of the keypair used for this EC2 instance
-* `AWS_SSH_PRIVKEY` - The path to the private key for the named keypair
-
-For VirtualBox, you can simply ignore setting any of the environment
-variables and omit the `provider` flag. VirtualBox is still supported with
-Vagrant &lt;= 1.1:
-
-```bash
-$ vagrant up
-```
-
+Some streamlined (but possibly outdated) installation paths' are available from the website: http://docker.io/documentation/ 
@@ -213,137 +147 @@ Contributing to Docker
-Want to hack on Docker? Awesome! Here are instructions to get you started. They are probably not perfect, please let us know if anything feels wrong or incomplete.
-
-Contribution guidelines
------------------------
-
-### Pull requests are always welcome
-
-We are always thrilled to receive pull requests, and do our best to process them as fast as possible. Not sure if that typo is worth a pull request? Do it! We will appreciate it.
-
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
-
-We're trying very hard to keep Docker lean and focused. We don't want it to do everything for everybody. This means that we might decide against incorporating a new feature.
-However, there might be a way to implement that feature *on top of* docker.
-
-### Discuss your design on the mailing list
-
-We recommend discussing your plans [on the mailing list](https://groups.google.com/forum/?fromgroups#!forum/docker-club) before starting to code - especially for more ambitious contributions. This gives other contributors a chance to point
-you in the right direction, give feedback on your design, and maybe point out if someone else is working on the same thing.
-
-### Create issues...
-
-Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
-
-### ...but check for existing issues first!
-
-Please take a moment to check that an issue doesn't already exist documenting your bug report or improvement proposal.
-If it does, it never hurts to add a quick "+1" or "I have this problem too". This will help prioritize the most common problems and requests.
-
-
-### Write tests
-
-Golang has a great testing suite built in: use it! Take a look at existing tests for inspiration.
-
-
-
-Setting up a dev environment
-----------------------------
-
-Instructions that have been verified to work on Ubuntu 12.10,
-
-```bash
-sudo apt-get -y install lxc wget bsdtar curl golang git
-
-export GOPATH=~/go/
-export PATH=$GOPATH/bin:$PATH
-
-mkdir -p $GOPATH/src/github.com/dotcloud
-cd $GOPATH/src/github.com/dotcloud
-git clone git@github.com:dotcloud/docker.git
-cd docker
-
-go get -v github.com/dotcloud/docker/...
-go install -v github.com/dotcloud/docker/...
-```
-
-Then run the docker daemon,
-
-```bash
-sudo $GOPATH/bin/docker -d
-```
-
-Run the `go install` command (above) to recompile docker.
-
-
-What is a Standard Container?
-=============================
-
-Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
-
-The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
-
-A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
-
-### 1. STANDARD OPERATIONS
-
-Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
-
-
-### 2. CONTENT-AGNOSTIC
-
-Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffee or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
-
-
-### 3. INFRASTRUCTURE-AGNOSTIC
-
-Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
-
-
-### 4. DESIGNED FOR AUTOMATION
-
-Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
-
-Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
-
-Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
-
-
-### 5. INDUSTRIAL-GRADE DELIVERY
-
-There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
-
-With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
-
-
-
-
-Standard Container Specification
---------------------------------
-
-(TODO)
-
-### Image format
-
-
-### Standard operations
-
-* Copy
-* Run
-* Stop
-* Wait
-* Commit
-* Attach standard streams
-* List filesystem changes
-* ...
-
-### Execution environment
-
-#### Root filesystem
-
-#### Environment variables
-
-#### Process arguments
-
-#### Networking
-
-#### Process namespacing
+Want to hack on Docker? Awesome! There are instructions to get you started on the website: http://docker.io/documentation/contributing/contributing.html 
@@ -351 +149 @@ Standard Container Specification
-#### Resource limits
+They are probably not perfect, please let us know if anything feels wrong or incomplete.
@@ -353 +150,0 @@ Standard Container Specification
-#### Process monitoring
@@ -355 +152,2 @@ Standard Container Specification
-#### Logging
+Note
+----
@@ -357 +155,2 @@ Standard Container Specification
-#### Signals
+We also keep the documentation in this repository. The website documentation is generated using sphinx using these sources.
+Please find it under docs/sources/ and read more about it https://github.com/dotcloud/docker/master/docs/README.md
@@ -359 +158 @@ Standard Container Specification
-#### Pseudo-terminal allocation
+Please feel free to fix / update the documentation and send us pull requests. More tutorials are also welcome.
@@ -361 +159,0 @@ Standard Container Specification
-#### Security
diff --git a/README.md b/README.md
index 247d763e30..3c3765fdc2 100644
--- a/README.md
+++ b/README.md
@@ -72,0 +73,7 @@ Building from source
+3. Should you like to see what's happening, run ``make`` with ``VERBOSE=1`` parameter:
+
+    ```bash
+
+    $ make VERBOSE=1
+    ```
+
diff --git a/README.md b/README.md
index 0ff28ec101..247d763e30 100644
--- a/README.md
+++ b/README.md
@@ -70 +70,2 @@ Building from source
-3. Find your binary in ``bin/docker``
+   This command will install all necessary dependencies and build the
+   executable that you can find in ``bin/docker``
diff --git a/README.md b/README.md
index c3c5d48053..0ff28ec101 100644
--- a/README.md
+++ b/README.md
@@ -10,0 +11 @@ Docker is a great building block for automating distributed systems: large-scale
+
@@ -11,0 +13 @@ Docker is a great building block for automating distributed systems: large-scale
+
@@ -12,0 +15 @@ Docker is a great building block for automating distributed systems: large-scale
+
@@ -19,0 +23 @@ Notable features
+
@@ -20,0 +25 @@ Notable features
+
@@ -21,0 +27 @@ Notable features
+
@@ -22,0 +29 @@ Notable features
+
@@ -23,0 +31 @@ Notable features
+
@@ -24,0 +33 @@ Notable features
+
@@ -27,0 +37 @@ Notable features
+
@@ -34,0 +45 @@ Under the hood, Docker is built on the following components:
+
@@ -35,0 +47 @@ Under the hood, Docker is built on the following components:
+
@@ -36,0 +49 @@ Under the hood, Docker is built on the following components:
+
@@ -42,0 +56,16 @@ Install instructions
+Building from source
+--------------------
+
+1. Make sure you have a [Go language](http://golang.org) compiler.
+
+    On a Debian/wheezy or Ubuntu 12.10 install the package:
+
+    ```bash
+
+    $ sudo apt-get install golang-go
+    ```
+
+2. Execute ``make``
+
+3. Find your binary in ``bin/docker``
+
@@ -81 +110,31 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
-Some streamlined (but possibly outdated) installation paths' are available from the website: http://docker.io/documentation/ 
+Installing with Vagrant
+-----------------------
+
+Currently, Docker can be installed with Vagrant both on your localhost
+with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
+EC2, but deploying is as simple as:
+
+```bash
+$ export AWS_ACCESS_KEY_ID=xxx \
+	AWS_SECRET_ACCESS_KEY=xxx \
+	AWS_KEYPAIR_NAME=xxx \
+	AWS_SSH_PRIVKEY=xxx
+$ vagrant plugin install vagrant-aws
+$ vagrant up --provider=aws
+```
+
+The environment variables are:
+
+* `AWS_ACCESS_KEY_ID` - The API key used to make requests to AWS
+* `AWS_SECRET_ACCESS_KEY` - The secret key to make AWS API requests
+* `AWS_KEYPAIR_NAME` - The name of the keypair used for this EC2 instance
+* `AWS_SSH_PRIVKEY` - The path to the private key for the named keypair
+
+For VirtualBox, you can simply ignore setting any of the environment
+variables and omit the `provider` flag. VirtualBox is still supported with
+Vagrant &lt;= 1.1:
+
+```bash
+$ vagrant up
+```
+
@@ -146 +205,137 @@ Contributing to Docker
-Want to hack on Docker? Awesome! There are instructions to get you started on the website: http://docker.io/documentation/contributing/contributing.html 
+Want to hack on Docker? Awesome! Here are instructions to get you started. They are probably not perfect, please let us know if anything feels wrong or incomplete.
+
+Contribution guidelines
+-----------------------
+
+### Pull requests are always welcome
+
+We are always thrilled to receive pull requests, and do our best to process them as fast as possible. Not sure if that typo is worth a pull request? Do it! We will appreciate it.
+
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
+
+We're trying very hard to keep Docker lean and focused. We don't want it to do everything for everybody. This means that we might decide against incorporating a new feature.
+However, there might be a way to implement that feature *on top of* docker.
+
+### Discuss your design on the mailing list
+
+We recommend discussing your plans [on the mailing list](https://groups.google.com/forum/?fromgroups#!forum/docker-club) before starting to code - especially for more ambitious contributions. This gives other contributors a chance to point
+you in the right direction, give feedback on your design, and maybe point out if someone else is working on the same thing.
+
+### Create issues...
+
+Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
+
+### ...but check for existing issues first!
+
+Please take a moment to check that an issue doesn't already exist documenting your bug report or improvement proposal.
+If it does, it never hurts to add a quick "+1" or "I have this problem too". This will help prioritize the most common problems and requests.
+
+
+### Write tests
+
+Golang has a great testing suite built in: use it! Take a look at existing tests for inspiration.
+
+
+
+Setting up a dev environment
+----------------------------
+
+Instructions that have been verified to work on Ubuntu 12.10,
+
+```bash
+sudo apt-get -y install lxc wget bsdtar curl golang git
+
+export GOPATH=~/go/
+export PATH=$GOPATH/bin:$PATH
+
+mkdir -p $GOPATH/src/github.com/dotcloud
+cd $GOPATH/src/github.com/dotcloud
+git clone git@github.com:dotcloud/docker.git
+cd docker
+
+go get -v github.com/dotcloud/docker/...
+go install -v github.com/dotcloud/docker/...
+```
+
+Then run the docker daemon,
+
+```bash
+sudo $GOPATH/bin/docker -d
+```
+
+Run the `go install` command (above) to recompile docker.
+
+
+What is a Standard Container?
+=============================
+
+Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
+
+The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+
+A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+
+### 1. STANDARD OPERATIONS
+
+Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
+
+
+### 2. CONTENT-AGNOSTIC
+
+Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffee or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
+
+
+### 3. INFRASTRUCTURE-AGNOSTIC
+
+Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
+
+
+### 4. DESIGNED FOR AUTOMATION
+
+Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
+
+Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
+
+Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
+
+
+### 5. INDUSTRIAL-GRADE DELIVERY
+
+There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
+
+With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
+
+
+
+
+Standard Container Specification
+--------------------------------
+
+(TODO)
+
+### Image format
+
+
+### Standard operations
+
+* Copy
+* Run
+* Stop
+* Wait
+* Commit
+* Attach standard streams
+* List filesystem changes
+* ...
+
+### Execution environment
+
+#### Root filesystem
+
+#### Environment variables
+
+#### Process arguments
+
+#### Networking
+
+#### Process namespacing
@@ -148 +343 @@ Want to hack on Docker? Awesome! There are instructions to get you started on th
-They are probably not perfect, please let us know if anything feels wrong or incomplete.
+#### Resource limits
@@ -149,0 +345 @@ They are probably not perfect, please let us know if anything feels wrong or inc
+#### Process monitoring
@@ -151,2 +347 @@ They are probably not perfect, please let us know if anything feels wrong or inc
-Note
-----
+#### Logging
@@ -154,2 +349 @@ Note
-We also keep the documentation in this repository. The website documentation is generated using sphinx using these sources.
-Please find it under docs/sources/ and read more about it https://github.com/dotcloud/docker/master/docs/README.md
+#### Signals
@@ -157 +351 @@ Please find it under docs/sources/ and read more about it https://github.com/dot
-Please feel free to fix / update the documentation and send us pull requests. More tutorials are also welcome.
+#### Pseudo-terminal allocation
@@ -158,0 +353 @@ Please feel free to fix / update the documentation and send us pull requests. Mo
+#### Security
diff --git a/README.md b/README.md
index c955a1dcf2..c3c5d48053 100644
--- a/README.md
+++ b/README.md
@@ -11 +10,0 @@ Docker is a great building block for automating distributed systems: large-scale
-
@@ -13 +11,0 @@ Docker is a great building block for automating distributed systems: large-scale
-
@@ -15 +12,0 @@ Docker is a great building block for automating distributed systems: large-scale
-
@@ -23 +19,0 @@ Notable features
-
@@ -25 +20,0 @@ Notable features
-
@@ -27 +21,0 @@ Notable features
-
@@ -29 +22,0 @@ Notable features
-
@@ -31 +23,0 @@ Notable features
-
@@ -33 +24,0 @@ Notable features
-
@@ -37 +27,0 @@ Notable features
-
@@ -45 +34,0 @@ Under the hood, Docker is built on the following components:
-
@@ -47 +35,0 @@ Under the hood, Docker is built on the following components:
-
@@ -49 +36,0 @@ Under the hood, Docker is built on the following components:
-
@@ -94,31 +81 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
-Installing with Vagrant
------------------------
-
-Currently, Docker can be installed with Vagrant both on your localhost
-with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
-EC2, but deploying is as simple as:
-
-```bash
-$ export AWS_ACCESS_KEY_ID=xxx \
-	AWS_SECRET_ACCESS_KEY=xxx \
-	AWS_KEYPAIR_NAME=xxx \
-	AWS_SSH_PRIVKEY=xxx
-$ vagrant plugin install vagrant-aws
-$ vagrant up --provider=aws
-```
-
-The environment variables are:
-
-* `AWS_ACCESS_KEY_ID` - The API key used to make requests to AWS
-* `AWS_SECRET_ACCESS_KEY` - The secret key to make AWS API requests
-* `AWS_KEYPAIR_NAME` - The name of the keypair used for this EC2 instance
-* `AWS_SSH_PRIVKEY` - The path to the private key for the named keypair
-
-For VirtualBox, you can simply ignore setting any of the environment
-variables and omit the `provider` flag. VirtualBox is still supported with
-Vagrant &lt;= 1.1:
-
-```bash
-$ vagrant up
-```
-
+Some streamlined (but possibly outdated) installation paths' are available from the website: http://docker.io/documentation/ 
@@ -189,137 +146 @@ Contributing to Docker
-Want to hack on Docker? Awesome! Here are instructions to get you started. They are probably not perfect, please let us know if anything feels wrong or incomplete.
-
-Contribution guidelines
------------------------
-
-### Pull requests are always welcome
-
-We are always thrilled to receive pull requests, and do our best to process them as fast as possible. Not sure if that typo is worth a pull request? Do it! We will appreciate it.
-
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
-
-We're trying very hard to keep Docker lean and focused. We don't want it to do everything for everybody. This means that we might decide against incorporating a new feature.
-However, there might be a way to implement that feature *on top of* docker.
-
-### Discuss your design on the mailing list
-
-We recommend discussing your plans [on the mailing list](https://groups.google.com/forum/?fromgroups#!forum/docker-club) before starting to code - especially for more ambitious contributions. This gives other contributors a chance to point
-you in the right direction, give feedback on your design, and maybe point out if someone else is working on the same thing.
-
-### Create issues...
-
-Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
-
-### ...but check for existing issues first!
-
-Please take a moment to check that an issue doesn't already exist documenting your bug report or improvement proposal.
-If it does, it never hurts to add a quick "+1" or "I have this problem too". This will help prioritize the most common problems and requests.
-
-
-### Write tests
-
-Golang has a great testing suite built in: use it! Take a look at existing tests for inspiration.
-
-
-
-Setting up a dev environment
-----------------------------
-
-Instructions that have been verified to work on Ubuntu 12.10,
-
-```bash
-sudo apt-get -y install lxc wget bsdtar curl golang git
-
-export GOPATH=~/go/
-export PATH=$GOPATH/bin:$PATH
-
-mkdir -p $GOPATH/src/github.com/dotcloud
-cd $GOPATH/src/github.com/dotcloud
-git clone git@github.com:dotcloud/docker.git
-cd docker
-
-go get -v github.com/dotcloud/docker/...
-go install -v github.com/dotcloud/docker/...
-```
-
-Then run the docker daemon,
-
-```bash
-sudo $GOPATH/bin/docker -d
-```
-
-Run the `go install` command (above) to recompile docker.
-
-
-What is a Standard Container?
-=============================
-
-Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
-
-The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
-
-A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
-
-### 1. STANDARD OPERATIONS
-
-Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
-
-
-### 2. CONTENT-AGNOSTIC
-
-Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffee or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
-
-
-### 3. INFRASTRUCTURE-AGNOSTIC
-
-Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
-
-
-### 4. DESIGNED FOR AUTOMATION
-
-Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
-
-Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
-
-Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
-
-
-### 5. INDUSTRIAL-GRADE DELIVERY
-
-There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
-
-With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
-
-
-
-
-Standard Container Specification
---------------------------------
-
-(TODO)
-
-### Image format
-
-
-### Standard operations
-
-* Copy
-* Run
-* Stop
-* Wait
-* Commit
-* Attach standard streams
-* List filesystem changes
-* ...
-
-### Execution environment
-
-#### Root filesystem
-
-#### Environment variables
-
-#### Process arguments
-
-#### Networking
-
-#### Process namespacing
+Want to hack on Docker? Awesome! There are instructions to get you started on the website: http://docker.io/documentation/contributing/contributing.html 
@@ -327 +148 @@ Standard Container Specification
-#### Resource limits
+They are probably not perfect, please let us know if anything feels wrong or incomplete.
@@ -329 +149,0 @@ Standard Container Specification
-#### Process monitoring
@@ -331 +151,2 @@ Standard Container Specification
-#### Logging
+Note
+----
@@ -333 +154,2 @@ Standard Container Specification
-#### Signals
+We also keep the documentation in this repository. The website documentation is generated using sphinx using these sources.
+Please find it under docs/sources/ and read more about it https://github.com/dotcloud/docker/master/docs/README.md
@@ -335 +157 @@ Standard Container Specification
-#### Pseudo-terminal allocation
+Please feel free to fix / update the documentation and send us pull requests. More tutorials are also welcome.
@@ -337 +158,0 @@ Standard Container Specification
-#### Security
diff --git a/README.md b/README.md
index 858d2c05ce..c955a1dcf2 100644
--- a/README.md
+++ b/README.md
@@ -97,3 +97,3 @@ Installing with Vagrant
-Currently, Docker can be installed with Vagrant on your localhost with VirtualBox, 
-Amazon EC2, and Rackspace Cloud Servers. Vagrant 1.1 is required for EC2 and 
-Rackspace Cloud, but deploying is as simple as:
+Currently, Docker can be installed with Vagrant both on your localhost
+with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
+EC2, but deploying is as simple as:
@@ -101 +100,0 @@ Rackspace Cloud, but deploying is as simple as:
-Amazon EC2:
@@ -118,17 +116,0 @@ The environment variables are:
-Rackspace Cloud Servers:
-```bash
-$ export RS_USERNAME=xxx \
-        RS_API_KEY=xxx \
-        RS_PUBLIC_KEY=xxx \
-        RS_PRIVATE_KEY=xxx
-$ vagrant plugin install vagrant-rackspace
-$ vagrant up --provider=rackspace
-```
-
-The environment variables are:
-
-* `RS_USERNAME` - The user name used to make requests to Rackspace Cloud
-* `RS_API_KEY` - The secret key to make Rackspace Cloud API requests
-* `RS_PUBLIC_KEY` - The location on disk to your public key that will be injected into the instance.
-* `RS_PRIVATE_KEY` - The private key that matches the public key being injected.
-
@@ -153 +135 @@ Running an interactive shell
-docker import base
+docker pull base
diff --git a/README.md b/README.md
index 851ddb4fce..858d2c05ce 100644
--- a/README.md
+++ b/README.md
@@ -97,3 +97,3 @@ Installing with Vagrant
-Currently, Docker can be installed with Vagrant both on your localhost
-with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
-EC2, but deploying is as simple as:
+Currently, Docker can be installed with Vagrant on your localhost with VirtualBox, 
+Amazon EC2, and Rackspace Cloud Servers. Vagrant 1.1 is required for EC2 and 
+Rackspace Cloud, but deploying is as simple as:
@@ -100,0 +101 @@ EC2, but deploying is as simple as:
+Amazon EC2:
@@ -116,0 +118,17 @@ The environment variables are:
+Rackspace Cloud Servers:
+```bash
+$ export RS_USERNAME=xxx \
+        RS_API_KEY=xxx \
+        RS_PUBLIC_KEY=xxx \
+        RS_PRIVATE_KEY=xxx
+$ vagrant plugin install vagrant-rackspace
+$ vagrant up --provider=rackspace
+```
+
+The environment variables are:
+
+* `RS_USERNAME` - The user name used to make requests to Rackspace Cloud
+* `RS_API_KEY` - The secret key to make Rackspace Cloud API requests
+* `RS_PUBLIC_KEY` - The location on disk to your public key that will be injected into the instance.
+* `RS_PRIVATE_KEY` - The private key that matches the public key being injected.
+
diff --git a/README.md b/README.md
index 60ee1c56e4..851ddb4fce 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Docker: the Linux container runtime
-Docker complements LXC with a high-level API with operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
+Docker complements LXC with a high-level API which operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
@@ -6 +6 @@ Docker complements LXC with a high-level API with operates at the process level.
-Is is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
+Docker is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
@@ -30 +30 @@ Notable features
-* Logging: the standard streams (stdout/stderr/stdin) of each process container is collected and logged for real-time or batch retrieval.
+* Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.
@@ -61,4 +61,4 @@ Installing on Ubuntu 12.04 and 12.10
-```bash
-sudo apt-get install lxc wget bsdtar curl
-sudo apt-get install linux-image-extra-`uname -r`
-```
+    ```bash
+    sudo apt-get install lxc wget bsdtar curl
+    sudo apt-get install linux-image-extra-`uname -r`
+    ```
@@ -66 +66 @@ sudo apt-get install linux-image-extra-`uname -r`
-The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
+    The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
@@ -70,4 +70,4 @@ The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order t
-```bash
-wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
-tar -xf docker-master.tgz
-```
+    ```bash
+    wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
+    tar -xf docker-master.tgz
+    ```
@@ -77,4 +77,4 @@ tar -xf docker-master.tgz
-```bash
-cd docker-master
-sudo ./docker run -a -i -t base /bin/bash
-```
+    ```bash
+    cd docker-master
+    sudo ./docker run -i -t base /bin/bash
+    ```
@@ -82 +82 @@ sudo ./docker run -a -i -t base /bin/bash
-Consider adding docker to your `PATH` for simplicity.
+    Consider adding docker to your `PATH` for simplicity.
@@ -97,3 +97,3 @@ Installing with Vagrant
-Currently, Docker can be installed with Vagrant on your localhost with VirtualBox, 
-Amazon EC2, and Rackspace Cloud Servers. Vagrant 1.1 is required for EC2 and 
-Rackspace Cloud, but deploying is as simple as:
+Currently, Docker can be installed with Vagrant both on your localhost
+with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
+EC2, but deploying is as simple as:
@@ -101 +100,0 @@ Rackspace Cloud, but deploying is as simple as:
-Amazon EC2:
@@ -118,17 +116,0 @@ The environment variables are:
-Rackspace Cloud Servers:
-```bash
-$ export RS_USERNAME=xxx \
-        RS_API_KEY=xxx \
-        RS_PUBLIC_KEY=xxx \
-        RS_PRIVATE_KEY=xxx
-$ vagrant plugin install vagrant-rackspace
-$ vagrant up --provider=rackspace
-```
-
-The environment variables are:
-
-* `RS_USERNAME` - The user name used to make requests to Rackspace Cloud
-* `RS_API_KEY` - The secret key to make Rackspace Cloud API requests
-* `RS_PUBLIC_KEY` - The location on disk to your public key that will be injected into the instance.
-* `RS_PRIVATE_KEY` - The private key that matches the public key being injected.
-
@@ -157 +139 @@ docker import base
-docker run -a -i -t base /bin/bash
+docker run -i -t base /bin/bash
@@ -169 +151 @@ Starting a long-running worker process
-JOB=$(docker run base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
+JOB=$(docker run -d base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
@@ -192 +174 @@ Expose a service on a TCP port
-JOB=$(docker run -p 4444 base /bin/nc -l -p 4444)
+JOB=$(docker run -d -p 4444 base /bin/nc -l -p 4444)
@@ -216 +198 @@ We are always thrilled to receive pull requests, and do our best to process them
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problen with the implementation, hopefully you received feedback on what to improve.
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
@@ -219 +201 @@ We're trying very hard to keep Docker lean and focused. We don't want it to do e
-However there might be a way to implement that feature *on top of* docker.
+However, there might be a way to implement that feature *on top of* docker.
@@ -228 +210 @@ you in the right direction, give feedback on your design, and maybe point out if
-Any significant improvement should be documented as a github issue before anybody start working on it.
+Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
@@ -245 +227 @@ Setting up a dev environment
-Instructions that is verified to work on Ubuntu 12.10,
+Instructions that have been verified to work on Ubuntu 12.10,
@@ -248 +230 @@ Instructions that is verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc wget bsdtar curl libsqlite3-dev golang git pkg-config
+sudo apt-get -y install lxc wget bsdtar curl golang git
@@ -275 +257 @@ Docker defines a unit of software delivery called a Standard Container. The goal
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
@@ -277 +259 @@ a format that is self-describing and portable, so that any compliant runtime can
-The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
diff --git a/README.md b/README.md
index 7e8af5757c..60ee1c56e4 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Docker: the Linux container runtime
-Docker complements LXC with a high-level API which operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
+Docker complements LXC with a high-level API with operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
@@ -6 +6 @@ Docker complements LXC with a high-level API which operates at the process level
-Docker is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
+Is is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
@@ -30 +30 @@ Notable features
-* Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.
+* Logging: the standard streams (stdout/stderr/stdin) of each process container is collected and logged for real-time or batch retrieval.
@@ -61,4 +61,4 @@ Installing on Ubuntu 12.04 and 12.10
-    ```bash
-    sudo apt-get install lxc wget bsdtar curl
-    sudo apt-get install linux-image-extra-`uname -r`
-    ```
+```bash
+sudo apt-get install lxc wget bsdtar curl
+sudo apt-get install linux-image-extra-`uname -r`
+```
@@ -66 +66 @@ Installing on Ubuntu 12.04 and 12.10
-    The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
+The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
@@ -70,4 +70,4 @@ Installing on Ubuntu 12.04 and 12.10
-    ```bash
-    wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
-    tar -xf docker-master.tgz
-    ```
+```bash
+wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
+tar -xf docker-master.tgz
+```
@@ -77,4 +77,4 @@ Installing on Ubuntu 12.04 and 12.10
-    ```bash
-    cd docker-master
-    sudo ./docker run -i -t base /bin/bash
-    ```
+```bash
+cd docker-master
+sudo ./docker run -a -i -t base /bin/bash
+```
@@ -82 +82 @@ Installing on Ubuntu 12.04 and 12.10
-    Consider adding docker to your `PATH` for simplicity.
+Consider adding docker to your `PATH` for simplicity.
@@ -97,3 +97,3 @@ Installing with Vagrant
-Currently, Docker can be installed with Vagrant both on your localhost
-with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
-EC2, but deploying is as simple as:
+Currently, Docker can be installed with Vagrant on your localhost with VirtualBox, 
+Amazon EC2, and Rackspace Cloud Servers. Vagrant 1.1 is required for EC2 and 
+Rackspace Cloud, but deploying is as simple as:
@@ -100,0 +101 @@ EC2, but deploying is as simple as:
+Amazon EC2:
@@ -116,0 +118,17 @@ The environment variables are:
+Rackspace Cloud Servers:
+```bash
+$ export RS_USERNAME=xxx \
+        RS_API_KEY=xxx \
+        RS_PUBLIC_KEY=xxx \
+        RS_PRIVATE_KEY=xxx
+$ vagrant plugin install vagrant-rackspace
+$ vagrant up --provider=rackspace
+```
+
+The environment variables are:
+
+* `RS_USERNAME` - The user name used to make requests to Rackspace Cloud
+* `RS_API_KEY` - The secret key to make Rackspace Cloud API requests
+* `RS_PUBLIC_KEY` - The location on disk to your public key that will be injected into the instance.
+* `RS_PRIVATE_KEY` - The private key that matches the public key being injected.
+
@@ -139 +157 @@ docker import base
-docker run -i -t base /bin/bash
+docker run -a -i -t base /bin/bash
@@ -151 +169 @@ Starting a long-running worker process
-JOB=$(docker run -d base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
+JOB=$(docker run base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
@@ -174 +192 @@ Expose a service on a TCP port
-JOB=$(docker run -d -p 4444 base /bin/nc -l -p 4444)
+JOB=$(docker run -p 4444 base /bin/nc -l -p 4444)
@@ -198 +216 @@ We are always thrilled to receive pull requests, and do our best to process them
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problen with the implementation, hopefully you received feedback on what to improve.
@@ -201 +219 @@ We're trying very hard to keep Docker lean and focused. We don't want it to do e
-However, there might be a way to implement that feature *on top of* docker.
+However there might be a way to implement that feature *on top of* docker.
@@ -210 +228 @@ you in the right direction, give feedback on your design, and maybe point out if
-Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
+Any significant improvement should be documented as a github issue before anybody start working on it.
@@ -227 +245 @@ Setting up a dev environment
-Instructions that have been verified to work on Ubuntu 12.10,
+Instructions that is verified to work on Ubuntu 12.10,
@@ -257 +275 @@ Docker defines a unit of software delivery called a Standard Container. The goal
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
@@ -259 +277 @@ a format that is self-describing and portable, so that any compliant runtime can
-The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
diff --git a/README.md b/README.md
index 0a9b69c6de..7e8af5757c 100644
--- a/README.md
+++ b/README.md
@@ -79 +79 @@ Installing on Ubuntu 12.04 and 12.10
-    sudo ./docker run -a -i -t base /bin/bash
+    sudo ./docker run -i -t base /bin/bash
@@ -139 +139 @@ docker import base
-docker run -a -i -t base /bin/bash
+docker run -i -t base /bin/bash
@@ -151 +151 @@ Starting a long-running worker process
-JOB=$(docker run base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
+JOB=$(docker run -d base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
@@ -174 +174 @@ Expose a service on a TCP port
-JOB=$(docker run -p 4444 base /bin/nc -l -p 4444)
+JOB=$(docker run -d -p 4444 base /bin/nc -l -p 4444)
diff --git a/README.md b/README.md
index 1b167273c1..0a9b69c6de 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Docker: the Linux container runtime
-Docker complements LXC with a high-level API with operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
+Docker complements LXC with a high-level API which operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
@@ -6 +6 @@ Docker complements LXC with a high-level API with operates at the process level.
-Is is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
+Docker is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
@@ -30 +30 @@ Notable features
-* Logging: the standard streams (stdout/stderr/stdin) of each process container is collected and logged for real-time or batch retrieval.
+* Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.
@@ -198 +198 @@ We are always thrilled to receive pull requests, and do our best to process them
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problen with the implementation, hopefully you received feedback on what to improve.
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
@@ -201 +201 @@ We're trying very hard to keep Docker lean and focused. We don't want it to do e
-However there might be a way to implement that feature *on top of* docker.
+However, there might be a way to implement that feature *on top of* docker.
@@ -210 +210 @@ you in the right direction, give feedback on your design, and maybe point out if
-Any significant improvement should be documented as a github issue before anybody start working on it.
+Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
@@ -227 +227 @@ Setting up a dev environment
-Instructions that is verified to work on Ubuntu 12.10,
+Instructions that have been verified to work on Ubuntu 12.10,
@@ -257 +257 @@ Docker defines a unit of software delivery called a Standard Container. The goal
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
@@ -259 +259 @@ a format that is self-describing and portable, so that any compliant runtime can
-The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
diff --git a/README.md b/README.md
index 68473ce383..1b167273c1 100644
--- a/README.md
+++ b/README.md
@@ -61,4 +61,4 @@ Installing on Ubuntu 12.04 and 12.10
-```bash
-sudo apt-get install lxc wget bsdtar curl
-sudo apt-get install linux-image-extra-`uname -r`
-```
+    ```bash
+    sudo apt-get install lxc wget bsdtar curl
+    sudo apt-get install linux-image-extra-`uname -r`
+    ```
@@ -66 +66 @@ sudo apt-get install linux-image-extra-`uname -r`
-The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
+    The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
@@ -70,4 +70,4 @@ The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order t
-```bash
-wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
-tar -xf docker-master.tgz
-```
+    ```bash
+    wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
+    tar -xf docker-master.tgz
+    ```
@@ -77,4 +77,4 @@ tar -xf docker-master.tgz
-```bash
-cd docker-master
-sudo ./docker run -a -i -t base /bin/bash
-```
+    ```bash
+    cd docker-master
+    sudo ./docker run -a -i -t base /bin/bash
+    ```
@@ -82 +82 @@ sudo ./docker run -a -i -t base /bin/bash
-Consider adding docker to your `PATH` for simplicity.
+    Consider adding docker to your `PATH` for simplicity.
diff --git a/README.md b/README.md
index bc3b57ee71..68473ce383 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Docker: the Linux container runtime
-Docker complements LXC with a high-level API which operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
+Docker complements LXC with a high-level API with operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
@@ -6 +6 @@ Docker complements LXC with a high-level API which operates at the process level
-Docker is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
+Is is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
@@ -30 +30 @@ Notable features
-* Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.
+* Logging: the standard streams (stdout/stderr/stdin) of each process container is collected and logged for real-time or batch retrieval.
@@ -62,2 +62,2 @@ Installing on Ubuntu 12.04 and 12.10
-        sudo apt-get install lxc wget bsdtar curl
-        sudo apt-get install linux-image-extra-`uname -r`
+sudo apt-get install lxc wget bsdtar curl
+sudo apt-get install linux-image-extra-`uname -r`
@@ -71,2 +71,2 @@ The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order t
-	wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
-	tar -xf docker-master.tgz
+wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
+tar -xf docker-master.tgz
@@ -78,2 +78,2 @@ The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order t
-	cd docker-master
-	sudo ./docker run -a -i -t base /bin/bash
+cd docker-master
+sudo ./docker run -a -i -t base /bin/bash
@@ -102,6 +102,6 @@ EC2, but deploying is as simple as:
-		$ export AWS_ACCESS_KEY_ID=xxx \
-			AWS_SECRET_ACCESS_KEY=xxx \
-			AWS_KEYPAIR_NAME=xxx \
-			AWS_SSH_PRIVKEY=xxx
-		$ vagrant plugin install vagrant-aws
-		$ vagrant up --provider=aws
+$ export AWS_ACCESS_KEY_ID=xxx \
+	AWS_SECRET_ACCESS_KEY=xxx \
+	AWS_KEYPAIR_NAME=xxx \
+	AWS_SSH_PRIVKEY=xxx
+$ vagrant plugin install vagrant-aws
+$ vagrant up --provider=aws
@@ -118,2 +118,2 @@ For VirtualBox, you can simply ignore setting any of the environment
-variables and omit the ``provider`` flag. VirtualBox is still supported with
-Vagrant <= 1.1:
+variables and omit the `provider` flag. VirtualBox is still supported with
+Vagrant &lt;= 1.1:
@@ -122 +122 @@ Vagrant <= 1.1:
-		$ vagrant up
+$ vagrant up
@@ -134,2 +134,2 @@ Running an interactive shell
-	# Download a base image
-	docker import base
+# Download a base image
+docker import base
@@ -137,3 +137,3 @@ Running an interactive shell
-	# Run an interactive shell in the base image,
-	# allocate a tty, attach stdin and stdout
-	docker run -a -i -t base /bin/bash
+# Run an interactive shell in the base image,
+# allocate a tty, attach stdin and stdout
+docker run -a -i -t base /bin/bash
@@ -147,2 +147,2 @@ Starting a long-running worker process
-	# Run docker in daemon mode
-	(docker -d || echo "Docker daemon already running") &
+# Run docker in daemon mode
+(docker -d || echo "Docker daemon already running") &
@@ -150,2 +150,2 @@ Starting a long-running worker process
-	# Start a very useful long-running process
-	JOB=$(docker run base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
+# Start a very useful long-running process
+JOB=$(docker run base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
@@ -153,2 +153,2 @@ Starting a long-running worker process
-	# Collect the output of the job so far
-	docker logs $JOB
+# Collect the output of the job so far
+docker logs $JOB
@@ -156,2 +156,2 @@ Starting a long-running worker process
-	# Kill the job
-	docker kill $JOB
+# Kill the job
+docker kill $JOB
@@ -165 +165 @@ Listing all running containers
-	docker ps
+docker ps
@@ -173,2 +173,2 @@ Expose a service on a TCP port
-	# Expose port 4444 of this container, and tell netcat to listen on it
-	JOB=$(docker run -p 4444 base /bin/nc -l -p 4444)
+# Expose port 4444 of this container, and tell netcat to listen on it
+JOB=$(docker run -p 4444 base /bin/nc -l -p 4444)
@@ -176,2 +176,2 @@ Expose a service on a TCP port
-	# Which public port is NATed to my container?
-	PORT=$(docker port $JOB 4444)
+# Which public port is NATed to my container?
+PORT=$(docker port $JOB 4444)
@@ -179,2 +179,2 @@ Expose a service on a TCP port
-	# Connect to the public port via the host's public address
-	echo hello world | nc $(hostname) $PORT
+# Connect to the public port via the host's public address
+echo hello world | nc $(hostname) $PORT
@@ -182,2 +182,2 @@ Expose a service on a TCP port
-	# Verify that the network connection worked
-	echo "Daemon received: $(docker logs $JOB)"
+# Verify that the network connection worked
+echo "Daemon received: $(docker logs $JOB)"
@@ -198 +198 @@ We are always thrilled to receive pull requests, and do our best to process them
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problen with the implementation, hopefully you received feedback on what to improve.
@@ -201 +201 @@ We're trying very hard to keep Docker lean and focused. We don't want it to do e
-However, there might be a way to implement that feature *on top of* docker.
+However there might be a way to implement that feature *on top of* docker.
@@ -210 +210 @@ you in the right direction, give feedback on your design, and maybe point out if
-Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
+Any significant improvement should be documented as a github issue before anybody start working on it.
@@ -227 +227 @@ Setting up a dev environment
-Instructions that have been verified to work on Ubuntu 12.10,
+Instructions that is verified to work on Ubuntu 12.10,
@@ -229 +229 @@ Instructions that have been verified to work on Ubuntu 12.10,
-```
+```bash
@@ -246 +246 @@ Then run the docker daemon,
-```
+```bash
@@ -257 +257 @@ Docker defines a unit of software delivery called a Standard Container. The goal
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
@@ -259 +259 @@ a format that is self-describing and portable, so that any compliant runtime can
-The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
diff --git a/README.md b/README.md
index c1c155ac73..bc3b57ee71 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Docker: the Linux container runtime
-Docker complements LXC with a high-level API with operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
+Docker complements LXC with a high-level API which operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
@@ -6 +6 @@ Docker complements LXC with a high-level API with operates at the process level.
-Is is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
+Docker is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
@@ -30 +30 @@ Notable features
-* Logging: the standard streams (stdout/stderr/stdin) of each process container is collected and logged for real-time or batch retrieval.
+* Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.
@@ -198 +198 @@ We are always thrilled to receive pull requests, and do our best to process them
-If your pull request is not accepted on the first try, don't be discouraged! If there's a problen with the implementation, hopefully you received feedback on what to improve.
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problem with the implementation, hopefully you received feedback on what to improve.
@@ -201 +201 @@ We're trying very hard to keep Docker lean and focused. We don't want it to do e
-However there might be a way to implement that feature *on top of* docker.
+However, there might be a way to implement that feature *on top of* docker.
@@ -210 +210 @@ you in the right direction, give feedback on your design, and maybe point out if
-Any significant improvement should be documented as a github issue before anybody start working on it.
+Any significant improvement should be documented as [a github issue](https://github.com/dotcloud/docker/issues) before anybody starts working on it.
@@ -227 +227 @@ Setting up a dev environment
-Instructions that is verified to work on Ubuntu 12.10,
+Instructions that have been verified to work on Ubuntu 12.10,
@@ -257 +257 @@ Docker defines a unit of software delivery called a Standard Container. The goal
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependencies, regardless of the underlying machine and the contents of the container.
@@ -259 +259 @@ a format that is self-describing and portable, so that any compliant runtime can
-The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+The spec for Standard Containers is currently a work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
diff --git a/README.md b/README.md
index 9a6bf8b445..c1c155ac73 100644
--- a/README.md
+++ b/README.md
@@ -151 +151 @@ Starting a long-running worker process
-	JOB=$(docker run base /bin/sh -c "while true; do echo Hello world!; sleep 1; done")
+	JOB=$(docker run base /bin/sh -c "while true; do echo Hello world; sleep 1; done")
diff --git a/README.md b/README.md
index f51db08ec6..9a6bf8b445 100644
--- a/README.md
+++ b/README.md
@@ -14 +14 @@ Is is a great building block for automating distributed systems: large-scale web
-* *Isolation*: docker isolates processes from each other and from the underlying host, using lightweight containers. 
+* *Isolation*: docker isolates processes from each other and from the underlying host, using lightweight containers.
@@ -230 +230 @@ Instructions that is verified to work on Ubuntu 12.10,
-sudo apt-get -y install lxc wget bsdtar curl libsqlite3-dev golang
+sudo apt-get -y install lxc wget bsdtar curl libsqlite3-dev golang git pkg-config
diff --git a/README.md b/README.md
index 490608cadc..f51db08ec6 100644
--- a/README.md
+++ b/README.md
@@ -227 +227 @@ Setting up a dev environment
-Coming soon!
+Instructions that is verified to work on Ubuntu 12.10,
@@ -228,0 +229,20 @@ Coming soon!
+```
+sudo apt-get -y install lxc wget bsdtar curl libsqlite3-dev golang
+
+export GOPATH=~/go/
+export PATH=$GOPATH/bin:$PATH
+
+mkdir -p $GOPATH/src/github.com/dotcloud
+cd $GOPATH/src/github.com/dotcloud
+git clone git@github.com:dotcloud/docker.git
+cd docker
+
+go get -v github.com/dotcloud/docker/...
+go install -v github.com/dotcloud/docker/...
+```
+
+Then run the docker daemon,
+
+```
+sudo $GOPATH/bin/docker -d
+```
@@ -229,0 +250 @@ Coming soon!
+Run the `go install` command (above) to recompile docker.
diff --git a/README.md b/README.md
index c15db8425d..490608cadc 100644
--- a/README.md
+++ b/README.md
@@ -62,0 +63 @@ Installing on Ubuntu 12.04 and 12.10
+        sudo apt-get install linux-image-extra-`uname -r`
@@ -64,0 +66,2 @@ Installing on Ubuntu 12.04 and 12.10
+The `linux-image-extra` package is needed on standard Ubuntu EC2 AMIs in order to install the aufs kernel module.
+
diff --git a/README.md b/README.md
index 0dfa53ed24..c15db8425d 100644
--- a/README.md
+++ b/README.md
@@ -182,0 +183,45 @@ Expose a service on a TCP port
+Contributing to Docker
+======================
+
+Want to hack on Docker? Awesome! Here are instructions to get you started. They are probably not perfect, please let us know if anything feels wrong or incomplete.
+
+Contribution guidelines
+-----------------------
+
+### Pull requests are always welcome
+
+We are always thrilled to receive pull requests, and do our best to process them as fast as possible. Not sure if that typo is worth a pull request? Do it! We will appreciate it.
+
+If your pull request is not accepted on the first try, don't be discouraged! If there's a problen with the implementation, hopefully you received feedback on what to improve.
+
+We're trying very hard to keep Docker lean and focused. We don't want it to do everything for everybody. This means that we might decide against incorporating a new feature.
+However there might be a way to implement that feature *on top of* docker.
+
+### Discuss your design on the mailing list
+
+We recommend discussing your plans [on the mailing list](https://groups.google.com/forum/?fromgroups#!forum/docker-club) before starting to code - especially for more ambitious contributions. This gives other contributors a chance to point
+you in the right direction, give feedback on your design, and maybe point out if someone else is working on the same thing.
+
+### Create issues...
+
+Any significant improvement should be documented as a github issue before anybody start working on it.
+
+### ...but check for existing issues first!
+
+Please take a moment to check that an issue doesn't already exist documenting your bug report or improvement proposal.
+If it does, it never hurts to add a quick "+1" or "I have this problem too". This will help prioritize the most common problems and requests.
+
+
+### Write tests
+
+Golang has a great testing suite built in: use it! Take a look at existing tests for inspiration.
+
+
+
+Setting up a dev environment
+----------------------------
+
+Coming soon!
+
+
+
diff --git a/README.md b/README.md
index 4293a7c04a..0dfa53ed24 100644
--- a/README.md
+++ b/README.md
@@ -56,31 +55,0 @@ Install instructions
-Installing with Vagrant
------------------------
-
-Currently, Docker can be installed with Vagrant both on your localhost
-with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
-EC2, but deploying is as simple as:
-
-```bash
-		$ export AWS_ACCESS_KEY_ID=xxx \
-			AWS_SECRET_ACCESS_KEY=xxx \
-			AWS_KEYPAIR_NAME=xxx \
-			AWS_SSH_PRIVKEY=xxx
-		$ vagrant plugin install vagrant-aws
-		$ vagrant up --provider=aws
-```
-
-The environment variables are:
-
-* `AWS_ACCESS_KEY_ID` - The API key used to make requests to AWS
-* `AWS_SECRET_ACCESS_KEY` - The secret key to make AWS API requests
-* `AWS_KEYPAIR_NAME` - The name of the keypair used for this EC2 instance
-* `AWS_SSH_PRIVKEY` - The path to the private key for the named keypair
-
-For VirtualBox, you can simply ignore setting any of the environment
-variables and omit the ``provider`` flag. VirtualBox is still supported with
-Vagrant <= 1.1:
-
-```bash
-		$ vagrant up
-```
-
@@ -121,0 +91,32 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
+Installing with Vagrant
+-----------------------
+
+Currently, Docker can be installed with Vagrant both on your localhost
+with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
+EC2, but deploying is as simple as:
+
+```bash
+		$ export AWS_ACCESS_KEY_ID=xxx \
+			AWS_SECRET_ACCESS_KEY=xxx \
+			AWS_KEYPAIR_NAME=xxx \
+			AWS_SSH_PRIVKEY=xxx
+		$ vagrant plugin install vagrant-aws
+		$ vagrant up --provider=aws
+```
+
+The environment variables are:
+
+* `AWS_ACCESS_KEY_ID` - The API key used to make requests to AWS
+* `AWS_SECRET_ACCESS_KEY` - The secret key to make AWS API requests
+* `AWS_KEYPAIR_NAME` - The name of the keypair used for this EC2 instance
+* `AWS_SSH_PRIVKEY` - The path to the private key for the named keypair
+
+For VirtualBox, you can simply ignore setting any of the environment
+variables and omit the ``provider`` flag. VirtualBox is still supported with
+Vagrant <= 1.1:
+
+```bash
+		$ vagrant up
+```
+
+
diff --git a/README.md b/README.md
index d162759ed8..4293a7c04a 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-Docker is a process manager with superpowers
-============================================
+Docker: the Linux container runtime
+===================================
@@ -4 +4 @@ Docker is a process manager with superpowers
-It encapsulates heterogeneous payloads in Standard Containers, and runs them on any server with strong guarantees of isolation and repeatability.
+Docker complements LXC with a high-level API with operates at the process level. It runs unix processes with strong guarantees of isolation and repeatability across servers.
diff --git a/README.md b/README.md
index 8dd6608834..d162759ed8 100644
--- a/README.md
+++ b/README.md
@@ -147 +147 @@ Starting a long-running worker process
-	JOB=$(docker run /bin/sh -c "while true; do echo Hello world!; sleep 1; done")
+	JOB=$(docker run base /bin/sh -c "while true; do echo Hello world!; sleep 1; done")
diff --git a/README.md b/README.md
index bfd633db50..8dd6608834 100644
--- a/README.md
+++ b/README.md
@@ -200 +200 @@ Just like shipping containers, Standard Containers define a set of STANDARD OPER
-Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffe or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
+Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffee or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
diff --git a/README.md b/README.md
index b8318ce08a..bfd633db50 100644
--- a/README.md
+++ b/README.md
@@ -107 +106,0 @@ Installing on Ubuntu 12.04 and 12.10
-	sudo ./docker import base
diff --git a/README.md b/README.md
index c99c4df619..b8318ce08a 100644
--- a/README.md
+++ b/README.md
@@ -84 +84 @@ Vagrant <= 1.1:
-		$ vagrant up --provider=aws
+		$ vagrant up
diff --git a/README.md b/README.md
index e9f1ac1667..c99c4df619 100644
--- a/README.md
+++ b/README.md
@@ -81 +81 @@ variables and omit the ``provider`` flag. VirtualBox is still supported with
-VirtualBox <= 1.1:
+Vagrant <= 1.1:
diff --git a/README.md b/README.md
index d087bc543c..e9f1ac1667 100644
--- a/README.md
+++ b/README.md
@@ -55,0 +56,31 @@ Install instructions
+Installing with Vagrant
+-----------------------
+
+Currently, Docker can be installed with Vagrant both on your localhost
+with VirtualBox as well as on Amazon EC2. Vagrant 1.1 is required for
+EC2, but deploying is as simple as:
+
+```bash
+		$ export AWS_ACCESS_KEY_ID=xxx \
+			AWS_SECRET_ACCESS_KEY=xxx \
+			AWS_KEYPAIR_NAME=xxx \
+			AWS_SSH_PRIVKEY=xxx
+		$ vagrant plugin install vagrant-aws
+		$ vagrant up --provider=aws
+```
+
+The environment variables are:
+
+* `AWS_ACCESS_KEY_ID` - The API key used to make requests to AWS
+* `AWS_SECRET_ACCESS_KEY` - The secret key to make AWS API requests
+* `AWS_KEYPAIR_NAME` - The name of the keypair used for this EC2 instance
+* `AWS_SSH_PRIVKEY` - The path to the private key for the named keypair
+
+For VirtualBox, you can simply ignore setting any of the environment
+variables and omit the ``provider`` flag. VirtualBox is still supported with
+VirtualBox <= 1.1:
+
+```bash
+		$ vagrant up --provider=aws
+```
+
diff --git a/README.md b/README.md
index 07449fa3fa..d087bc543c 100644
--- a/README.md
+++ b/README.md
@@ -34 +34 @@ Notable features
-* Interactive shell: docker can allocate a pseudo-tty and attach to the standard input of any container, for example to run a throaway interactive shell.
+* Interactive shell: docker can allocate a pseudo-tty and attach to the standard input of any container, for example to run a throwaway interactive shell.
diff --git a/README.md b/README.md
index 103410e799..07449fa3fa 100644
--- a/README.md
+++ b/README.md
@@ -60,0 +61 @@ Installing on Ubuntu 12.04 and 12.10
+```bash
@@ -61,0 +63 @@ Installing on Ubuntu 12.04 and 12.10
+```
@@ -64,0 +67 @@ Installing on Ubuntu 12.04 and 12.10
+```bash
@@ -66,0 +70 @@ Installing on Ubuntu 12.04 and 12.10
+```
@@ -69,0 +74 @@ Installing on Ubuntu 12.04 and 12.10
+```bash
@@ -72,0 +78 @@ Installing on Ubuntu 12.04 and 12.10
+```
diff --git a/README.md b/README.md
index 49a418bae9..103410e799 100644
--- a/README.md
+++ b/README.md
@@ -86,0 +87,60 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
+Usage examples
+==============
+
+Running an interactive shell
+----------------------------
+
+```bash
+	# Download a base image
+	docker import base
+
+	# Run an interactive shell in the base image,
+	# allocate a tty, attach stdin and stdout
+	docker run -a -i -t base /bin/bash
+```
+
+
+Starting a long-running worker process
+--------------------------------------
+
+```bash
+	# Run docker in daemon mode
+	(docker -d || echo "Docker daemon already running") &
+
+	# Start a very useful long-running process
+	JOB=$(docker run /bin/sh -c "while true; do echo Hello world!; sleep 1; done")
+
+	# Collect the output of the job so far
+	docker logs $JOB
+
+	# Kill the job
+	docker kill $JOB
+```
+
+
+Listing all running containers
+------------------------------
+
+```bash
+	docker ps
+```
+
+
+Expose a service on a TCP port
+------------------------------
+
+```bash
+	# Expose port 4444 of this container, and tell netcat to listen on it
+	JOB=$(docker run -p 4444 base /bin/nc -l -p 4444)
+
+	# Which public port is NATed to my container?
+	PORT=$(docker port $JOB 4444)
+
+	# Connect to the public port via the host's public address
+	echo hello world | nc $(hostname) $PORT
+
+	# Verify that the network connection worked
+	echo "Daemon received: $(docker logs $JOB)"
+```
+
+
@@ -88 +148 @@ What is a Standard Container?
------------------------------
+=============================
diff --git a/README.md b/README.md
index 8a4a78b1e3..49a418bae9 100644
--- a/README.md
+++ b/README.md
@@ -53 +53 @@ Under the hood, Docker is built on the following components:
-Setup instructions
+Install instructions
@@ -56,2 +56,2 @@ Setup instructions
-Requirements
-------------
+Installing on Ubuntu 12.04 and 12.10
+------------------------------------
@@ -59 +59 @@ Requirements
-Right now, the officially supported distributions are:
+1. Install dependencies:
@@ -61,2 +61 @@ Right now, the officially supported distributions are:
-* Ubuntu 12.04 (precise LTS)
-* Ubuntu 12.10 (quantal)
+        sudo apt-get install lxc wget bsdtar curl
@@ -64 +63,4 @@ Right now, the officially supported distributions are:
-Docker probably works on other distributions featuring a recent kernel, the AUFS patch, and up-to-date lxc. However this has not been tested.
+2. Install the latest docker binary:
+
+	wget http://get.docker.io/builds/$(uname -s)/$(uname -m)/docker-master.tgz
+	tar -xf docker-master.tgz
@@ -65,0 +68 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
+3. Run your first container!
@@ -67,2 +70,3 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
-Installation
----------------
+	cd docker-master
+	sudo ./docker import base
+	sudo ./docker run -a -i -t base /bin/bash
@@ -70,3 +74 @@ Installation
-1. Set up your host of choice on a physical / virtual machine
-2. Assume root identity on your newly installed environment (`sudo -s`)
-3. Type the following commands:
+Consider adding docker to your `PATH` for simplicity.
@@ -74,2 +76,2 @@ Installation
-        apt-get update
-        apt-get install lxc wget bsdtar curl
+Installing on other Linux distributions
+---------------------------------------
@@ -77,6 +79 @@ Installation
-4. Download the latest docker binaries: `wget http://docker.io.s3.amazonaws.com/builds/$(uname -s)/$(uname -m)/docker-master.tgz` ([Or get the Linux/x86_64 binaries here](http://docker.io.s3.amazonaws.com/builds/Linux/x86_64/docker-master.tgz) )
-5. Extract the contents of the tar file `tar -xf docker-master.tar.gz`
-6. Launch the docker daemon in the background `./dockerd &`
-7. Download a base image `./docker pull base`
-8. Run your first container! `./docker run -i -a -t base /bin/bash`
-9. Start exploring `./docker --help`
+Right now, the officially supported distributions are:
@@ -84 +81,4 @@ Installation
-Consider adding docker and dockerd to your `PATH` for simplicity.
+* Ubuntu 12.04 (precise LTS)
+* Ubuntu 12.10 (quantal)
+
+Docker probably works on other distributions featuring a recent kernel, the AUFS patch, and up-to-date lxc. However this has not been tested.
diff --git a/README.md b/README.md
index 4f0d2440d5..8a4a78b1e3 100644
--- a/README.md
+++ b/README.md
@@ -86,81 +85,0 @@ Consider adding docker and dockerd to your `PATH` for simplicity.
-Vagrant Usage
--------------
-
-1. Install Vagrant from http://vagrantup.com
-2. Run `vagrant up`. This will take a few minutes as it does the following:
-    - Download Quantal64 base box
-    - Kick off Puppet to do:
-        - Download & untar most recent docker binary tarball to vagrant homedir.
-        - Debootstrap to /var/lib/docker/images/ubuntu.
-        - Install & run dockerd as service.
-        - Put docker in /usr/local/bin.
-        - Put latest Go toolchain in /usr/local/go.
-
-Sample run output:
-
-```bash
-$ vagrant up
-[default] Importing base box 'quantal64'...
-[default] Matching MAC address for NAT networking...
-[default] Clearing any previously set forwarded ports...
-[default] Forwarding ports...
-[default] -- 22 => 2222 (adapter 1)
-[default] Creating shared folders metadata...
-[default] Clearing any previously set network interfaces...
-[default] Booting VM...
-[default] Waiting for VM to boot. This can take a few minutes.
-[default] VM booted and ready for use!
-[default] Mounting shared folders...
-[default] -- v-root: /vagrant
-[default] -- manifests: /tmp/vagrant-puppet/manifests
-[default] -- v-pp-m0: /tmp/vagrant-puppet/modules-0
-[default] Running provisioner: Vagrant::Provisioners::Puppet...
-[default] Running Puppet with /tmp/vagrant-puppet/manifests/quantal64.pp...
-stdin: is not a tty
-notice: /Stage[main]//Node[default]/Exec[apt_update]/returns: executed successfully
-
-notice: /Stage[main]/Docker/Exec[fetch-docker]/returns: executed successfully
-notice: /Stage[main]/Docker/Package[lxc]/ensure: ensure changed 'purged' to 'present'
-notice: /Stage[main]/Docker/Exec[fetch-go]/returns: executed successfully
-
-notice: /Stage[main]/Docker/Exec[copy-docker-bin]/returns: executed successfully
-notice: /Stage[main]/Docker/Exec[debootstrap]/returns: executed successfully
-notice: /Stage[main]/Docker/File[/etc/init/dockerd.conf]/ensure: defined content as '{md5}78a593d38dd9919af14d8f0545ac95e9'
-
-notice: /Stage[main]/Docker/Service[dockerd]/ensure: ensure changed 'stopped' to 'running'
-
-notice: Finished catalog run in 329.74 seconds
-```
-
-When this has successfully completed, you should be able to get into your new system with `vagrant ssh` and use `docker`:
-
-```bash
-$ vagrant ssh
-Welcome to Ubuntu 12.10 (GNU/Linux 3.5.0-17-generic x86_64)
-
- * Documentation:  https://help.ubuntu.com/
-
-Last login: Sun Feb  3 19:37:37 2013
-vagrant@vagrant-ubuntu-12:~$ docker help
-Usage: docker COMMAND [arg...]
-
-A self-sufficient runtime for linux containers.
-
-Commands:
-    run       Run a command in a container
-    ps        Display a list of containers
-    pull      Download a tarball and create a container from it
-    put       Upload a tarball and create a container from it
-    rm        Remove containers
-    wait      Wait for the state of a container to change
-    stop      Stop a running container
-    logs      Fetch the logs of a container
-    diff      Inspect changes on a container's filesystem
-    commit    Save the state of a container
-    attach    Attach to the standard inputs and outputs of a running container
-    info      Display system-wide information
-    tar       Stream the contents of a container as a tar archive
-    web       Generate a web UI
-    attach    Attach to a running container
-```
-    
diff --git a/README.md b/README.md
index 21d3ada2df..4f0d2440d5 100644
--- a/README.md
+++ b/README.md
@@ -37,41 +36,0 @@ Notable features
-What is a Standard Container?
------------------------------
-
-Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
-a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
-
-The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
-
-A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
-
-### 1. STANDARD OPERATIONS
-
-Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
-
-
-### 2. CONTENT-AGNOSTIC
-
-Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffe or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
-
-
-### 3. INFRASTRUCTURE-AGNOSTIC
-
-Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
-
-
-### 4. DESIGNED FOR AUTOMATION
-
-Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
-
-Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
-
-Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
-
-
-### 5. INDUSTRIAL-GRADE DELIVERY
-
-There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
-
-With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
-
-
@@ -94,44 +52,0 @@ Under the hood, Docker is built on the following components:
-Standard Container Specification
---------------------------------
-
-(TODO)
-
-### Image format
-
-
-### Standard operations
-
-* Copy
-* Run
-* Stop
-* Wait
-* Commit
-* Attach standard streams
-* List filesystem changes
-* ...
-
-### Execution environment
-
-#### Root filesystem
-
-#### Environment variables
-
-#### Process arguments
-
-#### Networking
-
-#### Process namespacing
-
-#### Resource limits
-
-#### Process monitoring
-
-#### Logging
-
-#### Signals
-
-#### Pseudo-terminal allocation
-
-#### Security
-
-
@@ -251,0 +167,88 @@ Commands:
+
+What is a Standard Container?
+-----------------------------
+
+Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
+
+The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+
+A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+
+### 1. STANDARD OPERATIONS
+
+Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
+
+
+### 2. CONTENT-AGNOSTIC
+
+Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffe or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
+
+
+### 3. INFRASTRUCTURE-AGNOSTIC
+
+Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
+
+
+### 4. DESIGNED FOR AUTOMATION
+
+Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
+
+Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
+
+Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
+
+
+### 5. INDUSTRIAL-GRADE DELIVERY
+
+There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
+
+With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
+
+
+
+
+Standard Container Specification
+--------------------------------
+
+(TODO)
+
+### Image format
+
+
+### Standard operations
+
+* Copy
+* Run
+* Stop
+* Wait
+* Commit
+* Attach standard streams
+* List filesystem changes
+* ...
+
+### Execution environment
+
+#### Root filesystem
+
+#### Environment variables
+
+#### Process arguments
+
+#### Networking
+
+#### Process namespacing
+
+#### Resource limits
+
+#### Process monitoring
+
+#### Logging
+
+#### Signals
+
+#### Pseudo-terminal allocation
+
+#### Security
+
+
diff --git a/README.md b/README.md
index 95ade41d0b..21d3ada2df 100644
--- a/README.md
+++ b/README.md
@@ -26 +26 @@ Notable features
-* Network isolation: each process container runs in its own network namespace, with a virtual interface and IP address of its own (COMING SOON)
+* Network isolation: each process container runs in its own network namespace, with a virtual interface and IP address of its own.
diff --git a/README.md b/README.md
index aea3d10e9d..95ade41d0b 100644
--- a/README.md
+++ b/README.md
@@ -152,2 +152,2 @@ Docker probably works on other distributions featuring a recent kernel, the AUFS
-Step by step host setup
------------------------
+Installation
+---------------
@@ -162,4 +162,6 @@ Step by step host setup
-4. Download the latest version of the [docker binaries](https://dl.dropbox.com/u/20637798/docker.tar.gz) (`wget https://dl.dropbox.com/u/20637798/docker.tar.gz`) (warning: this may not be the most up-to-date build)
-5. Extract the contents of the tar file `tar -xf docker.tar.gz`
-6. Launch the docker daemon `./dockerd`
-7. Download a base image by running 'docker pull base'
+4. Download the latest docker binaries: `wget http://docker.io.s3.amazonaws.com/builds/$(uname -s)/$(uname -m)/docker-master.tgz` ([Or get the Linux/x86_64 binaries here](http://docker.io.s3.amazonaws.com/builds/Linux/x86_64/docker-master.tgz) )
+5. Extract the contents of the tar file `tar -xf docker-master.tar.gz`
+6. Launch the docker daemon in the background `./dockerd &`
+7. Download a base image `./docker pull base`
+8. Run your first container! `./docker run -i -a -t base /bin/bash`
+9. Start exploring `./docker --help`
@@ -167,7 +169 @@ Step by step host setup
-
-Client installation
--------------------
-
-4. Download the latest version of the [docker binaries](https://dl.dropbox.com/u/20637798/docker.tar.gz) (`wget https://dl.dropbox.com/u/20637798/docker.tar.gz`)
-5. Extract the contents of the tar file `tar -xf docker.tar.gz`
-6. You can now use the docker client binary `./docker`. Consider adding it to your `PATH` for simplicity.
+Consider adding docker and dockerd to your `PATH` for simplicity.
@@ -233 +229 @@ Last login: Sun Feb  3 19:37:37 2013
-vagrant@vagrant-ubuntu-12:~$ DOCKER=localhost:4242 docker help
+vagrant@vagrant-ubuntu-12:~$ docker help
diff --git a/README.md b/README.md
index cf3f74dc61..aea3d10e9d 100644
--- a/README.md
+++ b/README.md
@@ -160 +160 @@ Step by step host setup
-        apt-get install lxc wget bsdtar
+        apt-get install lxc wget bsdtar curl
diff --git a/README.md b/README.md
index 42fd479b70..cf3f74dc61 100644
--- a/README.md
+++ b/README.md
@@ -160 +160 @@ Step by step host setup
-        apt-get install lxc wget
+        apt-get install lxc wget bsdtar
@@ -165 +165 @@ Step by step host setup
-7. Download a base image by running 'docker pull -j base'
+7. Download a base image by running 'docker pull base'
diff --git a/README.md b/README.md
index 0764c60d6a..42fd479b70 100644
--- a/README.md
+++ b/README.md
@@ -141,2 +141,2 @@ Setup instructions
-Supported hosts
----------------
+Requirements
+------------
@@ -144 +144,3 @@ Supported hosts
-Right now, the officially supported hosts are:
+Right now, the officially supported distributions are:
+
+* Ubuntu 12.04 (precise LTS)
@@ -147,2 +149,2 @@ Right now, the officially supported hosts are:
-Hosts that might work with slight kernel modifications, but are not officially supported:
-* Ubuntu 12.04 (precise)
+Docker probably works on other distributions featuring a recent kernel, the AUFS patch, and up-to-date lxc. However this has not been tested.
+
@@ -159 +160,0 @@ Step by step host setup
-        debootstrap --arch=amd64 quantal /var/lib/docker/images/ubuntu/
@@ -161 +162 @@ Step by step host setup
-4. Download the latest version of the [docker binaries](https://dl.dropbox.com/u/20637798/docker.tar.gz) (`wget https://dl.dropbox.com/u/20637798/docker.tar.gz`)
+4. Download the latest version of the [docker binaries](https://dl.dropbox.com/u/20637798/docker.tar.gz) (`wget https://dl.dropbox.com/u/20637798/docker.tar.gz`) (warning: this may not be the most up-to-date build)
@@ -163,0 +165 @@ Step by step host setup
+7. Download a base image by running 'docker pull -j base'
diff --git a/README.md b/README.md
index 4266f977af..0764c60d6a 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Docker is a process manager with superpowers
-<img src="http://bricks.argz.com/bricksfiles/lego/07000/7823/012.jpg"/>
+It encapsulates heterogeneous payloads in Standard Containers, and runs them on any server with strong guarantees of isolation and repeatability.
@@ -6 +6 @@ Docker is a process manager with superpowers
-Docker is a process manager with superpowers. It encapsulates heterogeneous payloads in Standard Containers, and runs them on any server with strong guarantees of isolation and repeatability.
+Is is a great building block for automating distributed systems: large-scale web deployments, database clusters, continuous deployment systems, private PaaS, service-oriented architectures, etc.
@@ -8 +8 @@ Docker is a process manager with superpowers. It encapsulates heterogeneous payl
-It is designed to be used as a reliable building block for the automation of distributed systems: large web deployments, database clusters, continuous deployment, private PaaS, service-oriented architectures, etc.
+<img src="http://bricks.argz.com/bricksfiles/lego/07000/7823/012.jpg"/>
diff --git a/README.md b/README.md
index 40cb55955b..4266f977af 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-Docker: a self-sufficient runtime for linux containers
-======================================================
+Docker is a process manager with superpowers
+============================================
@@ -6,2 +6 @@ Docker: a self-sufficient runtime for linux containers
-Docker is a process manager with superpowers. It is designed to run heterogeneous payloads on an heterogenous fleet of servers, with strong guarantees of isolation and repeatability.
-It is designed to be used as a reliable building block for the automation of distributed systems: large web deployments, database clusters, continuous deployment, private PaaS, service-oriented architectures, etc.
+Docker is a process manager with superpowers. It encapsulates heterogeneous payloads in Standard Containers, and runs them on any server with strong guarantees of isolation and repeatability.
@@ -9 +8 @@ It is designed to be used as a reliable building block for the automation of dis
-* Heterogeneous payloads: any combination of binaries, libraries, configuration files, scripts, virtualenvs, jars, gems, tarballs, you name it. No more juggling between domain-specific tools. Docker can deploy and run them all.
+It is designed to be used as a reliable building block for the automation of distributed systems: large web deployments, database clusters, continuous deployment, private PaaS, service-oriented architectures, etc.
@@ -11 +10 @@ It is designed to be used as a reliable building block for the automation of dis
-* Heterogeneous set of servers: docker can run on any x64 machine with a modern linux kernel - whether it's a laptop, a bare metal server or a VM. This makes it perfect for multi-cloud deployments.
+* *Heterogeneous payloads*: any combination of binaries, libraries, configuration files, scripts, virtualenvs, jars, gems, tarballs, you name it. No more juggling between domain-specific tools. Docker can deploy and run them all.
@@ -13 +12 @@ It is designed to be used as a reliable building block for the automation of dis
-* Isolation: docker isolates processes from each other and from the underlying host, using lightweight containers. 
+* *Any server*: docker can run on any x64 machine with a modern linux kernel - whether it's a laptop, a bare metal server or a VM. This makes it perfect for multi-cloud deployments.
@@ -15 +14 @@ It is designed to be used as a reliable building block for the automation of dis
-* Repeatability: because containers start from a known filesystem state, and are highly isolated, their behavior will be the same regardless of where they run, when they run,  and what else is running.
+* *Isolation*: docker isolates processes from each other and from the underlying host, using lightweight containers. 
@@ -16,0 +16 @@ It is designed to be used as a reliable building block for the automation of dis
+* *Repeatability*: because containers are isolated in their own filesystem, they behave the same regardless of where, when, and alongside what they run.
diff --git a/README.md b/README.md
index 3979c1e8d4..40cb55955b 100644
--- a/README.md
+++ b/README.md
@@ -6 +6,2 @@ Docker: a self-sufficient runtime for linux containers
-Docker is a runtime for Standard Containers. More specifically, it is a daemon which automates the creation of and deployment of linux Standard Containers (SCs) via a remote API.
+Docker is a process manager with superpowers. It is designed to run heterogeneous payloads on an heterogenous fleet of servers, with strong guarantees of isolation and repeatability.
+It is designed to be used as a reliable building block for the automation of distributed systems: large web deployments, database clusters, continuous deployment, private PaaS, service-oriented architectures, etc.
@@ -8 +9 @@ Docker is a runtime for Standard Containers. More specifically, it is a daemon w
-Standard Containers are a fundamental unit of software delivery, in much the same way that shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+* Heterogeneous payloads: any combination of binaries, libraries, configuration files, scripts, virtualenvs, jars, gems, tarballs, you name it. No more juggling between domain-specific tools. Docker can deploy and run them all.
@@ -9,0 +11 @@ Standard Containers are a fundamental unit of software delivery, in much the sam
+* Heterogeneous set of servers: docker can run on any x64 machine with a modern linux kernel - whether it's a laptop, a bare metal server or a VM. This makes it perfect for multi-cloud deployments.
@@ -11,2 +13,35 @@ Standard Containers are a fundamental unit of software delivery, in much the sam
-1. STANDARD OPERATIONS
-----------------------
+* Isolation: docker isolates processes from each other and from the underlying host, using lightweight containers. 
+
+* Repeatability: because containers start from a known filesystem state, and are highly isolated, their behavior will be the same regardless of where they run, when they run,  and what else is running.
+
+
+
+Notable features
+-----------------
+
+* Filesystem isolation: each process container runs in a completely separate root filesystem.
+
+* Resource isolation: system resources like cpu and memory can be allocated differently to each process container, using cgroups.
+
+* Network isolation: each process container runs in its own network namespace, with a virtual interface and IP address of its own (COMING SOON)
+
+* Copy-on-write: root filesystems are created using copy-on-write, which makes deployment extremeley fast, memory-cheap and disk-cheap.
+
+* Logging: the standard streams (stdout/stderr/stdin) of each process container is collected and logged for real-time or batch retrieval.
+
+* Change management: changes to a container's filesystem can be committed into a new image and re-used to create more containers. No templating or manual configuration required.
+
+* Interactive shell: docker can allocate a pseudo-tty and attach to the standard input of any container, for example to run a throaway interactive shell.
+
+
+What is a Standard Container?
+-----------------------------
+
+Docker defines a unit of software delivery called a Standard Container. The goal of a Standard Container is to encapsulate a software component and all its dependencies in
+a format that is self-describing and portable, so that any compliant runtime can run it without extra dependency, regardless of the underlying machine and the contents of the container.
+
+The spec for Standard Containers is currently work in progress, but it is very straightforward. It mostly defines 1) an image format, 2) a set of standard operations, and 3) an execution environment.
+
+A great analogy for this is the shipping container. Just like Standard Containers are a fundamental unit of software delivery, shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+
+### 1. STANDARD OPERATIONS
@@ -17,2 +52 @@ Just like shipping containers, Standard Containers define a set of STANDARD OPER
-2. CONTENT-AGNOSTIC
-------------------
+### 2. CONTENT-AGNOSTIC
@@ -23,2 +57 @@ Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all sta
-3. INFRASTRUCTURE-AGNOSTIC
---------------------------
+### 3. INFRASTRUCTURE-AGNOSTIC
@@ -29,2 +62 @@ Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to
-4. DESIGNED FOR AUTOMATION
---------------------------
+### 4. DESIGNED FOR AUTOMATION
@@ -39,2 +71 @@ Similarly, before Standard Containers, by the time a software component ran in p
-5. INDUSTRIAL-GRADE DELIVERY
-----------------------------
+### 5. INDUSTRIAL-GRADE DELIVERY
@@ -46,0 +78,60 @@ With Standard Containers we can put an end to that embarrassment, by making INDU
+
+Under the hood
+--------------
+
+Under the hood, Docker is built on the following components:
+
+
+* The [cgroup](http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c) and [namespacing](http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part) capabilities of the Linux kernel;
+
+* [AUFS](http://aufs.sourceforge.net/aufs.html), a powerful union filesystem with copy-on-write capabilities;
+
+* The [Go](http://golang.org) programming language;
+
+* [lxc](http://lxc.sourceforge.net/), a set of convenience scripts to simplify the creation of linux containers.
+
+
+Standard Container Specification
+--------------------------------
+
+(TODO)
+
+### Image format
+
+
+### Standard operations
+
+* Copy
+* Run
+* Stop
+* Wait
+* Commit
+* Attach standard streams
+* List filesystem changes
+* ...
+
+### Execution environment
+
+#### Root filesystem
+
+#### Environment variables
+
+#### Process arguments
+
+#### Networking
+
+#### Process namespacing
+
+#### Resource limits
+
+#### Process monitoring
+
+#### Logging
+
+#### Signals
+
+#### Pseudo-terminal allocation
+
+#### Security
+
+
diff --git a/README.md b/README.md
index 7c14801528..3979c1e8d4 100644
--- a/README.md
+++ b/README.md
@@ -130 +130,2 @@ notice: Finished catalog run in 329.74 seconds
-When this has successfully completed, you should be albe to get into your new system with `vagrant ssh` and use `docker`:
+
+When this has successfully completed, you should be able to get into your new system with `vagrant ssh` and use `docker`:
diff --git a/README.md b/README.md
index d8739190be..7c14801528 100644
--- a/README.md
+++ b/README.md
@@ -130 +130 @@ notice: Finished catalog run in 329.74 seconds
-3. When this has successfully completed, you should be albe to get into your new system with `vagrant ssh` and use `docker`:
+When this has successfully completed, you should be albe to get into your new system with `vagrant ssh` and use `docker`:
diff --git a/README.md b/README.md
index 0f0f47fb01..d8739190be 100644
--- a/README.md
+++ b/README.md
@@ -80,0 +81,81 @@ Client installation
+
+Vagrant Usage
+-------------
+
+1. Install Vagrant from http://vagrantup.com
+2. Run `vagrant up`. This will take a few minutes as it does the following:
+    - Download Quantal64 base box
+    - Kick off Puppet to do:
+        - Download & untar most recent docker binary tarball to vagrant homedir.
+        - Debootstrap to /var/lib/docker/images/ubuntu.
+        - Install & run dockerd as service.
+        - Put docker in /usr/local/bin.
+        - Put latest Go toolchain in /usr/local/go.
+
+Sample run output:
+
+```bash
+$ vagrant up
+[default] Importing base box 'quantal64'...
+[default] Matching MAC address for NAT networking...
+[default] Clearing any previously set forwarded ports...
+[default] Forwarding ports...
+[default] -- 22 => 2222 (adapter 1)
+[default] Creating shared folders metadata...
+[default] Clearing any previously set network interfaces...
+[default] Booting VM...
+[default] Waiting for VM to boot. This can take a few minutes.
+[default] VM booted and ready for use!
+[default] Mounting shared folders...
+[default] -- v-root: /vagrant
+[default] -- manifests: /tmp/vagrant-puppet/manifests
+[default] -- v-pp-m0: /tmp/vagrant-puppet/modules-0
+[default] Running provisioner: Vagrant::Provisioners::Puppet...
+[default] Running Puppet with /tmp/vagrant-puppet/manifests/quantal64.pp...
+stdin: is not a tty
+notice: /Stage[main]//Node[default]/Exec[apt_update]/returns: executed successfully
+
+notice: /Stage[main]/Docker/Exec[fetch-docker]/returns: executed successfully
+notice: /Stage[main]/Docker/Package[lxc]/ensure: ensure changed 'purged' to 'present'
+notice: /Stage[main]/Docker/Exec[fetch-go]/returns: executed successfully
+
+notice: /Stage[main]/Docker/Exec[copy-docker-bin]/returns: executed successfully
+notice: /Stage[main]/Docker/Exec[debootstrap]/returns: executed successfully
+notice: /Stage[main]/Docker/File[/etc/init/dockerd.conf]/ensure: defined content as '{md5}78a593d38dd9919af14d8f0545ac95e9'
+
+notice: /Stage[main]/Docker/Service[dockerd]/ensure: ensure changed 'stopped' to 'running'
+
+notice: Finished catalog run in 329.74 seconds
+```
+3. When this has successfully completed, you should be albe to get into your new system with `vagrant ssh` and use `docker`:
+
+```bash
+$ vagrant ssh
+Welcome to Ubuntu 12.10 (GNU/Linux 3.5.0-17-generic x86_64)
+
+ * Documentation:  https://help.ubuntu.com/
+
+Last login: Sun Feb  3 19:37:37 2013
+vagrant@vagrant-ubuntu-12:~$ DOCKER=localhost:4242 docker help
+Usage: docker COMMAND [arg...]
+
+A self-sufficient runtime for linux containers.
+
+Commands:
+    run       Run a command in a container
+    ps        Display a list of containers
+    pull      Download a tarball and create a container from it
+    put       Upload a tarball and create a container from it
+    rm        Remove containers
+    wait      Wait for the state of a container to change
+    stop      Stop a running container
+    logs      Fetch the logs of a container
+    diff      Inspect changes on a container's filesystem
+    commit    Save the state of a container
+    attach    Attach to the standard inputs and outputs of a running container
+    info      Display system-wide information
+    tar       Stream the contents of a container as a tar archive
+    web       Generate a web UI
+    attach    Attach to a running container
+```
+    
diff --git a/README.md b/README.md
index 25015fc93f..0f0f47fb01 100644
--- a/README.md
+++ b/README.md
@@ -3,0 +4,2 @@ Docker: a self-sufficient runtime for linux containers
+<img src="http://bricks.argz.com/bricksfiles/lego/07000/7823/012.jpg"/>
+
diff --git a/README.md b/README.md
index 2aa4144fbe..25015fc93f 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,43 @@
+Docker: a self-sufficient runtime for linux containers
+======================================================
+
+Docker is a runtime for Standard Containers. More specifically, it is a daemon which automates the creation of and deployment of linux Standard Containers (SCs) via a remote API.
+
+Standard Containers are a fundamental unit of software delivery, in much the same way that shipping containers (http://bricks.argz.com/ins/7823-1/12) are a fundamental unit of physical delivery.
+
+
+1. STANDARD OPERATIONS
+----------------------
+
+Just like shipping containers, Standard Containers define a set of STANDARD OPERATIONS. Shipping containers can be lifted, stacked, locked, loaded, unloaded and labelled. Similarly, standard containers can be started, stopped, copied, snapshotted, downloaded, uploaded and tagged.
+
+
+2. CONTENT-AGNOSTIC
+------------------
+
+Just like shipping containers, Standard Containers are CONTENT-AGNOSTIC: all standard operations have the same effect regardless of the contents. A shipping container will be stacked in exactly the same way whether it contains Vietnamese powder coffe or spare Maserati parts. Similarly, Standard Containers are started or uploaded in the same way whether they contain a postgres database, a php application with its dependencies and application server, or Java build artifacts.
+
+
+3. INFRASTRUCTURE-AGNOSTIC
+--------------------------
+
+Both types of containers are INFRASTRUCTURE-AGNOSTIC: they can be transported to thousands of facilities around the world, and manipulated by a wide variety of equipment. A shipping container can be packed in a factory in Ukraine, transported by truck to the nearest routing center, stacked onto a train, loaded into a German boat by an Australian-built crane, stored in a warehouse at a US facility, etc. Similarly, a standard container can be bundled on my laptop, uploaded to S3, downloaded, run and snapshotted by a build server at Equinix in Virginia, uploaded to 10 staging servers in a home-made Openstack cluster, then sent to 30 production instances across 3 EC2 regions.
+
+
+4. DESIGNED FOR AUTOMATION
+--------------------------
+
+Because they offer the same standard operations regardless of content and infrastructure, Standard Containers, just like their physical counterpart, are extremely well-suited for automation. In fact, you could say automation is their secret weapon.
+
+Many things that once required time-consuming and error-prone human effort can now be programmed. Before shipping containers, a bag of powder coffee was hauled, dragged, dropped, rolled and stacked by 10 different people in 10 different locations by the time it reached its destination. 1 out of 50 disappeared. 1 out of 20 was damaged. The process was slow, inefficient and cost a fortune - and was entirely different depending on the facility and the type of goods.
+
+Similarly, before Standard Containers, by the time a software component ran in production, it had been individually built, configured, bundled, documented, patched, vendored, templated, tweaked and instrumented by 10 different people on 10 different computers. Builds failed, libraries conflicted, mirrors crashed, post-it notes were lost, logs were misplaced, cluster updates were half-broken. The process was slow, inefficient and cost a fortune - and was entirely different depending on the language and infrastructure provider.
+
+
+5. INDUSTRIAL-GRADE DELIVERY
+----------------------------
+
+There are 17 million shipping containers in existence, packed with every physical good imaginable. Every single one of them can be loaded on the same boats, by the same cranes, in the same facilities, and sent anywhere in the World with incredible efficiency. It is embarrassing to think that a 30 ton shipment of coffee can safely travel half-way across the World in *less time* than it takes a software team to deliver its code from one datacenter to another sitting 10 miles away.
+
+With Standard Containers we can put an end to that embarrassment, by making INDUSTRIAL-GRADE DELIVERY of software a reality.
+
diff --git a/README.md b/README.md
index 775253fd1e..2aa4144fbe 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +0,0 @@
-Docker
-======
@@ -23,3 +21,4 @@ Step by step host setup
-    apt-get update
-    apt-get install lxc wget
-    debootstrap --arch=amd64 quantal /var/lib/docker/images/ubuntu/
+        apt-get update
+        apt-get install lxc wget
+        debootstrap --arch=amd64 quantal /var/lib/docker/images/ubuntu/
+
