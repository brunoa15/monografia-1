diff --git a/README.md b/README.md
index a4e6a7a..cc6e72b 100644
--- a/README.md
+++ b/README.md
@@ -54,2 +54,2 @@ where
-- `pattern` is a glob pattern for files to monitor.
-- `dt` is a time interval (default is 1 second). Only files modified more recently than `dt` seconds will be considered.
+- `pattern` is a glob pattern for files to monitor. Avoid using `*.*`!
+- `dt` is a time interval (default is 1 second). Only files modified more than `dt` seconds ago will be considered.
@@ -78 +78 @@ Lines starting with `#` are interpreted as comments and ignored.
-### Crate a finite state machine for each `*.src` file
+### Create a finite state machine for each `*.src` file
@@ -89 +89 @@ When a file matches a pattern, a new process is created to execute the correspon
-If a file has already been processed according to a certain rule, this info is stored in a file `workflow.cache.db` and it is not processed again unless:
+If a file has already been processed according to a certain rule, this info is stored in a file `workflow.cache` and it is not processed again unless:
@@ -98 +98 @@ You can cleanup a rule with
-This has the effect of creating a file `.workflow.rulename.clear` which the running workflow.py picks up and clear all entries in `workflow.cache`, thus the rule will run again.
+This has the effect of creating a file `.workflow.rulename.clear` which the running workflow.py picks up and uses to clear the entry identified by `rulename` in `workflow.cache`, after which the rule will run again.
@@ -100 +100 @@ This has the effect of creating a file `.workflow.rulename.clear` which the runn
-You can also delete the `workflow.cache.db` file. In this latter case all rules will run again when you restart `workflow.py`.
+You can also delete the `workflow.cache` file. In this case all rules will run again when you restart `workflow.py`.
@@ -102 +102 @@ You can also delete the `workflow.cache.db` file. In this latter case all rules
-If the main `workflow.py` process is killed or crashes while some commands are being executed, they also are killed. You can find which files and rules where being processed by looking for `<filename>.<rulename>.pid` files. If you restart `workflow.py` those pid files are deleted.
+If the main `workflow.py` process is killed or crashes while some commands are being executed, those commands also are killed. You can find which files and rules where being processed by looking for `<filename>.<rulename>.pid` files. If you restart `workflow.py` those pid files are deleted.
diff --git a/README.md b/README.md
index 6a4f01c..a4e6a7a 100644
--- a/README.md
+++ b/README.md
@@ -89 +89 @@ When a file matches a pattern, a new process is created to execute the correspon
-If a file has already been processed according to a ceratin rule, this info is stored in a file `workflow.cache.db` and it is not processed again unless:
+If a file has already been processed according to a certain rule, this info is stored in a file `workflow.cache.db` and it is not processed again unless:
@@ -108 +108 @@ If a file is edited or touched and the rule runs again, the `<filename>.<rulenam
-Unless otherwise specified each file is processed 1s after it is last modified. It is possible that a different process is still writing the file but it is pausing more than 1s between writes (for example the file is being downloaded via a slow connection). In this case it is best to download the file with a different name than the name used for the patterm and rename the file to its proper name after the write of the file is completed. This must be handled outside of workflow. Workflow has no way of knowing when a file is completed or not.
+Unless otherwise specified each file is processed 1s after it is last modified. It is possible that a different process is still writing the file but it is pausing more than 1s between writes (for example the file is being downloaded via a slow connection). In this case it is best to download the file with a different name than the name used for the pattern and rename the file to its proper name after the write of the file is completed. This must be handled outside of workflow. Workflow has no way of knowing when a file is completed or not.
@@ -110 +110 @@ Unless otherwise specified each file is processed 1s after it is last modified.
-If the `workflow.config` file is edited or changed, it is realoaded without the need to re-start `workflow.py`. 
\ No newline at end of file
+If the `workflow.config` file is edited or changed, it is reloaded without the need to re-start `workflow.py`. 
diff --git a/README.md b/README.md
index 014bb86..6a4f01c 100644
--- a/README.md
+++ b/README.md
@@ -98 +98,3 @@ You can cleanup a rule with
-Or you can delete the `workflow.cache.db` file. In this latter case all rules will run again when you restart `workflow.py`.
+This has the effect of creating a file `.workflow.rulename.clear` which the running workflow.py picks up and clear all entries in `workflow.cache`, thus the rule will run again.
+
+You can also delete the `workflow.cache.db` file. In this latter case all rules will run again when you restart `workflow.py`.
diff --git a/README.md b/README.md
index 3e70381..014bb86 100644
--- a/README.md
+++ b/README.md
@@ -57,0 +58,2 @@ where
+Lines starting with `#` are interpreted as comments and ignored.
+
diff --git a/README.md b/README.md
index 3d4b412..3e70381 100644
--- a/README.md
+++ b/README.md
@@ -7 +7,22 @@
-BSD
+3-clause BSD License
+
+Copyright (c) 2012, Massimo Di Pierro
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+- Neither the name of the <organization> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/README.md b/README.md
index 66034c5..3d4b412 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-`workflow.py` is a minimalist file based workflow engine. It runs as a background process and can automate certain tasks such as delete old files, email you when new files are created, run a script to process new files.
+`workflow.py` is a minimalist file based workflow engine. It runs as a background process and can automate certain tasks such as deleting old files, emailing you when new files are created or run a script to process new files.
diff --git a/README.md b/README.md
index a9ff037..66034c5 100644
--- a/README.md
+++ b/README.md
@@ -16,6 +16,6 @@ BSD
-- `-f <path>` the folder to monitor and process.
-- `-s <seconds>` the time interval between checks for new files.
-- `-n <name>` the current filename, defaults to `$0`.
-- `-x <path>` lets you specify the config file to use (workflow.config)
-- `-y <path>` lets you specify the cache file to use (workflow.cache.db)
-- `-l <path>` lets you specify a logfile (else console output)
+- `-f <path>` the folder to monitor and process
+- `-s <seconds>` the time interval between checks for new files
+- `-n <name>` the current filename, defaults to `$0`
+- `-x <path>` the config file to use (workflow.config)
+- `-y <path>` the cache file to use (workflow.cache.db)
+- `-l <path>` the output logfile (else console output)
@@ -23 +23 @@ BSD
-- `-c <rulename>` does not start the workflow but clears a rule (see below).
+- `-c <rulename>` does not start the workflow but clears a rule (see below)
diff --git a/README.md b/README.md
index de6c662..a9ff037 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ BSD
-- `-l <logfile>` lets you specify a logile (else console output)
+- `-l <path>` lets you specify a logfile (else console output)
diff --git a/README.md b/README.md
index ad158e1..de6c662 100644
--- a/README.md
+++ b/README.md
@@ -20 +20,3 @@ BSD
-- `-y <path>` lets you specify the cache file to use (workflow.cache)
+- `-y <path>` lets you specify the cache file to use (workflow.cache.db)
+- `-l <logfile>` lets you specify a logile (else console output)
+- `-d` daemonizes the workflow process
@@ -64 +66 @@ When a file matches a pattern, a new process is created to execute the correspon
-If a file has already been processed according to a ceratin rule, this info is stored in a file `workflow.cache` and it is not processed again unless:
+If a file has already been processed according to a ceratin rule, this info is stored in a file `workflow.cache.db` and it is not processed again unless:
@@ -73 +75 @@ You can cleanup a rule with
-Or you can delete the `workflow.cache` file. In this latter case all rules will run again when you restart `workflow.py`.
+Or you can delete the `workflow.cache.db` file. In this latter case all rules will run again when you restart `workflow.py`.
diff --git a/README.md b/README.md
index 3e30e66..ad158e1 100644
--- a/README.md
+++ b/README.md
@@ -18,0 +19,2 @@ BSD
+- `-x <path>` lets you specify the config file to use (workflow.config)
+- `-y <path>` lets you specify the cache file to use (workflow.cache)
diff --git a/README.md b/README.md
index b6ea966..3e30e66 100644
--- a/README.md
+++ b/README.md
@@ -51 +51 @@ where
-### Crate a finite state machine for each `*src` file
+### Crate a finite state machine for each `*.src` file
diff --git a/README.md b/README.md
index f52b680..b6ea966 100644
--- a/README.md
+++ b/README.md
@@ -53,4 +53,4 @@ where
-    rule1: *.src [1s]: echo $0.state.
-    rule2: *.state. [1s]: mv $0 $0.
-    rule3: *.state.. [1s]: mv $0 $0.
-    rule4: *.state... [1s]: rm $0
+    rule1: *.src [1s]: echo > $0.state.1
+    rule2: *.state.1 [1s]: mv $0 `expr "$0" : '\(.*\).1'`.2
+    rule3: *.state.2 [1s]: mv $0 `expr "$0" : '\(.*\).2'`.3
+    rule4: *.state.3 [1s]: rm $0
diff --git a/README.md b/README.md
index 5a85806..f52b680 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-`workflow.py` is a minimalist file based workflow engine. It runs as a background and can automate certain tasks such as delete old files, email you when new files are created, run a script to process new files.
+`workflow.py` is a minimalist file based workflow engine. It runs as a background process and can automate certain tasks such as delete old files, email you when new files are created, run a script to process new files.
diff --git a/README.md b/README.md
index 2785e2d..5a85806 100644
--- a/README.md
+++ b/README.md
@@ -4,0 +5,4 @@
+## License
+
+BSD
+
diff --git a/README.md b/README.md
index 3e4b21a..2785e2d 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@
-    rilename: pattern [dt]: command
+    rulename: pattern [dt]: command
diff --git a/README.md b/README.md
index 5cad4cc..3e4b21a 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@
-    name: pattern [time]: command
+    rilename: pattern [dt]: command
@@ -24 +24 @@ where
-- `name` is the name of the rule.
+- `rulename` is the name of the rule (cannot contain spaces).
@@ -26,2 +26,2 @@ where
-- `time` is a time interval (default is 1 second). Only files modified more recently than `time` seconds will be considered.
-- `command` is the command to execute for each file matching `pattern` created more than `time` seconds ago and not processed already. If the command ends in `&`, it is executed in background, else it blocks the workflow until completion. The name of the matching file can be referred to into the command with `$0`. Multiline commands can be continued with `\`.
+- `dt` is a time interval (default is 1 second). Only files modified more recently than `dt` seconds will be considered.
+- `command` is the command to execute for each file matching `pattern` created more than `dt` seconds ago and not processed already. If the command ends in `&`, it is executed in background, else it blocks the workflow until completion. The name of the matching file can be referred to into the command with `$0`. Multiline commands can be continued with `\`.
diff --git a/README.md b/README.md
index 274b492..5cad4cc 100644
--- a/README.md
+++ b/README.md
@@ -31 +31 @@ where
-### Delete all `*.log` files older tha one day
+### Delete all `*.log` files older than one day
diff --git a/README.md b/README.md
index a5537a0..274b492 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# Introduction
+## Introduction
@@ -5 +5 @@
-## Now to
+## Configuring and Starting the workflow
@@ -43 +43 @@ where
-### Process every new `*.dat` file using a Python script
+### Process new `*.dat` files using a Python script
@@ -47 +47 @@ where
-### Crate a simple finite state machine for each `*src` file
+### Crate a finite state machine for each `*src` file
@@ -49,4 +49,4 @@ where
-    rule1: *.src [1s]: echo $0.state1
-    rule2: *.src [1s]: mv $0.state1 $0.state2
-    rule3: *.src [1s]: mv $0.state2 $0.state3
-    rule4: *.src [1s]: rm $0.state3
+    rule1: *.src [1s]: echo $0.state.
+    rule2: *.state. [1s]: mv $0 $0.
+    rule3: *.state.. [1s]: mv $0 $0.
+    rule4: *.state... [1s]: rm $0
diff --git a/README.md b/README.md
index 96c4414..a5537a0 100644
--- a/README.md
+++ b/README.md
@@ -12,2 +12,4 @@
-- -f <path> the folder to monitor and process
-- -s <seconds> the time interval between checks for new files
+- `-f <path>` the folder to monitor and process.
+- `-s <seconds>` the time interval between checks for new files.
+- `-n <name>` the current filename, defaults to `$0`.
+- `-c <rulename>` does not start the workflow but clears a rule (see below).
diff --git a/README.md b/README.md
index e96ec75..96c4414 100644
--- a/README.md
+++ b/README.md
@@ -22,3 +22,3 @@ where
-- `name` is the name of the rule
-- `pattern` is a glob pattern for files to monitor
-- `time` is a time in seconds only files modified before `time` seconds will be considered
+- `name` is the name of the rule.
+- `pattern` is a glob pattern for files to monitor.
+- `time` is a time interval (default is 1 second). Only files modified more recently than `time` seconds will be considered.
diff --git a/README.md b/README.md
index 09eeb21..e96ec75 100644
--- a/README.md
+++ b/README.md
@@ -25 +25 @@ where
-- `command` is the command to execute for each file matching `pattern` created more than `time` seconds ago and not processed already. If the command ends in `&` it is executed in background else it blocks the workflow until completion. The name of the mathing file can be referred into the command with `$0`. Multiline commands can be continued with `\`.
+- `command` is the command to execute for each file matching `pattern` created more than `time` seconds ago and not processed already. If the command ends in `&`, it is executed in background, else it blocks the workflow until completion. The name of the matching file can be referred to into the command with `$0`. Multiline commands can be continued with `\`.
diff --git a/README.md b/README.md
index 4dd7eaa..09eeb21 100644
--- a/README.md
+++ b/README.md
@@ -56 +56 @@ When a file matches a pattern, a new process is created to execute the correspon
-If a file has already been processed according to a ceratin rule, this info is stored in a file `workflow.config` and it is not processed again unless:
+If a file has already been processed according to a ceratin rule, this info is stored in a file `workflow.cache` and it is not processed again unless:
@@ -64,0 +65,2 @@ You can cleanup a rule with
+Or you can delete the `workflow.cache` file. In this latter case all rules will run again when you restart `workflow.py`.
+
@@ -72,0 +75 @@ Unless otherwise specified each file is processed 1s after it is last modified.
+If the `workflow.config` file is edited or changed, it is realoaded without the need to re-start `workflow.py`. 
\ No newline at end of file
diff --git a/README.md b/README.md
index cd6599e..4dd7eaa 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-workflow is a minimalist file based workflow engine. It runs as a background and can automate certain tasks for you such as delete old files, email you when new files are create, run a script to process new files.
+`workflow.py` is a minimalist file based workflow engine. It runs as a background and can automate certain tasks such as delete old files, email you when new files are created, run a script to process new files.
@@ -7,2 +7,2 @@ workflow is a minimalist file based workflow engine. It runs as a background and
-- create a file workflow.config using the syntax below
-- run workflow.py in that folder
+- create a file `workflow.config` using the syntax below
+- run `workflow.py` in that folder
@@ -10 +10 @@ workflow is a minimalist file based workflow engine. It runs as a background and
-## workflow options
+## Workflow options
@@ -15 +15 @@ workflow is a minimalist file based workflow engine. It runs as a background and
-## workflow.config syntax
+## `workflow.config` syntax
@@ -17 +17 @@ workflow is a minimalist file based workflow engine. It runs as a background and
-The workflow.config file consists of a series of rules with the following syntax
+`workflow.config` consists of a series of rules with the following syntax
@@ -19 +19 @@ The workflow.config file consists of a series of rules with the following syntax
-`name: pattern [time]: command`
+    name: pattern [time]: command
@@ -56 +56 @@ When a file matches a pattern, a new process is created to execute the correspon
-If file has already been processed according to a ceratin rule, this info is stored in a file `workflow.config` and it is not processed again unless:
+If a file has already been processed according to a ceratin rule, this info is stored in a file `workflow.config` and it is not processed again unless:
@@ -65 +65 @@ You can cleanup a rule with
-If the main workflow.py process is killed or crashes while some commands are being executed, they also are killed. You can find which file and rules where being processed by looking for `<filename>.<rulename>.pid` files. If you restart workflow.py those pid files are deleted.
+If the main `workflow.py` process is killed or crashes while some commands are being executed, they also are killed. You can find which files and rules where being processed by looking for `<filename>.<rulename>.pid` files. If you restart `workflow.py` those pid files are deleted.
@@ -69 +69 @@ If a rule results in an error and a `<filename>.<rulename>.err` is created, the
-If a file is edited or touched and rule runs again, the `<filename>.<rulename>.out` will be overwritten.
+If a file is edited or touched and the rule runs again, the `<filename>.<rulename>.out` will be overwritten.
@@ -71 +71 @@ If a file is edited or touched and rule runs again, the `<filename>.<rulename>.o
-Unless otherwise specified each file is processed 1s after it is last modified. It is possible that a different process is still writing the file but it is pausing more than 1s between writes (for example the file is being downloaded via a slow connection). In this case it is best to download the file with a different name than the name used for the patter and mv the file to the pattern matching name, after the write of the file is completed. This must be handled outside of workflow. Workflow has no way of knowing when a file is completed or not.
+Unless otherwise specified each file is processed 1s after it is last modified. It is possible that a different process is still writing the file but it is pausing more than 1s between writes (for example the file is being downloaded via a slow connection). In this case it is best to download the file with a different name than the name used for the patterm and rename the file to its proper name after the write of the file is completed. This must be handled outside of workflow. Workflow has no way of knowing when a file is completed or not.
