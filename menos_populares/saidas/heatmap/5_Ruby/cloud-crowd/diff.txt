diff --git a/README b/README
index 64974b5..817fd7b 100644
--- a/README
+++ b/README
@@ -44,2 +44,2 @@
-    Wiki: http://wiki.github.com/documentcloud/cloud-crowd
-    Rdoc: http://rdoc.info/projects/documentcloud/cloud-crowd
+    Wiki: https://github.com/documentcloud/cloud-crowd/wiki
+    Rdoc: http://www.rubydoc.info/github/documentcloud/cloud-crowd
@@ -93 +93 @@
-  
\ No newline at end of file
+  
diff --git a/README b/README
index 6820676..64974b5 100644
--- a/README
+++ b/README
@@ -66 +66 @@
-			>> cd ~/config/cloud-crowd
+      >> cd ~/config/cloud-crowd
@@ -69 +69 @@
-			>> [create the database you just configured...]
+      >> [create the database you just configured...]
@@ -81 +81 @@
- 		# any Rack-compliant webserver to run your central server.
+     # any Rack-compliant webserver to run your central server.
@@ -89 +89 @@
-		# will register with the central server, becoming available for processing.
+    # will register with the central server, becoming available for processing.
diff --git a/README b/README
index 0377108..6820676 100644
--- a/README
+++ b/README
@@ -29 +29 @@
-    * Built for Amazon EC2 and S3
+    * Works with Amazon EC2 and S3
@@ -66,2 +66,4 @@
-      >> mate ~/config/cloud-crowd/config.yml
-      >> mate ~/config/cloud-crowd/database.yml
+			>> cd ~/config/cloud-crowd
+      >> mate config.yml
+      >> mate database.yml
+			>> [create the database you just configured...]
@@ -71 +73 @@
-    # CloudCrowd comes with some default actions as an example.
+    # CloudCrowd comes with a few default actions as an example.
@@ -74 +76 @@
-    # in config.yml), either:
+    # in config.yml):
@@ -78 +80,2 @@
-    # or:
+    # The configuration folder also includes 'config.ru', which can be used by
+ 		# any Rack-compliant webserver to run your central server.
@@ -80 +83 @@
-      >> thin -R config.ru --servers 3 -e production start
+    # Then, to launch a node of workers:
@@ -82 +85 @@
-    # Any server that supports Rack should work with the rackup file.
+      >> crowd node
@@ -84 +87,3 @@
-    # Then, to spin up 10 workers:
+    # To spin up remote nodes, install the 'cloud-crowd' gem and copy over
+    # your configuration directory. Run `crowd node`, and the remote machines
+		# will register with the central server, becoming available for processing.
@@ -86,7 +91,2 @@
-      >> crowd workers start -n 10
-    
-    # To spin up workers remotely, install the 'cloud-crowd' gem, and copy over
-    # your configuration directory.
-    
-    # At this point you can visit your server console at localhost:9173 to 
-    # view all of your workers, ready for action.
+    # At this point you can visit your Operations Center at localhost:9173 to 
+    # view all of your nodes, ready for action.
diff --git a/README b/README
index 3b7d191..0377108 100644
--- a/README
+++ b/README
@@ -33,7 +33,7 @@
-		Well-suited for:
-		
-		* Generating or resizing images.
-		* Encoding video.
-		* Running text extraction or OCR on PDFs.
-		* Migrating a large file set or database.
-		* Web scraping.
+    Well-suited for:
+    
+    * Generating or resizing images.
+    * Encoding video.
+    * Running text extraction or OCR on PDFs.
+    * Migrating a large file set or database.
+    * Web scraping.
@@ -45 +45 @@
-		Rdoc: http://rdoc.info/projects/documentcloud/cloud-crowd
+    Rdoc: http://rdoc.info/projects/documentcloud/cloud-crowd
diff --git a/README b/README
index 87450d5..3b7d191 100644
--- a/README
+++ b/README
@@ -1 +1 @@
-                                                                               
+=                                                                               
@@ -42 +42 @@
-  ~ Wiki ~
+  ~ Documentation ~
@@ -44 +44,2 @@
-    http://wiki.github.com/documentcloud/cloud-crowd
+    Wiki: http://wiki.github.com/documentcloud/cloud-crowd
+		Rdoc: http://rdoc.info/projects/documentcloud/cloud-crowd
diff --git a/README b/README
index 5e83ea7..87450d5 100644
--- a/README
+++ b/README
@@ -31,0 +32,8 @@
+
+		Well-suited for:
+		
+		* Generating or resizing images.
+		* Encoding video.
+		* Running text extraction or OCR on PDFs.
+		* Migrating a large file set or database.
+		* Web scraping.
diff --git a/README b/README
index b2b743e..5e83ea7 100644
--- a/README
+++ b/README
@@ -27 +27 @@
-    * MapReduce for the rest of us
+    * Parallel processing for the rest of us
diff --git a/README b/README
index 92d5512..b2b743e 100644
--- a/README
+++ b/README
@@ -25 +25 @@
-	~ CloudCrowd ~
+  ~ CloudCrowd ~
@@ -27,58 +27,58 @@
-		* MapReduce for the rest of us
-		* Write your scripts in Ruby
-		* Built for Amazon EC2 and S3
-		* split -> process -> merge
-		* As easy as `gem install cloud-crowd`
-		
-		
-	~ Wiki ~
-	
-		http://wiki.github.com/documentcloud/cloud-crowd
-	
-	
-	~ Getting started ~
-	
-		# Install the gem.
-		
-			>> sudo gem install cloud-crowd
-		
-		# Install the CloudCrowd configuration files to a location of your choosing.
-		
-			>> crowd install ~/config/cloud-crowd
-		
-		# Now, you can use the full complement of `crowd` commands from inside of
-		# this configuration directory. To see the available commands:
-		
-			>> crowd --help
-		
-		# Edit the configuration files to your satisfaction, add AWS credentials, 
-		# and then load the CloudCrowd schema into your configured database.
-		
-			>> mate ~/config/cloud-crowd/config.yml
-			>> mate ~/config/cloud-crowd/database.yml
-			>> crowd load_schema
-		
-		# Write your actions, and install them into the 'actions' subdirectory.
-		# CloudCrowd comes with some default actions as an example.
-		
-		# To launch the central server (make sure that you include its location
-		# in config.yml), either:
-		
-			>> crowd server
-		
-		# or:
-		
-			>> thin -R config.ru --servers 3 -e production start
-		
-		# Any server that supports Rack should work with the rackup file.
-		
-		# Then, to spin up 10 workers:
-		
-			>> crowd workers start -n 10
-		
-		# To spin up workers remotely, install the 'cloud-crowd' gem, and copy over
-		# your configuration directory.
-		
-		# At this point you can visit your server console at localhost:9173 to 
-		# view all of your workers, ready for action.
-	
\ No newline at end of file
+    * MapReduce for the rest of us
+    * Write your scripts in Ruby
+    * Built for Amazon EC2 and S3
+    * split -> process -> merge
+    * As easy as `gem install cloud-crowd`
+    
+    
+  ~ Wiki ~
+  
+    http://wiki.github.com/documentcloud/cloud-crowd
+  
+  
+  ~ Getting started ~
+  
+    # Install the gem.
+    
+      >> sudo gem install cloud-crowd
+    
+    # Install the CloudCrowd configuration files to a location of your choosing.
+    
+      >> crowd install ~/config/cloud-crowd
+    
+    # Now, you can use the full complement of `crowd` commands from inside of
+    # this configuration directory. To see the available commands:
+    
+      >> crowd --help
+    
+    # Edit the configuration files to your satisfaction, add AWS credentials, 
+    # and then load the CloudCrowd schema into your configured database.
+    
+      >> mate ~/config/cloud-crowd/config.yml
+      >> mate ~/config/cloud-crowd/database.yml
+      >> crowd load_schema
+    
+    # Write your actions, and install them into the 'actions' subdirectory.
+    # CloudCrowd comes with some default actions as an example.
+    
+    # To launch the central server (make sure that you include its location
+    # in config.yml), either:
+    
+      >> crowd server
+    
+    # or:
+    
+      >> thin -R config.ru --servers 3 -e production start
+    
+    # Any server that supports Rack should work with the rackup file.
+    
+    # Then, to spin up 10 workers:
+    
+      >> crowd workers start -n 10
+    
+    # To spin up workers remotely, install the 'cloud-crowd' gem, and copy over
+    # your configuration directory.
+    
+    # At this point you can visit your server console at localhost:9173 to 
+    # view all of your workers, ready for action.
+  
\ No newline at end of file
diff --git a/README b/README
index e72ff6b..92d5512 100644
--- a/README
+++ b/README
@@ -31,0 +32,5 @@
+		
+		
+	~ Wiki ~
+	
+		http://wiki.github.com/documentcloud/cloud-crowd
@@ -36 +41 @@
-		# Install the gem (documentcloud-cloud-crowd until the first official release).
+		# Install the gem.
@@ -49 +54,2 @@
-		# Edit the configuration files to your satisfaction, and add AWS credentials.
+		# Edit the configuration files to your satisfaction, add AWS credentials, 
+		# and then load the CloudCrowd schema into your configured database.
@@ -52,0 +59 @@
+			>> crowd load_schema
diff --git a/README b/README
index 30b1aec..e72ff6b 100644
--- a/README
+++ b/README
@@ -27 +27 @@
-		* A batch-processing system, map-reduce style
+		* MapReduce for the rest of us
diff --git a/README b/README
index 64a6145..30b1aec 100644
--- a/README
+++ b/README
@@ -57 +57 @@
-		# To spin up the central server (make sure that you include its location
+		# To launch the central server (make sure that you include its location
@@ -74 +74,3 @@
-
+		
+		# At this point you can visit your server console at localhost:9173 to 
+		# view all of your workers, ready for action.
diff --git a/README b/README
index 26fb4da..64a6145 100644
--- a/README
+++ b/README
@@ -38 +38 @@
-		>> sudo gem install cloud-crowd
+			>> sudo gem install cloud-crowd
@@ -42 +42 @@
-		>> crowd install ~/config/cloud-crowd
+			>> crowd install ~/config/cloud-crowd
@@ -47 +47 @@
-		>> crowd --help
+			>> crowd --help
@@ -51,2 +51,2 @@
-		>> mate ~/config/cloud-crowd/config.yml
-		>> mate ~/config/cloud-crowd/database.yml
+			>> mate ~/config/cloud-crowd/config.yml
+			>> mate ~/config/cloud-crowd/database.yml
@@ -60 +60 @@
-		>> crowd server
+			>> crowd server
@@ -64 +64 @@
-		>> thin -R config.ru --servers 3 -e production start
+			>> thin -R config.ru --servers 3 -e production start
@@ -70 +70 @@
-		>> crowd workers start -n 10
+			>> crowd workers start -n 10
diff --git a/README b/README
index cf7cd6f..26fb4da 100644
--- a/README
+++ b/README
@@ -42 +42 @@
-		>> crowd install /etc/cloud-crowd
+		>> crowd install ~/config/cloud-crowd
@@ -51,2 +51,2 @@
-		>> mate /etc/cloud-crowd/config.yml
-		>> mate /etc/cloud-cloud/database.yml
+		>> mate ~/config/cloud-crowd/config.yml
+		>> mate ~/config/cloud-crowd/database.yml
diff --git a/README b/README
index 925cfc3..cf7cd6f 100644
--- a/README
+++ b/README
@@ -66 +66 @@
-		# Any server that supports rack should work with the rackup file.
+		# Any server that supports Rack should work with the rackup file.
diff --git a/README b/README
index 0f63abd..925cfc3 100644
--- a/README
+++ b/README
@@ -54 +54 @@
-		# Write your actions, and install them into your config/actions directory.
+		# Write your actions, and install them into the 'actions' subdirectory.
diff --git a/README b/README
index 4de3693..0f63abd 100644
--- a/README
+++ b/README
@@ -36,0 +37 @@
+		
@@ -39,0 +41 @@
+		
@@ -40,0 +43 @@
+		
@@ -42,0 +46 @@
+		
@@ -45,0 +50 @@
+		
@@ -53,0 +59 @@
+		
@@ -54,0 +61 @@
+		
@@ -55,0 +63 @@
+		
@@ -56,0 +65 @@
+		
@@ -59,0 +69 @@
+		
@@ -60,0 +71 @@
+		
diff --git a/README b/README
index 6fca1b4..4de3693 100644
--- a/README
+++ b/README
@@ -0,0 +1,25 @@
+                                                                               
+           _  _                                                                
+          ( `   )_                                                             
+         (    )    `)                                                          
+       (_   (_ .  _) _)                                                        
+                                      _                                        
+                                     (  )                                      
+      _ .                         ( `  ) . )                                   
+    (  _ )_                      (_, _(  ,_)_)                                 
+  (_  _(_ ,)                                                                   
+                                                                               
+           _  _               ___ _             _  ___                   _     
+          ( `   )_           / __| |___ _  _ __| |/ __|_ _ _____ __ ____| |    
+         (    )    `)       | (__| / _ \ || / _` | (__| '_/ _ \ V  V / _` |    
+       (_   (_ .  _) _)      \___|_\___/\_,_\__,_|\___|_| \___/\_/\_/\__,_|    
+                                                                               
+                                                     _                         
+                                                    (  )                       
+                  _, _ .                         ( `  ) . )                    
+                 ( (  _ )_                      (_, _(  ,_)_)                  
+               (_(_  _(_ ,)                                                    
+                                                                               
+                                                                               
+                                                                               
+	~ CloudCrowd ~
@@ -2,14 +27,36 @@
-           _  _
-          ( `   )_
-         (    )    `)
-       (_   (_ .  _) _)
-                                      _
-                                     (  )
-      _ .                         ( `  ) . )
-    (  _ )_                      (_, _(  ,_)_)
-  (_  _(_ ,)
-                                                         
-           _  _               ___ _             _  ___                   _                             \ _ /
-          ( `   )_           / __| |___ _  _ __| |/ __|_ _ _____ __ ____| |                          -= (_) =-
-         (    )    `)       | (__| / _ \ || / _` | (__| '_/ _ \ V  V / _` |                            /   \
-       (_   (_ .  _) _)      \___|_\___/\_,_\__,_|\___|_| \___/\_/\_/\__,_|                              |
+		* A batch-processing system, map-reduce style
+		* Write your scripts in Ruby
+		* Built for Amazon EC2 and S3
+		* split -> process -> merge
+		* As easy as `gem install cloud-crowd`
+	
+	
+	~ Getting started ~
+	
+		# Install the gem (documentcloud-cloud-crowd until the first official release).
+		>> sudo gem install cloud-crowd
+		
+		# Install the CloudCrowd configuration files to a location of your choosing.
+		>> crowd install /etc/cloud-crowd
+		# Now, you can use the full complement of `crowd` commands from inside of
+		# this configuration directory. To see the available commands:
+		>> crowd --help
+		
+		# Edit the configuration files to your satisfaction, and add AWS credentials.
+		>> mate /etc/cloud-crowd/config.yml
+		>> mate /etc/cloud-cloud/database.yml
+		
+		# Write your actions, and install them into your config/actions directory.
+		# CloudCrowd comes with some default actions as an example.
+		
+		# To spin up the central server (make sure that you include its location
+		# in config.yml), either:
+		>> crowd server
+		# or:
+		>> thin -R config.ru --servers 3 -e production start
+		# Any server that supports rack should work with the rackup file.
+		
+		# Then, to spin up 10 workers:
+		>> crowd workers start -n 10
+		# To spin up workers remotely, install the 'cloud-crowd' gem, and copy over
+		# your configuration directory.
@@ -17,14 +64 @@
-                                                     _
-                                                    (  )
-                  _, _ .                         ( `  ) . )
-                 ( (  _ )_                      (_, _(  ,_)_)
-               (_(_  _(_ ,)
-
-
-
-CloudCrowd is:
-	* A batch-processing system, map-reduce style
-	* Write your scripts in Ruby
-	* Built for EC2 and S3
-	* split -> process -> merge
-	* As easy as `gem install cloud-crowd`
\ No newline at end of file
+	
\ No newline at end of file
diff --git a/README b/README
index 37ec8ea..6fca1b4 100644
--- a/README
+++ b/README
@@ -1 +0,0 @@
-== Welcome to Rails
@@ -3,241 +2,29 @@
-Rails is a web-application framework that includes everything needed to create 
-database-backed web applications according to the Model-View-Control pattern. 
-
-This pattern splits the view (also called the presentation) into "dumb" templates
-that are primarily responsible for inserting pre-built data in between HTML tags.
-The model contains the "smart" domain objects (such as Account, Product, Person,
-Post) that holds all the business logic and knows how to persist themselves to
-a database. The controller handles the incoming requests (such as Save New Account,
-Update Product, Show Post) by manipulating the model and directing data to the view.
-
-In Rails, the model is handled by what's called an object-relational mapping
-layer entitled Active Record. This layer allows you to present the data from
-database rows as objects and embellish these data objects with business logic
-methods. You can read more about Active Record in
-link:files/vendor/rails/activerecord/README.html.
-
-The controller and view are handled by the Action Pack, which handles both
-layers by its two parts: Action View and Action Controller. These two layers
-are bundled in a single package due to their heavy interdependence. This is
-unlike the relationship between the Active Record and Action Pack that is much
-more separate. Each of these packages can be used independently outside of
-Rails.  You can read more about Action Pack in
-link:files/vendor/rails/actionpack/README.html.
-
-
-== Getting Started
-
-1. At the command prompt, start a new Rails application using the <tt>rails</tt> command
-   and your application name. Ex: rails myapp
-2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)
-3. Go to http://localhost:3000/ and get "Welcome aboard: You're riding the Rails!"
-4. Follow the guidelines to start developing your application
-
-
-== Web Servers
-
-By default, Rails will try to use Mongrel if it's are installed when started with script/server, otherwise Rails will use WEBrick, the webserver that ships with Ruby. But you can also use Rails
-with a variety of other web servers.
-
-Mongrel is a Ruby-based webserver with a C component (which requires compilation) that is
-suitable for development and deployment of Rails applications. If you have Ruby Gems installed,
-getting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.
-More info at: http://mongrel.rubyforge.org
-
-Say other Ruby web servers like Thin and Ebb or regular web servers like Apache or LiteSpeed or
-Lighttpd or IIS. The Ruby web servers are run through Rack and the latter can either be setup to use
-FCGI or proxy to a pack of Mongrels/Thin/Ebb servers.
-
-== Apache .htaccess example for FCGI/CGI
-
-# General Apache options
-AddHandler fastcgi-script .fcgi
-AddHandler cgi-script .cgi
-Options +FollowSymLinks +ExecCGI
-
-# If you don't want Rails to look in certain directories,
-# use the following rewrite rules so that Apache won't rewrite certain requests
-# 
-# Example:
-#   RewriteCond %{REQUEST_URI} ^/notrails.*
-#   RewriteRule .* - [L]
-
-# Redirect all requests not available on the filesystem to Rails
-# By default the cgi dispatcher is used which is very slow
-# 
-# For better performance replace the dispatcher with the fastcgi one
-#
-# Example:
-#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]
-RewriteEngine On
-
-# If your Rails application is accessed via an Alias directive,
-# then you MUST also set the RewriteBase in this htaccess file.
-#
-# Example:
-#   Alias /myrailsapp /path/to/myrailsapp/public
-#   RewriteBase /myrailsapp
-
-RewriteRule ^$ index.html [QSA]
-RewriteRule ^([^.]+)$ $1.html [QSA]
-RewriteCond %{REQUEST_FILENAME} !-f
-RewriteRule ^(.*)$ dispatch.cgi [QSA,L]
-
-# In case Rails experiences terminal errors
-# Instead of displaying this message you can supply a file here which will be rendered instead
-# 
-# Example:
-#   ErrorDocument 500 /500.html
-
-ErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"
-
-
-== Debugging Rails
-
-Sometimes your application goes wrong.  Fortunately there are a lot of tools that
-will help you debug it and get it back on the rails.
-
-First area to check is the application log files.  Have "tail -f" commands running
-on the server.log and development.log. Rails will automatically display debugging
-and runtime information to these files. Debugging info will also be shown in the
-browser on requests from 127.0.0.1.
-
-You can also log your own messages directly into the log file from your code using
-the Ruby logger class from inside your controllers. Example:
-
-  class WeblogController < ActionController::Base
-    def destroy
-      @weblog = Weblog.find(params[:id])
-      @weblog.destroy
-      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
-    end
-  end
-
-The result will be a message in your log file along the lines of:
-
-  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1
-
-More information on how to use the logger is at http://www.ruby-doc.org/core/
-
-Also, Ruby documentation can be found at http://www.ruby-lang.org/ including:
-
-* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/
-* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)
-
-These two online (and free) books will bring you up to speed on the Ruby language
-and also on programming in general.
-
-
-== Debugger
-
-Debugger support is available through the debugger command when you start your Mongrel or
-Webrick server with --debugger. This means that you can break out of execution at any point
-in the code, investigate and change the model, AND then resume execution! 
-You need to install ruby-debug to run the server in debugging mode. With gems, use 'gem install ruby-debug'
-Example:
-
-  class WeblogController < ActionController::Base
-    def index
-      @posts = Post.find(:all)
-      debugger
-    end
-  end
-
-So the controller will accept the action, run the first line, then present you
-with a IRB prompt in the server window. Here you can do things like:
-
-  >> @posts.inspect
-  => "[#<Post:0x14a6be8 @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>,
-       #<Post:0x14a6620 @attributes={\"title\"=>\"Rails you know!\", \"body\"=>\"Only ten..\", \"id\"=>\"2\"}>]"
-  >> @posts.first.title = "hello from a debugger"
-  => "hello from a debugger"
-
-...and even better is that you can examine how your runtime objects actually work:
-
-  >> f = @posts.first
-  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
-  >> f.
-  Display all 152 possibilities? (y or n)
-
-Finally, when you're ready to resume execution, you enter "cont"
-
-
-== Console
-
-You can interact with the domain model by starting the console through <tt>script/console</tt>.
-Here you'll have all parts of the application configured, just like it is when the
-application is running. You can inspect domain models, change values, and save to the
-database. Starting the script without arguments will launch it in the development environment.
-Passing an argument will specify a different environment, like <tt>script/console production</tt>.
-
-To reload your controllers and models after launching the console run <tt>reload!</tt>
-
-== dbconsole
-
-You can go to the command line of your database directly through <tt>script/dbconsole</tt>.
-You would be connected to the database with the credentials defined in database.yml.
-Starting the script without arguments will connect you to the development database. Passing an
-argument will connect you to a different database, like <tt>script/dbconsole production</tt>.
-Currently works for mysql, postgresql and sqlite.
-
-== Description of Contents
-
-app
-  Holds all the code that's specific to this particular application.
-
-app/controllers
-  Holds controllers that should be named like weblogs_controller.rb for
-  automated URL mapping. All controllers should descend from ApplicationController
-  which itself descends from ActionController::Base.
-
-app/models
-  Holds models that should be named like post.rb.
-  Most models will descend from ActiveRecord::Base.
-
-app/views
-  Holds the template files for the view that should be named like
-  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby
-  syntax.
-
-app/views/layouts
-  Holds the template files for layouts to be used with views. This models the common
-  header/footer method of wrapping views. In your views, define a layout using the
-  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,
-  call <% yield %> to render the view using this layout.
-
-app/helpers
-  Holds view helpers that should be named like weblogs_helper.rb. These are generated
-  for you automatically when using script/generate for controllers. Helpers can be used to
-  wrap functionality for your views into methods.
-
-config
-  Configuration files for the Rails environment, the routing map, the database, and other dependencies.
-
-db
-  Contains the database schema in schema.rb.  db/migrate contains all
-  the sequence of Migrations for your schema.
-
-doc
-  This directory is where your application documentation will be stored when generated
-  using <tt>rake doc:app</tt>
-
-lib
-  Application specific libraries. Basically, any kind of custom code that doesn't
-  belong under controllers, models, or helpers. This directory is in the load path.
-
-public
-  The directory available for the web server. Contains subdirectories for images, stylesheets,
-  and javascripts. Also contains the dispatchers and the default HTML files. This should be
-  set as the DOCUMENT_ROOT of your web server.
-
-script
-  Helper scripts for automation and generation.
-
-test
-  Unit and functional tests along with fixtures. When using the script/generate scripts, template
-  test files will be generated for you and placed in this directory.
-
-vendor
-  External libraries that the application depends on. Also includes the plugins subdirectory.
-  If the app has frozen rails, those gems also go here, under vendor/rails/.
-  This directory is in the load path.
+           _  _
+          ( `   )_
+         (    )    `)
+       (_   (_ .  _) _)
+                                      _
+                                     (  )
+      _ .                         ( `  ) . )
+    (  _ )_                      (_, _(  ,_)_)
+  (_  _(_ ,)
+                                                         
+           _  _               ___ _             _  ___                   _                             \ _ /
+          ( `   )_           / __| |___ _  _ __| |/ __|_ _ _____ __ ____| |                          -= (_) =-
+         (    )    `)       | (__| / _ \ || / _` | (__| '_/ _ \ V  V / _` |                            /   \
+       (_   (_ .  _) _)      \___|_\___/\_,_\__,_|\___|_| \___/\_/\_/\__,_|                              |
+
+                                                     _
+                                                    (  )
+                  _, _ .                         ( `  ) . )
+                 ( (  _ )_                      (_, _(  ,_)_)
+               (_(_  _(_ ,)
+
+
+
+CloudCrowd is:
+	* A batch-processing system, map-reduce style
+	* Write your scripts in Ruby
+	* Built for EC2 and S3
+	* split -> process -> merge
+	* As easy as `gem install cloud-crowd`
\ No newline at end of file
