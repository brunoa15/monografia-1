diff --git a/README.md b/README.md
index 3789962..f54cf5e 100644
--- a/README.md
+++ b/README.md
@@ -694,0 +695 @@ Inside the `RSpec.configure do |config|` block.
+- [Damir Svrtan](https://github.com/DamirSvrtan) for support for bugsnag, docs and tests.
diff --git a/README.md b/README.md
index 6d433b3..3789962 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-1. **[It's opinionated]a** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
+1. **[It's opinionated](#working-with-data)** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
diff --git a/README.md b/README.md
index fb0ed2b..6d433b3 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-1. **[It's opinionated](#working-with-data)** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
+1. **[It's opinionated]a** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
@@ -17 +17 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-3. **[Extended Error Support](#registering--dealing-with-errors)** - RocketPants has a built in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it simple to hook up to Airbrake and do things such as including an error identifier in the response.
+3. **[Extended Error Support](#registering--dealing-with-errors)** - RocketPants has a built in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it [simple to hook up to Airbrake](#tracking-errors-w-airbrake-honeybadger-or-bugsnag) and do things such as including an error identifier in the response.
@@ -203 +203 @@ And added our own:
-* `RocketPants::Rescuable` - Allows you to hook in to rescuing exceptions and to make it easy to post notifications to tools such as AirBrake.
+* `RocketPants::Rescuable` - Allows you to hook in to rescuing exceptions and to make it easy to [post notifications to tools such as Airbrake](#tracking-errors-w-airbrake-honeybadger-or-bugsnag).
@@ -562 +562 @@ Since Rocket Pants automatically rescues server errors, you'll additionally need
-Rocket Pants comes with built in support for Airbrake, Honeybadger and Bugsnag. Depending on your prefered tracking solution, in your base controller add this:
+Rocket Pants comes with built in support for [Airbrake](https://airbrake.io/), [Honeybadger](https://www.honeybadger.io/) and [Bugsnag](https://bugsnag.com/). Depending on your prefered tracking solution, in your base controller add this:
@@ -568 +568 @@ class ApplicationController < RocketPants::Base
-  # Honeybadger
+  # or Honeybadger
@@ -570 +570 @@ class ApplicationController < RocketPants::Base
-  # Bugsnag
+  # or Bugsnag
@@ -575 +575 @@ end
-If you're using some other service, you can add a custom notifier like this:
+If you're using some other service, you can add a custom notifier:
diff --git a/README.md b/README.md
index f0f3e7c..fb0ed2b 100644
--- a/README.md
+++ b/README.md
@@ -311 +311 @@ api versions: 1, module: "api/v1" do
-  resources :users, only: [:index]  
+  resources :users, only: [:index]
@@ -557,0 +558,27 @@ as `bad_request` API errors to the requesting users.
+### Tracking errors w/ Airbrake, Honeybadger or Bugsnag
+
+Since Rocket Pants automatically rescues server errors, you'll additionally need to configure tracking them if you want to be warned when they happen.
+
+Rocket Pants comes with built in support for Airbrake, Honeybadger and Bugsnag. Depending on your prefered tracking solution, in your base controller add this:
+
+```ruby
+class ApplicationController < RocketPants::Base
+  # Airbrake
+  use_named_exception_notifier :airbrake
+  # Honeybadger
+  use_named_exception_notifier :honeybadger
+  # Bugsnag
+  use_named_exception_notifier :bugsnag
+end
+```
+
+If you're using some other service, you can add a custom notifier like this:
+
+```ruby
+class ApplicationController < RocketPants::Base
+  self.exception_notifier_callback = lambda do |controller, exception, request|
+    # track errors
+  end
+end
+```
+
diff --git a/README.md b/README.md
index 6a92ebf..f0f3e7c 100644
--- a/README.md
+++ b/README.md
@@ -666,0 +667 @@ Inside the `RSpec.configure do |config|` block.
+- [Kevin Jalbert](https://github.com/kevinjalbert) for spelling fixes.
diff --git a/README.md b/README.md
index c32264b..6a92ebf 100644
--- a/README.md
+++ b/README.md
@@ -46 +46 @@ class FoodsController < RocketPants::Base
-  # The list of foods is paginated for 5 minutes, the food itself is cached
+  # The list of foods is cached for 5 minutes, the food itself is cached
diff --git a/README.md b/README.md
index aec1a1e..c32264b 100644
--- a/README.md
+++ b/README.md
@@ -665,0 +666 @@ Inside the `RSpec.configure do |config|` block.
+- [Michael Chrisco](https://github.com/michaelachrisco) for spelling fixes.
diff --git a/README.md b/README.md
index e2be533..aec1a1e 100644
--- a/README.md
+++ b/README.md
@@ -23 +23 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-9. **[Support for active_model_serializers](https://github.com/rails-api/active_model_serializers)** - If you want to use ActiveModelSerializers, we'll take care of it. Even better, in your expose call, pass through `:serializer` as expected and we'll automatically take care of invoking it for you.
+9. **[Support for active_model_serializers](https://github.com/rails-api/active_model_serializers)** - If you want to use ActiveModelSerializers, we'll take care of it. Even better, in your expose call, pass through `:serializer` as expected (or `:each_serializer`) and we'll automatically take care of invoking it for you.
diff --git a/README.md b/README.md
index 9a354bd..e2be533 100644
--- a/README.md
+++ b/README.md
@@ -82,2 +82,2 @@ And then, using this example, hitting `GET http://localhost:3000/1/foods` would
-    "previous": nil,
-    "next":     nil,
+    "previous": null,
+    "next":     null,
@@ -663,3 +663,3 @@ Inside the `RSpec.configure do |config|` block.
-- [newdark](https://github.com/newdark) for RSpec v3 fixes.
-- [davidpdrsn](https://github.com/davidpdrsn) for Rails 4.2 fixes.
-- [DamirSvrtan](https://github.com/DamirSvrtan) for Travis CI fixes.
+- [Brandt Lareau](https://github.com/newdark) for RSpec v3 fixes.
+- [David Pedersen](https://github.com/davidpdrsn) for Rails 4.2 fixes.
+- [Damir Svrtan](https://github.com/DamirSvrtan) for Travis CI fixes.
diff --git a/README.md b/README.md
index 457736c..9a354bd 100644
--- a/README.md
+++ b/README.md
@@ -662,0 +663,3 @@ Inside the `RSpec.configure do |config|` block.
+- [newdark](https://github.com/newdark) for RSpec v3 fixes.
+- [davidpdrsn](https://github.com/davidpdrsn) for Rails 4.2 fixes.
+- [DamirSvrtan](https://github.com/DamirSvrtan) for Travis CI fixes.
diff --git a/README.md b/README.md
index 25fc4f3..457736c 100644
--- a/README.md
+++ b/README.md
@@ -46 +46 @@ class FoodsController < RocketPants::Base
-  # The list of foods is cached for 5 minutes, the food itself is cached
+  # The list of foods is paginated for 5 minutes, the food itself is cached
@@ -661,0 +662 @@ Inside the `RSpec.configure do |config|` block.
+- [Travis Pew](https://github.com/travisp) for initial RSpec v3 support.
diff --git a/README.md b/README.md
index c6cbcc2..25fc4f3 100644
--- a/README.md
+++ b/README.md
@@ -46 +46 @@ class FoodsController < RocketPants::Base
-  # The list of foods is paginated for 5 minutes, the food itself is cached
+  # The list of foods is cached for 5 minutes, the food itself is cached
diff --git a/README.md b/README.md
index bbfa711..c6cbcc2 100644
--- a/README.md
+++ b/README.md
@@ -660,0 +661 @@ Inside the `RSpec.configure do |config|` block.
+- [Manuel Meurer](https://github.com/manuelmeurer) for Doc tweaks.
diff --git a/README.md b/README.md
index a2025dd..bbfa711 100644
--- a/README.md
+++ b/README.md
@@ -48 +48 @@ class FoodsController < RocketPants::Base
-  caches :index, :show, :caches_for => 5.minutes
+  caches :index, :show, :cache_for => 5.minutes
@@ -581 +581 @@ class UsersController < RocketPants::Base
-  caches :show, :index, :caches_for => 5.minutes
+  caches :show, :index, :cache_for => 5.minutes
diff --git a/README.md b/README.md
index 6fc3f37..a2025dd 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,3 @@
-# Rocket Pants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants)
+# Rocket Pants! [![Build Status](https://secure.travis-ci.org/Sutto/rocket_pants.png?branch=master)](http://travis-ci.org/Sutto/rocket_pants)
+
+**Please Note:** Work on RocketPants 2.0 is currently underway on the [2.0-rewrite](https://github.com/Sutto/rocket_pants/tree/2.0-rewrite) branch. Please check there before requesting features.
@@ -18 +20 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-6. **[Simple tools to consume RocketPants apis](#example-client-code)** - RocketPants includes the `RocketPants::Client` class which builds upon [APISmith](https://github.com/filtersquad/api_smith) to make it easier to build clients e.g. automatically converting paginated responses back.
+6. **[Simple tools to consume RocketPants apis](#example-client-code)** - RocketPants includes the `RocketPants::Client` class which builds upon [APISmith](https://github.com/Sutto/api_smith) to make it easier to build clients e.g. automatically converting paginated responses back.
@@ -678 +680 @@ Other than that, our guidelines very closely match the GemCutter guidelines [her
-RocketPants is released under the MIT License (see the [license file](https://github.com/filtersquad/rocket_pants/blob/master/LICENSE)) and is copyright Filter Squad, 2012.
+RocketPants is released under the MIT License (see the [license file](https://github.com/Sutto/rocket_pants/blob/master/LICENSE)) and is copyright Filter Squad and Darcy Laycock, 2013.
diff --git a/README.md b/README.md
index 00d72cb..6fc3f37 100644
--- a/README.md
+++ b/README.md
@@ -319 +319 @@ When using RocketPants, you write your controllers the same as how you would wit
-- `expose` / `exposes` - The core of all type conversion, will check the type of data and automatically convert it to the correct time (for either a singular, collection or paginated resource).
+- `expose` / `exposes` - The core of all type conversion, will check the type of data and automatically convert it to the correct type (for either a singular, collection or paginated resource).
diff --git a/README.md b/README.md
index 98cb600..00d72cb 100644
--- a/README.md
+++ b/README.md
@@ -397 +397 @@ It also adds a facilities to make it easy to add extra information to the respon
-RocketPants will also attempt to convert all errors in the controller, defaulting to the `"system"` exception name and message as the error description. We also provide a registry to allow throwing exception from their symbolic name like so:
+RocketPants will also attempt to convert all errors in the controller, defaulting to `"system"` as the exception name and message as the error description. We also provide a registry to allow throwing exception from their symbolic name like so:
@@ -405 +405 @@ In the controller.
-Out of the box, the following exceptions come pre-registered and setup. For each of them, you can either use the error form (`error! :error_key) or you can raise an instance of the exception class like normal.
+Out of the box, the following exceptions come pre-registered and setup. For each of them, you can either use the error form (`error! :error_key`) or you can raise an instance of the exception class like normal.
diff --git a/README.md b/README.md
index e2c43d1..98cb600 100644
--- a/README.md
+++ b/README.md
@@ -285,0 +286,29 @@ end
+### How do I layout file system versions versions?
+
+Using users an an example, for a namespaced / modularised version controller the file system location would be
+`app/controllers/api/v1/users_controller.rb` - Rails uses it's own inflection to look for `Api::V1::UsersController` in that file.
+In here, you'd write your control roughly like:
+
+```ruby
+class Api::V1::UsersController < RocketPants::Base
+  version 1
+
+  def index
+    expose User.all # Not what we'd actually do, of course.
+  end
+
+end
+```
+
+Note that I'd personally also introduce `Api::V1::BaseController`, and inherit from that - that way any shared logic (e.g. authentication) can be put in there.
+
+Finally, in the routes - the easiest way would be in the api declaration:
+
+```ruby
+api versions: 1, module: "api/v1" do
+  resources :users, only: [:index]  
+end
+```
+
+Which will set up `/1/users` to hit the index action of `Api::V1::UsersController` - the `module` parameter comes from the rails built in routing configuration: http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope
+
diff --git a/README.md b/README.md
index 57999dd..e2c43d1 100644
--- a/README.md
+++ b/README.md
@@ -16 +16 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-4. **[It's built on ActionPack](#general-structure)** - One of the key differentiators to Grape is that RocketPants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
+4. **[It's built on ActionPack](#general-structure)** - One of the key differentiators to Grape is that RocketPants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters. If you're using Strong Parameters (e.g. in Rails 4), we'll even give you support for that.
@@ -201,0 +202 @@ And added our own:
+* `RocketPants::StrongParameters` - Adds support for strong parameters.
@@ -519,0 +521,6 @@ a `rocket_pants-mongoid` gem mapping more errors, please get in touch.
+### Strong Parameters
+
+One of the newer features of Rocket Pants, if you have the Strong Parameters plugin on Rails 3
+or are using Rails 4, is that we'll automatically rescue strong parameters errors and render them
+as `bad_request` API errors to the requesting users.
+
diff --git a/README.md b/README.md
index 0f149bc..57999dd 100644
--- a/README.md
+++ b/README.md
@@ -621 +621 @@ Inside the `RSpec.configure do |config|` block.
-- [Jörg Schiller](https://github.com/joergschiller) - Strong Parameter support, `process_action` fixes.
+- [Jörg Schiller](https://github.com/joergschiller) - Strong Parameter support, `process` fixes.
diff --git a/README.md b/README.md
index 5b15abe..0f149bc 100644
--- a/README.md
+++ b/README.md
@@ -620,0 +621,2 @@ Inside the `RSpec.configure do |config|` block.
+- [Jörg Schiller](https://github.com/joergschiller) - Strong Parameter support, `process_action` fixes.
+- [Aron Hegyi](https://github.com/ahegyi) - Doc tweaks for `:invalid_resource`.
diff --git a/README.md b/README.md
index 2cd21f2..5b15abe 100644
--- a/README.md
+++ b/README.md
@@ -418,2 +418,2 @@ a list of *all* registered errors, including custom ones.
-    <td><code>:invalid_resource</code></td>
-    <td><code>RocketPants::InvalidResource</code></td>
+    <td><code>:invalid_resource</code>*</td>
+    <td><code>RocketPants::InvalidResource</code>*</td>
@@ -466,0 +467,10 @@ Will return something similar to:
+\* Note that `:invalid_resource` (`RocketPants::InvalidResource`), although registered as a default RocketPants error, does not behave like other default registered errors. When using it, you **must** include an ActiveModel errors object, e.g.:
+
+```ruby
+error!(:invalid_resource, post.errors)
+# or
+render_error RocketPants::InvalidResource.new(post.errors)
+```
+
+If you don't do that, you may get an `ArgumentError`, because of the way Rocket Pants handles instantiation of a `RocketPants::InvalidResource`.
+
diff --git a/README.md b/README.md
index d8c74e0..2cd21f2 100644
--- a/README.md
+++ b/README.md
@@ -609,0 +610 @@ Inside the `RSpec.configure do |config|` block.
+- [Moncef Belyamani](https://github.com/monfresh) - README clarification.
diff --git a/README.md b/README.md
index dac6126..d8c74e0 100644
--- a/README.md
+++ b/README.md
@@ -19 +19 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-7. **[Build in Header Metadata Support](#header-metadata)** - APIs can easily expose `Link:` headers (it's even partly built in for paginated data - see below) and request metadata (e.g. Object count etc) can easily be embedded in the headers of the response, making useful `HEAD` requests.
+7. **[Built-in Header Metadata Support](#header-metadata)** - APIs can easily expose `Link:` headers (it's even partly built-in for paginated data - see below), and request metadata (e.g. Object count, etc.) can easily be embedded in the headers of the response, making useful `HEAD` requests.
@@ -213 +213,30 @@ Installing RocketPants is a simple matter of adding:
-To your `Gemfile` and running `bundle install`. Next, instead of inherited from `ActionController::Base`, simply inherit from `RocketPants::Base` instead. If you're working with an API-only application, I typically change this in `ApplicationController` and inherit from `ApplicationController` as usual. Otherwise, I generate a new `ApiController` base controller along side `ApplicationController` which instead inherits from `RocketPants::Base` and place all my logic there.
+To your `Gemfile` and running `bundle install`. Next, instead of inheriting from `ActionController::Base`, simply inherit from `RocketPants::Base`. For example, if you're working with an API-only application, instead of having this at the top of `application_controller.rb`:
+
+    class ApplicationController < ActionController::Base
+
+you would do this:
+
+    class ApplicationController < RocketPants::Base
+
+Your other controllers would inherit from `ApplicationController` as usual. For example:
+
+    class UsersController < ApplicationController
+
+Otherwise, you can generate a new `api_controller.rb` base controller which inherits from `RocketPants::Base`, and place all your logic there. For example:
+
+In `application_controller.rb`:
+
+    class ApplicationController < ActionController::Base
+
+In `api_controller.rb`:
+
+```
+class ApiController < RocketPants::Base
+
+# logic goes here
+```
+
+In your other controllers, such as `users_controller.rb`:
+
+    class UsersController < ApiController
+
diff --git a/README.md b/README.md
index d7774f3..dac6126 100644
--- a/README.md
+++ b/README.md
@@ -579,0 +580 @@ Inside the `RSpec.configure do |config|` block.
+- [Antoine Lagadec](https://github.com/oakho) - Bug fixes.
diff --git a/README.md b/README.md
index 5ed28e0..d7774f3 100644
--- a/README.md
+++ b/README.md
@@ -578,0 +579 @@ Inside the `RSpec.configure do |config|` block.
+- [Keith Pitt](https://github.com/keithpitt) - Bug fixes.
diff --git a/README.md b/README.md
index 06ffe6b..5ed28e0 100644
--- a/README.md
+++ b/README.md
@@ -465,0 +466,15 @@ For Invalid Resource messages, the response looks roughly akin to:
+### A Note on Mongoid
+
+We currently don't support mongoid / other ORMs in RocketPants, but you can map errors directly like so:
+
+```ruby
+ApiController < RocketPants::Base
+  map_error! Mongoid::Errors::Validations do |exception|
+    RocketPants::InvalidResource.new exception.record.errors
+  end
+end
+```
+
+Thanks to @tiredenzo on #47 for this information. If you'd be interested in making
+a `rocket_pants-mongoid` gem mapping more errors, please get in touch.
+
@@ -556,0 +572,7 @@ Inside the `RSpec.configure do |config|` block.
+- [tiredenzo](https://github.com/tiredenzo) - mongoid error information.
+- [Fabio Napoleoni](https://github.com/fabn) - Version prefix support.
+- [Justin Jones](https://github.com/nagash) - Bug fixes.
+- [Eran Kampf](https://github.com/ekampf) - Support for `:bad_request` errors.
+- [Matthew Nielsen](https://github.com/xunker) - README fixes.
+- [Pavel Kotlyar](https://github.com/paxer) - Typo fixes.
+- [John Rees](https://github.com/johnrees) - README fixes.
diff --git a/README.md b/README.md
index 9344e6e..06ffe6b 100644
--- a/README.md
+++ b/README.md
@@ -20,0 +21 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
+9. **[Support for active_model_serializers](https://github.com/rails-api/active_model_serializers)** - If you want to use ActiveModelSerializers, we'll take care of it. Even better, in your expose call, pass through `:serializer` as expected and we'll automatically take care of invoking it for you.
diff --git a/README.md b/README.md
index 6f33ad1..9344e6e 100644
--- a/README.md
+++ b/README.md
@@ -219 +219 @@ Setting up RocketPants in your rails application is pretty simple and requires a
-- `config.rocket_pants.cache` - A `Moneta::Store` instance used as the RocketPants cache, defaulting to a moneta memory instance. Change for proper caching. (See [here](https://github.com/wycats/moneta) for more information on Moneta.)
+- `config.rocket_pants.cache` - A `Moneta::Store` / Moneta adapter instance (depending on the version of Moneta in use)used as the RocketPants cache, defaulting to a memory-based. Change for proper caching. (See [here](https://github.com/minad/moneta) for more information on Moneta.)
diff --git a/README.md b/README.md
index 724829b..6f33ad1 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# Rocket Pants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants) [![Dependency Status](https://gemnasium.com/filtersquad/rocket_pants.png)](https://gemnasium.com/filtersquad/rocket_pants)
+# Rocket Pants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants)
@@ -569 +569 @@ We encourage all community contributions. Keeping this in mind, please follow th
-Other than that, our guidelines very closely match the GemCutter guidelines [here](http://wiki.github.com/qrush/gemcutter/contribution-guidelines).
+Other than that, our guidelines very closely match the GemCutter guidelines [here](https://github.com/rubygems/rubygems.org/wiki/Contribution-Guidelines).
diff --git a/README.md b/README.md
index 20fed3f..724829b 100644
--- a/README.md
+++ b/README.md
@@ -509,0 +510 @@ parameter on any http requests, e.g:
+# get
@@ -510,0 +512,3 @@ get :index, :version => 1
+
+# post
+post :index, :version => 1, :payload => { :foo => 'bar' ... }
@@ -514,0 +519,8 @@ Otherwise it will raise an exception.
+To set the version to be used for all tests in a given set of specs you can use the `default_version` tag. It will set the version for all tests in that block and not require `:version` to be set individually:
+
+```ruby
+describe YourAwesomeController do
+  default_version 1
+end
+```
+
diff --git a/README.md b/README.md
index 8ab7bb6..20fed3f 100644
--- a/README.md
+++ b/README.md
@@ -544,0 +545,2 @@ Inside the `RSpec.configure do |config|` block.
+If you're not on this list and thing you should be, let @Sutto know.
+
diff --git a/README.md b/README.md
index 65f46a6..8ab7bb6 100644
--- a/README.md
+++ b/README.md
@@ -517 +517 @@ RocketPants includes a set of helpers to make testing controllers built on `Rock
-* `be_singular_resource` - Checks the response is a single resource - e.g. `response.should be_siingular_resource`.
+* `be_singular_resource` - Checks the response is a single resource - e.g. `response.should be_singular_resource`.
diff --git a/README.md b/README.md
index a129baa..65f46a6 100644
--- a/README.md
+++ b/README.md
@@ -345,10 +345,67 @@ In the controller.
-Out of the box, the following exceptions come pre-registered and setup:
-
-- `:throttled` - The user has hit an api throttled error.
-- `:unauthenticated` - The user doesn't have valid authentication details.
-- `:invalid_version` - An invalid API version was specified.
-- `:not_implemented` - The specified endpoint is not yet implemented.
-- `:not_found` - The given resource could not be found.
-- `:invalid_resource` - The given resource was invalid.
-- `:bad_request` - The given request was not as expected.
-- `:conflict` - The resource was a conflict with the existing version.
+Out of the box, the following exceptions come pre-registered and setup. For each of them, you can either use the error form (`error! :error_key) or you can raise an instance of the exception class like normal.
+
+Note that inside your application, you can also use `rake rocket_pants:errors` to view
+a list of *all* registered errors, including custom ones.
+
+<table>
+  <tr>
+    <th>Error Key</th>
+    <th>Exception Class</th>
+    <th>HTTP Status</th>
+    <th>Description</th>
+  </tr>
+  <tr>
+    <td><code>:throttled</code></td>
+    <td><code>RocketPants::Throttled</code></td>
+    <td><code>503 Unavailable</code></td>
+    <td>The user has hit an api throttled error.</td>
+  </tr>
+  <tr>
+    <td><code>:unauthenticated</code></td>
+    <td><code>RocketPants::Unauthenticated</code></td>
+    <td><code>401 Unauthorized</code></td>
+    <td>The user doesn't have valid authentication details.</td>
+  </tr>
+  <tr>
+    <td><code>:invalid_version</code></td>
+    <td><code>RocketPants::Invalidversion</code></td>
+    <td><code>404 Not Found</code></td>
+    <td>An invalid API version was specified.</td>
+  </tr>
+  <tr>
+    <td><code>:not_implemented</code></td>
+    <td><code>RocketPants::NotImplemented</code></td>
+    <td><code>503 Unavailable</code></td>
+    <td>The specified endpoint is not yet implemented.</td>
+  </tr>
+  <tr>
+    <td><code>:not_found</code></td>
+    <td><code>RocketPants::NotFound</code></td>
+    <td><code>404 Not Found</code></td>
+    <td>The given resource could not be found.</td>
+  </tr>
+  <tr>
+    <td><code>:invalid_resource</code></td>
+    <td><code>RocketPants::InvalidResource</code></td>
+    <td><code>422 Unprocessable Entity</code></td>
+    <td>The given resource was invalid.</td>
+  </tr>
+  <tr>
+    <td><code>:bad_request</code></td>
+    <td><code>RocketPants::BadRequest</code></td>
+    <td><code>400 Bad Request</code></td>
+    <td>The given request was not as expected.</td>
+  </tr>
+  <tr>
+    <td><code>:conflict</code></td>
+    <td><code>RocketPants::Conflict</code></td>
+    <td><code>409 Conflict</code></td>
+    <td>The resource was a conflict with the existing version.</td>
+  </tr>
+  <tr>
+    <td><code>:forbidden</code></td>
+    <td><code>RocketPants::Forbidden</code></td>
+    <td><code>403 Forbidden</code></td>
+    <td>The requested action was forbidden.</td>
+  </tr>
+</table>
diff --git a/README.md b/README.md
index 386c12b..a129baa 100644
--- a/README.md
+++ b/README.md
@@ -156 +156 @@ class FoodsClient < RocketPants::Client
-  
+
@@ -458 +458 @@ Otherwise it will raise an exception.
-RocketPants includes a set of helpers to make testing controllers built on `RocketPants::Base` simpler. 
+RocketPants includes a set of helpers to make testing controllers built on `RocketPants::Base` simpler.
@@ -484 +484 @@ Inside the `RSpec.configure do |config|` block.
-- [Fred Wu](https://github.com/fredwu) - README fixes.
+- [Fred Wu](https://github.com/fredwu) - README fixes, other contributions / fixes.
@@ -485,0 +486 @@ Inside the `RSpec.configure do |config|` block.
+- [Samuel Cochran](https://github.com/sj26) - Misc. work on RocketPants / tweaks.
diff --git a/README.md b/README.md
index 67828f1..386c12b 100644
--- a/README.md
+++ b/README.md
@@ -353,0 +354 @@ Out of the box, the following exceptions come pre-registered and setup:
+- `:conflict` - The resource was a conflict with the existing version.
@@ -384,0 +386 @@ as appropriate.
+- `ActiveRecord::RecordNotUnique` into `RocketPants::Conflict`
diff --git a/README.md b/README.md
index a14f2b2..67828f1 100644
--- a/README.md
+++ b/README.md
@@ -366 +366 @@ Finally, You can use this to also pass custom values to include in the response,
-error! :throttled, :extras => {:code => 123}
+error! :throttled, :metadata => {:code => 123}
diff --git a/README.md b/README.md
index f380783..a14f2b2 100644
--- a/README.md
+++ b/README.md
@@ -387,0 +388,4 @@ as appropriate.
+**Please Note:** The default RecordInvalid mapper can potentially leak information about your structure - If there is data
+in the default error messages you don't wish to expose, we suggest implementing it on a per-action basis (using normal
+rescues / `.save` instead of `.save!`) OR remapping the handler for `ActiveRecord::RecordInvalid`.
+
diff --git a/README.md b/README.md
index a8fb65a..f380783 100644
--- a/README.md
+++ b/README.md
@@ -13,2 +13,2 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-1. **[It's opinionated](#version-controllers--routes)** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
-2. **[Simple and Often Automatic Response Metadata](#working-with-data)** - RocketPants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and RocketPants will do it's best to send as much information back to the user.
+1. **[It's opinionated](#working-with-data)** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
+2. **[Simple and Often Automatic Response Metadata](#collections)** - RocketPants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and RocketPants will do it's best to send as much information back to the user.
diff --git a/README.md b/README.md
index 1142ff9..a8fb65a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# RocketPants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants) [![Dependency Status](https://gemnasium.com/filtersquad/rocket_pants.png)](https://gemnasium.com/filtersquad/rocket_pants)
+# Rocket Pants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants) [![Dependency Status](https://gemnasium.com/filtersquad/rocket_pants.png)](https://gemnasium.com/filtersquad/rocket_pants)
@@ -13,8 +13,8 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-1. **It's opinionated** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
-2. **Simple and Often Automatic Response Metadata** - RocketPants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and RocketPants will do it's best to send as much information back to the user.
-3. **Extended Error Support** - RocketPants has a built in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it simple to hook up to Airbrake and do things such as including an error identifier in the response.
-4. **It's built on ActionPack** - One of the key differentiators to Grape is that RocketPants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
-5. **Semi-efficient Caching Support** - Thanks to a combination of Rails middleware and collection vs. resource distinctions, RocketPants makes it relatively easy to implement "Efficient Validation" (See [here](http://rtomayko.github.com/rack-cache/faq)). As a developer, this means you get even more benefits of http caching where possible, without the need to generate full requests when etags are present.
-6. **Simple tools to consume RocketPants apis** - RocketPants includes the `RocketPants::Client` class which builds upon [APISmith](https://github.com/filtersquad/api_smith) to make it easier to build clients e.g. automatically converting paginated responses back.
-7. **Build in Header Metadata Support** - APIs can easily expose `Link:` headers (it's even partly built in for paginated data - see below) and request metadata (e.g. Object count etc) can easily be embedded in the headers of the response, making useful `HEAD` requests.
-8. **Out of the Box ActiveRecord mapping** - We'll automatically take care of mapping `ActiveRecord::RecordNotFound`, `ActiveRecord::RecordNotSaved` and `ActiveRecord::RecordInvalid` for you, even including validation messages where possible.
+1. **[It's opinionated](#version-controllers--routes)** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
+2. **[Simple and Often Automatic Response Metadata](#working-with-data)** - RocketPants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and RocketPants will do it's best to send as much information back to the user.
+3. **[Extended Error Support](#registering--dealing-with-errors)** - RocketPants has a built in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it simple to hook up to Airbrake and do things such as including an error identifier in the response.
+4. **[It's built on ActionPack](#general-structure)** - One of the key differentiators to Grape is that RocketPants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
+5. **[Semi-efficient Caching Support](#implementing-efficient-validation)** - Thanks to a combination of Rails middleware and collection vs. resource distinctions, RocketPants makes it relatively easy to implement "Efficient Validation" (See [here](#implementing-efficient-validation)). As a developer, this means you get even more benefits of http caching where possible, without the need to generate full requests when etags are present.
+6. **[Simple tools to consume RocketPants apis](#example-client-code)** - RocketPants includes the `RocketPants::Client` class which builds upon [APISmith](https://github.com/filtersquad/api_smith) to make it easier to build clients e.g. automatically converting paginated responses back.
+7. **[Build in Header Metadata Support](#header-metadata)** - APIs can easily expose `Link:` headers (it's even partly built in for paginated data - see below) and request metadata (e.g. Object count etc) can easily be embedded in the headers of the response, making useful `HEAD` requests.
+8. **[Out of the Box ActiveRecord mapping](#built-in-activerecord-errors)** - We'll automatically take care of mapping `ActiveRecord::RecordNotFound`, `ActiveRecord::RecordNotSaved` and `ActiveRecord::RecordInvalid` for you, even including validation messages where possible.
@@ -379 +379 @@ Will return something similar to:
-### Build in ActiveRecord Errors
+### Built in ActiveRecord Errors
diff --git a/README.md b/README.md
index 6c1185c..1142ff9 100644
--- a/README.md
+++ b/README.md
@@ -18,0 +19,2 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
+7. **Build in Header Metadata Support** - APIs can easily expose `Link:` headers (it's even partly built in for paginated data - see below) and request metadata (e.g. Object count etc) can easily be embedded in the headers of the response, making useful `HEAD` requests.
+8. **Out of the Box ActiveRecord mapping** - We'll automatically take care of mapping `ActiveRecord::RecordNotFound`, `ActiveRecord::RecordNotSaved` and `ActiveRecord::RecordInvalid` for you, even including validation messages where possible.
@@ -388 +390,11 @@ For Invalid Resource messages, the response looks roughly akin to:
-
+```json
+{
+  "error": "invalid_resource",
+  "error_description": "The current resource was deemed invalid.",
+  "messages": {
+    "name":        ["can't be blank"],
+    "child_number":["can't be blank", "is not a number"],
+    "latin_name":  ["is too short (minimum is 5 characters)", "is invalid"]
+  }
+}
+```
diff --git a/README.md b/README.md
index 7c0886d..6c1185c 100644
--- a/README.md
+++ b/README.md
@@ -324 +324 @@ One of the built in features of RocketPants is the ability to handle rescuing /
-This comes in useful when you wish to automatically convert exceptions such as `ActiveRecord::RecordNotFound` to a structured bit of data in the response. Namely, it makes it trivial to generate objects that follow the JSON structure of:
+This comes in useful when you wish to automatically convert exceptions such as `ActiveRecord::RecordNotFound` (Note: This case is handled already) to a structured bit of data in the response. Namely, it makes it trivial to generate objects that follow the JSON structure of:
@@ -349,0 +350,2 @@ Out of the box, the following exceptions come pre-registered and setup:
+- `:invalid_resource` - The given resource was invalid.
+- `:bad_request` - The given request was not as expected.
@@ -374,0 +377,13 @@ Will return something similar to:
+### Build in ActiveRecord Errors
+
+Out of the box, Rocket Pants will automatically map the following to built in errors and rescue them
+as appropriate.
+
+- `ActiveRecord::RecordNotFound` into `RocketPants::NotFound`
+- `ActiveRecord::RecordNotSaved` into `RocketPants::InvalidResource (with no validation messages).`
+- `ActiveRecord::RecordInvalid` into `RocketPants::InvalidResource (with messages in the "messages" key of the JSON).`
+
+For Invalid Resource messages, the response looks roughly akin to:
+
+
+
diff --git a/README.md b/README.md
index 02a426a..7c0886d 100644
--- a/README.md
+++ b/README.md
@@ -217,0 +218,2 @@ Setting up RocketPants in your rails application is pretty simple and requires a
+- `config.rocket_pants.header_metadata` - Defaults to false, if true enables header metadata in the application.
+- `config.rocket_pants.pass_through_errors` - Defaults true in development and test, false otherwise. If true, will pass through errors up the stack otherwise will swallow them and return a system error via JSON for any unhandled exceptions.
diff --git a/README.md b/README.md
index 5965ea5..02a426a 100644
--- a/README.md
+++ b/README.md
@@ -348,0 +349,24 @@ Out of the box, the following exceptions come pre-registered and setup:
+Note that error also excepts a Hash of contextual options, many which will be passed through to the Rails I18N subsystem. E.g:
+
+```ruby
+error! :throttled, :max_per_hour => 100
+```
+
+Will look up the translation `rocket_pants.errors.throttled` in your I18N files, and call them with `:max_per_hour` as an argument.
+
+Finally, You can use this to also pass custom values to include in the response, e.g:
+
+```ruby
+error! :throttled, :extras => {:code => 123}
+```
+
+Will return something similar to:
+
+```json
+{
+  "error":             "throttled",
+  "error_description": "The example error message goes here",
+  "code":              123
+}
+```
+
diff --git a/README.md b/README.md
index e77bb79..5965ea5 100644
--- a/README.md
+++ b/README.md
@@ -120,0 +121,27 @@ Finally, to disable it in a subclass, simple call `jsonp` in the child and pass
+#### Header Metadata
+
+When `RocketPants.header_metadata` or `config.rocket_pants.header_metadata` are set to true, RocketPants can automatically
+expose metadata via `X-Api-` headers. Likewise, for paginated responses, if you implement `page_url(page_number)` in your controller
+with header metadata enabled, RocketPants will automatically add HTTP Link Headers for the next, prev, first and last to your
+response.
+
+Likewise, you can manually add link headers using the `link(rel, href, attributes = {})` method like so:
+
+```ruby
+def index
+  # Not an actual rel, just an example...
+  link :profile, user_profile_path(current_user)
+  expose current_user
+end
+```
+
+For batch adding links, you can use the `links` method:
+
+```ruby
+def index
+  # Probably not the best example...
+  links :next => random_wallpaper_path, :prev => random_wallpaper_path
+  expose Wallpaper.random
+end
+```
+
diff --git a/README.md b/README.md
index 9158ccd..e77bb79 100644
--- a/README.md
+++ b/README.md
@@ -376 +376 @@ RocketPants includes a set of helpers to make testing controllers built on `Rock
-* `be_paginated_response` - Checks the response is paginated - e.g. `response.should be_paginated_response`.
+* `be_paginated_resource` - Checks the response is paginated - e.g. `response.should be_paginated_resource`.
diff --git a/README.md b/README.md
index b3b0313..9158ccd 100644
--- a/README.md
+++ b/README.md
@@ -99,0 +100,21 @@ with the `Etag` header set.
+#### JSONP
+
+If you want to enable JSONP support, it's as simple as calling `jsonp` in your class method:
+
+```ruby
+class MyController < RocketPants::Base
+  jsonp
+end
+```
+
+By default this will use the `callback` parameter, e.g. `GET /1/my?callback=console.log`.
+To change this parameter, specify the `parameter` option like so:
+
+```ruby
+class MyController < RocketPants::Base
+  jsonp :parameter => :jsonp
+end
+```
+
+Finally, to disable it in a subclass, simple call `jsonp` in the child and pass `:enable => false` as an option.
+
diff --git a/README.md b/README.md
index 41fa8c9..b3b0313 100644
--- a/README.md
+++ b/README.md
@@ -137,0 +138 @@ Out of the box, we use the following ActionController components:
+* `ActionController::HttpAuthentication` Mixins - Gives Token, Digest and Basic authentication.
diff --git a/README.md b/README.md
index f92618c..41fa8c9 100644
--- a/README.md
+++ b/README.md
@@ -246 +246 @@ Similar to singular resources, but also include extra data about the count of it
-The final type, similar to paginated objects but it includes details about the paginated data:
+The final type, similar to collection objects but it includes details about the paginated data:
diff --git a/README.md b/README.md
index afe5123..f92618c 100644
--- a/README.md
+++ b/README.md
@@ -138 +137,0 @@ Out of the box, we use the following ActionController components:
-* `ActionController::MimeResponds` - Gives `respond_to` with mime type controls.
diff --git a/README.md b/README.md
index 015b57b..afe5123 100644
--- a/README.md
+++ b/README.md
@@ -340,0 +341,10 @@ When the user hits the index endpoint, it will generate an expiry-based caching
+When testing controllers written using RocketPants, your normal rails approach should work.
+The only difference one needs to take into the account is the need to specify the `:version`
+parameter on any http requests, e.g:
+
+```ruby
+get :index, :version => 1
+```
+
+Otherwise it will raise an exception.
+
diff --git a/README.md b/README.md
index 6adef94..015b57b 100644
--- a/README.md
+++ b/README.md
@@ -17,0 +18 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
+6. **Simple tools to consume RocketPants apis** - RocketPants includes the `RocketPants::Client` class which builds upon [APISmith](https://github.com/filtersquad/api_smith) to make it easier to build clients e.g. automatically converting paginated responses back.
@@ -25 +26 @@ Learn better by reading code? There is also have an example app mixing models an
-### Example Code
+### Example Server Code
@@ -98,0 +100,26 @@ with the `Etag` header set.
+### Example Client Code
+
+Using the example above, we could then use the following to write a client:
+
+```ruby
+class FoodsClient < RocketPants::Client
+  
+  version  1
+  base_uri 'http://localhost:3000'
+
+  class Food < APISmith::Smash
+    property :id
+    property :name
+  end
+
+  def foods
+    get 'foods', :transformer => Food
+  end
+
+  def food(id)
+    get "foods/#{id}", :transformer => Food
+  end
+
+end
+```
+
diff --git a/README.md b/README.md
index 781cb16..6adef94 100644
--- a/README.md
+++ b/README.md
@@ -25 +25 @@ Learn better by reading code? There is also have an example app mixing models an
-### Example controllers
+### Example Code
diff --git a/README.md b/README.md
index e05f6b7..781cb16 100644
--- a/README.md
+++ b/README.md
@@ -63 +63 @@ end
-And then, using this example, hitting `GET http://localhost:3000/foods` would result in:
+And then, using this example, hitting `GET http://localhost:3000/1/foods` would result in:
@@ -86 +86 @@ And then, using this example, hitting `GET http://localhost:3000/foods` would re
-with the `Cache-Control` header set whilst hitting `GET http://localhost:3000/foods/1` would return:
+with the `Cache-Control` header set whilst hitting `GET http://localhost:3000/1/foods/1` would return:
diff --git a/README.md b/README.md
index 9e3ba57..e05f6b7 100644
--- a/README.md
+++ b/README.md
@@ -3 +2,0 @@
-
@@ -28,2 +27 @@ Learn better by reading code? There is also have an example app mixing models an
-Say, for example, you want to implement a random number endpoint that lets the user get a single random number between 1 and 100
-or a collection of 5 random numbers. The controller in this case would look like:
+Say, for example, you have a basic Food model:
@@ -32 +30,13 @@ or a collection of 5 random numbers. The controller in this case would look like
-class RandomNumbersController < RocketPants::Base
+class Food < ActiveRecord::Base
+  include RocketPants::Cacheable
+end
+```
+
+```ruby
+class FoodsController < RocketPants::Base
+
+  version 1
+
+  # The list of foods is paginated for 5 minutes, the food itself is cached
+  # until it's modified (using Efficient Validation)
+  caches :index, :show, :caches_for => 5.minutes
@@ -35,2 +45 @@ class RandomNumbersController < RocketPants::Base
-    numbers = (1..10).map { rand(100) + 1 }
-    expose numbers
+    expose Food.paginate(:page => params[:page])
@@ -40,2 +49 @@ class RandomNumbersController < RocketPants::Base
-    number = rand(100) + 1
-    expose number
+    expose Food.find(params[:id])
@@ -50 +58,26 @@ And in the router we'd just use the normal REST-like routes in Rails:
-resources :random_numbers, :only => [:index, :show]
+api :version => 1 do
+  resources :foods, :only => [:index, :show]
+end
+```
+
+And then, using this example, hitting `GET http://localhost:3000/foods` would result in:
+
+```json
+{
+  "response": [{
+    "id":    1,
+    "name": "Delicious Food"
+  }, {
+    "id":   2,
+    "name": "More Delicious Food"
+  }],
+  "count": 2,
+  "pagination": {
+    "previous": nil,
+    "next":     nil,
+    "current":  1,
+    "per_page": 10,
+    "count":    2,
+    "pages":    1
+  }
+}
@@ -52,0 +86,13 @@ resources :random_numbers, :only => [:index, :show]
+with the `Cache-Control` header set whilst hitting `GET http://localhost:3000/foods/1` would return:
+
+```json
+{
+  "response": {
+    "id":    1,
+    "name": "Delicious Food"
+  }
+}
+```
+
+with the `Etag` header set.
+
diff --git a/README.md b/README.md
index 850904a..9e3ba57 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,2 @@
-# RocketPants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants) 
+# RocketPants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants) [![Dependency Status](https://gemnasium.com/filtersquad/rocket_pants.png)](https://gemnasium.com/filtersquad/rocket_pants)
+
diff --git a/README.md b/README.md
index bd900f6..850904a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# RocketPants!
+# RocketPants! [![Build Status](https://secure.travis-ci.org/filtersquad/rocket_pants.png?branch=master)](http://travis-ci.org/filtersquad/rocket_pants) 
diff --git a/README.md b/README.md
index 71ed809..bd900f6 100644
--- a/README.md
+++ b/README.md
@@ -3,2 +2,0 @@
-[TOC]
-
diff --git a/README.md b/README.md
index eed03e9..71ed809 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3,4 @@
+[TOC]
+
+## Introduction
+
@@ -17 +21,3 @@ Why use RocketPants over alternatives like Grape or normal Rails? The reasons we
-## Example App
+## Examples
+
+### A full example application
@@ -20,0 +27,27 @@ Learn better by reading code? There is also have an example app mixing models an
+### Example controllers
+
+Say, for example, you want to implement a random number endpoint that lets the user get a single random number between 1 and 100
+or a collection of 5 random numbers. The controller in this case would look like:
+
+```ruby
+class RandomNumbersController < RocketPants::Base
+
+  def index
+    numbers = (1..10).map { rand(100) + 1 }
+    expose numbers
+  end
+
+  def show
+    number = rand(100) + 1
+    expose number
+  end
+
+end
+```
+
+And in the router we'd just use the normal REST-like routes in Rails:
+
+```ruby
+resources :random_numbers, :only => [:index, :show]
+```
+
@@ -281 +314 @@ Other than that, our guidelines very closely match the GemCutter guidelines [her
-RocketPants is released under the MIT License (see the [license file](https://github.com/filtersquad/rocket_pants/blob/master/LICENSE)) and is copyright Filter Squad, 2012.
\ No newline at end of file
+RocketPants is released under the MIT License (see the [license file](https://github.com/filtersquad/rocket_pants/blob/master/LICENSE)) and is copyright Filter Squad, 2012.
diff --git a/README.md b/README.md
index 04735c2..eed03e9 100644
--- a/README.md
+++ b/README.md
@@ -257,0 +258,7 @@ Inside the `RSpec.configure do |config|` block.
+## Contributors
+
+- [Darcy Laycock](https://github.com/Sutto) - Main developer, current maintainer.
+- [Steve Webb](https://github.com/swebb) - Helped with original work at [The Frontier Group](https://github.com/thefrontiergroup), inc. original design.
+- [Fred Wu](https://github.com/fredwu) - README fixes.
+- [Levi Buzolic](https://github.com/levibuzolic) - README fixes.
+
diff --git a/README.md b/README.md
index 13c05e1..04735c2 100644
--- a/README.md
+++ b/README.md
@@ -159 +159 @@ The final type, similar to paginated objects but it includes details about the p
-    "count":    23
+    "count":    23,
@@ -258,7 +257,0 @@ Inside the `RSpec.configure do |config|` block.
-## Contributors
-
-- [Darcy Laycock](https://github.com/Sutto) - Main developer, current maintainer.
-- [Steve Webb](https://github.com/swebb) - Helped with original work at [The Frontier Group](https://github.com/thefrontiergroup), inc. original design.
-- [Fred Wu](https://github.com/fredwu) - README fixes.
-- [Levi Buzolic](https://github.com/levibuzolic) - README fixes.
-
diff --git a/README.md b/README.md
index 7c93c83..13c05e1 100644
--- a/README.md
+++ b/README.md
@@ -257,0 +258,7 @@ Inside the `RSpec.configure do |config|` block.
+## Contributors
+
+- [Darcy Laycock](https://github.com/Sutto) - Main developer, current maintainer.
+- [Steve Webb](https://github.com/swebb) - Helped with original work at [The Frontier Group](https://github.com/thefrontiergroup), inc. original design.
+- [Fred Wu](https://github.com/fredwu) - README fixes.
+- [Levi Buzolic](https://github.com/levibuzolic) - README fixes.
+
diff --git a/README.md b/README.md
index e494b56..7c93c83 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@ First thing's first, you're probably asking yourself - "Why the ridiculous name?
-At its core, RocketPants is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed APIs in Ruby and more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was original inspired by but with deeper Rails and ActionPack integration.
+At its core, RocketPants is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed APIs in Ruby and more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was originally inspired by but with deeper Rails and ActionPack integration.
diff --git a/README.md b/README.md
index ca0ec8e..e494b56 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# Rocket Pants!
+# RocketPants!
@@ -3 +3 @@
-First thing's first, you're probably asking yourself - "Why the ridiculous name?". It's simple, really - Rocket Pants is memorable, and sounds completely bad ass. Everything a library needs.
+First thing's first, you're probably asking yourself - "Why the ridiculous name?". It's simple, really - RocketPants is memorable, and sounds completely bad ass. - everything a library needs.
@@ -5 +5 @@ First thing's first, you're probably asking yourself - "Why the ridiculous name?
-At it's core, RocketPants is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed API's in Ruby and, more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was original inspired by but with deeper Rails and ActionPack integration.
+At its core, RocketPants is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed APIs in Ruby and more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was original inspired by but with deeper Rails and ActionPack integration.
@@ -9,2 +9 @@ At it's core, RocketPants is a set of tools (built around existing toolsets such
-Why use Rocket Pants over alternatives like Grape or normal Rails? The reasons we built it come down to a couple of
-simple things:
+Why use RocketPants over alternatives like Grape or normal Rails? The reasons we built it come down to a couple of simple things:
@@ -13,5 +12,4 @@ simple things:
-2. **Simple and Often Automatic Response Metadata** - Rocket Pants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and Rocket Pants will do it's best to send as much information back to the user.
-3. **Extended Error Support** - Rocket Pants has a build in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it simple to hook up to Airbrake and do things such as including an error identifier in the response.
-4. **It's build on ActionPack** - One of the key differentiators to Grape is that Rocket Pants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
-5. **Semi-efficient Caching Support** - Thanks to a combination of Rails middleware and collection vs. resource distinctions, Rocket Pants makes it relatively easy to implement "Efficient Validation" (See 'http://rtomayko.github.com/rack-cache/faq' [here](http://rtomayko.github.com/rack-cache/faq)). As a developer, this means you get even more benefits of http caching where possible, without the need to generate full requests when
-etags are present.
+2. **Simple and Often Automatic Response Metadata** - RocketPants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and RocketPants will do it's best to send as much information back to the user.
+3. **Extended Error Support** - RocketPants has a built in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it simple to hook up to Airbrake and do things such as including an error identifier in the response.
+4. **It's built on ActionPack** - One of the key differentiators to Grape is that RocketPants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
+5. **Semi-efficient Caching Support** - Thanks to a combination of Rails middleware and collection vs. resource distinctions, RocketPants makes it relatively easy to implement "Efficient Validation" (See [here](http://rtomayko.github.com/rack-cache/faq)). As a developer, this means you get even more benefits of http caching where possible, without the need to generate full requests when etags are present.
@@ -21,2 +19 @@ etags are present.
-Learn better by reading code? There is also have an example app mixing models and api clients over at [Sutto/transperth-api](https://github.com/Sutto/transperth-api) that is
-built using RocketPants.
+Learn better by reading code? There is also have an example app mixing models and api clients over at [Sutto/transperth-api](https://github.com/Sutto/transperth-api) that is built using RocketPants.
@@ -40 +37 @@ Out of the box, we use the following ActionController components:
-And add our own:
+And added our own:
@@ -52,2 +49 @@ To use RocketPants, instead of inheriting from `ActionController::Base`, just in
-Likewise, in Rails applications RocketPants also adds `RocketPants::CacheMiddleware` before the controller endpoints to implement
-["Efficient Validation"](http://rtomayko.github.com/rack-cache/faq).
+Likewise, in Rails applications RocketPants also adds `RocketPants::CacheMiddleware` before the controller endpoints to implement ["Efficient Validation"](http://rtomayko.github.com/rack-cache/faq).
@@ -61,5 +57 @@ Installing RocketPants is a simple matter of adding:
-To your `Gemfile` and running `bundle install`. Next, instead of inherited from `ActionController::Base`, simply
-inherit from `RocketPants::Base` instead. If you're working with an API-only application, I typically change this
-in `ApplicationController` and inherit from `ApplicationController` as usual. Otherwise, I generate a new `ApiController`
-base controller along side `ApplicationController` which instead inherits from `RocketPants::Base` and place all my logic
-there.
+To your `Gemfile` and running `bundle install`. Next, instead of inherited from `ActionController::Base`, simply inherit from `RocketPants::Base` instead. If you're working with an API-only application, I typically change this in `ApplicationController` and inherit from `ApplicationController` as usual. Otherwise, I generate a new `ApiController` base controller along side `ApplicationController` which instead inherits from `RocketPants::Base` and place all my logic there.
@@ -69,2 +61 @@ there.
-Setting up RocketPants in your rails application is pretty simple and requires a minimal amount of effort. Inside your environment configuration, RocketPants offers the
-following options to control how it's configured (and their expanded alternatives):
+Setting up RocketPants in your rails application is pretty simple and requires a minimal amount of effort. Inside your environment configuration, RocketPants offers the following options to control how it's configured (and their expanded alternatives):
@@ -73 +64 @@ following options to control how it's configured (and their expanded alternative
-- `config.rocket_pants.cache` - A `Moneta::Store` instance used as the rocket pants cache, defaulting to a moneta memory instance. Change for proper caching. (See [here](https://github.com/wycats/moneta) for more information on Moneta.)
+- `config.rocket_pants.cache` - A `Moneta::Store` instance used as the RocketPants cache, defaulting to a moneta memory instance. Change for proper caching. (See [here](https://github.com/wycats/moneta) for more information on Moneta.)
@@ -77,2 +68 @@ following options to control how it's configured (and their expanded alternative
-The current preferred way of dealing with version APIs in RocketPants is to do it using routes in the form of `/:version/:endpoint` - e.g. `GET /1/users/324`.
-RocketPants has support in the router and controller level for enforcing and controlling this. In the controller, it's a matter of specifying the required API versions:
+The current preferred way of dealing with version APIs in RocketPants is to do it using routes in the form of `/:version/:endpoint` - e.g. `GET /1/users/324`. RocketPants has support in the router and controller level for enforcing and controlling this. In the controller, it's a matter of specifying the required API versions:
@@ -80,5 +70,7 @@ RocketPants has support in the router and controller level for enforcing and con
-    class UsersController < RocketPants::Base
-      version 1 # A single version
-      # or...
-      version 2..3 # 2-3 support this controller
-    end
+```ruby
+class UsersController < RocketPants::Base
+  version 1 # A single version
+  # or...
+  version 2..3 # 2-3 support this controller
+end
+```
@@ -86,2 +78 @@ RocketPants has support in the router and controller level for enforcing and con
-And in the case of multiple versions, I strongly encourage namespaces the controllers inside modules. If the version param (as specified) by the URL does not match, then the specified
-controllre will return an `:invalid_version` error as shown below.
+And in the case of multiple versions, I strongly encourage namespaces the controllers inside modules. If the version param (as specified) by the URL does not match, then the specified controller will return an `:invalid_version` error as shown below.
@@ -91,3 +82,5 @@ Next, in your `config/routes.rb` file, you can also declare versions using the f
-    api :version => 1 do
-      get 'x', :to => 'test#item'
-    end
+```ruby
+api :version => 1 do
+  get 'x', :to => 'test#item'
+end
+```
@@ -99,3 +92,5 @@ Likewise, you can specify a route for multiple versions by:
-    api :versions => 1..3 do
-      get 'x', :to => 'test#item'
-    end
+```ruby
+api :versions => 1..3 do
+  get 'x', :to => 'test#item'
+end
+```
@@ -105,3 +100 @@ Likewise, you can specify a route for multiple versions by:
-When using RocketPants, you write your controllers the same as how you would with normal ActionController, the only thing that
-changes is how yoy handle data. `head` and `redirect_to` still work exactly the same as in Rails, but instead of using `respond_with` and
-`render` you instead use RocketPant's `exposes` methods (and it's kind). Namely:
+When using RocketPants, you write your controllers the same as how you would with normal ActionController, the only thing that changes is how you handle data. `head` and `redirect_to` still work exactly the same as in Rails, but instead of using `respond_with` and `render` you instead use RocketPant's `exposes` methods (and it's kind). Namely:
@@ -121 +114 @@ Along side the above that wrap data, it also provides:
-Singular resources will be converted to json via `serializable_hash`, passing through any objects
+Singular resources will be converted to JSON via `serializable_hash`, passing through any objects
@@ -124,5 +117,7 @@ and then wrapped in an object as the `response` key:
-    {
-      "response": {
-        "your": "serialized-object"
-      }
-    }
+```json
+{
+  "response": {
+    "your": "serialized-object"
+  }
+}
+```
@@ -134,8 +129,10 @@ Similar to singular resources, but also include extra data about the count of it
-    {
-      "response": [{
-        "name": "object-one"
-      }, {
-        "name": "object-two"
-      }],
-      "count": 2
-    }
+```json
+{
+  "response": [{
+    "name": "object-one"
+  }, {
+    "name": "object-two"
+  }],
+  "count": 2
+}
+```
@@ -147,18 +144,20 @@ The final type, similar to paginated objects but it includes details about the p
-    {
-      "response": [
-        {"name": "object-one"},
-        {"name": "object-two"},
-        {"name": "object-three"},
-        {"name": "object-four"},
-        {"name": "object-five"}
-      ],
-      "count": 5,
-      "pagination": {
-        "previous": 1,
-        "next":     3,
-        "current":  2,
-        "per_page": 5,
-        "count":    23
-        "pages":    5
-      }
-    }    
+```json
+{
+  "response": [
+    {"name": "object-one"},
+    {"name": "object-two"},
+    {"name": "object-three"},
+    {"name": "object-four"},
+    {"name": "object-five"}
+  ],
+  "count": 5,
+  "pagination": {
+    "previous": 1,
+    "next":     3,
+    "current":  2,
+    "per_page": 5,
+    "count":    23
+    "pages":    5
+  }
+}
+```
@@ -168,2 +167 @@ The final type, similar to paginated objects but it includes details about the p
-One of the built in features of rocketpants is the ability to handle rescuing / controlling exceptions and more importantly to handle mapping
-exceptions to names, messages and error codes.
+One of the built in features of RocketPants is the ability to handle rescuing / controlling exceptions and more importantly to handle mapping exceptions to names, messages and error codes.
@@ -171,2 +169 @@ exceptions to names, messages and error codes.
-This comes in useful when you wish to automatically convert exceptions such as `ActiveRecord::RecordNotFound` to a structured bit of data in
-the response. Namely, it makes it trivial to generate objects that follow the JSON structure of:
+This comes in useful when you wish to automatically convert exceptions such as `ActiveRecord::RecordNotFound` to a structured bit of data in the response. Namely, it makes it trivial to generate objects that follow the JSON structure of:
@@ -174,4 +171,6 @@ the response. Namely, it makes it trivial to generate objects that follow the JS
-    {
-      "error":             "standard_error_name",
-      "error_description": "A translated error message describing what happened."
-    }
+```json
+{
+  "error":             "standard_error_name",
+  "error_description": "A translated error message describing what happened."
+}
+```
@@ -183 +182,3 @@ RocketPants will also attempt to convert all errors in the controller, defaultin
-    error! :not_found
+```ruby
+error! :not_found
+```
@@ -197,3 +198 @@ Out of the box, the following exceptions come pre-registered and setup:
-One of the core design principles built into RocketPants is simple support for "Efficient Validation" as described in the
-[Rack::Cache FAQ](http://rtomayko.github.com/rack-cache/faq) - Namely, it adds simple support for object-level caching using
-etags with fast verification thanks to the `RocketPants::CacheMiddleware` cache middleware.
+One of the core design principles built into RocketPants is simple support for "Efficient Validation" as described in the [Rack::Cache FAQ](http://rtomayko.github.com/rack-cache/faq) - Namely, it adds simple support for object-level caching using etags with fast verification thanks to the `RocketPants::CacheMiddleware` cache middleware.
@@ -201,2 +200 @@ etags with fast verification thanks to the `RocketPants::CacheMiddleware` cache
-To do this, it uses `RocketPants.cache`, by default any Moneta-based store, to keep a mapping of object -> current cache key.
-Rocket Pants will then generate the etag when caching is enabled in the controller for singular-responses, generating an etag that can be quickly validated.
+To do this, it uses `RocketPants.cache`, by default any Moneta-based store, to keep a mapping of object -> current cache key. RocketPants will then generate the etag when caching is enabled in the controller for singular-responses, generating an etag that can be quickly validated.
@@ -206,3 +204,5 @@ For example, you'd add the following to your model:
-    class User < ActiveRecord::Base
-      include RocketPants::Cacheable
-    end
+```ruby
+class User < ActiveRecord::Base
+  include RocketPants::Cacheable
+end
+```
@@ -212 +212,2 @@ And then in your controller, you'd have something like:
-    class UsersController < RocketPants::Base
+```ruby
+class UsersController < RocketPants::Base
@@ -214 +215 @@ And then in your controller, you'd have something like:
-      version 1
+  version 1
@@ -216,3 +217,3 @@ And then in your controller, you'd have something like:
-      # Time based, e.g. collections, will be cached for 5 minutes - whilst singular
-      # items e.g. show will use etag-based caching:
-      caches :show, :index, :caches_for => 5.minutes
+  # Time based, e.g. collections, will be cached for 5 minutes - whilst singular
+  # items e.g. show will use etag-based caching:
+  caches :show, :index, :caches_for => 5.minutes
@@ -220,3 +221,3 @@ And then in your controller, you'd have something like:
-      def index
-        expose User.all
-      end
+  def index
+    expose User.all
+  end
@@ -224,3 +225,3 @@ And then in your controller, you'd have something like:
-      def show
-        expose User.find(params[:id])
-      end
+  def show
+    expose User.find(params[:id])
+  end
@@ -228 +229,2 @@ And then in your controller, you'd have something like:
-    end
+end
+```
@@ -230,5 +232 @@ And then in your controller, you'd have something like:
-When the user hits the index endpoint, it will generate an expiry-based caching header that caches the result for up to 5 minutes.
-When the user instead hits the show endpoint, it will generate a special etag that contains and object identifier portion and an
-object cache key. Inside `RocketPants.cache`, we store the mapping and then inside `RocketPants::CacheMiddleware`, we simply check
-if the given cache key matches the specified object identifier. If it does, we return a not modified response otherwise we pass
-it through to controller - giving the advantage of efficent caching without having to hit the full database on every request.
+When the user hits the index endpoint, it will generate an expiry-based caching header that caches the result for up to 5 minutes. When the user instead hits the show endpoint, it will generate a special etag that contains and object identifier portion and an object cache key. Inside `RocketPants.cache`, we store the mapping and then inside `RocketPants::CacheMiddleware`, we simply check if the given cache key matches the specified object identifier. If it does, we return a not modified response otherwise we pass it through to controller - giving the advantage of efficient caching without having to hit the full database on every request.
@@ -236 +234 @@ it through to controller - giving the advantage of efficent caching without havi
-## Using with Rspec
+## Using with RSpec
@@ -253,2 +251,4 @@ To set up the integration, in your `spec/spec_helper.rb` add:
-    config.include RocketPants::TestHelper,    :type => :controller
-    cconfig.include RocketPants::RSpecMatchers, :type => :controller
+```ruby
+config.include RocketPants::TestHelper,    :type => :controller
+config.include RocketPants::RSpecMatchers, :type => :controller
+```
@@ -274,2 +274 @@ Other than that, our guidelines very closely match the GemCutter guidelines [her
-Rocket Pants is released under the MIT License (see the [license file](https://github.com/filtersquad/rocket_pants/blob/master/LICENSE)) and is
-copyright Filter Squad, 2012.
\ No newline at end of file
+RocketPants is released under the MIT License (see the [license file](https://github.com/filtersquad/rocket_pants/blob/master/LICENSE)) and is copyright Filter Squad, 2012.
\ No newline at end of file
diff --git a/README.md b/README.md
index d77f79c..ca0ec8e 100644
--- a/README.md
+++ b/README.md
@@ -21 +21 @@ etags are present.
-Learn better by reading code? We also have an example app mixing models and api clients over at [Sutto/transperth-api](https://github.com/Sutto/transperth-api) that is
+Learn better by reading code? There is also have an example app mixing models and api clients over at [Sutto/transperth-api](https://github.com/Sutto/transperth-api) that is
@@ -274 +274 @@ Other than that, our guidelines very closely match the GemCutter guidelines [her
-Rocket Pants is released under the MIT License (see the [license file](./LICENSE)) and is
+Rocket Pants is released under the MIT License (see the [license file](https://github.com/filtersquad/rocket_pants/blob/master/LICENSE)) and is
diff --git a/README.md b/README.md
index 713f947..d77f79c 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@ First thing's first, you're probably asking yourself - "Why the ridiculous name?
-At it's core, Rails is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed API's in Ruby and, more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was original inspired by but with deeper Rails and ActionPack integration.
+At it's core, RocketPants is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed API's in Ruby and, more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was original inspired by but with deeper Rails and ActionPack integration.
diff --git a/README.md b/README.md
index 747d40d..713f947 100644
--- a/README.md
+++ b/README.md
@@ -274 +274 @@ Other than that, our guidelines very closely match the GemCutter guidelines [her
-Rocket Pants is released under the MIT License (see the [license file](LICENSE)) and is
+Rocket Pants is released under the MIT License (see the [license file](./LICENSE)) and is
diff --git a/README.md b/README.md
index 8b4b431..747d40d 100644
--- a/README.md
+++ b/README.md
@@ -274 +274 @@ Other than that, our guidelines very closely match the GemCutter guidelines [her
-API Smith is released under the MIT License (see the [license file](LICENSE)) and is
+Rocket Pants is released under the MIT License (see the [license file](LICENSE)) and is
diff --git a/README.md b/README.md
index 4b62e9a..8b4b431 100644
--- a/README.md
+++ b/README.md
@@ -22 +22 @@ Learn better by reading code? We also have an example app mixing models and api
-build using RocketPants.
+built using RocketPants.
diff --git a/README.md b/README.md
index 1ee72ac..4b62e9a 100644
--- a/README.md
+++ b/README.md
@@ -15 +15 @@ simple things:
-4. **It's build on ActionPack** - One of the key differentiators to Graphe is that Rocket Pants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
+4. **It's build on ActionPack** - One of the key differentiators to Grape is that Rocket Pants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
diff --git a/README.md b/README.md
index 0c609e5..1ee72ac 100644
--- a/README.md
+++ b/README.md
@@ -18,0 +19,5 @@ etags are present.
+## Example App
+
+Learn better by reading code? We also have an example app mixing models and api clients over at [Sutto/transperth-api](https://github.com/Sutto/transperth-api) that is
+build using RocketPants.
+
@@ -231,4 +235,0 @@ it through to controller - giving the advantage of efficent caching without havi
-## An Example Controller / App
-
-TODO: Link to the transperth client here.
-
diff --git a/README.md b/README.md
index 221ac6c..0c609e5 100644
--- a/README.md
+++ b/README.md
@@ -49,0 +50,48 @@ Likewise, in Rails applications RocketPants also adds `RocketPants::CacheMiddlew
+## Installing RocketPants
+
+Installing RocketPants is a simple matter of adding:
+
+    gem 'rocket_pants', '~> 1.0'
+
+To your `Gemfile` and running `bundle install`. Next, instead of inherited from `ActionController::Base`, simply
+inherit from `RocketPants::Base` instead. If you're working with an API-only application, I typically change this
+in `ApplicationController` and inherit from `ApplicationController` as usual. Otherwise, I generate a new `ApiController`
+base controller along side `ApplicationController` which instead inherits from `RocketPants::Base` and place all my logic
+there.
+
+## Configuration
+
+Setting up RocketPants in your rails application is pretty simple and requires a minimal amount of effort. Inside your environment configuration, RocketPants offers the
+following options to control how it's configured (and their expanded alternatives):
+
+- `config.rocket_pants.use_caching` - Defaulting to true for production environments and false elsewhere, defines whether RocketPants caching setup as described below is used.
+- `config.rocket_pants.cache` - A `Moneta::Store` instance used as the rocket pants cache, defaulting to a moneta memory instance. Change for proper caching. (See [here](https://github.com/wycats/moneta) for more information on Moneta.)
+
+## Version Controllers / Routes
+
+The current preferred way of dealing with version APIs in RocketPants is to do it using routes in the form of `/:version/:endpoint` - e.g. `GET /1/users/324`.
+RocketPants has support in the router and controller level for enforcing and controlling this. In the controller, it's a matter of specifying the required API versions:
+
+    class UsersController < RocketPants::Base
+      version 1 # A single version
+      # or...
+      version 2..3 # 2-3 support this controller
+    end
+
+And in the case of multiple versions, I strongly encourage namespaces the controllers inside modules. If the version param (as specified) by the URL does not match, then the specified
+controllre will return an `:invalid_version` error as shown below.
+
+Next, in your `config/routes.rb` file, you can also declare versions using the following syntax and it will automatically set up the routes for you:
+
+    api :version => 1 do
+      get 'x', :to => 'test#item'
+    end
+
+Which will route `GET /1/x` to `TestController#item`.
+
+Likewise, you can specify a route for multiple versions by:
+
+    api :versions => 1..3 do
+      get 'x', :to => 'test#item'
+    end
+
@@ -144 +192,38 @@ Out of the box, the following exceptions come pre-registered and setup:
-TODO: Describe how to implement efficient validation.
+One of the core design principles built into RocketPants is simple support for "Efficient Validation" as described in the
+[Rack::Cache FAQ](http://rtomayko.github.com/rack-cache/faq) - Namely, it adds simple support for object-level caching using
+etags with fast verification thanks to the `RocketPants::CacheMiddleware` cache middleware.
+
+To do this, it uses `RocketPants.cache`, by default any Moneta-based store, to keep a mapping of object -> current cache key.
+Rocket Pants will then generate the etag when caching is enabled in the controller for singular-responses, generating an etag that can be quickly validated.
+
+For example, you'd add the following to your model:
+
+    class User < ActiveRecord::Base
+      include RocketPants::Cacheable
+    end
+
+And then in your controller, you'd have something like:
+
+    class UsersController < RocketPants::Base
+
+      version 1
+
+      # Time based, e.g. collections, will be cached for 5 minutes - whilst singular
+      # items e.g. show will use etag-based caching:
+      caches :show, :index, :caches_for => 5.minutes
+
+      def index
+        expose User.all
+      end
+
+      def show
+        expose User.find(params[:id])
+      end
+
+    end
+
+When the user hits the index endpoint, it will generate an expiry-based caching header that caches the result for up to 5 minutes.
+When the user instead hits the show endpoint, it will generate a special etag that contains and object identifier portion and an
+object cache key. Inside `RocketPants.cache`, we store the mapping and then inside `RocketPants::CacheMiddleware`, we simply check
+if the given cache key matches the specified object identifier. If it does, we return a not modified response otherwise we pass
+it through to controller - giving the advantage of efficent caching without having to hit the full database on every request.
diff --git a/README.md b/README.md
index d48eb3c..221ac6c 100644
--- a/README.md
+++ b/README.md
@@ -142,2 +141,0 @@ Out of the box, the following exceptions come pre-registered and setup:
-
-
diff --git a/README.md b/README.md
index 1145d42..d48eb3c 100644
--- a/README.md
+++ b/README.md
@@ -13 +13 @@ simple things:
-2. **Simple and Often Automatic Response Metadata** - Rocket Pants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object\_or\_presenter` in your controller and Rocket Pants will do it's best to send as much information back to the user.
+2. **Simple and Often Automatic Response Metadata** - Rocket Pants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object_or_presenter` in your controller and Rocket Pants will do it's best to send as much information back to the user.
@@ -18 +17,0 @@ etags are present.
-6. **Simple Compact Response** - Want to have your index and search actions return a cut down version of the object whilst the show action returns the full thing? Rocket Pants makes it easy by defaulting to passing in a ` -compact` option when it calls `to_json`. 
diff --git a/README.md b/README.md
index e4548f9..1145d42 100644
--- a/README.md
+++ b/README.md
@@ -116 +116,28 @@ The final type, similar to paginated objects but it includes details about the p
-TODO: Explain how to register and invoke errors.
+One of the built in features of rocketpants is the ability to handle rescuing / controlling exceptions and more importantly to handle mapping
+exceptions to names, messages and error codes.
+
+This comes in useful when you wish to automatically convert exceptions such as `ActiveRecord::RecordNotFound` to a structured bit of data in
+the response. Namely, it makes it trivial to generate objects that follow the JSON structure of:
+
+    {
+      "error":             "standard_error_name",
+      "error_description": "A translated error message describing what happened."
+    }
+
+It also adds a facilities to make it easy to add extra information to the response.
+
+RocketPants will also attempt to convert all errors in the controller, defaulting to the `"system"` exception name and message as the error description. We also provide a registry to allow throwing exception from their symbolic name like so:
+
+    error! :not_found
+
+In the controller.
+
+Out of the box, the following exceptions come pre-registered and setup:
+
+- `:throttled` - The user has hit an api throttled error.
+- `:unauthenticated` - The user doesn't have valid authentication details.
+- `:invalid_version` - An invalid API version was specified.
+- `:not_implemented` - The specified endpoint is not yet implemented.
+- `:not_found` - The given resource could not be found.
+
+
diff --git a/README.md b/README.md
index df71c68..e4548f9 100644
--- a/README.md
+++ b/README.md
@@ -53 +53,60 @@ Likewise, in Rails applications RocketPants also adds `RocketPants::CacheMiddlew
-TODO: explain how exposing data works.
+When using RocketPants, you write your controllers the same as how you would with normal ActionController, the only thing that
+changes is how yoy handle data. `head` and `redirect_to` still work exactly the same as in Rails, but instead of using `respond_with` and
+`render` you instead use RocketPant's `exposes` methods (and it's kind). Namely:
+
+- `expose` / `exposes` - The core of all type conversion, will check the type of data and automatically convert it to the correct time (for either a singular, collection or paginated resource).
+- `paginated` - Render an object as a paginated collection of data.
+- `collection` - Renders a collection of objects - e.g. an array of users.
+- `resource` - Renders a single object.
+
+Along side the above that wrap data, it also provides:
+
+- `responds` - Renders JSON, normalizing the object first (unwrapped).
+- `render_json` - Renders an object as JSON.
+
+### Singular Resources
+
+Singular resources will be converted to json via `serializable_hash`, passing through any objects
+and then wrapped in an object as the `response` key:
+
+    {
+      "response": {
+        "your": "serialized-object"
+      }
+    }
+
+### Collections
+
+Similar to singular resources, but also include extra data about the count of items.
+
+    {
+      "response": [{
+        "name": "object-one"
+      }, {
+        "name": "object-two"
+      }],
+      "count": 2
+    }
+
+### Paginated Collections
+
+The final type, similar to paginated objects but it includes details about the paginated data:
+
+    {
+      "response": [
+        {"name": "object-one"},
+        {"name": "object-two"},
+        {"name": "object-three"},
+        {"name": "object-four"},
+        {"name": "object-five"}
+      ],
+      "count": 5,
+      "pagination": {
+        "previous": 1,
+        "next":     3,
+        "current":  2,
+        "per_page": 5,
+        "count":    23
+        "pages":    5
+      }
+    }    
diff --git a/README.md b/README.md
index e3febd0..df71c68 100644
--- a/README.md
+++ b/README.md
@@ -71,5 +71,17 @@ RocketPants includes a set of helpers to make testing controllers built on `Rock
-* `be_singular_resource` - 
-* `be_collection_resource` - 
-* `be_paginated_response` - 
-* `be_api_error(type = any)` -
-* `have_exposed(data)` - 
+* `be_singular_resource` - Checks the response is a single resource - e.g. `response.should be_siingular_resource`.
+* `be_collection_resource` - Checks the response is collection of resources - e.g. `response.should be_collection_resource`.
+* `be_paginated_response` - Checks the response is paginated - e.g. `response.should be_paginated_response`.
+* `be_api_error(type = any)` - Checks it returned an error for the specified exception (or check the response is an error without any argument) - e.g. `response.should be_api_error RocketPants::NotFound`.
+* `have_exposed(data, options = {})` - Given an object and conversion options, lets you check the output exposed the same object. e.g: `response.should have_exposed user`
+
+Likewise, it adds the following helper methods:
+
+- `parsed_body` - A parsed-JSON representation of the response.
+- `decoded_body` - A `Hashie::Mash` of the response body.
+
+To set up the integration, in your `spec/spec_helper.rb` add:
+
+    config.include RocketPants::TestHelper,    :type => :controller
+    cconfig.include RocketPants::RSpecMatchers, :type => :controller
+
+Inside the `RSpec.configure do |config|` block.
diff --git a/README.md b/README.md
index bd5c10f..e3febd0 100644
--- a/README.md
+++ b/README.md
@@ -3 +3,63 @@
-This is where the readme shall go. Seriously.
+First thing's first, you're probably asking yourself - "Why the ridiculous name?". It's simple, really - Rocket Pants is memorable, and sounds completely bad ass. Everything a library needs.
+
+At it's core, Rails is a set of tools (built around existing toolsets such as ActionPack) to make it easier to build well-designed API's in Ruby and, more importantly, along side Rails. You can think of it like [Grape](https://github.com/intridea/grape), a fantastic library which RocketPants was original inspired by but with deeper Rails and ActionPack integration.
+
+## Key Features
+
+Why use Rocket Pants over alternatives like Grape or normal Rails? The reasons we built it come down to a couple of
+simple things:
+
+1. **It's opinionated** (like Grape) - In this case, we dictate a certain JSON structure we've found nice to work with (after having worked with and investigated a large number of other apis), it makes it simple to add metadata along side requests and the like.
+2. **Simple and Often Automatic Response Metadata** - Rocket Pants automatically takes care of sending metadata about paginated responses and arrays where possible. This means as a user, you only need to worry about writing `expose object\_or\_presenter` in your controller and Rocket Pants will do it's best to send as much information back to the user.
+3. **Extended Error Support** - Rocket Pants has a build in framework to manage errors it knows how to handle (in the forms of mapping exceptions to a well defined JSON structure) as well as tools to make it simple to hook up to Airbrake and do things such as including an error identifier in the response.
+4. **It's build on ActionPack** - One of the key differentiators to Graphe is that Rocket Pants embraces ActionPack and uses the modular components included from Rails 3.0 onwards to provide things you're familiar with already such as filters.
+5. **Semi-efficient Caching Support** - Thanks to a combination of Rails middleware and collection vs. resource distinctions, Rocket Pants makes it relatively easy to implement "Efficient Validation" (See 'http://rtomayko.github.com/rack-cache/faq' [here](http://rtomayko.github.com/rack-cache/faq)). As a developer, this means you get even more benefits of http caching where possible, without the need to generate full requests when
+etags are present.
+6. **Simple Compact Response** - Want to have your index and search actions return a cut down version of the object whilst the show action returns the full thing? Rocket Pants makes it easy by defaulting to passing in a ` -compact` option when it calls `to_json`. 
+
+## General Structure
+
+RocketPants builds upon the mixin-based approach to ActionController-based rails applications that Rails 3 made possible. Instead of including everything like Rails does in `ActionController::Base`, RocketPants only includes the bare minimum to make apis. In the near future, it may be modified to work with `ActionController::Base` for the purposes of better compatibility with other gems.
+
+Out of the box, we use the following ActionController components:
+
+* `ActionController::HideActions` - Lets you hide methods from actions.
+* `ActionController::UrlFor` - `url_for` helpers / tweaks by Rails to make integration with routes work better.
+* `ActionController::Redirecting` - Allows you to use `redirect_to`.
+* `ActionController::ConditionalGet` - Adds support for Rails caching controls, e.g. `fresh_when` and `expires_in`.
+* `ActionController::RackDelegation` - Lets you reset the session and set the response body.
+* `ActionController::RecordIdentifier` - Gives `dom_class` and `dom_id` methods, used for polymorphic routing.
+* `ActionController::MimeResponds` - Gives `respond_to` with mime type controls.
+* `AbstractController::Callbacks` - Adds support for callbacks / filters.
+* `ActionController::Rescue` - Lets you use `rescue_from`.
+
+And add our own:
+
+* `RocketPants::UrlFor` - Automatically includes the current version when generating URLs from the controller.
+* `RocketPants::Respondable` - The core of RocketPants, the code that handles converting objects to the different container types.
+* `RocketPants::Versioning` - Allows versioning requirements on the controller to ensure it is only callable with a specific api version.
+* `RocketPants::Instrumentation` - Adds Instrumentation notifications making it easy to use and hook into with Rails.
+* `RocketPants::Caching` - Implements time-based caching for index actions and etag-based efficient validation for singular resources.
+* `RocketPants::ErrorHandling` - Short hand to create errors as well as simplifications to catch and render a standardised error representation.
+* `RocketPants::Rescuable` - Allows you to hook in to rescuing exceptions and to make it easy to post notifications to tools such as AirBrake.
+
+To use RocketPants, instead of inheriting from `ActionController::Base`, just inherit from `RocketPants::Base`.
+
+Likewise, in Rails applications RocketPants also adds `RocketPants::CacheMiddleware` before the controller endpoints to implement
+["Efficient Validation"](http://rtomayko.github.com/rack-cache/faq).
+
+## Working with data
+
+TODO: explain how exposing data works.
+
+## Registering / Dealing with Errors
+
+TODO: Explain how to register and invoke errors.
+
+## Implementing Efficient Validation
+
+TODO: Describe how to implement efficient validation.
+
+## An Example Controller / App
+
+TODO: Link to the transperth client here.
@@ -7 +69,21 @@ This is where the readme shall go. Seriously.
-Simply include RocketPants::TestHelper and RocketPants::RSpecMatchers, and you'll get access to:
+RocketPants includes a set of helpers to make testing controllers built on `RocketPants::Base` simpler. 
+
+* `be_singular_resource` - 
+* `be_collection_resource` - 
+* `be_paginated_response` - 
+* `be_api_error(type = any)` -
+* `have_exposed(data)` - 
+
+## Contributing
+
+We encourage all community contributions. Keeping this in mind, please follow these general guidelines when contributing:
+
+* Fork the project
+* Create a topic branch for what you’re working on (git checkout -b awesome_feature)
+* Commit away, push that up (git push your\_remote awesome\_feature)
+* Create a new GitHub Issue with the commit, asking for review. Alternatively, send a pull request with details of what you added.
+* Once it’s accepted, if you want access to the core repository feel free to ask! Otherwise, you can continue to hack away in your own fork.
+
+Other than that, our guidelines very closely match the GemCutter guidelines [here](http://wiki.github.com/qrush/gemcutter/contribution-guidelines).
+
+(Thanks to [GemCutter](http://wiki.github.com/qrush/gemcutter/) for the contribution guide)
@@ -9,5 +91 @@ Simply include RocketPants::TestHelper and RocketPants::RSpecMatchers, and you'l
-* `be_singular_resource`
-* `be_collection_resource`
-* `be_paginated_response`
-* `be_api_error(type = any)`
-* `have_exposed(data)`
+## License
@@ -15 +93,2 @@ Simply include RocketPants::TestHelper and RocketPants::RSpecMatchers, and you'l
-and helpers for checking data.
\ No newline at end of file
+API Smith is released under the MIT License (see the [license file](LICENSE)) and is
+copyright Filter Squad, 2012.
\ No newline at end of file
diff --git a/README.md b/README.md
index d06b852..bd5c10f 100644
--- a/README.md
+++ b/README.md
@@ -3 +3,13 @@
-This is where the readme shall go. Seriously.
\ No newline at end of file
+This is where the readme shall go. Seriously.
+
+## Using with Rspec
+
+Simply include RocketPants::TestHelper and RocketPants::RSpecMatchers, and you'll get access to:
+
+* `be_singular_resource`
+* `be_collection_resource`
+* `be_paginated_response`
+* `be_api_error(type = any)`
+* `have_exposed(data)`
+
+and helpers for checking data.
\ No newline at end of file
