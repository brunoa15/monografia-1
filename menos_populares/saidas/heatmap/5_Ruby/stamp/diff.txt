diff --git a/README.md b/README.md
index 46c71f2..4c8d74e 100644
--- a/README.md
+++ b/README.md
@@ -4 +4 @@ Format dates and times based on human-friendly examples, not arcane
-strftime directives.
+[strftime](http://strfti.me) directives.
@@ -18 +18 @@ reading your code who aren't familiar with this gem. If that's the case, the
-following aliases are available:
+following aliases are provided:
@@ -30,2 +30,2 @@ date = Date.new(2011, 6, 9)
-date.stamp("March 1, 1999")         #=> "June  9, 2011"
-date.stamp("Jan 1, 1999")           #=> "Jun  9, 2011"
+date.stamp("March 1, 1999")         #=> "June 9, 2011"
+date.stamp("Jan 1, 1999")           #=> "Jun 9, 2011"
@@ -33,2 +33,2 @@ date.stamp("Jan 01")                #=> "Jun 09"
-date.stamp("Sunday, May 1, 2000")   #=> "Thursday, June  9, 2011"
-date.stamp("Sun Aug 5")             #=> "Thu Jun  9"
+date.stamp("Sunday, May 1, 2000")   #=> "Thursday, June 9, 2011"
+date.stamp("Sun Aug 5")             #=> "Thu Jun 9"
@@ -53 +53 @@ time = Time.utc(2011, 6, 9, 20, 52, 30)
-time.stamp("3:00 AM")               #=> " 8:52 PM"
+time.stamp("3:00 AM")               #=> "8:52 PM"
@@ -57 +57 @@ time.stamp("23:59:59")              #=> "20:52:30"
-time.stamp("Jan 1 at 01:00 AM")     #=> "Jun  9 at 08:52 PM"
+time.stamp("Jan 1 at 01:00 AM")     #=> "Jun 9 at 08:52 PM"
@@ -79 +79 @@ Using unambiguous values will also help people who read the code in the
-future understand your intent.
+future, including yourself, understand your intent.
@@ -83,2 +83,2 @@ future understand your intent.
-Stamp makes it easy to configure your application's common date and time
-formats in a more self-documenting way with the `strftime_format` method:
+Stamp makes it easy to configure your Rails application's common date and time
+formats in a more self-documenting way with `DATE_FORMATS`:
@@ -87,3 +87,3 @@ formats in a more self-documenting way with the `strftime_format` method:
-# config/initializers/time_formats.rb
-Date::DATE_FORMATS[:short]    = Stamp.strftime_format("Mon Jan 1")
-Time::DATE_FORMATS[:military] = Stamp.strftime_format("23:59")
+# config/initializers/date_formats.rb
+Date::DATE_FORMATS[:short]    = Proc.new { |date| date.stamp("Sun Jan 5") }
+Time::DATE_FORMATS[:military] = Proc.new { |time| time.stamp("5 January 23:59") }
@@ -96 +96 @@ Date.today.to_s(:short)   #=> "Sat Jul 16"
-Time.now.to_s(:military)  #=> "15:35"
+Time.now.to_s(:military)  #=> "16 July 15:35"
@@ -101,25 +101 @@ Time.now.to_s(:military)  #=> "15:35"
-* DateTime should inherit stamp behavior from Date, but it hasn't been thoroughly tested. Patches welcome!
-
-### Advanced Usage
-
-If you need more obscure formatting options, you can include any valid
-[strftime](http://strfti.me) directives in your example string, and they'll
-just be passed along:
-
-```ruby
-Date.today.stamp("Week #%U, 1999") #=> "Week #23, 2011"
-```
-
-Check out [http://strfti.me](http://strfti.me) for more ideas.
-
-## Contributing to stamp
-
-* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
-* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
-* Fork the project
-* Run `bundle install`
-* Run `rake` to execute the cucumber specs and make sure they all pass
-* Start a feature/bugfix branch
-* Commit and push until you are happy with your contribution
-* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
-* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.
+* `DateTime` should inherit stamp behavior from `Date`, but it hasn't been thoroughly tested. Patches welcome!
diff --git a/README.md b/README.md
index de7e58a..46c71f2 100644
--- a/README.md
+++ b/README.md
@@ -49 +49 @@ date.stamp("1st of Jan")            #=> "9th of Jun"
-hours, minutes, and seconds when it sees colon-separated values:
+hours, minutes, and seconds when it sees colon-separated values.
@@ -57,0 +58 @@ time.stamp("Jan 1 at 01:00 AM")     #=> "Jun  9 at 08:52 PM"
+time.stamp("23:59 UTC")             #=> "20:52 PST"
@@ -64 +65,2 @@ time.stamp("Jan 1 at 01:00 AM")     #=> "Jun  9 at 08:52 PM"
-* Include any extraneous text you'd like, e.g. "DOB:".
+* Standard time zone abbreviations are recognized; e.g. "UTC", "PST", "EST".
+* Include any extraneous text you'd like; e.g. "DOB:".
@@ -99 +100,0 @@ Time.now.to_s(:military)  #=> "15:35"
-* Time zone support hasn't been implemented. Patches welcome!
diff --git a/README.md b/README.md
index 919869b..de7e58a 100644
--- a/README.md
+++ b/README.md
@@ -6 +6 @@ strftime directives.
-[![Build Status](http://travis-ci.org/jeremyw/stamp.png)](http://travis-ci.org/jeremyw/stamp)
+[![Build Status](https://secure.travis-ci.org/jeremyw/stamp.png)](http://travis-ci.org/jeremyw/stamp)
diff --git a/README.md b/README.md
index 1536c0f..919869b 100644
--- a/README.md
+++ b/README.md
@@ -15,0 +16,7 @@ Your Ruby dates and times get a powerful new method: `stamp`.
+You might be concerned that "stamp" isn't descriptive enough for developers
+reading your code who aren't familiar with this gem. If that's the case, the
+following aliases are available:
+
+* `stamp_like`
+* `format_like`
+
@@ -72,9 +78,0 @@ future understand your intent.
-### Aliases
-
-You might be concerned that the method name "stamp" isn't descriptive enough
-for developers reading your code who aren't familiar with this gem. If that's
-the case, the following aliases are available:
-
-* `stamp_like`
-* `format_like`
-
diff --git a/README.md b/README.md
index 86a40d8..1536c0f 100644
--- a/README.md
+++ b/README.md
@@ -31,0 +32,7 @@ date.stamp("DOB: 12/31/2000")       #=> "DOB: 06/09/2011"
+It even formats ordinal days!
+
+```ruby
+date.stamp("November 5th")          #=> "June 9th"
+date.stamp("1st of Jan")            #=> "9th of Jun"
+```
+
@@ -88 +95 @@ To use your formats:
-Date.today.to_s(:short)  #=> "Sat Jul 16"
+Date.today.to_s(:short)   #=> "Sat Jul 16"
diff --git a/README.md b/README.md
index 034c93f..86a40d8 100644
--- a/README.md
+++ b/README.md
@@ -105 +105 @@ Date.today.stamp("Week #%U, 1999") #=> "Week #23, 2011"
-````
+```
diff --git a/README.md b/README.md
index 112695d..034c93f 100644
--- a/README.md
+++ b/README.md
@@ -88 +88 @@ To use your formats:
-Date.today.to_s_(:short)  #=> "Sat Jul 16"
+Date.today.to_s(:short)  #=> "Sat Jul 16"
diff --git a/README.md b/README.md
index 7516eed..112695d 100644
--- a/README.md
+++ b/README.md
@@ -23,7 +23,7 @@ date = Date.new(2011, 6, 9)
-date.stamp("March 1, 1999")         # "June  9, 2011"
-date.stamp("Jan 1, 1999")           # "Jun  9, 2011"
-date.stamp("Jan 01")                # "Jun 09"
-date.stamp("Sunday, May 1, 2000")   # "Thursday, June  9, 2011"
-date.stamp("Sun Aug 5")             # "Thu Jun  9"
-date.stamp("12/31/99")              # "06/09/11"
-date.stamp("DOB: 12/31/2000")       # "DOB: 06/09/2011"
+date.stamp("March 1, 1999")         #=> "June  9, 2011"
+date.stamp("Jan 1, 1999")           #=> "Jun  9, 2011"
+date.stamp("Jan 01")                #=> "Jun 09"
+date.stamp("Sunday, May 1, 2000")   #=> "Thursday, June  9, 2011"
+date.stamp("Sun Aug 5")             #=> "Thu Jun  9"
+date.stamp("12/31/99")              #=> "06/09/11"
+date.stamp("DOB: 12/31/2000")       #=> "DOB: 06/09/2011"
@@ -39,5 +39,5 @@ time = Time.utc(2011, 6, 9, 20, 52, 30)
-time.stamp("3:00 AM")               # " 8:52 PM"
-time.stamp("01:00:00 AM")           # "08:52:30 PM"
-time.stamp("23:59")                 # "20:52"
-time.stamp("23:59:59")              # "20:52:30"
-time.stamp("Jan 1 at 01:00 AM")     # "Jun  9 at 08:52 PM"
+time.stamp("3:00 AM")               #=> " 8:52 PM"
+time.stamp("01:00:00 AM")           #=> "08:52:30 PM"
+time.stamp("23:59")                 #=> "20:52"
+time.stamp("23:59:59")              #=> "20:52:30"
+time.stamp("Jan 1 at 01:00 AM")     #=> "Jun  9 at 08:52 PM"
@@ -73,0 +74,18 @@ the case, the following aliases are available:
+### Rails Integration
+
+Stamp makes it easy to configure your application's common date and time
+formats in a more self-documenting way with the `strftime_format` method:
+
+```ruby
+# config/initializers/time_formats.rb
+Date::DATE_FORMATS[:short]    = Stamp.strftime_format("Mon Jan 1")
+Time::DATE_FORMATS[:military] = Stamp.strftime_format("23:59")
+```
+
+To use your formats:
+
+```ruby
+Date.today.to_s_(:short)  #=> "Sat Jul 16"
+Time.now.to_s(:military)  #=> "15:35"
+```
+
@@ -86 +104 @@ just be passed along:
-Date.today.stamp("Week #%U, 1999")         # "Week #23, 2011"
+Date.today.stamp("Week #%U, 1999") #=> "Week #23, 2011"
diff --git a/README.md b/README.md
index d49ca3f..7516eed 100644
--- a/README.md
+++ b/README.md
@@ -64,0 +65,9 @@ future understand your intent.
+### Aliases
+
+You might be concerned that the method name "stamp" isn't descriptive enough
+for developers reading your code who aren't familiar with this gem. If that's
+the case, the following aliases are available:
+
+* `stamp_like`
+* `format_like`
+
diff --git a/README.md b/README.md
index 9510c35..d49ca3f 100644
--- a/README.md
+++ b/README.md
@@ -80 +80 @@ Date.today.stamp("Week #%U, 1999")         # "Week #23, 2011"
-[Check out http://strfti.me](http://strfti.me) for more ideas.
+Check out [http://strfti.me](http://strfti.me) for more ideas.
diff --git a/README.md b/README.md
index e485f7c..9510c35 100644
--- a/README.md
+++ b/README.md
@@ -68 +68,3 @@ future understand your intent.
-* DateTime support hasn't been implemented. Patches welcome!
+* DateTime should inherit stamp behavior from Date, but it hasn't been thoroughly tested. Patches welcome!
+
+### Advanced Usage
diff --git a/README.md b/README.md
index 9bdfc2f..e485f7c 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-Format dates (and times, soon) based on human-friendly examples, not arcane
+Format dates and times based on human-friendly examples, not arcane
diff --git a/README.md b/README.md
index c2d5980..9bdfc2f 100644
--- a/README.md
+++ b/README.md
@@ -3 +3,2 @@
-Format dates (and times, soon) based on examples, not arcane strftime directives.
+Format dates (and times, soon) based on human-friendly examples, not arcane
+strftime directives.
@@ -13,3 +14,6 @@ Just `gem install stamp`, or add stamp to your Gemfile and `bundle install`.
-Date objects get a powerful new method: #stamp. Provide an example date string
-with whatever month, day, year, and weekday parts you'd like, and your date
-will be formatted accordingly:
+Your Ruby dates and times get a powerful new method: `stamp`.
+
+### Dates
+
+Give `Date#stamp` an example date string with whatever month, day, year,
+and weekday parts you'd like, and your date will be formatted accordingly:
@@ -28 +32,15 @@ date.stamp("DOB: 12/31/2000")       # "DOB: 06/09/2011"
-### Features
+### Times
+
+`Time#stamp` supports the same kinds of examples as `Date`, but also formats
+hours, minutes, and seconds when it sees colon-separated values:
+
+```ruby
+time = Time.utc(2011, 6, 9, 20, 52, 30)
+time.stamp("3:00 AM")               # " 8:52 PM"
+time.stamp("01:00:00 AM")           # "08:52:30 PM"
+time.stamp("23:59")                 # "20:52"
+time.stamp("23:59:59")              # "20:52:30"
+time.stamp("Jan 1 at 01:00 AM")     # "Jun  9 at 08:52 PM"
+```
+
+## Features
@@ -49,3 +67,2 @@ future understand your intent.
-* Support for time formatting by example is coming soon. Patches welcome!
-
-Did I mention? Patches welcome!
+* Time zone support hasn't been implemented. Patches welcome!
+* DateTime support hasn't been implemented. Patches welcome!
@@ -58 +75 @@ just be passed along:
-date.stamp("Week #%U, %Y")         # "Week #23, 2011"
+Date.today.stamp("Week #%U, 1999")         # "Week #23, 2011"
@@ -63,2 +79,0 @@ date.stamp("Week #%U, %Y")         # "Week #23, 2011"
-More coming soon, including time formats by example.
-
diff --git a/README.md b/README.md
index 9e297dd..c2d5980 100644
--- a/README.md
+++ b/README.md
@@ -22,4 +22,4 @@ date.stamp("Jan 01")                # "Jun 09"
-date.stamp("Sunday, May 1, 2000")   # "Monday, June  9, 2011"
-date.stamp("Sun Aug 5")             # "Mon Jun  9"
-date.stamp("01/01/99")              # "06/09/11"
-date.stamp("DOB: 01/01/2000")       # "DOB: 06/09/2011"
+date.stamp("Sunday, May 1, 2000")   # "Thursday, June  9, 2011"
+date.stamp("Sun Aug 5")             # "Thu Jun  9"
+date.stamp("12/31/99")              # "06/09/11"
+date.stamp("DOB: 12/31/2000")       # "DOB: 06/09/2011"
@@ -32,2 +31,0 @@ date.stamp("DOB: 01/01/2000")       # "DOB: 06/09/2011"
-* You can use whatever month, weekday, day, or year value makes sense in your
-  examples.
@@ -35,0 +34,13 @@ date.stamp("DOB: 01/01/2000")       # "DOB: 06/09/2011"
+### Disambiguation by value
+
+You can use any month, weekday, day, or year value that makes sense in your
+examples, and stamp can often infer your intent based on context, but there
+may be times that you need to use unambiguous values to make your intent more
+explicit.
+
+For example, "01/09" could refer to January 9, September 1, or
+January 2009. More explicit examples include "12/31", "31/12", and "12/99".
+
+Using unambiguous values will also help people who read the code in the
+future understand your intent.
+
@@ -38,4 +48,0 @@ date.stamp("DOB: 01/01/2000")       # "DOB: 06/09/2011"
-* "01/09/99" is assumed to be January 9, not September 1. Patches to make this
-  configurable are welcome. Even better, make it smart enough to disambiguate
-  given an example like 31/01/99, where 31 is obviously not a month.
-* "01-Jan-1999" doesn't work yet (see @wip cucumber scenario). Patches welcome!
@@ -62,0 +70,2 @@ More coming soon, including time formats by example.
+* Run `bundle install`
+* Run `rake` to execute the cucumber specs and make sure they all pass
diff --git a/README.md b/README.md
index a3437b3..9e297dd 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-Format dates and times based on examples, not arcane strftime directives.
+Format dates (and times, soon) based on examples, not arcane strftime directives.
@@ -12,0 +13,4 @@ Just `gem install stamp`, or add stamp to your Gemfile and `bundle install`.
+Date objects get a powerful new method: #stamp. Provide an example date string
+with whatever month, day, year, and weekday parts you'd like, and your date
+will be formatted accordingly:
+
@@ -15,3 +19,7 @@ date = Date.new(2011, 6, 9)
-date.stamp("January 1, 1999")       # June 6, 2011
-date.stamp("Jan 09, 1999")          # Jun 06, 2011
-date.stamp("Jan 1")                 # Jun 6
+date.stamp("March 1, 1999")         # "June  9, 2011"
+date.stamp("Jan 1, 1999")           # "Jun  9, 2011"
+date.stamp("Jan 01")                # "Jun 09"
+date.stamp("Sunday, May 1, 2000")   # "Monday, June  9, 2011"
+date.stamp("Sun Aug 5")             # "Mon Jun  9"
+date.stamp("01/01/99")              # "06/09/11"
+date.stamp("DOB: 01/01/2000")       # "DOB: 06/09/2011"
@@ -19,0 +28,28 @@ date.stamp("Jan 1")                 # Jun 6
+### Features
+
+* Abbreviated and full names of months and weekdays are recognized.
+* Days with or without a leading zero work instinctively.
+* You can use whatever month, weekday, day, or year value makes sense in your
+  examples.
+* Include any extraneous text you'd like, e.g. "DOB:".
+
+### Limitations
+
+* "01/09/99" is assumed to be January 9, not September 1. Patches to make this
+  configurable are welcome. Even better, make it smart enough to disambiguate
+  given an example like 31/01/99, where 31 is obviously not a month.
+* "01-Jan-1999" doesn't work yet (see @wip cucumber scenario). Patches welcome!
+* Support for time formatting by example is coming soon. Patches welcome!
+
+Did I mention? Patches welcome!
+
+If you need more obscure formatting options, you can include any valid
+[strftime](http://strfti.me) directives in your example string, and they'll
+just be passed along:
+
+```ruby
+date.stamp("Week #%U, %Y")         # "Week #23, 2011"
+````
+
+[Check out http://strfti.me](http://strfti.me) for more ideas.
+
